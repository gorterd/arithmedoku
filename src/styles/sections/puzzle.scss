// TO-DO: don't hardcode size of grid
.gm-puzzle {
  display: grid;
  grid-template: repeat(9, 1fr) / repeat(9, 1fr);
  width: $sm-pz-size;
  height: $sm-pz-size;
  border-right: 4px solid black;
  border-bottom: 4px solid black;
  &:focus { outline: none; }
  position: relative;
  z-index: 1;
  background: white;
}

.gm-square {
  position: relative;
  height: 100%;
  width: 100%;
  border-top: 1px solid grey;
  border-left: 1px solid grey;
  
  &.focused {
    background-color: $robin-light;
  }

  &.group {
    background-color: $rose-light;
  }

  &.conflicting {
    animation: fade-in-out 600ms 1;
  }

  &::before {
    position: absolute;
    bottom: -2px;
    top: -2px;
    right: -2px;
    left: -2px;
    display: block;
    content: '';
  }
  
  input {
    position: relative;
    z-index: 1;
    height: 100%;
    width: 100%;
    padding-top: 12px;
    text-align: center;
    caret-color: transparent;    
    @include large($sm-pz-size, 9);
      cursor: pointer;

    &:focus {
      outline: none;
    }

    &.mistake {
      animation: shake 600ms ease-in-out 50ms 1;
    }

  }
}

.left-bound::before{
  border-left: 4px solid black;
}

.top-bound::before{
  border-top: 4px solid black;
}

.cage-label {
  position: absolute;
  font-weight: bold;
  left: 5%;
  top: 7%;
  @include small($sm-pz-size, 9);
}

.sq-options {
  position: absolute;
  right: 5%;
  left: 5%;
  top: 40%;
  bottom: 10%;
  display: flex;
  flex-flow: row-reverse wrap-reverse;
  justify-content: center;
  align-items: flex-start;
  color: $ocean;
  opacity: 0.5;
  @include small($sm-pz-size, 9);
  line-height: 1em;

  >span {
    flex-basis: 18%;
    text-align: center;
  }

  &.limited,
  &.flag {
    top: 7%;
    bottom: 0;
    left: 70%;
    flex-direction: column-reverse;
    justify-content: flex-end;
    flex-basis: 1%;
  }
}


// desktop

@media only screen 
and (max-width: $breakpoint-1) {
  .gm-puzzle {

  }
}

@media only screen 
and (min-width: $breakpoint-1) 
and (max-width: $breakpoint-2) {
  .gm-puzzle {
    height: $md-pz-size;
    width: $md-pz-size;
    grid-area: 1 / 2 / 3 / 3;
  }

  .cage-label {
    @include small($md-pz-size, 9)
  }

  .gm-square input {
    @include large($md-pz-size, 9)
  }

  .sq-options {
    @include small($md-pz-size, 9);
  }
}

@media only screen and (min-width: $breakpoint-2){
  .gm-puzzle {
    height: $lg-pz-size;
    width: $lg-pz-size;
  }

  .cage-label {
    @include small($lg-pz-size, 9)
  }

  .gm-square input {
    @include large($lg-pz-size, 9)
  }

  .sq-options {
    @include small($lg-pz-size, 9);
  }
}

