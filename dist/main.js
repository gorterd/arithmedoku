/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/mobx-devtools-mst/lib/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/mobx-devtools-mst/lib/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
  if (true) module.exports = factory(__webpack_require__(/*! mobx */ "./node_modules/mobx/dist/mobx.esm.js"), __webpack_require__(/*! mobx-state-tree */ "./node_modules/mobx-state-tree/dist/mobx-state-tree.module.js"));else {}
})(typeof self !== 'undefined' ? self : this, function (__WEBPACK_EXTERNAL_MODULE_69__, __WEBPACK_EXTERNAL_MODULE_70__) {
  return (
    /******/
    function (modules) {
      // webpackBootstrap

      /******/
      // The module cache

      /******/
      var installedModules = {};
      /******/

      /******/
      // The require function

      /******/

      function __webpack_require__(moduleId) {
        /******/

        /******/
        // Check if module is in cache

        /******/
        if (installedModules[moduleId]) {
          /******/
          return installedModules[moduleId].exports;
          /******/
        }
        /******/
        // Create a new module (and put it into the cache)

        /******/


        var module = installedModules[moduleId] = {
          /******/
          i: moduleId,

          /******/
          l: false,

          /******/
          exports: {}
          /******/

        };
        /******/

        /******/
        // Execute the module function

        /******/

        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/

        /******/
        // Flag the module as loaded

        /******/

        module.l = true;
        /******/

        /******/
        // Return the exports of the module

        /******/

        return module.exports;
        /******/
      }
      /******/

      /******/

      /******/
      // expose the modules object (__webpack_modules__)

      /******/


      __webpack_require__.m = modules;
      /******/

      /******/
      // expose the module cache

      /******/

      __webpack_require__.c = installedModules;
      /******/

      /******/
      // define getter function for harmony exports

      /******/

      __webpack_require__.d = function (exports, name, getter) {
        /******/
        if (!__webpack_require__.o(exports, name)) {
          /******/
          Object.defineProperty(exports, name, {
            /******/
            configurable: false,

            /******/
            enumerable: true,

            /******/
            get: getter
            /******/

          });
          /******/
        }
        /******/

      };
      /******/

      /******/
      // getDefaultExport function for compatibility with non-harmony modules

      /******/


      __webpack_require__.n = function (module) {
        /******/
        var getter = module && module.__esModule ?
        /******/
        function getDefault() {
          return module['default'];
        } :
        /******/
        function getModuleExports() {
          return module;
        };
        /******/

        __webpack_require__.d(getter, 'a', getter);
        /******/


        return getter;
        /******/
      };
      /******/

      /******/
      // Object.prototype.hasOwnProperty.call

      /******/


      __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      /******/

      /******/
      // __webpack_public_path__

      /******/


      __webpack_require__.p = "";
      /******/

      /******/
      // Load entry module and return exports

      /******/

      return __webpack_require__(__webpack_require__.s = 37);
      /******/
    }(
    /************************************************************************/

    /******/
    [
    /* 0 */

    /***/
    function (module, exports) {
      // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
      var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self // eslint-disable-next-line no-new-func
      : Function('return this')();
      if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

      /***/
    },
    /* 1 */

    /***/
    function (module, exports) {
      var hasOwnProperty = {}.hasOwnProperty;

      module.exports = function (it, key) {
        return hasOwnProperty.call(it, key);
      };
      /***/

    },
    /* 2 */

    /***/
    function (module, exports, __webpack_require__) {
      var dP = __webpack_require__(3);

      var createDesc = __webpack_require__(12);

      module.exports = __webpack_require__(4) ? function (object, key, value) {
        return dP.f(object, key, createDesc(1, value));
      } : function (object, key, value) {
        object[key] = value;
        return object;
      };
      /***/
    },
    /* 3 */

    /***/
    function (module, exports, __webpack_require__) {
      var anObject = __webpack_require__(10);

      var IE8_DOM_DEFINE = __webpack_require__(28);

      var toPrimitive = __webpack_require__(16);

      var dP = Object.defineProperty;
      exports.f = __webpack_require__(4) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPrimitive(P, true);
        anObject(Attributes);
        if (IE8_DOM_DEFINE) try {
          return dP(O, P, Attributes);
        } catch (e) {
          /* empty */
        }
        if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
        if ('value' in Attributes) O[P] = Attributes.value;
        return O;
      };
      /***/
    },
    /* 4 */

    /***/
    function (module, exports, __webpack_require__) {
      // Thank's IE8 for his funny defineProperty
      module.exports = !__webpack_require__(11)(function () {
        return Object.defineProperty({}, 'a', {
          get: function () {
            return 7;
          }
        }).a != 7;
      });
      /***/
    },
    /* 5 */

    /***/
    function (module, exports, __webpack_require__) {
      // to indexed object, toObject with fallback for non-array-like ES3 strings
      var IObject = __webpack_require__(48);

      var defined = __webpack_require__(15);

      module.exports = function (it) {
        return IObject(defined(it));
      };
      /***/

    },
    /* 6 */

    /***/
    function (module, exports, __webpack_require__) {
      var store = __webpack_require__(20)('wks');

      var uid = __webpack_require__(13);

      var Symbol = __webpack_require__(0).Symbol;

      var USE_SYMBOL = typeof Symbol == 'function';

      var $exports = module.exports = function (name) {
        return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
      };

      $exports.store = store;
      /***/
    },
    /* 7 */

    /***/
    function (module, exports) {
      module.exports = function (it) {
        return typeof it === 'object' ? it !== null : typeof it === 'function';
      };
      /***/

    },
    /* 8 */

    /***/
    function (module, exports) {
      module.exports = true;
      /***/
    },
    /* 9 */

    /***/
    function (module, exports) {
      var core = module.exports = {
        version: '2.6.11'
      };
      if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

      /***/
    },
    /* 10 */

    /***/
    function (module, exports, __webpack_require__) {
      var isObject = __webpack_require__(7);

      module.exports = function (it) {
        if (!isObject(it)) throw TypeError(it + ' is not an object!');
        return it;
      };
      /***/

    },
    /* 11 */

    /***/
    function (module, exports) {
      module.exports = function (exec) {
        try {
          return !!exec();
        } catch (e) {
          return true;
        }
      };
      /***/

    },
    /* 12 */

    /***/
    function (module, exports) {
      module.exports = function (bitmap, value) {
        return {
          enumerable: !(bitmap & 1),
          configurable: !(bitmap & 2),
          writable: !(bitmap & 4),
          value: value
        };
      };
      /***/

    },
    /* 13 */

    /***/
    function (module, exports) {
      var id = 0;
      var px = Math.random();

      module.exports = function (key) {
        return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
      };
      /***/

    },
    /* 14 */

    /***/
    function (module, exports) {
      // 7.1.4 ToInteger
      var ceil = Math.ceil;
      var floor = Math.floor;

      module.exports = function (it) {
        return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
      };
      /***/

    },
    /* 15 */

    /***/
    function (module, exports) {
      // 7.2.1 RequireObjectCoercible(argument)
      module.exports = function (it) {
        if (it == undefined) throw TypeError("Can't call method on  " + it);
        return it;
      };
      /***/

    },
    /* 16 */

    /***/
    function (module, exports, __webpack_require__) {
      // 7.1.1 ToPrimitive(input [, PreferredType])
      var isObject = __webpack_require__(7); // instead of the ES6 spec version, we didn't implement @@toPrimitive case
      // and the second argument - flag - preferred type is a string


      module.exports = function (it, S) {
        if (!isObject(it)) return it;
        var fn, val;
        if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
        if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
        if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
        throw TypeError("Can't convert object to primitive value");
      };
      /***/

    },
    /* 17 */

    /***/
    function (module, exports) {
      module.exports = {};
      /***/
    },
    /* 18 */

    /***/
    function (module, exports, __webpack_require__) {
      // 19.1.2.14 / 15.2.3.14 Object.keys(O)
      var $keys = __webpack_require__(32);

      var enumBugKeys = __webpack_require__(21);

      module.exports = Object.keys || function keys(O) {
        return $keys(O, enumBugKeys);
      };
      /***/

    },
    /* 19 */

    /***/
    function (module, exports, __webpack_require__) {
      var shared = __webpack_require__(20)('keys');

      var uid = __webpack_require__(13);

      module.exports = function (key) {
        return shared[key] || (shared[key] = uid(key));
      };
      /***/

    },
    /* 20 */

    /***/
    function (module, exports, __webpack_require__) {
      var core = __webpack_require__(9);

      var global = __webpack_require__(0);

      var SHARED = '__core-js_shared__';
      var store = global[SHARED] || (global[SHARED] = {});
      (module.exports = function (key, value) {
        return store[key] || (store[key] = value !== undefined ? value : {});
      })('versions', []).push({
        version: core.version,
        mode: __webpack_require__(8) ? 'pure' : 'global',
        copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
      });
      /***/
    },
    /* 21 */

    /***/
    function (module, exports) {
      // IE 8- don't enum bug keys
      module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');
      /***/
    },
    /* 22 */

    /***/
    function (module, exports, __webpack_require__) {
      var def = __webpack_require__(3).f;

      var has = __webpack_require__(1);

      var TAG = __webpack_require__(6)('toStringTag');

      module.exports = function (it, tag, stat) {
        if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
          configurable: true,
          value: tag
        });
      };
      /***/

    },
    /* 23 */

    /***/
    function (module, exports, __webpack_require__) {
      exports.f = __webpack_require__(6);
      /***/
    },
    /* 24 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(0);

      var core = __webpack_require__(9);

      var LIBRARY = __webpack_require__(8);

      var wksExt = __webpack_require__(23);

      var defineProperty = __webpack_require__(3).f;

      module.exports = function (name) {
        var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
        if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, {
          value: wksExt.f(name)
        });
      };
      /***/

    },
    /* 25 */

    /***/
    function (module, exports) {
      exports.f = {}.propertyIsEnumerable;
      /***/
    },
    /* 26 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var LIBRARY = __webpack_require__(8);

      var $export = __webpack_require__(27);

      var redefine = __webpack_require__(30);

      var hide = __webpack_require__(2);

      var Iterators = __webpack_require__(17);

      var $iterCreate = __webpack_require__(46);

      var setToStringTag = __webpack_require__(22);

      var getPrototypeOf = __webpack_require__(53);

      var ITERATOR = __webpack_require__(6)('iterator');

      var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`

      var FF_ITERATOR = '@@iterator';
      var KEYS = 'keys';
      var VALUES = 'values';

      var returnThis = function () {
        return this;
      };

      module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
        $iterCreate(Constructor, NAME, next);

        var getMethod = function (kind) {
          if (!BUGGY && kind in proto) return proto[kind];

          switch (kind) {
            case KEYS:
              return function keys() {
                return new Constructor(this, kind);
              };

            case VALUES:
              return function values() {
                return new Constructor(this, kind);
              };
          }

          return function entries() {
            return new Constructor(this, kind);
          };
        };

        var TAG = NAME + ' Iterator';
        var DEF_VALUES = DEFAULT == VALUES;
        var VALUES_BUG = false;
        var proto = Base.prototype;
        var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
        var $default = $native || getMethod(DEFAULT);
        var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
        var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
        var methods, key, IteratorPrototype; // Fix native

        if ($anyNative) {
          IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));

          if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
            // Set @@toStringTag to native iterators
            setToStringTag(IteratorPrototype, TAG, true); // fix for some old engines

            if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
          }
        } // fix Array#{values, @@iterator}.name in V8 / FF


        if (DEF_VALUES && $native && $native.name !== VALUES) {
          VALUES_BUG = true;

          $default = function values() {
            return $native.call(this);
          };
        } // Define iterator


        if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
          hide(proto, ITERATOR, $default);
        } // Plug for library


        Iterators[NAME] = $default;
        Iterators[TAG] = returnThis;

        if (DEFAULT) {
          methods = {
            values: DEF_VALUES ? $default : getMethod(VALUES),
            keys: IS_SET ? $default : getMethod(KEYS),
            entries: $entries
          };
          if (FORCED) for (key in methods) {
            if (!(key in proto)) redefine(proto, key, methods[key]);
          } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
        }

        return methods;
      };
      /***/

    },
    /* 27 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(0);

      var core = __webpack_require__(9);

      var ctx = __webpack_require__(44);

      var hide = __webpack_require__(2);

      var has = __webpack_require__(1);

      var PROTOTYPE = 'prototype';

      var $export = function (type, name, source) {
        var IS_FORCED = type & $export.F;
        var IS_GLOBAL = type & $export.G;
        var IS_STATIC = type & $export.S;
        var IS_PROTO = type & $export.P;
        var IS_BIND = type & $export.B;
        var IS_WRAP = type & $export.W;
        var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
        var expProto = exports[PROTOTYPE];
        var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
        var key, own, out;
        if (IS_GLOBAL) source = name;

        for (key in source) {
          // contains in native
          own = !IS_FORCED && target && target[key] !== undefined;
          if (own && has(exports, key)) continue; // export native or passed

          out = own ? target[key] : source[key]; // prevent global pollution for namespaces

          exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key] // bind timers to global for call from export context
          : IS_BIND && own ? ctx(out, global) // wrap global constructors for prevent change them in library
          : IS_WRAP && target[key] == out ? function (C) {
            var F = function (a, b, c) {
              if (this instanceof C) {
                switch (arguments.length) {
                  case 0:
                    return new C();

                  case 1:
                    return new C(a);

                  case 2:
                    return new C(a, b);
                }

                return new C(a, b, c);
              }

              return C.apply(this, arguments);
            };

            F[PROTOTYPE] = C[PROTOTYPE];
            return F; // make static versions for prototype methods
          }(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out; // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%

          if (IS_PROTO) {
            (exports.virtual || (exports.virtual = {}))[key] = out; // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%

            if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
          }
        }
      }; // type bitmap


      $export.F = 1; // forced

      $export.G = 2; // global

      $export.S = 4; // static

      $export.P = 8; // proto

      $export.B = 16; // bind

      $export.W = 32; // wrap

      $export.U = 64; // safe

      $export.R = 128; // real proto method for `library`

      module.exports = $export;
      /***/
    },
    /* 28 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = !__webpack_require__(4) && !__webpack_require__(11)(function () {
        return Object.defineProperty(__webpack_require__(29)('div'), 'a', {
          get: function () {
            return 7;
          }
        }).a != 7;
      });
      /***/
    },
    /* 29 */

    /***/
    function (module, exports, __webpack_require__) {
      var isObject = __webpack_require__(7);

      var document = __webpack_require__(0).document; // typeof document.createElement is 'object' in old IE


      var is = isObject(document) && isObject(document.createElement);

      module.exports = function (it) {
        return is ? document.createElement(it) : {};
      };
      /***/

    },
    /* 30 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__(2);
      /***/
    },
    /* 31 */

    /***/
    function (module, exports, __webpack_require__) {
      // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
      var anObject = __webpack_require__(10);

      var dPs = __webpack_require__(47);

      var enumBugKeys = __webpack_require__(21);

      var IE_PROTO = __webpack_require__(19)('IE_PROTO');

      var Empty = function () {
        /* empty */
      };

      var PROTOTYPE = 'prototype'; // Create object with fake `null` prototype: use iframe Object with cleared prototype

      var createDict = function () {
        // Thrash, waste and sodomy: IE GC bug
        var iframe = __webpack_require__(29)('iframe');

        var i = enumBugKeys.length;
        var lt = '<';
        var gt = '>';
        var iframeDocument;
        iframe.style.display = 'none';

        __webpack_require__(52).appendChild(iframe);

        iframe.src = 'javascript:'; // eslint-disable-line no-script-url
        // createDict = iframe.contentWindow.Object;
        // html.removeChild(iframe);

        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
        iframeDocument.close();
        createDict = iframeDocument.F;

        while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];

        return createDict();
      };

      module.exports = Object.create || function create(O, Properties) {
        var result;

        if (O !== null) {
          Empty[PROTOTYPE] = anObject(O);
          result = new Empty();
          Empty[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill

          result[IE_PROTO] = O;
        } else result = createDict();

        return Properties === undefined ? result : dPs(result, Properties);
      };
      /***/

    },
    /* 32 */

    /***/
    function (module, exports, __webpack_require__) {
      var has = __webpack_require__(1);

      var toIObject = __webpack_require__(5);

      var arrayIndexOf = __webpack_require__(49)(false);

      var IE_PROTO = __webpack_require__(19)('IE_PROTO');

      module.exports = function (object, names) {
        var O = toIObject(object);
        var i = 0;
        var result = [];
        var key;

        for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key); // Don't enum bug & hidden keys


        while (names.length > i) if (has(O, key = names[i++])) {
          ~arrayIndexOf(result, key) || result.push(key);
        }

        return result;
      };
      /***/

    },
    /* 33 */

    /***/
    function (module, exports) {
      var toString = {}.toString;

      module.exports = function (it) {
        return toString.call(it).slice(8, -1);
      };
      /***/

    },
    /* 34 */

    /***/
    function (module, exports, __webpack_require__) {
      // 7.1.13 ToObject(argument)
      var defined = __webpack_require__(15);

      module.exports = function (it) {
        return Object(defined(it));
      };
      /***/

    },
    /* 35 */

    /***/
    function (module, exports) {
      exports.f = Object.getOwnPropertySymbols;
      /***/
    },
    /* 36 */

    /***/
    function (module, exports, __webpack_require__) {
      // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
      var $keys = __webpack_require__(32);

      var hiddenKeys = __webpack_require__(21).concat('length', 'prototype');

      exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
        return $keys(O, hiddenKeys);
      };
      /***/

    },
    /* 37 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (global) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _typeof2 = __webpack_require__(39);

        var _typeof3 = _interopRequireDefault(_typeof2);

        exports.default = makeInspectable;

        var _mobx = __webpack_require__(69);

        var mobx = _interopRequireWildcard(_mobx);

        var _mobxStateTree = __webpack_require__(70);

        var libmst = _interopRequireWildcard(_mobxStateTree);

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        } // eslint-disable-line


        var track = function track(root) {
          var hook = global.__MOBX_DEVTOOLS_GLOBAL_HOOK__; // eslint-disable-line no-underscore-dangle

          if (hook && hook.inject) hook.inject({
            mobx: mobx,
            mst: libmst
          });
          if (!hook) return;

          var _loop = function _loop(mobxid) {
            if (Object.prototype.hasOwnProperty.call(hook.collections, mobxid)) {
              var mst = hook.collections[mobxid].mst;

              if (mst && mst.isStateTreeNode(root) && mst.isRoot(root)) {
                hook.emit('mst-root', {
                  root: root,
                  mobxid: mobxid
                });
                var disposer = hook.sub('get-mst-roots', function () {
                  return hook.emit('mst-root', {
                    root: root,
                    mobxid: mobxid
                  });
                });
                mst.addDisposer(root, disposer);
                return {
                  v: void 0
                };
              }
            }
          };

          for (var mobxid in hook.collections) {
            var _ret = _loop(mobxid);

            if ((typeof _ret === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret)) === "object") return _ret.v;
          }
        }; // eslint-disable-line


        function makeInspectable(root) {
          track(root);
          return root;
        }
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(38));
      /***/
    },
    /* 38 */

    /***/
    function (module, exports) {
      var g; // This works in non-strict mode

      g = function () {
        return this;
      }();

      try {
        // This works if eval is allowed (see CSP)
        g = g || Function("return this")() || (1, eval)("this");
      } catch (e) {
        // This works if the window reference is available
        if (typeof window === "object") g = window;
      } // g can still be undefined, but nothing to do about it...
      // We return undefined, instead of nothing here, so it's
      // easier to handle this case. if(!global) { ...}


      module.exports = g;
      /***/
    },
    /* 39 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      exports.__esModule = true;

      var _iterator = __webpack_require__(40);

      var _iterator2 = _interopRequireDefault(_iterator);

      var _symbol = __webpack_require__(58);

      var _symbol2 = _interopRequireDefault(_symbol);

      var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj;
      };

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }

      exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
        return typeof obj === "undefined" ? "undefined" : _typeof(obj);
      } : function (obj) {
        return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
      };
      /***/
    },
    /* 40 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = {
        "default": __webpack_require__(41),
        __esModule: true
      };
      /***/
    },
    /* 41 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(42);

      __webpack_require__(54);

      module.exports = __webpack_require__(23).f('iterator');
      /***/
    },
    /* 42 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $at = __webpack_require__(43)(true); // 21.1.3.27 String.prototype[@@iterator]()


      __webpack_require__(26)(String, 'String', function (iterated) {
        this._t = String(iterated); // target

        this._i = 0; // next index
        // 21.1.5.2.1 %StringIteratorPrototype%.next()
      }, function () {
        var O = this._t;
        var index = this._i;
        var point;
        if (index >= O.length) return {
          value: undefined,
          done: true
        };
        point = $at(O, index);
        this._i += point.length;
        return {
          value: point,
          done: false
        };
      });
      /***/

    },
    /* 43 */

    /***/
    function (module, exports, __webpack_require__) {
      var toInteger = __webpack_require__(14);

      var defined = __webpack_require__(15); // true  -> String#at
      // false -> String#codePointAt


      module.exports = function (TO_STRING) {
        return function (that, pos) {
          var s = String(defined(that));
          var i = toInteger(pos);
          var l = s.length;
          var a, b;
          if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
          a = s.charCodeAt(i);
          return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
        };
      };
      /***/

    },
    /* 44 */

    /***/
    function (module, exports, __webpack_require__) {
      // optional / simple context binding
      var aFunction = __webpack_require__(45);

      module.exports = function (fn, that, length) {
        aFunction(fn);
        if (that === undefined) return fn;

        switch (length) {
          case 1:
            return function (a) {
              return fn.call(that, a);
            };

          case 2:
            return function (a, b) {
              return fn.call(that, a, b);
            };

          case 3:
            return function (a, b, c) {
              return fn.call(that, a, b, c);
            };
        }

        return function ()
        /* ...args */
        {
          return fn.apply(that, arguments);
        };
      };
      /***/

    },
    /* 45 */

    /***/
    function (module, exports) {
      module.exports = function (it) {
        if (typeof it != 'function') throw TypeError(it + ' is not a function!');
        return it;
      };
      /***/

    },
    /* 46 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var create = __webpack_require__(31);

      var descriptor = __webpack_require__(12);

      var setToStringTag = __webpack_require__(22);

      var IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

      __webpack_require__(2)(IteratorPrototype, __webpack_require__(6)('iterator'), function () {
        return this;
      });

      module.exports = function (Constructor, NAME, next) {
        Constructor.prototype = create(IteratorPrototype, {
          next: descriptor(1, next)
        });
        setToStringTag(Constructor, NAME + ' Iterator');
      };
      /***/

    },
    /* 47 */

    /***/
    function (module, exports, __webpack_require__) {
      var dP = __webpack_require__(3);

      var anObject = __webpack_require__(10);

      var getKeys = __webpack_require__(18);

      module.exports = __webpack_require__(4) ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject(O);
        var keys = getKeys(Properties);
        var length = keys.length;
        var i = 0;
        var P;

        while (length > i) dP.f(O, P = keys[i++], Properties[P]);

        return O;
      };
      /***/
    },
    /* 48 */

    /***/
    function (module, exports, __webpack_require__) {
      // fallback for non-array-like ES3 and non-enumerable old V8 strings
      var cof = __webpack_require__(33); // eslint-disable-next-line no-prototype-builtins


      module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
        return cof(it) == 'String' ? it.split('') : Object(it);
      };
      /***/
    },
    /* 49 */

    /***/
    function (module, exports, __webpack_require__) {
      // false -> Array#indexOf
      // true  -> Array#includes
      var toIObject = __webpack_require__(5);

      var toLength = __webpack_require__(50);

      var toAbsoluteIndex = __webpack_require__(51);

      module.exports = function (IS_INCLUDES) {
        return function ($this, el, fromIndex) {
          var O = toIObject($this);
          var length = toLength(O.length);
          var index = toAbsoluteIndex(fromIndex, length);
          var value; // Array#includes uses SameValueZero equality algorithm
          // eslint-disable-next-line no-self-compare

          if (IS_INCLUDES && el != el) while (length > index) {
            value = O[index++]; // eslint-disable-next-line no-self-compare

            if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
          } else for (; length > index; index++) if (IS_INCLUDES || index in O) {
            if (O[index] === el) return IS_INCLUDES || index || 0;
          }
          return !IS_INCLUDES && -1;
        };
      };
      /***/

    },
    /* 50 */

    /***/
    function (module, exports, __webpack_require__) {
      // 7.1.15 ToLength
      var toInteger = __webpack_require__(14);

      var min = Math.min;

      module.exports = function (it) {
        return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
      };
      /***/

    },
    /* 51 */

    /***/
    function (module, exports, __webpack_require__) {
      var toInteger = __webpack_require__(14);

      var max = Math.max;
      var min = Math.min;

      module.exports = function (index, length) {
        index = toInteger(index);
        return index < 0 ? max(index + length, 0) : min(index, length);
      };
      /***/

    },
    /* 52 */

    /***/
    function (module, exports, __webpack_require__) {
      var document = __webpack_require__(0).document;

      module.exports = document && document.documentElement;
      /***/
    },
    /* 53 */

    /***/
    function (module, exports, __webpack_require__) {
      // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
      var has = __webpack_require__(1);

      var toObject = __webpack_require__(34);

      var IE_PROTO = __webpack_require__(19)('IE_PROTO');

      var ObjectProto = Object.prototype;

      module.exports = Object.getPrototypeOf || function (O) {
        O = toObject(O);
        if (has(O, IE_PROTO)) return O[IE_PROTO];

        if (typeof O.constructor == 'function' && O instanceof O.constructor) {
          return O.constructor.prototype;
        }

        return O instanceof Object ? ObjectProto : null;
      };
      /***/

    },
    /* 54 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(55);

      var global = __webpack_require__(0);

      var hide = __webpack_require__(2);

      var Iterators = __webpack_require__(17);

      var TO_STRING_TAG = __webpack_require__(6)('toStringTag');

      var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' + 'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' + 'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' + 'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' + 'TextTrackList,TouchList').split(',');

      for (var i = 0; i < DOMIterables.length; i++) {
        var NAME = DOMIterables[i];
        var Collection = global[NAME];
        var proto = Collection && Collection.prototype;
        if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
        Iterators[NAME] = Iterators.Array;
      }
      /***/

    },
    /* 55 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var addToUnscopables = __webpack_require__(56);

      var step = __webpack_require__(57);

      var Iterators = __webpack_require__(17);

      var toIObject = __webpack_require__(5); // 22.1.3.4 Array.prototype.entries()
      // 22.1.3.13 Array.prototype.keys()
      // 22.1.3.29 Array.prototype.values()
      // 22.1.3.30 Array.prototype[@@iterator]()


      module.exports = __webpack_require__(26)(Array, 'Array', function (iterated, kind) {
        this._t = toIObject(iterated); // target

        this._i = 0; // next index

        this._k = kind; // kind
        // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
      }, function () {
        var O = this._t;
        var kind = this._k;
        var index = this._i++;

        if (!O || index >= O.length) {
          this._t = undefined;
          return step(1);
        }

        if (kind == 'keys') return step(0, index);
        if (kind == 'values') return step(0, O[index]);
        return step(0, [index, O[index]]);
      }, 'values'); // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

      Iterators.Arguments = Iterators.Array;
      addToUnscopables('keys');
      addToUnscopables('values');
      addToUnscopables('entries');
      /***/
    },
    /* 56 */

    /***/
    function (module, exports) {
      module.exports = function () {
        /* empty */
      };
      /***/

    },
    /* 57 */

    /***/
    function (module, exports) {
      module.exports = function (done, value) {
        return {
          value: value,
          done: !!done
        };
      };
      /***/

    },
    /* 58 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = {
        "default": __webpack_require__(59),
        __esModule: true
      };
      /***/
    },
    /* 59 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(60);

      __webpack_require__(66);

      __webpack_require__(67);

      __webpack_require__(68);

      module.exports = __webpack_require__(9).Symbol;
      /***/
    },
    /* 60 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // ECMAScript 6 symbols shim

      var global = __webpack_require__(0);

      var has = __webpack_require__(1);

      var DESCRIPTORS = __webpack_require__(4);

      var $export = __webpack_require__(27);

      var redefine = __webpack_require__(30);

      var META = __webpack_require__(61).KEY;

      var $fails = __webpack_require__(11);

      var shared = __webpack_require__(20);

      var setToStringTag = __webpack_require__(22);

      var uid = __webpack_require__(13);

      var wks = __webpack_require__(6);

      var wksExt = __webpack_require__(23);

      var wksDefine = __webpack_require__(24);

      var enumKeys = __webpack_require__(62);

      var isArray = __webpack_require__(63);

      var anObject = __webpack_require__(10);

      var isObject = __webpack_require__(7);

      var toObject = __webpack_require__(34);

      var toIObject = __webpack_require__(5);

      var toPrimitive = __webpack_require__(16);

      var createDesc = __webpack_require__(12);

      var _create = __webpack_require__(31);

      var gOPNExt = __webpack_require__(64);

      var $GOPD = __webpack_require__(65);

      var $GOPS = __webpack_require__(35);

      var $DP = __webpack_require__(3);

      var $keys = __webpack_require__(18);

      var gOPD = $GOPD.f;
      var dP = $DP.f;
      var gOPN = gOPNExt.f;
      var $Symbol = global.Symbol;
      var $JSON = global.JSON;

      var _stringify = $JSON && $JSON.stringify;

      var PROTOTYPE = 'prototype';
      var HIDDEN = wks('_hidden');
      var TO_PRIMITIVE = wks('toPrimitive');
      var isEnum = {}.propertyIsEnumerable;
      var SymbolRegistry = shared('symbol-registry');
      var AllSymbols = shared('symbols');
      var OPSymbols = shared('op-symbols');
      var ObjectProto = Object[PROTOTYPE];
      var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
      var QObject = global.QObject; // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173

      var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687

      var setSymbolDesc = DESCRIPTORS && $fails(function () {
        return _create(dP({}, 'a', {
          get: function () {
            return dP(this, 'a', {
              value: 7
            }).a;
          }
        })).a != 7;
      }) ? function (it, key, D) {
        var protoDesc = gOPD(ObjectProto, key);
        if (protoDesc) delete ObjectProto[key];
        dP(it, key, D);
        if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
      } : dP;

      var wrap = function (tag) {
        var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);

        sym._k = tag;
        return sym;
      };

      var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
        return typeof it == 'symbol';
      } : function (it) {
        return it instanceof $Symbol;
      };

      var $defineProperty = function defineProperty(it, key, D) {
        if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
        anObject(it);
        key = toPrimitive(key, true);
        anObject(D);

        if (has(AllSymbols, key)) {
          if (!D.enumerable) {
            if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
            it[HIDDEN][key] = true;
          } else {
            if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
            D = _create(D, {
              enumerable: createDesc(0, false)
            });
          }

          return setSymbolDesc(it, key, D);
        }

        return dP(it, key, D);
      };

      var $defineProperties = function defineProperties(it, P) {
        anObject(it);
        var keys = enumKeys(P = toIObject(P));
        var i = 0;
        var l = keys.length;
        var key;

        while (l > i) $defineProperty(it, key = keys[i++], P[key]);

        return it;
      };

      var $create = function create(it, P) {
        return P === undefined ? _create(it) : $defineProperties(_create(it), P);
      };

      var $propertyIsEnumerable = function propertyIsEnumerable(key) {
        var E = isEnum.call(this, key = toPrimitive(key, true));
        if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
        return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
      };

      var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
        it = toIObject(it);
        key = toPrimitive(key, true);
        if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
        var D = gOPD(it, key);
        if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
        return D;
      };

      var $getOwnPropertyNames = function getOwnPropertyNames(it) {
        var names = gOPN(toIObject(it));
        var result = [];
        var i = 0;
        var key;

        while (names.length > i) {
          if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
        }

        return result;
      };

      var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
        var IS_OP = it === ObjectProto;
        var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
        var result = [];
        var i = 0;
        var key;

        while (names.length > i) {
          if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
        }

        return result;
      }; // 19.4.1.1 Symbol([description])


      if (!USE_NATIVE) {
        $Symbol = function Symbol() {
          if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
          var tag = uid(arguments.length > 0 ? arguments[0] : undefined);

          var $set = function (value) {
            if (this === ObjectProto) $set.call(OPSymbols, value);
            if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
            setSymbolDesc(this, tag, createDesc(1, value));
          };

          if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, {
            configurable: true,
            set: $set
          });
          return wrap(tag);
        };

        redefine($Symbol[PROTOTYPE], 'toString', function toString() {
          return this._k;
        });
        $GOPD.f = $getOwnPropertyDescriptor;
        $DP.f = $defineProperty;
        __webpack_require__(36).f = gOPNExt.f = $getOwnPropertyNames;
        __webpack_require__(25).f = $propertyIsEnumerable;
        $GOPS.f = $getOwnPropertySymbols;

        if (DESCRIPTORS && !__webpack_require__(8)) {
          redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
        }

        wksExt.f = function (name) {
          return wrap(wks(name));
        };
      }

      $export($export.G + $export.W + $export.F * !USE_NATIVE, {
        Symbol: $Symbol
      });

      for (var es6Symbols = // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
      'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) wks(es6Symbols[j++]);

      for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

      $export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
        // 19.4.2.1 Symbol.for(key)
        'for': function (key) {
          return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
        },
        // 19.4.2.5 Symbol.keyFor(sym)
        keyFor: function keyFor(sym) {
          if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');

          for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
        },
        useSetter: function () {
          setter = true;
        },
        useSimple: function () {
          setter = false;
        }
      });
      $export($export.S + $export.F * !USE_NATIVE, 'Object', {
        // 19.1.2.2 Object.create(O [, Properties])
        create: $create,
        // 19.1.2.4 Object.defineProperty(O, P, Attributes)
        defineProperty: $defineProperty,
        // 19.1.2.3 Object.defineProperties(O, Properties)
        defineProperties: $defineProperties,
        // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
        getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
        // 19.1.2.7 Object.getOwnPropertyNames(O)
        getOwnPropertyNames: $getOwnPropertyNames,
        // 19.1.2.8 Object.getOwnPropertySymbols(O)
        getOwnPropertySymbols: $getOwnPropertySymbols
      }); // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
      // https://bugs.chromium.org/p/v8/issues/detail?id=3443

      var FAILS_ON_PRIMITIVES = $fails(function () {
        $GOPS.f(1);
      });
      $export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
        getOwnPropertySymbols: function getOwnPropertySymbols(it) {
          return $GOPS.f(toObject(it));
        }
      }); // 24.3.2 JSON.stringify(value [, replacer [, space]])

      $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
        var S = $Symbol(); // MS Edge converts symbol values to JSON as {}
        // WebKit converts symbol values to JSON as null
        // V8 throws on boxed symbols

        return _stringify([S]) != '[null]' || _stringify({
          a: S
        }) != '{}' || _stringify(Object(S)) != '{}';
      })), 'JSON', {
        stringify: function stringify(it) {
          var args = [it];
          var i = 1;
          var replacer, $replacer;

          while (arguments.length > i) args.push(arguments[i++]);

          $replacer = replacer = args[1];
          if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined

          if (!isArray(replacer)) replacer = function (key, value) {
            if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
            if (!isSymbol(value)) return value;
          };
          args[1] = replacer;
          return _stringify.apply($JSON, args);
        }
      }); // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)

      $Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(2)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf); // 19.4.3.5 Symbol.prototype[@@toStringTag]

      setToStringTag($Symbol, 'Symbol'); // 20.2.1.9 Math[@@toStringTag]

      setToStringTag(Math, 'Math', true); // 24.3.3 JSON[@@toStringTag]

      setToStringTag(global.JSON, 'JSON', true);
      /***/
    },
    /* 61 */

    /***/
    function (module, exports, __webpack_require__) {
      var META = __webpack_require__(13)('meta');

      var isObject = __webpack_require__(7);

      var has = __webpack_require__(1);

      var setDesc = __webpack_require__(3).f;

      var id = 0;

      var isExtensible = Object.isExtensible || function () {
        return true;
      };

      var FREEZE = !__webpack_require__(11)(function () {
        return isExtensible(Object.preventExtensions({}));
      });

      var setMeta = function (it) {
        setDesc(it, META, {
          value: {
            i: 'O' + ++id,
            // object ID
            w: {} // weak collections IDs

          }
        });
      };

      var fastKey = function (it, create) {
        // return primitive with prefix
        if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

        if (!has(it, META)) {
          // can't set metadata to uncaught frozen object
          if (!isExtensible(it)) return 'F'; // not necessary to add metadata

          if (!create) return 'E'; // add missing metadata

          setMeta(it); // return object ID
        }

        return it[META].i;
      };

      var getWeak = function (it, create) {
        if (!has(it, META)) {
          // can't set metadata to uncaught frozen object
          if (!isExtensible(it)) return true; // not necessary to add metadata

          if (!create) return false; // add missing metadata

          setMeta(it); // return hash weak collections IDs
        }

        return it[META].w;
      }; // add metadata on freeze-family methods calling


      var onFreeze = function (it) {
        if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
        return it;
      };

      var meta = module.exports = {
        KEY: META,
        NEED: false,
        fastKey: fastKey,
        getWeak: getWeak,
        onFreeze: onFreeze
      };
      /***/
    },
    /* 62 */

    /***/
    function (module, exports, __webpack_require__) {
      // all enumerable object keys, includes symbols
      var getKeys = __webpack_require__(18);

      var gOPS = __webpack_require__(35);

      var pIE = __webpack_require__(25);

      module.exports = function (it) {
        var result = getKeys(it);
        var getSymbols = gOPS.f;

        if (getSymbols) {
          var symbols = getSymbols(it);
          var isEnum = pIE.f;
          var i = 0;
          var key;

          while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
        }

        return result;
      };
      /***/

    },
    /* 63 */

    /***/
    function (module, exports, __webpack_require__) {
      // 7.2.2 IsArray(argument)
      var cof = __webpack_require__(33);

      module.exports = Array.isArray || function isArray(arg) {
        return cof(arg) == 'Array';
      };
      /***/

    },
    /* 64 */

    /***/
    function (module, exports, __webpack_require__) {
      // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
      var toIObject = __webpack_require__(5);

      var gOPN = __webpack_require__(36).f;

      var toString = {}.toString;
      var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

      var getWindowNames = function (it) {
        try {
          return gOPN(it);
        } catch (e) {
          return windowNames.slice();
        }
      };

      module.exports.f = function getOwnPropertyNames(it) {
        return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
      };
      /***/

    },
    /* 65 */

    /***/
    function (module, exports, __webpack_require__) {
      var pIE = __webpack_require__(25);

      var createDesc = __webpack_require__(12);

      var toIObject = __webpack_require__(5);

      var toPrimitive = __webpack_require__(16);

      var has = __webpack_require__(1);

      var IE8_DOM_DEFINE = __webpack_require__(28);

      var gOPD = Object.getOwnPropertyDescriptor;
      exports.f = __webpack_require__(4) ? gOPD : function getOwnPropertyDescriptor(O, P) {
        O = toIObject(O);
        P = toPrimitive(P, true);
        if (IE8_DOM_DEFINE) try {
          return gOPD(O, P);
        } catch (e) {
          /* empty */
        }
        if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
      };
      /***/
    },
    /* 66 */

    /***/
    function (module, exports) {
      /***/
    },
    /* 67 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(24)('asyncIterator');
      /***/

    },
    /* 68 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(24)('observable');
      /***/

    },
    /* 69 */

    /***/
    function (module, exports) {
      module.exports = __WEBPACK_EXTERNAL_MODULE_69__;
      /***/
    },
    /* 70 */

    /***/
    function (module, exports) {
      module.exports = __WEBPACK_EXTERNAL_MODULE_70__;
      /***/
    }
    /******/
    ])
  );
});

/***/ }),

/***/ "./node_modules/mobx-state-tree/dist/mobx-state-tree.module.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mobx-state-tree/dist/mobx-state-tree.module.js ***!
  \*********************************************************************/
/*! exports provided: addDisposer, addMiddleware, applyAction, applyPatch, applySnapshot, cast, castFlowReturn, castToReferenceSnapshot, castToSnapshot, clone, createActionTrackingMiddleware, createActionTrackingMiddleware2, decorate, destroy, detach, escapeJsonPath, flow, getChildType, getEnv, getIdentifier, getLivelinessChecking, getMembers, getNodeId, getParent, getParentOfType, getPath, getPathParts, getPropertyMembers, getRelativePath, getRoot, getRunningActionContext, getSnapshot, getType, hasParent, hasParentOfType, isActionContextChildOf, isActionContextThisOrChildOf, isAlive, isArrayType, isFrozenType, isIdentifierType, isLateType, isLiteralType, isMapType, isModelType, isOptionalType, isPrimitiveType, isProtected, isReferenceType, isRefinementType, isRoot, isStateTreeNode, isType, isUnionType, isValidReference, joinJsonPath, onAction, onPatch, onSnapshot, process, protect, recordActions, recordPatches, resolveIdentifier, resolvePath, setLivelinessChecking, setLivelynessChecking, splitJsonPath, toGenerator, toGeneratorFunction, tryReference, tryResolve, typecheck, types, unescapeJsonPath, unprotect, walk */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(process, setImmediate) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addDisposer", function() { return addDisposer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addMiddleware", function() { return addMiddleware; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyAction", function() { return applyAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyPatch", function() { return applyPatch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applySnapshot", function() { return applySnapshot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cast", function() { return cast; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "castFlowReturn", function() { return castFlowReturn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "castToReferenceSnapshot", function() { return castToReferenceSnapshot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "castToSnapshot", function() { return castToSnapshot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createActionTrackingMiddleware", function() { return createActionTrackingMiddleware; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createActionTrackingMiddleware2", function() { return createActionTrackingMiddleware2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decorate", function() { return decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "destroy", function() { return destroy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "detach", function() { return detach; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "escapeJsonPath", function() { return escapeJsonPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flow", function() { return flow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getChildType", function() { return getChildType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getEnv", function() { return getEnv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getIdentifier", function() { return getIdentifier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLivelinessChecking", function() { return getLivelinessChecking; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMembers", function() { return getMembers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNodeId", function() { return getNodeId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getParent", function() { return getParent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getParentOfType", function() { return getParentOfType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPath", function() { return getPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPathParts", function() { return getPathParts; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPropertyMembers", function() { return getPropertyMembers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRelativePath", function() { return getRelativePath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRoot", function() { return getRoot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRunningActionContext", function() { return getRunningActionContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSnapshot", function() { return getSnapshot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getType", function() { return getType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasParent", function() { return hasParent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasParentOfType", function() { return hasParentOfType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isActionContextChildOf", function() { return isActionContextChildOf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isActionContextThisOrChildOf", function() { return isActionContextThisOrChildOf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isAlive", function() { return isAlive; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isArrayType", function() { return isArrayType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFrozenType", function() { return isFrozenType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isIdentifierType", function() { return isIdentifierType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isLateType", function() { return isLateType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isLiteralType", function() { return isLiteralType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isMapType", function() { return isMapType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isModelType", function() { return isModelType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isOptionalType", function() { return isOptionalType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPrimitiveType", function() { return isPrimitiveType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isProtected", function() { return isProtected; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isReferenceType", function() { return isReferenceType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isRefinementType", function() { return isRefinementType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isRoot", function() { return isRoot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isStateTreeNode", function() { return isStateTreeNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isType", function() { return isType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isUnionType", function() { return isUnionType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isValidReference", function() { return isValidReference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "joinJsonPath", function() { return joinJsonPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onAction", function() { return onAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onPatch", function() { return onPatch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onSnapshot", function() { return onSnapshot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "process", function() { return process$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "protect", function() { return protect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "recordActions", function() { return recordActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "recordPatches", function() { return recordPatches; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resolveIdentifier", function() { return resolveIdentifier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resolvePath", function() { return resolvePath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setLivelinessChecking", function() { return setLivelinessChecking; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setLivelynessChecking", function() { return setLivelynessChecking; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "splitJsonPath", function() { return splitJsonPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toGenerator", function() { return toGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toGeneratorFunction", function() { return toGeneratorFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tryReference", function() { return tryReference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tryResolve", function() { return tryResolve; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "typecheck", function() { return typecheck; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "types", function() { return types; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unescapeJsonPath", function() { return unescapeJsonPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unprotect", function() { return unprotect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "walk", function() { return walk; });
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx */ "./node_modules/mobx/dist/mobx.esm.js");

var livelinessChecking = "warn";
/**
 * Defines what MST should do when running into reads / writes to objects that have died.
 * By default it will print a warning.
 * Use the `"error"` option to easy debugging to see where the error was thrown and when the offending read / write took place
 *
 * @param mode `"warn"`, `"error"` or `"ignore"`
 */

function setLivelinessChecking(mode) {
  livelinessChecking = mode;
}
/**
 * Returns the current liveliness checking mode.
 *
 * @returns `"warn"`, `"error"` or `"ignore"`
 */


function getLivelinessChecking() {
  return livelinessChecking;
}
/**
 * @deprecated use setLivelinessChecking instead
 * @hidden
 *
 * Defines what MST should do when running into reads / writes to objects that have died.
 * By default it will print a warning.
 * Use the `"error"` option to easy debugging to see where the error was thrown and when the offending read / write took place
 *
 * @param mode `"warn"`, `"error"` or `"ignore"`
 */


function setLivelynessChecking(mode) {
  setLivelinessChecking(mode);
}
/**
 * @hidden
 */


var Hook;

(function (Hook) {
  Hook["afterCreate"] = "afterCreate";
  Hook["afterAttach"] = "afterAttach";
  Hook["afterCreationFinalization"] = "afterCreationFinalization";
  Hook["beforeDetach"] = "beforeDetach";
  Hook["beforeDestroy"] = "beforeDestroy";
})(Hook || (Hook = {}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

/* global Reflect, Promise */


var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

function __rest(s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}

function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
      m = s && o[s],
      i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
}

function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

  return ar;
}
/**
 * Returns the _actual_ type of the given tree node. (Or throws)
 *
 * @param object
 * @returns
 */


function getType(object) {
  assertIsStateTreeNode(object, 1);
  return getStateTreeNode(object).type;
}
/**
 * Returns the _declared_ type of the given sub property of an object, array or map.
 * In the case of arrays and maps the property name is optional and will be ignored.
 *
 * Example:
 * ```ts
 * const Box = types.model({ x: 0, y: 0 })
 * const box = Box.create()
 *
 * console.log(getChildType(box, "x").name) // 'number'
 * ```
 *
 * @param object
 * @param propertyName
 * @returns
 */


function getChildType(object, propertyName) {
  assertIsStateTreeNode(object, 1);
  return getStateTreeNode(object).getChildType(propertyName);
}
/**
 * Registers a function that will be invoked for each mutation that is applied to the provided model instance, or to any of its children.
 * See [patches](https://github.com/mobxjs/mobx-state-tree#patches) for more details. onPatch events are emitted immediately and will not await the end of a transaction.
 * Patches can be used to deep observe a model tree.
 *
 * @param target the model instance from which to receive patches
 * @param callback the callback that is invoked for each patch. The reversePatch is a patch that would actually undo the emitted patch
 * @returns function to remove the listener
 */


function onPatch(target, callback) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  assertIsFunction(callback, 2);
  return getStateTreeNode(target).onPatch(callback);
}
/**
 * Registers a function that is invoked whenever a new snapshot for the given model instance is available.
 * The listener will only be fire at the end of the current MobX (trans)action.
 * See [snapshots](https://github.com/mobxjs/mobx-state-tree#snapshots) for more details.
 *
 * @param target
 * @param callback
 * @returns
 */


function onSnapshot(target, callback) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  assertIsFunction(callback, 2);
  return getStateTreeNode(target).onSnapshot(callback);
}
/**
 * Applies a JSON-patch to the given model instance or bails out if the patch couldn't be applied
 * See [patches](https://github.com/mobxjs/mobx-state-tree#patches) for more details.
 *
 * Can apply a single past, or an array of patches.
 *
 * @param target
 * @param patch
 * @returns
 */


function applyPatch(target, patch) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  assertArg(patch, function (p) {
    return typeof p === "object";
  }, "object or array", 2);
  getStateTreeNode(target).applyPatches(asArray(patch));
}
/**
 * Small abstraction around `onPatch` and `applyPatch`, attaches a patch listener to a tree and records all the patches.
 * Returns an recorder object with the following signature:
 *
 * Example:
 * ```ts
 * export interface IPatchRecorder {
 *      // the recorded patches
 *      patches: IJsonPatch[]
 *      // the inverse of the recorded patches
 *      inversePatches: IJsonPatch[]
 *      // true if currently recording
 *      recording: boolean
 *      // stop recording patches
 *      stop(): void
 *      // resume recording patches
 *      resume(): void
 *      // apply all the recorded patches on the given target (the original subject if omitted)
 *      replay(target?: IAnyStateTreeNode): void
 *      // reverse apply the recorded patches on the given target  (the original subject if omitted)
 *      // stops the recorder if not already stopped
 *      undo(): void
 * }
 * ```
 *
 * The optional filter function allows to skip recording certain patches.
 *
 * @param subject
 * @param filter
 * @returns
 */


function recordPatches(subject, filter) {
  // check all arguments
  assertIsStateTreeNode(subject, 1);
  var data = {
    patches: [],
    reversedInversePatches: []
  }; // we will generate the immutable copy of patches on demand for public consumption

  var publicData = {};
  var disposer;
  var recorder = {
    get recording() {
      return !!disposer;
    },

    get patches() {
      if (!publicData.patches) {
        publicData.patches = data.patches.slice();
      }

      return publicData.patches;
    },

    get reversedInversePatches() {
      if (!publicData.reversedInversePatches) {
        publicData.reversedInversePatches = data.reversedInversePatches.slice();
      }

      return publicData.reversedInversePatches;
    },

    get inversePatches() {
      if (!publicData.inversePatches) {
        publicData.inversePatches = data.reversedInversePatches.slice().reverse();
      }

      return publicData.inversePatches;
    },

    stop: function () {
      if (disposer) {
        disposer();
        disposer = undefined;
      }
    },
    resume: function () {
      if (disposer) return;
      disposer = onPatch(subject, function (patch, inversePatch) {
        // skip patches that are asked to be filtered if there's a filter in place
        if (filter && !filter(patch, inversePatch, getRunningActionContext())) {
          return;
        }

        data.patches.push(patch);
        data.reversedInversePatches.unshift(inversePatch); // mark immutable public patches as dirty

        publicData.patches = undefined;
        publicData.inversePatches = undefined;
        publicData.reversedInversePatches = undefined;
      });
    },
    replay: function (target) {
      applyPatch(target || subject, data.patches);
    },
    undo: function (target) {
      applyPatch(target || subject, data.reversedInversePatches);
    }
  };
  recorder.resume();
  return recorder;
}
/**
 * The inverse of `unprotect`.
 *
 * @param target
 */


function protect(target) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  var node = getStateTreeNode(target);
  if (!node.isRoot) throw fail$1("`protect` can only be invoked on root nodes");
  node.isProtectionEnabled = true;
}
/**
 * By default it is not allowed to directly modify a model. Models can only be modified through actions.
 * However, in some cases you don't care about the advantages (like replayability, traceability, etc) this yields.
 * For example because you are building a PoC or don't have any middleware attached to your tree.
 *
 * In that case you can disable this protection by calling `unprotect` on the root of your tree.
 *
 * Example:
 * ```ts
 * const Todo = types.model({
 *     done: false
 * }).actions(self => ({
 *     toggle() {
 *         self.done = !self.done
 *     }
 * }))
 *
 * const todo = Todo.create()
 * todo.done = true // throws!
 * todo.toggle() // OK
 * unprotect(todo)
 * todo.done = false // OK
 * ```
 */


function unprotect(target) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  var node = getStateTreeNode(target);
  if (!node.isRoot) throw fail$1("`unprotect` can only be invoked on root nodes");
  node.isProtectionEnabled = false;
}
/**
 * Returns true if the object is in protected mode, @see protect
 */


function isProtected(target) {
  return getStateTreeNode(target).isProtected;
}
/**
 * Applies a snapshot to a given model instances. Patch and snapshot listeners will be invoked as usual.
 *
 * @param target
 * @param snapshot
 * @returns
 */


function applySnapshot(target, snapshot) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  return getStateTreeNode(target).applySnapshot(snapshot);
}
/**
 * Calculates a snapshot from the given model instance. The snapshot will always reflect the latest state but use
 * structural sharing where possible. Doesn't require MobX transactions to be completed.
 *
 * @param target
 * @param applyPostProcess If true (the default) then postProcessSnapshot gets applied.
 * @returns
 */


function getSnapshot(target, applyPostProcess) {
  if (applyPostProcess === void 0) {
    applyPostProcess = true;
  } // check all arguments


  assertIsStateTreeNode(target, 1);
  var node = getStateTreeNode(target);
  if (applyPostProcess) return node.snapshot;
  return freeze(node.type.getSnapshot(node, false));
}
/**
 * Given a model instance, returns `true` if the object has a parent, that is, is part of another object, map or array.
 *
 * @param target
 * @param depth How far should we look upward? 1 by default.
 * @returns
 */


function hasParent(target, depth) {
  if (depth === void 0) {
    depth = 1;
  } // check all arguments


  assertIsStateTreeNode(target, 1);
  assertIsNumber(depth, 2, 0);
  var parent = getStateTreeNode(target).parent;

  while (parent) {
    if (--depth === 0) return true;
    parent = parent.parent;
  }

  return false;
}
/**
 * Returns the immediate parent of this object, or throws.
 *
 * Note that the immediate parent can be either an object, map or array, and
 * doesn't necessarily refer to the parent model.
 *
 * Please note that in child nodes access to the root is only possible
 * once the `afterAttach` hook has fired.
 *
 * @param target
 * @param depth How far should we look upward? 1 by default.
 * @returns
 */


function getParent(target, depth) {
  if (depth === void 0) {
    depth = 1;
  } // check all arguments


  assertIsStateTreeNode(target, 1);
  assertIsNumber(depth, 2, 0);
  var d = depth;
  var parent = getStateTreeNode(target).parent;

  while (parent) {
    if (--d === 0) return parent.storedValue;
    parent = parent.parent;
  }

  throw fail$1("Failed to find the parent of " + getStateTreeNode(target) + " at depth " + depth);
}
/**
 * Given a model instance, returns `true` if the object has a parent of given type, that is, is part of another object, map or array
 *
 * @param target
 * @param type
 * @returns
 */


function hasParentOfType(target, type) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  assertIsType(type, 2);
  var parent = getStateTreeNode(target).parent;

  while (parent) {
    if (type.is(parent.storedValue)) return true;
    parent = parent.parent;
  }

  return false;
}
/**
 * Returns the target's parent of a given type, or throws.
 *
 * @param target
 * @param type
 * @returns
 */


function getParentOfType(target, type) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  assertIsType(type, 2);
  var parent = getStateTreeNode(target).parent;

  while (parent) {
    if (type.is(parent.storedValue)) return parent.storedValue;
    parent = parent.parent;
  }

  throw fail$1("Failed to find the parent of " + getStateTreeNode(target) + " of a given type");
}
/**
 * Given an object in a model tree, returns the root object of that tree.
 *
 * Please note that in child nodes access to the root is only possible
 * once the `afterAttach` hook has fired.
 *
 * @param target
 * @returns
 */


function getRoot(target) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  return getStateTreeNode(target).root.storedValue;
}
/**
 * Returns the path of the given object in the model tree
 *
 * @param target
 * @returns
 */


function getPath(target) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  return getStateTreeNode(target).path;
}
/**
 * Returns the path of the given object as unescaped string array.
 *
 * @param target
 * @returns
 */


function getPathParts(target) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  return splitJsonPath(getStateTreeNode(target).path);
}
/**
 * Returns true if the given object is the root of a model tree.
 *
 * @param target
 * @returns
 */


function isRoot(target) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  return getStateTreeNode(target).isRoot;
}
/**
 * Resolves a path relatively to a given object.
 * Returns undefined if no value can be found.
 *
 * @param target
 * @param path escaped json path
 * @returns
 */


function resolvePath(target, path) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  assertIsString(path, 2);
  var node = resolveNodeByPath(getStateTreeNode(target), path);
  return node ? node.value : undefined;
}
/**
 * Resolves a model instance given a root target, the type and the identifier you are searching for.
 * Returns undefined if no value can be found.
 *
 * @param type
 * @param target
 * @param identifier
 * @returns
 */


function resolveIdentifier(type, target, identifier) {
  // check all arguments
  assertIsType(type, 1);
  assertIsStateTreeNode(target, 2);
  assertIsValidIdentifier(identifier, 3);
  var node = getStateTreeNode(target).root.identifierCache.resolve(type, normalizeIdentifier(identifier));
  return node ? node.value : undefined;
}
/**
 * Returns the identifier of the target node.
 * This is the *string normalized* identifier, which might not match the type of the identifier attribute
 *
 * @param target
 * @returns
 */


function getIdentifier(target) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  return getStateTreeNode(target).identifier;
}
/**
 * Tests if a reference is valid (pointing to an existing node and optionally if alive) and returns such reference if it the check passes,
 * else it returns undefined.
 *
 * @param getter Function to access the reference.
 * @param checkIfAlive true to also make sure the referenced node is alive (default), false to skip this check.
 * @returns
 */


function tryReference(getter, checkIfAlive) {
  if (checkIfAlive === void 0) {
    checkIfAlive = true;
  }

  try {
    var node = getter();

    if (node === undefined || node === null) {
      return undefined;
    } else if (isStateTreeNode(node)) {
      if (!checkIfAlive) {
        return node;
      } else {
        return isAlive(node) ? node : undefined;
      }
    } else {
      throw fail$1("The reference to be checked is not one of node, null or undefined");
    }
  } catch (e) {
    if (e instanceof InvalidReferenceError) {
      return undefined;
    }

    throw e;
  }
}
/**
 * Tests if a reference is valid (pointing to an existing node and optionally if alive) and returns if the check passes or not.
 *
 * @param getter Function to access the reference.
 * @param checkIfAlive true to also make sure the referenced node is alive (default), false to skip this check.
 * @returns
 */


function isValidReference(getter, checkIfAlive) {
  if (checkIfAlive === void 0) {
    checkIfAlive = true;
  }

  try {
    var node = getter();

    if (node === undefined || node === null) {
      return false;
    } else if (isStateTreeNode(node)) {
      return checkIfAlive ? isAlive(node) : true;
    } else {
      throw fail$1("The reference to be checked is not one of node, null or undefined");
    }
  } catch (e) {
    if (e instanceof InvalidReferenceError) {
      return false;
    }

    throw e;
  }
}
/**
 * Try to resolve a given path relative to a given node.
 *
 * @param target
 * @param path
 * @returns
 */


function tryResolve(target, path) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  assertIsString(path, 2);
  var node = resolveNodeByPath(getStateTreeNode(target), path, false);
  if (node === undefined) return undefined;

  try {
    return node.value;
  } catch (e) {
    // For what ever reason not resolvable (e.g. totally not existing path, or value that cannot be fetched)
    // see test / issue: 'try resolve doesn't work #686'
    return undefined;
  }
}
/**
 * Given two state tree nodes that are part of the same tree,
 * returns the shortest jsonpath needed to navigate from the one to the other
 *
 * @param base
 * @param target
 * @returns
 */


function getRelativePath(base, target) {
  // check all arguments
  assertIsStateTreeNode(base, 1);
  assertIsStateTreeNode(target, 2);
  return getRelativePathBetweenNodes(getStateTreeNode(base), getStateTreeNode(target));
}
/**
 * Returns a deep copy of the given state tree node as new tree.
 * Short hand for `snapshot(x) = getType(x).create(getSnapshot(x))`
 *
 * _Tip: clone will create a literal copy, including the same identifiers. To modify identifiers etc during cloning, don't use clone but take a snapshot of the tree, modify it, and create new instance_
 *
 * @param source
 * @param keepEnvironment indicates whether the clone should inherit the same environment (`true`, the default), or not have an environment (`false`). If an object is passed in as second argument, that will act as the environment for the cloned tree.
 * @returns
 */


function clone(source, keepEnvironment) {
  if (keepEnvironment === void 0) {
    keepEnvironment = true;
  } // check all arguments


  assertIsStateTreeNode(source, 1);
  var node = getStateTreeNode(source);
  return node.type.create(node.snapshot, keepEnvironment === true ? node.root.environment : keepEnvironment === false ? undefined : keepEnvironment); // it's an object or something else
}
/**
 * Removes a model element from the state tree, and let it live on as a new state tree
 */


function detach(target) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  getStateTreeNode(target).detach();
  return target;
}
/**
 * Removes a model element from the state tree, and mark it as end-of-life; the element should not be used anymore
 */


function destroy(target) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  var node = getStateTreeNode(target);
  if (node.isRoot) node.die();else node.parent.removeChild(node.subpath);
}
/**
 * Returns true if the given state tree node is not killed yet.
 * This means that the node is still a part of a tree, and that `destroy`
 * has not been called. If a node is not alive anymore, the only thing one can do with it
 * is requesting it's last path and snapshot
 *
 * @param target
 * @returns
 */


function isAlive(target) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  return getStateTreeNode(target).observableIsAlive;
}
/**
 * Use this utility to register a function that should be called whenever the
 * targeted state tree node is destroyed. This is a useful alternative to managing
 * cleanup methods yourself using the `beforeDestroy` hook.
 *
 * This methods returns the same disposer that was passed as argument.
 *
 * Example:
 * ```ts
 * const Todo = types.model({
 *   title: types.string
 * }).actions(self => ({
 *   afterCreate() {
 *     const autoSaveDisposer = reaction(
 *       () => getSnapshot(self),
 *       snapshot => sendSnapshotToServerSomehow(snapshot)
 *     )
 *     // stop sending updates to server if this
 *     // instance is destroyed
 *     addDisposer(self, autoSaveDisposer)
 *   }
 * }))
 * ```
 *
 * @param target
 * @param disposer
 * @returns The same disposer that was passed as argument
 */


function addDisposer(target, disposer) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  assertIsFunction(disposer, 2);
  var node = getStateTreeNode(target);
  node.addDisposer(disposer);
  return disposer;
}
/**
 * Returns the environment of the current state tree. For more info on environments,
 * see [Dependency injection](https://github.com/mobxjs/mobx-state-tree#dependency-injection)
 *
 * Please note that in child nodes access to the root is only possible
 * once the `afterAttach` hook has fired
 *
 * Returns an empty environment if the tree wasn't initialized with an environment
 *
 * @param target
 * @returns
 */


function getEnv(target) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  var node = getStateTreeNode(target);
  var env = node.root.environment;
  if (!env) return EMPTY_OBJECT;
  return env;
}
/**
 * Performs a depth first walk through a tree.
 */


function walk(target, processor) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  assertIsFunction(processor, 2);
  var node = getStateTreeNode(target); // tslint:disable-next-line:no_unused-variable

  node.getChildren().forEach(function (child) {
    if (isStateTreeNode(child.storedValue)) walk(child.storedValue, processor);
  });
  processor(node.storedValue);
}
/**
 * Returns a reflection of the model type properties and name for either a model type or model node.
 *
 * @param typeOrNode
 * @returns
 */


function getPropertyMembers(typeOrNode) {
  var type;

  if (isStateTreeNode(typeOrNode)) {
    type = getType(typeOrNode);
  } else {
    type = typeOrNode;
  }

  assertArg(type, function (t) {
    return isModelType(t);
  }, "model type or model instance", 1);
  return {
    name: type.name,
    properties: __assign({}, type.properties)
  };
}
/**
 * Returns a reflection of the model node, including name, properties, views, volatile and actions.
 *
 * @param target
 * @returns
 */


function getMembers(target) {
  var type = getStateTreeNode(target).type;

  var reflected = __assign(__assign({}, getPropertyMembers(type)), {
    actions: [],
    volatile: [],
    views: []
  });

  var props = Object.getOwnPropertyNames(target);
  props.forEach(function (key) {
    if (key in reflected.properties) return;
    var descriptor = Object.getOwnPropertyDescriptor(target, key);

    if (descriptor.get) {
      if (Object(mobx__WEBPACK_IMPORTED_MODULE_0__["isComputedProp"])(target, key)) reflected.views.push(key);else reflected.volatile.push(key);
      return;
    }

    if (descriptor.value._isMSTAction === true) reflected.actions.push(key);else if (Object(mobx__WEBPACK_IMPORTED_MODULE_0__["isObservableProp"])(target, key)) reflected.volatile.push(key);else reflected.views.push(key);
  });
  return reflected;
}
/**
 * Casts a node snapshot or instance type to an instance type so it can be assigned to a type instance.
 * Note that this is just a cast for the type system, this is, it won't actually convert a snapshot to an instance,
 * but just fool typescript into thinking so.
 * Either way, casting when outside an assignation operation won't compile.
 *
 * Example:
 * ```ts
 * const ModelA = types.model({
 *   n: types.number
 * }).actions(self => ({
 *   setN(aNumber: number) {
 *     self.n = aNumber
 *   }
 * }))
 *
 * const ModelB = types.model({
 *   innerModel: ModelA
 * }).actions(self => ({
 *   someAction() {
 *     // this will allow the compiler to assign a snapshot to the property
 *     self.innerModel = cast({ a: 5 })
 *   }
 * }))
 * ```
 *
 * @param snapshotOrInstance Snapshot or instance
 * @returns The same object casted as an instance
 */


function cast(snapshotOrInstance) {
  return snapshotOrInstance;
}
/**
 * Casts a node instance type to an snapshot type so it can be assigned to a type snapshot (e.g. to be used inside a create call).
 * Note that this is just a cast for the type system, this is, it won't actually convert an instance to a snapshot,
 * but just fool typescript into thinking so.
 *
 * Example:
 * ```ts
 * const ModelA = types.model({
 *   n: types.number
 * }).actions(self => ({
 *   setN(aNumber: number) {
 *     self.n = aNumber
 *   }
 * }))
 *
 * const ModelB = types.model({
 *   innerModel: ModelA
 * })
 *
 * const a = ModelA.create({ n: 5 });
 * // this will allow the compiler to use a model as if it were a snapshot
 * const b = ModelB.create({ innerModel: castToSnapshot(a)})
 * ```
 *
 * @param snapshotOrInstance Snapshot or instance
 * @returns The same object casted as an input (creation) snapshot
 */


function castToSnapshot(snapshotOrInstance) {
  return snapshotOrInstance;
}
/**
 * Casts a node instance type to a reference snapshot type so it can be assigned to a refernence snapshot (e.g. to be used inside a create call).
 * Note that this is just a cast for the type system, this is, it won't actually convert an instance to a refererence snapshot,
 * but just fool typescript into thinking so.
 *
 * Example:
 * ```ts
 * const ModelA = types.model({
 *   id: types.identifier,
 *   n: types.number
 * }).actions(self => ({
 *   setN(aNumber: number) {
 *     self.n = aNumber
 *   }
 * }))
 *
 * const ModelB = types.model({
 *   refA: types.reference(ModelA)
 * })
 *
 * const a = ModelA.create({ id: 'someId', n: 5 });
 * // this will allow the compiler to use a model as if it were a reference snapshot
 * const b = ModelB.create({ refA: castToReferenceSnapshot(a)})
 * ```
 *
 * @param instance Instance
 * @returns The same object casted as an reference snapshot (string or number)
 */


function castToReferenceSnapshot(instance) {
  return instance;
}
/**
 * Returns the unique node id (not to be confused with the instance identifier) for a
 * given instance.
 * This id is a number that is unique for each instance.
 *
 * @export
 * @param target
 * @returns
 */


function getNodeId(target) {
  assertIsStateTreeNode(target, 1);
  return getStateTreeNode(target).nodeId;
}
/**
 * @internal
 * @hidden
 */


var BaseNode =
/** @class */
function () {
  function BaseNode(type, parent, subpath, environment) {
    Object.defineProperty(this, "type", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: type
    });
    Object.defineProperty(this, "environment", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: environment
    });
    Object.defineProperty(this, "_escapedSubpath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_subpath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_subpathUponDeath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_pathUponDeath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "storedValue", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    }); // usually the same type as the value, but not always (such as with references)

    Object.defineProperty(this, "aliveAtom", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_state", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: NodeLifeCycle.INITIALIZING
    });
    Object.defineProperty(this, "_hookSubscribers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_parent", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "pathAtom", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.environment = environment;
    this.baseSetParent(parent, subpath);
  }

  Object.defineProperty(BaseNode.prototype, "subpath", {
    get: function () {
      return this._subpath;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseNode.prototype, "subpathUponDeath", {
    get: function () {
      return this._subpathUponDeath;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseNode.prototype, "pathUponDeath", {
    get: function () {
      return this._pathUponDeath;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseNode.prototype, "value", {
    get: function () {
      return this.type.getValue(this);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseNode.prototype, "state", {
    get: function () {
      return this._state;
    },
    set: function (val) {
      var wasAlive = this.isAlive;
      this._state = val;
      var isAlive = this.isAlive;

      if (this.aliveAtom && wasAlive !== isAlive) {
        this.aliveAtom.reportChanged();
      }
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseNode.prototype, "fireInternalHook", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (name) {
      if (this._hookSubscribers) {
        this._hookSubscribers.emit(name, this, name);
      }
    }
  });
  Object.defineProperty(BaseNode.prototype, "registerHook", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (hook, hookHandler) {
      if (!this._hookSubscribers) {
        this._hookSubscribers = new EventHandlers();
      }

      return this._hookSubscribers.register(hook, hookHandler);
    }
  });
  Object.defineProperty(BaseNode.prototype, "parent", {
    get: function () {
      return this._parent;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseNode.prototype, "baseSetParent", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath) {
      this._parent = parent;
      this._subpath = subpath;
      this._escapedSubpath = undefined; // regenerate when needed

      if (this.pathAtom) {
        this.pathAtom.reportChanged();
      }
    }
  });
  Object.defineProperty(BaseNode.prototype, "path", {
    /*
     * Returns (escaped) path representation as string
     */
    get: function () {
      return this.getEscapedPath(true);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseNode.prototype, "getEscapedPath", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (reportObserved) {
      if (reportObserved) {
        if (!this.pathAtom) {
          this.pathAtom = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["createAtom"])("path");
        }

        this.pathAtom.reportObserved();
      }

      if (!this.parent) return ""; // regenerate escaped subpath if needed

      if (this._escapedSubpath === undefined) {
        this._escapedSubpath = !this._subpath ? "" : escapeJsonPath(this._subpath);
      }

      return this.parent.getEscapedPath(reportObserved) + "/" + this._escapedSubpath;
    }
  });
  Object.defineProperty(BaseNode.prototype, "isRoot", {
    get: function () {
      return this.parent === null;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseNode.prototype, "isAlive", {
    get: function () {
      return this.state !== NodeLifeCycle.DEAD;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseNode.prototype, "isDetaching", {
    get: function () {
      return this.state === NodeLifeCycle.DETACHING;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseNode.prototype, "observableIsAlive", {
    get: function () {
      if (!this.aliveAtom) {
        this.aliveAtom = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["createAtom"])("alive");
      }

      this.aliveAtom.reportObserved();
      return this.isAlive;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseNode.prototype, "baseFinalizeCreation", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (whenFinalized) {
      if (devMode()) {
        if (!this.isAlive) {
          // istanbul ignore next
          throw fail("assertion failed: cannot finalize the creation of a node that is already dead");
        }
      } // goal: afterCreate hooks runs depth-first. After attach runs parent first, so on afterAttach the parent has completed already


      if (this.state === NodeLifeCycle.CREATED) {
        if (this.parent) {
          if (this.parent.state !== NodeLifeCycle.FINALIZED) {
            // parent not ready yet, postpone
            return;
          }

          this.fireHook(Hook.afterAttach);
        }

        this.state = NodeLifeCycle.FINALIZED;

        if (whenFinalized) {
          whenFinalized();
        }
      }
    }
  });
  Object.defineProperty(BaseNode.prototype, "baseFinalizeDeath", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      if (this._hookSubscribers) {
        this._hookSubscribers.clearAll();
      }

      this._subpathUponDeath = this._subpath;
      this._pathUponDeath = this.getEscapedPath(false);
      this.baseSetParent(null, "");
      this.state = NodeLifeCycle.DEAD;
    }
  });
  Object.defineProperty(BaseNode.prototype, "baseAboutToDie", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      this.fireHook(Hook.beforeDestroy);
    }
  });
  return BaseNode;
}();
/**
 * @internal
 * @hidden
 */


var ScalarNode =
/** @class */
function (_super) {
  __extends(ScalarNode, _super);

  function ScalarNode(simpleType, parent, subpath, environment, initialSnapshot) {
    var _this = _super.call(this, simpleType, parent, subpath, environment) || this;

    try {
      _this.storedValue = simpleType.createNewInstance(initialSnapshot);
    } catch (e) {
      // short-cut to die the instance, to avoid the snapshot computed starting to throw...
      _this.state = NodeLifeCycle.DEAD;
      throw e;
    }

    _this.state = NodeLifeCycle.CREATED; // for scalar nodes there's no point in firing this event since it would fire on the constructor, before
    // anybody can actually register for/listen to it
    // this.fireHook(Hook.AfterCreate)

    _this.finalizeCreation();

    return _this;
  }

  Object.defineProperty(ScalarNode.prototype, "root", {
    get: function () {
      // future optimization: store root ref in the node and maintain it
      if (!this.parent) throw fail$1("This scalar node is not part of a tree");
      return this.parent.root;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ScalarNode.prototype, "setParent", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (newParent, subpath) {
      var parentChanged = this.parent !== newParent;
      var subpathChanged = this.subpath !== subpath;

      if (!parentChanged && !subpathChanged) {
        return;
      }

      if (devMode()) {
        if (!subpath) {
          // istanbul ignore next
          throw fail$1("assertion failed: subpath expected");
        }

        if (!newParent) {
          // istanbul ignore next
          throw fail$1("assertion failed: parent expected");
        }

        if (parentChanged) {
          // istanbul ignore next
          throw fail$1("assertion failed: scalar nodes cannot change their parent");
        }
      }

      this.environment = undefined; // use parent's

      this.baseSetParent(this.parent, subpath);
    }
  });
  Object.defineProperty(ScalarNode.prototype, "snapshot", {
    get: function () {
      return freeze(this.getSnapshot());
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ScalarNode.prototype, "getSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this.type.getSnapshot(this);
    }
  });
  Object.defineProperty(ScalarNode.prototype, "toString", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var path = (this.isAlive ? this.path : this.pathUponDeath) || "<root>";
      return this.type.name + "@" + path + (this.isAlive ? "" : " [dead]");
    }
  });
  Object.defineProperty(ScalarNode.prototype, "die", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      if (!this.isAlive || this.state === NodeLifeCycle.DETACHING) return;
      this.aboutToDie();
      this.finalizeDeath();
    }
  });
  Object.defineProperty(ScalarNode.prototype, "finalizeCreation", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      this.baseFinalizeCreation();
    }
  });
  Object.defineProperty(ScalarNode.prototype, "aboutToDie", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      this.baseAboutToDie();
    }
  });
  Object.defineProperty(ScalarNode.prototype, "finalizeDeath", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      this.baseFinalizeDeath();
    }
  });
  Object.defineProperty(ScalarNode.prototype, "fireHook", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (name) {
      this.fireInternalHook(name);
    }
  });
  return ScalarNode;
}(BaseNode);

ScalarNode.prototype.die = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["action"])(ScalarNode.prototype.die);
var nextNodeId = 1;
var snapshotReactionOptions = {
  onError: function (e) {
    throw e;
  }
};
/**
 * @internal
 * @hidden
 */

var ObjectNode =
/** @class */
function (_super) {
  __extends(ObjectNode, _super);

  function ObjectNode(complexType, parent, subpath, environment, initialValue) {
    var _this = _super.call(this, complexType, parent, subpath, environment) || this;

    Object.defineProperty(_this, "nodeId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: ++nextNodeId
    });
    Object.defineProperty(_this, "identifierAttribute", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "identifier", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    }); // Identifier is always normalized to string, even if the identifier property isn't

    Object.defineProperty(_this, "unnormalizedIdentifier", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "identifierCache", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "isProtectionEnabled", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    });
    Object.defineProperty(_this, "middlewares", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_applyPatches", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_applySnapshot", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_autoUnbox", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    }); // unboxing is disabled when reading child nodes

    Object.defineProperty(_this, "_isRunningAction", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    }); // only relevant for root

    Object.defineProperty(_this, "_hasSnapshotReaction", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_observableInstanceState", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
      /* UNINITIALIZED */

    });
    Object.defineProperty(_this, "_childNodes", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_initialSnapshot", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_cachedInitialSnapshot", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_cachedInitialSnapshotCreated", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_snapshotComputed", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_snapshotUponDeath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    }); // #region internal event handling

    Object.defineProperty(_this, "_internalEvents", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    _this._snapshotComputed = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["computed"])(function () {
      return freeze(_this.getSnapshot());
    });
    _this.unbox = _this.unbox.bind(_this);
    _this._initialSnapshot = freeze(initialValue);
    _this.identifierAttribute = complexType.identifierAttribute;

    if (!parent) {
      _this.identifierCache = new IdentifierCache();
    }

    _this._childNodes = complexType.initializeChildNodes(_this, _this._initialSnapshot); // identifier can not be changed during lifecycle of a node
    // so we safely can read it from initial snapshot

    _this.identifier = null;
    _this.unnormalizedIdentifier = null;

    if (_this.identifierAttribute && _this._initialSnapshot) {
      var id = _this._initialSnapshot[_this.identifierAttribute];

      if (id === undefined) {
        // try with the actual node if not (for optional identifiers)
        var childNode = _this._childNodes[_this.identifierAttribute];

        if (childNode) {
          id = childNode.value;
        }
      }

      if (typeof id !== "string" && typeof id !== "number") {
        throw fail$1("Instance identifier '" + _this.identifierAttribute + "' for type '" + _this.type.name + "' must be a string or a number");
      } // normalize internal identifier to string


      _this.identifier = normalizeIdentifier(id);
      _this.unnormalizedIdentifier = id;
    }

    if (!parent) {
      _this.identifierCache.addNodeToCache(_this);
    } else {
      parent.root.identifierCache.addNodeToCache(_this);
    }

    return _this;
  }

  Object.defineProperty(ObjectNode.prototype, "applyPatches", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (patches) {
      this.createObservableInstanceIfNeeded();

      this._applyPatches(patches);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "applySnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (snapshot) {
      this.createObservableInstanceIfNeeded();

      this._applySnapshot(snapshot);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "createObservableInstanceIfNeeded", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      if (this._observableInstanceState === 0
      /* UNINITIALIZED */
      ) {
          this.createObservableInstance();
        }
    }
  });
  Object.defineProperty(ObjectNode.prototype, "createObservableInstance", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var e_1, _a;

      if (devMode()) {
        if (this.state !== NodeLifeCycle.INITIALIZING) {
          // istanbul ignore next
          throw fail$1("assertion failed: the creation of the observable instance must be done on the initializing phase");
        }
      }

      this._observableInstanceState = 1
      /* CREATING */
      ; // make sure the parent chain is created as well
      // array with parent chain from parent to child

      var parentChain = [];
      var parent = this.parent; // for performance reasons we never go back further than the most direct
      // uninitialized parent
      // this is done to avoid traversing the whole tree to the root when using
      // the same reference again

      while (parent && parent._observableInstanceState === 0
      /* UNINITIALIZED */
      ) {
        parentChain.unshift(parent);
        parent = parent.parent;
      }

      try {
        // initialize the uninitialized parent chain from parent to child
        for (var parentChain_1 = __values(parentChain), parentChain_1_1 = parentChain_1.next(); !parentChain_1_1.done; parentChain_1_1 = parentChain_1.next()) {
          var p = parentChain_1_1.value;
          p.createObservableInstanceIfNeeded();
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (parentChain_1_1 && !parentChain_1_1.done && (_a = parentChain_1.return)) _a.call(parentChain_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }

      var type = this.type;

      try {
        this.storedValue = type.createNewInstance(this._childNodes);
        this.preboot();
        this._isRunningAction = true;
        type.finalizeNewInstance(this, this.storedValue);
      } catch (e) {
        // short-cut to die the instance, to avoid the snapshot computed starting to throw...
        this.state = NodeLifeCycle.DEAD;
        throw e;
      } finally {
        this._isRunningAction = false;
      }

      this._observableInstanceState = 2
      /* CREATED */
      ;

      this._snapshotComputed.trackAndCompute();

      if (this.isRoot) this._addSnapshotReaction();
      this._childNodes = EMPTY_OBJECT;
      this.state = NodeLifeCycle.CREATED;
      this.fireHook(Hook.afterCreate);
      this.finalizeCreation();
    }
  });
  Object.defineProperty(ObjectNode.prototype, "root", {
    get: function () {
      var parent = this.parent;
      return parent ? parent.root : this;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ObjectNode.prototype, "clearParent", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      if (!this.parent) return; // detach if attached

      this.fireHook(Hook.beforeDetach);
      var previousState = this.state;
      this.state = NodeLifeCycle.DETACHING;
      var root = this.root;
      var newEnv = root.environment;
      var newIdCache = root.identifierCache.splitCache(this);

      try {
        this.parent.removeChild(this.subpath);
        this.baseSetParent(null, "");
        this.environment = newEnv;
        this.identifierCache = newIdCache;
      } finally {
        this.state = previousState;
      }
    }
  });
  Object.defineProperty(ObjectNode.prototype, "setParent", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (newParent, subpath) {
      var parentChanged = newParent !== this.parent;
      var subpathChanged = subpath !== this.subpath;

      if (!parentChanged && !subpathChanged) {
        return;
      }

      if (devMode()) {
        if (!subpath) {
          // istanbul ignore next
          throw fail$1("assertion failed: subpath expected");
        }

        if (!newParent) {
          // istanbul ignore next
          throw fail$1("assertion failed: new parent expected");
        }

        if (this.parent && parentChanged) {
          throw fail$1("A node cannot exists twice in the state tree. Failed to add " + this + " to path '" + newParent.path + "/" + subpath + "'.");
        }

        if (!this.parent && newParent.root === this) {
          throw fail$1("A state tree is not allowed to contain itself. Cannot assign " + this + " to path '" + newParent.path + "/" + subpath + "'");
        }

        if (!this.parent && !!this.environment && this.environment !== newParent.root.environment) {
          throw fail$1("A state tree cannot be made part of another state tree as long as their environments are different.");
        }
      }

      if (parentChanged) {
        // attach to new parent
        this.environment = undefined; // will use root's

        newParent.root.identifierCache.mergeCache(this);
        this.baseSetParent(newParent, subpath);
        this.fireHook(Hook.afterAttach);
      } else if (subpathChanged) {
        // moving to a new subpath on the same parent
        this.baseSetParent(this.parent, subpath);
      }
    }
  });
  Object.defineProperty(ObjectNode.prototype, "fireHook", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (name) {
      var _this = this;

      this.fireInternalHook(name);
      var fn = this.storedValue && typeof this.storedValue === "object" && this.storedValue[name];

      if (typeof fn === "function") {
        // we check for it to allow old mobx peer dependencies that don't have the method to work (even when still bugged)
        if (mobx__WEBPACK_IMPORTED_MODULE_0__["_allowStateChangesInsideComputed"]) {
          Object(mobx__WEBPACK_IMPORTED_MODULE_0__["_allowStateChangesInsideComputed"])(function () {
            fn.apply(_this.storedValue);
          });
        } else {
          fn.apply(this.storedValue);
        }
      }
    }
  });
  Object.defineProperty(ObjectNode.prototype, "snapshot", {
    // advantage of using computed for a snapshot is that nicely respects transactions etc.
    get: function () {
      return this._snapshotComputed.get();
    },
    enumerable: false,
    configurable: true
  }); // NOTE: we use this method to get snapshot without creating @computed overhead

  Object.defineProperty(ObjectNode.prototype, "getSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      if (!this.isAlive) return this._snapshotUponDeath;
      return this._observableInstanceState === 2
      /* CREATED */
      ? this._getActualSnapshot() : this._getCachedInitialSnapshot();
    }
  });
  Object.defineProperty(ObjectNode.prototype, "_getActualSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this.type.getSnapshot(this);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "_getCachedInitialSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      if (!this._cachedInitialSnapshotCreated) {
        var type = this.type;
        var childNodes = this._childNodes;
        var snapshot = this._initialSnapshot;
        this._cachedInitialSnapshot = type.processInitialSnapshot(childNodes, snapshot);
        this._cachedInitialSnapshotCreated = true;
      }

      return this._cachedInitialSnapshot;
    }
  });
  Object.defineProperty(ObjectNode.prototype, "isRunningAction", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      if (this._isRunningAction) return true;
      if (this.isRoot) return false;
      return this.parent.isRunningAction();
    }
  });
  Object.defineProperty(ObjectNode.prototype, "assertAlive", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (context) {
      var livelinessChecking = getLivelinessChecking();

      if (!this.isAlive && livelinessChecking !== "ignore") {
        var error = this._getAssertAliveError(context);

        switch (livelinessChecking) {
          case "error":
            throw fail$1(error);

          case "warn":
            warnError(error);
        }
      }
    }
  });
  Object.defineProperty(ObjectNode.prototype, "_getAssertAliveError", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (context) {
      var escapedPath = this.getEscapedPath(false) || this.pathUponDeath || "";
      var subpath = context.subpath && escapeJsonPath(context.subpath) || "";
      var actionContext = context.actionContext || getCurrentActionContext(); // try to use a real action context if possible since it includes the action name

      if (actionContext && actionContext.type !== "action" && actionContext.parentActionEvent) {
        actionContext = actionContext.parentActionEvent;
      }

      var actionFullPath = "";

      if (actionContext && actionContext.name != null) {
        // try to use the context, and if it not available use the node one
        var actionPath = actionContext && actionContext.context && getPath(actionContext.context) || escapedPath;
        actionFullPath = actionPath + "." + actionContext.name + "()";
      }

      return "You are trying to read or write to an object that is no longer part of a state tree. (Object type: '" + this.type.name + "', Path upon death: '" + escapedPath + "', Subpath: '" + subpath + "', Action: '" + actionFullPath + "'). Either detach nodes first, or don't use objects after removing / replacing them in the tree.";
    }
  });
  Object.defineProperty(ObjectNode.prototype, "getChildNode", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (subpath) {
      this.assertAlive({
        subpath: subpath
      });
      this._autoUnbox = false;

      try {
        return this._observableInstanceState === 2
        /* CREATED */
        ? this.type.getChildNode(this, subpath) : this._childNodes[subpath];
      } finally {
        this._autoUnbox = true;
      }
    }
  });
  Object.defineProperty(ObjectNode.prototype, "getChildren", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      this.assertAlive(EMPTY_OBJECT);
      this._autoUnbox = false;

      try {
        return this._observableInstanceState === 2
        /* CREATED */
        ? this.type.getChildren(this) : convertChildNodesToArray(this._childNodes);
      } finally {
        this._autoUnbox = true;
      }
    }
  });
  Object.defineProperty(ObjectNode.prototype, "getChildType", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (propertyName) {
      return this.type.getChildType(propertyName);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "isProtected", {
    get: function () {
      return this.root.isProtectionEnabled;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ObjectNode.prototype, "assertWritable", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (context) {
      this.assertAlive(context);

      if (!this.isRunningAction() && this.isProtected) {
        throw fail$1("Cannot modify '" + this + "', the object is protected and can only be modified by using an action.");
      }
    }
  });
  Object.defineProperty(ObjectNode.prototype, "removeChild", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (subpath) {
      this.type.removeChild(this, subpath);
    }
  }); // bound on the constructor

  Object.defineProperty(ObjectNode.prototype, "unbox", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (childNode) {
      if (!childNode) return childNode;
      this.assertAlive({
        subpath: childNode.subpath || childNode.subpathUponDeath
      });
      return this._autoUnbox ? childNode.value : childNode;
    }
  });
  Object.defineProperty(ObjectNode.prototype, "toString", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var path = (this.isAlive ? this.path : this.pathUponDeath) || "<root>";
      var identifier = this.identifier ? "(id: " + this.identifier + ")" : "";
      return this.type.name + "@" + path + identifier + (this.isAlive ? "" : " [dead]");
    }
  });
  Object.defineProperty(ObjectNode.prototype, "finalizeCreation", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var _this = this;

      this.baseFinalizeCreation(function () {
        var e_2, _a;

        try {
          for (var _b = __values(_this.getChildren()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var child = _c.value;
            child.finalizeCreation();
          }
        } catch (e_2_1) {
          e_2 = {
            error: e_2_1
          };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
          } finally {
            if (e_2) throw e_2.error;
          }
        }

        _this.fireInternalHook(Hook.afterCreationFinalization);
      });
    }
  });
  Object.defineProperty(ObjectNode.prototype, "detach", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      if (!this.isAlive) throw fail$1("Error while detaching, node is not alive.");
      this.clearParent();
    }
  });
  Object.defineProperty(ObjectNode.prototype, "preboot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var self = this;
      this._applyPatches = createActionInvoker(this.storedValue, "@APPLY_PATCHES", function (patches) {
        patches.forEach(function (patch) {
          if (!patch.path) {
            self.type.applySnapshot(self, patch.value);
            return;
          }

          var parts = splitJsonPath(patch.path);
          var node = resolveNodeByPathParts(self, parts.slice(0, -1));
          node.applyPatchLocally(parts[parts.length - 1], patch);
        });
      });
      this._applySnapshot = createActionInvoker(this.storedValue, "@APPLY_SNAPSHOT", function (snapshot) {
        // if the snapshot is the same as the current one, avoid performing a reconcile
        if (snapshot === self.snapshot) return; // else, apply it by calling the type logic

        return self.type.applySnapshot(self, snapshot);
      });
      addHiddenFinalProp(this.storedValue, "$treenode", this);
      addHiddenFinalProp(this.storedValue, "toJSON", toJSON);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "die", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      if (!this.isAlive || this.state === NodeLifeCycle.DETACHING) return;
      this.aboutToDie();
      this.finalizeDeath();
    }
  });
  Object.defineProperty(ObjectNode.prototype, "aboutToDie", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      if (this._observableInstanceState === 0
      /* UNINITIALIZED */
      ) {
          return;
        }

      this.getChildren().forEach(function (node) {
        node.aboutToDie();
      }); // beforeDestroy should run before the disposers since else we could end up in a situation where
      // a disposer added with addDisposer at this stage (beforeDestroy) is actually never released

      this.baseAboutToDie();

      this._internalEventsEmit("dispose"
      /* Dispose */
      );

      this._internalEventsClear("dispose"
      /* Dispose */
      );
    }
  });
  Object.defineProperty(ObjectNode.prototype, "finalizeDeath", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      // invariant: not called directly but from "die"
      this.getChildren().forEach(function (node) {
        node.finalizeDeath();
      });
      this.root.identifierCache.notifyDied(this); // "kill" the computed prop and just store the last snapshot

      var snapshot = this.snapshot;
      this._snapshotUponDeath = snapshot;

      this._internalEventsClearAll();

      this.baseFinalizeDeath();
    }
  });
  Object.defineProperty(ObjectNode.prototype, "onSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (onChange) {
      this._addSnapshotReaction();

      return this._internalEventsRegister("snapshot"
      /* Snapshot */
      , onChange);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "emitSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (snapshot) {
      this._internalEventsEmit("snapshot"
      /* Snapshot */
      , snapshot);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "onPatch", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (handler) {
      return this._internalEventsRegister("patch"
      /* Patch */
      , handler);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "emitPatch", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (basePatch, source) {
      if (this._internalEventsHasSubscribers("patch"
      /* Patch */
      )) {
        var localizedPatch = extend({}, basePatch, {
          path: source.path.substr(this.path.length) + "/" + basePatch.path // calculate the relative path of the patch

        });

        var _a = __read(splitPatch(localizedPatch), 2),
            patch = _a[0],
            reversePatch = _a[1];

        this._internalEventsEmit("patch"
        /* Patch */
        , patch, reversePatch);
      }

      if (this.parent) this.parent.emitPatch(basePatch, source);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "hasDisposer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (disposer) {
      return this._internalEventsHas("dispose"
      /* Dispose */
      , disposer);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "addDisposer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (disposer) {
      if (!this.hasDisposer(disposer)) {
        this._internalEventsRegister("dispose"
        /* Dispose */
        , disposer, true);

        return;
      }

      throw fail$1("cannot add a disposer when it is already registered for execution");
    }
  });
  Object.defineProperty(ObjectNode.prototype, "removeDisposer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (disposer) {
      if (!this._internalEventsHas("dispose"
      /* Dispose */
      , disposer)) {
        throw fail$1("cannot remove a disposer which was never registered for execution");
      }

      this._internalEventsUnregister("dispose"
      /* Dispose */
      , disposer);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "removeMiddleware", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (middleware) {
      if (this.middlewares) {
        var index = this.middlewares.indexOf(middleware);

        if (index >= 0) {
          this.middlewares.splice(index, 1);
        }
      }
    }
  });
  Object.defineProperty(ObjectNode.prototype, "addMiddleWare", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (handler, includeHooks) {
      var _this = this;

      if (includeHooks === void 0) {
        includeHooks = true;
      }

      var middleware = {
        handler: handler,
        includeHooks: includeHooks
      };
      if (!this.middlewares) this.middlewares = [middleware];else this.middlewares.push(middleware);
      return function () {
        _this.removeMiddleware(middleware);
      };
    }
  });
  Object.defineProperty(ObjectNode.prototype, "applyPatchLocally", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (subpath, patch) {
      this.assertWritable({
        subpath: subpath
      });
      this.createObservableInstanceIfNeeded();
      this.type.applyPatchLocally(this, subpath, patch);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "_addSnapshotReaction", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var _this = this;

      if (!this._hasSnapshotReaction) {
        var snapshotDisposer = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["reaction"])(function () {
          return _this.snapshot;
        }, function (snapshot) {
          return _this.emitSnapshot(snapshot);
        }, snapshotReactionOptions);
        this.addDisposer(snapshotDisposer);
        this._hasSnapshotReaction = true;
      }
    }
  }); // we proxy the methods to avoid creating an EventHandlers instance when it is not needed

  Object.defineProperty(ObjectNode.prototype, "_internalEventsHasSubscribers", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (event) {
      return !!this._internalEvents && this._internalEvents.hasSubscribers(event);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "_internalEventsRegister", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (event, eventHandler, atTheBeginning) {
      if (atTheBeginning === void 0) {
        atTheBeginning = false;
      }

      if (!this._internalEvents) {
        this._internalEvents = new EventHandlers();
      }

      return this._internalEvents.register(event, eventHandler, atTheBeginning);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "_internalEventsHas", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (event, eventHandler) {
      return !!this._internalEvents && this._internalEvents.has(event, eventHandler);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "_internalEventsUnregister", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (event, eventHandler) {
      if (this._internalEvents) {
        this._internalEvents.unregister(event, eventHandler);
      }
    }
  });
  Object.defineProperty(ObjectNode.prototype, "_internalEventsEmit", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (event) {
      var _a;

      var args = [];

      for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
      }

      if (this._internalEvents) {
        (_a = this._internalEvents).emit.apply(_a, __spread([event], args));
      }
    }
  });
  Object.defineProperty(ObjectNode.prototype, "_internalEventsClear", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (event) {
      if (this._internalEvents) {
        this._internalEvents.clear(event);
      }
    }
  });
  Object.defineProperty(ObjectNode.prototype, "_internalEventsClearAll", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      if (this._internalEvents) {
        this._internalEvents.clearAll();
      }
    }
  });
  return ObjectNode;
}(BaseNode);

ObjectNode.prototype.createObservableInstance = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["action"])(ObjectNode.prototype.createObservableInstance);
ObjectNode.prototype.detach = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["action"])(ObjectNode.prototype.detach);
ObjectNode.prototype.die = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["action"])(ObjectNode.prototype.die);

var _a;
/**
 * @internal
 * @hidden
 */


var TypeFlags;

(function (TypeFlags) {
  TypeFlags[TypeFlags["String"] = 1] = "String";
  TypeFlags[TypeFlags["Number"] = 2] = "Number";
  TypeFlags[TypeFlags["Boolean"] = 4] = "Boolean";
  TypeFlags[TypeFlags["Date"] = 8] = "Date";
  TypeFlags[TypeFlags["Literal"] = 16] = "Literal";
  TypeFlags[TypeFlags["Array"] = 32] = "Array";
  TypeFlags[TypeFlags["Map"] = 64] = "Map";
  TypeFlags[TypeFlags["Object"] = 128] = "Object";
  TypeFlags[TypeFlags["Frozen"] = 256] = "Frozen";
  TypeFlags[TypeFlags["Optional"] = 512] = "Optional";
  TypeFlags[TypeFlags["Reference"] = 1024] = "Reference";
  TypeFlags[TypeFlags["Identifier"] = 2048] = "Identifier";
  TypeFlags[TypeFlags["Late"] = 4096] = "Late";
  TypeFlags[TypeFlags["Refinement"] = 8192] = "Refinement";
  TypeFlags[TypeFlags["Union"] = 16384] = "Union";
  TypeFlags[TypeFlags["Null"] = 32768] = "Null";
  TypeFlags[TypeFlags["Undefined"] = 65536] = "Undefined";
  TypeFlags[TypeFlags["Integer"] = 131072] = "Integer";
  TypeFlags[TypeFlags["Custom"] = 262144] = "Custom";
  TypeFlags[TypeFlags["SnapshotProcessor"] = 524288] = "SnapshotProcessor";
})(TypeFlags || (TypeFlags = {}));
/**
 * @internal
 * @hidden
 */


var cannotDetermineSubtype = "cannotDetermine";
/** @hidden */

var $type = Symbol("$type");
/**
 * A base type produces a MST node (Node in the state tree)
 *
 * @internal
 * @hidden
 */

var BaseType =
/** @class */
function () {
  function BaseType(name) {
    Object.defineProperty(this, _a, {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    }); // these are just to make inner types avaialable to inherited classes

    Object.defineProperty(this, "C", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "S", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "T", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "N", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "isType", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.name = name;
  }

  Object.defineProperty(BaseType.prototype, "create", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (snapshot, environment) {
      typecheckInternal(this, snapshot);
      return this.instantiate(null, "", environment, snapshot).value;
    }
  });
  Object.defineProperty(BaseType.prototype, "getSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, applyPostProcess) {
      // istanbul ignore next
      throw fail$1("unimplemented method");
    }
  });
  Object.defineProperty(BaseType.prototype, "isAssignableFrom", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (type) {
      return type === this;
    }
  });
  Object.defineProperty(BaseType.prototype, "validate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      var node = getStateTreeNodeSafe(value);

      if (node) {
        var valueType = getType(value);
        return this.isAssignableFrom(valueType) ? typeCheckSuccess() : typeCheckFailure(context, value); // it is tempting to compare snapshots, but in that case we should always clone on assignments...
      }

      return this.isValidSnapshot(value, context);
    }
  });
  Object.defineProperty(BaseType.prototype, "is", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (thing) {
      return this.validate(thing, [{
        path: "",
        type: this
      }]).length === 0;
    }
  });
  Object.defineProperty(BaseType.prototype, "Type", {
    get: function () {
      // istanbul ignore next
      throw fail$1("Factory.Type should not be actually called. It is just a Type signature that can be used at compile time with Typescript, by using `typeof type.Type`");
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseType.prototype, "TypeWithoutSTN", {
    get: function () {
      // istanbul ignore next
      throw fail$1("Factory.TypeWithoutSTN should not be actually called. It is just a Type signature that can be used at compile time with Typescript, by using `typeof type.TypeWithoutSTN`");
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseType.prototype, "SnapshotType", {
    get: function () {
      // istanbul ignore next
      throw fail$1("Factory.SnapshotType should not be actually called. It is just a Type signature that can be used at compile time with Typescript, by using `typeof type.SnapshotType`");
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseType.prototype, "CreationType", {
    get: function () {
      // istanbul ignore next
      throw fail$1("Factory.CreationType should not be actually called. It is just a Type signature that can be used at compile time with Typescript, by using `typeof type.CreationType`");
    },
    enumerable: false,
    configurable: true
  });
  return BaseType;
}();

_a = $type;
BaseType.prototype.create = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["action"])(BaseType.prototype.create);
/**
 * A complex type produces a MST node (Node in the state tree)
 *
 * @internal
 * @hidden
 */

var ComplexType =
/** @class */
function (_super) {
  __extends(ComplexType, _super);

  function ComplexType(name) {
    var _this = _super.call(this, name) || this;

    Object.defineProperty(_this, "identifierAttribute", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    return _this;
  }

  Object.defineProperty(ComplexType.prototype, "create", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (snapshot, environment) {
      if (snapshot === void 0) {
        snapshot = this.getDefaultSnapshot();
      }

      return _super.prototype.create.call(this, snapshot, environment);
    }
  });
  Object.defineProperty(ComplexType.prototype, "getValue", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      node.createObservableInstanceIfNeeded();
      return node.storedValue;
    }
  });
  Object.defineProperty(ComplexType.prototype, "tryToReconcileNode", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (current, newValue) {
      if (current.isDetaching) return false;

      if (current.snapshot === newValue) {
        // newValue is the current snapshot of the node, noop
        return true;
      }

      if (isStateTreeNode(newValue) && getStateTreeNode(newValue) === current) {
        // the current node is the same as the new one
        return true;
      }

      if (current.type === this && isMutable(newValue) && !isStateTreeNode(newValue) && (!current.identifierAttribute || current.identifier === normalizeIdentifier(newValue[current.identifierAttribute]))) {
        // the newValue has no node, so can be treated like a snapshot
        // we can reconcile
        current.applySnapshot(newValue);
        return true;
      }

      return false;
    }
  });
  Object.defineProperty(ComplexType.prototype, "reconcile", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (current, newValue, parent, subpath) {
      var nodeReconciled = this.tryToReconcileNode(current, newValue);

      if (nodeReconciled) {
        current.setParent(parent, subpath);
        return current;
      } // current node cannot be recycled in any way


      current.die(); // noop if detaching
      // attempt to reuse the new one

      if (isStateTreeNode(newValue) && this.isAssignableFrom(getType(newValue))) {
        // newValue is a Node as well, move it here..
        var newNode = getStateTreeNode(newValue);
        newNode.setParent(parent, subpath);
        return newNode;
      } // nothing to do, we have to create a new node


      return this.instantiate(parent, subpath, undefined, newValue);
    }
  });
  Object.defineProperty(ComplexType.prototype, "getSubTypes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return null;
    }
  });
  return ComplexType;
}(BaseType);

ComplexType.prototype.create = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["action"])(ComplexType.prototype.create);
/**
 * @internal
 * @hidden
 */

var SimpleType =
/** @class */
function (_super) {
  __extends(SimpleType, _super);

  function SimpleType() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(SimpleType.prototype, "createNewInstance", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (snapshot) {
      return snapshot;
    }
  });
  Object.defineProperty(SimpleType.prototype, "getValue", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      // if we ever find a case where scalar nodes can be accessed without iterating through its parent
      // uncomment this to make sure the parent chain is created when this is accessed
      // if (node.parent) {
      //     node.parent.createObservableInstanceIfNeeded()
      // }
      return node.storedValue;
    }
  });
  Object.defineProperty(SimpleType.prototype, "getSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      return node.storedValue;
    }
  });
  Object.defineProperty(SimpleType.prototype, "reconcile", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (current, newValue, parent, subpath) {
      // reconcile only if type and value are still the same, and only if the node is not detaching
      if (!current.isDetaching && current.type === this && current.storedValue === newValue) {
        return current;
      }

      var res = this.instantiate(parent, subpath, undefined, newValue);
      current.die(); // noop if detaching

      return res;
    }
  });
  Object.defineProperty(SimpleType.prototype, "getSubTypes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return null;
    }
  });
  return SimpleType;
}(BaseType);
/**
 * Returns if a given value represents a type.
 *
 * @param value Value to check.
 * @returns `true` if the value is a type.
 */


function isType(value) {
  return typeof value === "object" && value && value.isType === true;
}
/**
 * @internal
 * @hidden
 */


function assertIsType(type, argNumber) {
  assertArg(type, isType, "mobx-state-tree type", argNumber);
}

var runningActions = new Map();
/**
 * Note: Consider migrating to `createActionTrackingMiddleware2`, it is easier to use.
 *
 * Convenience utility to create action based middleware that supports async processes more easily.
 * All hooks are called for both synchronous and asynchronous actions. Except that either `onSuccess` or `onFail` is called
 *
 * The create middleware tracks the process of an action (assuming it passes the `filter`).
 * `onResume` can return any value, which will be passed as second argument to any other hook. This makes it possible to keep state during a process.
 *
 * See the `atomic` middleware for an example
 *
 * @param hooks
 * @returns
 */

function createActionTrackingMiddleware(hooks) {
  return function actionTrackingMiddleware(call, next, abort) {
    switch (call.type) {
      case "action":
        {
          if (!hooks.filter || hooks.filter(call) === true) {
            var context = hooks.onStart(call);
            hooks.onResume(call, context);
            runningActions.set(call.id, {
              call: call,
              context: context,
              async: false
            });

            try {
              var res = next(call);
              hooks.onSuspend(call, context);

              if (runningActions.get(call.id).async === false) {
                runningActions.delete(call.id);
                hooks.onSuccess(call, context, res);
              }

              return res;
            } catch (e) {
              runningActions.delete(call.id);
              hooks.onFail(call, context, e);
              throw e;
            }
          } else {
            return next(call);
          }
        }

      case "flow_spawn":
        {
          var root = runningActions.get(call.rootId);
          root.async = true;
          return next(call);
        }

      case "flow_resume":
      case "flow_resume_error":
        {
          var root = runningActions.get(call.rootId);
          hooks.onResume(call, root.context);

          try {
            return next(call);
          } finally {
            hooks.onSuspend(call, root.context);
          }
        }

      case "flow_throw":
        {
          var root = runningActions.get(call.rootId);
          runningActions.delete(call.rootId);
          hooks.onFail(call, root.context, call.args[0]);
          return next(call);
        }

      case "flow_return":
        {
          var root = runningActions.get(call.rootId);
          runningActions.delete(call.rootId);
          hooks.onSuccess(call, root.context, call.args[0]);
          return next(call);
        }
    }
  };
}

var RunningAction =
/** @class */
function () {
  function RunningAction(hooks, call) {
    Object.defineProperty(this, "hooks", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: hooks
    });
    Object.defineProperty(this, "call", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: call
    });
    Object.defineProperty(this, "flowsPending", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "running", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    });

    if (hooks) {
      hooks.onStart(call);
    }
  }

  Object.defineProperty(RunningAction.prototype, "finish", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (error) {
      if (this.running) {
        this.running = false;

        if (this.hooks) {
          this.hooks.onFinish(this.call, error);
        }
      }
    }
  });
  Object.defineProperty(RunningAction.prototype, "incFlowsPending", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      this.flowsPending++;
    }
  });
  Object.defineProperty(RunningAction.prototype, "decFlowsPending", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      this.flowsPending--;
    }
  });
  Object.defineProperty(RunningAction.prototype, "hasFlowsPending", {
    get: function () {
      return this.flowsPending > 0;
    },
    enumerable: false,
    configurable: true
  });
  return RunningAction;
}();
/**
 * Convenience utility to create action based middleware that supports async processes more easily.
 * The flow is like this:
 * - for each action: if filter passes -> `onStart` -> (inner actions recursively) -> `onFinish`
 *
 * Example: if we had an action `a` that called inside an action `b1`, then `b2` the flow would be:
 * - `filter(a)`
 * - `onStart(a)`
 *   - `filter(b1)`
 *   - `onStart(b1)`
 *   - `onFinish(b1)`
 *   - `filter(b2)`
 *   - `onStart(b2)`
 *   - `onFinish(b2)`
 * - `onFinish(a)`
 *
 * The flow is the same no matter if the actions are sync or async.
 *
 * See the `atomic` middleware for an example
 *
 * @param hooks
 * @returns
 */


function createActionTrackingMiddleware2(middlewareHooks) {
  var runningActions = new WeakMap();
  return function actionTrackingMiddleware(call, next) {
    // find parentRunningAction
    var parentRunningAction = call.parentActionEvent ? runningActions.get(call.parentActionEvent) : undefined;

    if (call.type === "action") {
      var newCall = __assign(__assign({}, call), {
        // make a shallow copy of the parent action env
        env: parentRunningAction && parentRunningAction.call.env,
        parentCall: parentRunningAction && parentRunningAction.call
      });

      var passesFilter = !middlewareHooks.filter || middlewareHooks.filter(newCall);
      var hooks = passesFilter ? middlewareHooks : undefined;
      var runningAction = new RunningAction(hooks, newCall);
      runningActions.set(call, runningAction);
      var res = void 0;

      try {
        res = next(call);
      } catch (e) {
        runningAction.finish(e);
        throw e;
      }

      if (!runningAction.hasFlowsPending) {
        // sync action finished
        runningAction.finish();
      }

      return res;
    } else {
      if (!parentRunningAction) {
        return next(call);
      }

      switch (call.type) {
        case "flow_spawn":
          {
            parentRunningAction.incFlowsPending();
            return next(call);
          }

        case "flow_resume":
        case "flow_resume_error":
          {
            return next(call);
          }

        case "flow_throw":
          {
            var error = call.args[0];

            try {
              return next(call);
            } finally {
              parentRunningAction.decFlowsPending();

              if (!parentRunningAction.hasFlowsPending) {
                parentRunningAction.finish(error);
              }
            }
          }

        case "flow_return":
          {
            try {
              return next(call);
            } finally {
              parentRunningAction.decFlowsPending();

              if (!parentRunningAction.hasFlowsPending) {
                parentRunningAction.finish();
              }
            }
          }
      }
    }
  };
}

function serializeArgument(node, actionName, index, arg) {
  if (arg instanceof Date) return {
    $MST_DATE: arg.getTime()
  };
  if (isPrimitive(arg)) return arg; // We should not serialize MST nodes, even if we can, because we don't know if the receiving party can handle a raw snapshot instead of an
  // MST type instance. So if one wants to serialize a MST node that was pass in, either explitly pass: 1: an id, 2: a (relative) path, 3: a snapshot

  if (isStateTreeNode(arg)) return serializeTheUnserializable("[MSTNode: " + getType(arg).name + "]");
  if (typeof arg === "function") return serializeTheUnserializable("[function]");
  if (typeof arg === "object" && !isPlainObject(arg) && !isArray(arg)) return serializeTheUnserializable("[object " + (arg && arg.constructor && arg.constructor.name || "Complex Object") + "]");

  try {
    // Check if serializable, cycle free etc...
    // MWE: there must be a better way....
    JSON.stringify(arg); // or throws

    return arg;
  } catch (e) {
    return serializeTheUnserializable("" + e);
  }
}

function deserializeArgument(adm, value) {
  if (value && typeof value === "object" && "$MST_DATE" in value) return new Date(value["$MST_DATE"]);
  return value;
}

function serializeTheUnserializable(baseType) {
  return {
    $MST_UNSERIALIZABLE: true,
    type: baseType
  };
}
/**
 * Applies an action or a series of actions in a single MobX transaction.
 * Does not return any value
 * Takes an action description as produced by the `onAction` middleware.
 *
 * @param target
 * @param actions
 */


function applyAction(target, actions) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  assertArg(actions, function (a) {
    return typeof a === "object";
  }, "object or array", 2);
  Object(mobx__WEBPACK_IMPORTED_MODULE_0__["runInAction"])(function () {
    asArray(actions).forEach(function (action) {
      return baseApplyAction(target, action);
    });
  });
}

function baseApplyAction(target, action) {
  var resolvedTarget = tryResolve(target, action.path || "");
  if (!resolvedTarget) throw fail$1("Invalid action path: " + (action.path || ""));
  var node = getStateTreeNode(resolvedTarget); // Reserved functions

  if (action.name === "@APPLY_PATCHES") {
    return applyPatch.call(null, resolvedTarget, action.args[0]);
  }

  if (action.name === "@APPLY_SNAPSHOT") {
    return applySnapshot.call(null, resolvedTarget, action.args[0]);
  }

  if (!(typeof resolvedTarget[action.name] === "function")) throw fail$1("Action '" + action.name + "' does not exist in '" + node.path + "'");
  return resolvedTarget[action.name].apply(resolvedTarget, action.args ? action.args.map(function (v) {
    return deserializeArgument(node, v);
  }) : []);
}
/**
 * Small abstraction around `onAction` and `applyAction`, attaches an action listener to a tree and records all the actions emitted.
 * Returns an recorder object with the following signature:
 *
 * Example:
 * ```ts
 * export interface IActionRecorder {
 *      // the recorded actions
 *      actions: ISerializedActionCall[]
 *      // true if currently recording
 *      recording: boolean
 *      // stop recording actions
 *      stop(): void
 *      // resume recording actions
 *      resume(): void
 *      // apply all the recorded actions on the given object
 *      replay(target: IAnyStateTreeNode): void
 * }
 * ```
 *
 * The optional filter function allows to skip recording certain actions.
 *
 * @param subject
 * @returns
 */


function recordActions(subject, filter) {
  // check all arguments
  assertIsStateTreeNode(subject, 1);
  var actions = [];

  var listener = function (call) {
    var recordThis = filter ? filter(call, getRunningActionContext()) : true;

    if (recordThis) {
      actions.push(call);
    }
  };

  var disposer;
  var recorder = {
    actions: actions,

    get recording() {
      return !!disposer;
    },

    stop: function () {
      if (disposer) {
        disposer();
        disposer = undefined;
      }
    },
    resume: function () {
      if (disposer) return;
      disposer = onAction(subject, listener);
    },
    replay: function (target) {
      applyAction(target, actions);
    }
  };
  recorder.resume();
  return recorder;
}
/**
 * Registers a function that will be invoked for each action that is called on the provided model instance, or to any of its children.
 * See [actions](https://github.com/mobxjs/mobx-state-tree#actions) for more details. onAction events are emitted only for the outermost called action in the stack.
 * Action can also be intercepted by middleware using addMiddleware to change the function call before it will be run.
 *
 * Not all action arguments might be serializable. For unserializable arguments, a struct like `{ $MST_UNSERIALIZABLE: true, type: "someType" }` will be generated.
 * MST Nodes are considered non-serializable as well (they could be serialized as there snapshot, but it is uncertain whether an replaying party will be able to handle such a non-instantiated snapshot).
 * Rather, when using `onAction` middleware, one should consider in passing arguments which are 1: an id, 2: a (relative) path, or 3: a snapshot. Instead of a real MST node.
 *
 * Example:
 * ```ts
 * const Todo = types.model({
 *   task: types.string
 * })
 *
 * const TodoStore = types.model({
 *   todos: types.array(Todo)
 * }).actions(self => ({
 *   add(todo) {
 *     self.todos.push(todo);
 *   }
 * }))
 *
 * const s = TodoStore.create({ todos: [] })
 *
 * let disposer = onAction(s, (call) => {
 *   console.log(call);
 * })
 *
 * s.add({ task: "Grab a coffee" })
 * // Logs: { name: "add", path: "", args: [{ task: "Grab a coffee" }] }
 * ```
 *
 * @param target
 * @param listener
 * @param attachAfter (default false) fires the listener *after* the action has executed instead of before.
 * @returns
 */


function onAction(target, listener, attachAfter) {
  if (attachAfter === void 0) {
    attachAfter = false;
  } // check all arguments


  assertIsStateTreeNode(target, 1);

  if (devMode()) {
    if (!isRoot(target)) warnError("Warning: Attaching onAction listeners to non root nodes is dangerous: No events will be emitted for actions initiated higher up in the tree.");
    if (!isProtected(target)) warnError("Warning: Attaching onAction listeners to non protected nodes is dangerous: No events will be emitted for direct modifications without action.");
  }

  return addMiddleware(target, function handler(rawCall, next) {
    if (rawCall.type === "action" && rawCall.id === rawCall.rootId) {
      var sourceNode_1 = getStateTreeNode(rawCall.context);
      var info = {
        name: rawCall.name,
        path: getRelativePathBetweenNodes(getStateTreeNode(target), sourceNode_1),
        args: rawCall.args.map(function (arg, index) {
          return serializeArgument(sourceNode_1, rawCall.name, index, arg);
        })
      };

      if (attachAfter) {
        var res = next(rawCall);
        listener(info);
        return res;
      } else {
        listener(info);
        return next(rawCall);
      }
    } else {
      return next(rawCall);
    }
  });
}

var nextActionId = 1;
var currentActionContext;
/**
 * @internal
 * @hidden
 */

function getCurrentActionContext() {
  return currentActionContext;
}
/**
 * @internal
 * @hidden
 */


function getNextActionId() {
  return nextActionId++;
} // TODO: optimize away entire action context if there is no middleware in tree?

/**
 * @internal
 * @hidden
 */


function runWithActionContext(context, fn) {
  var node = getStateTreeNode(context.context);

  if (context.type === "action") {
    node.assertAlive({
      actionContext: context
    });
  }

  var baseIsRunningAction = node._isRunningAction;
  node._isRunningAction = true;
  var previousContext = currentActionContext;
  currentActionContext = context;

  try {
    return runMiddleWares(node, context, fn);
  } finally {
    currentActionContext = previousContext;
    node._isRunningAction = baseIsRunningAction;
  }
}
/**
 * @internal
 * @hidden
 */


function getParentActionContext(parentContext) {
  if (!parentContext) return undefined;
  if (parentContext.type === "action") return parentContext;
  return parentContext.parentActionEvent;
}
/**
 * @internal
 * @hidden
 */


function createActionInvoker(target, name, fn) {
  var res = function () {
    var id = getNextActionId();
    var parentContext = currentActionContext;
    var parentActionContext = getParentActionContext(parentContext);
    return runWithActionContext({
      type: "action",
      name: name,
      id: id,
      args: argsToArray(arguments),
      context: target,
      tree: getRoot(target),
      rootId: parentContext ? parentContext.rootId : id,
      parentId: parentContext ? parentContext.id : 0,
      allParentIds: parentContext ? __spread(parentContext.allParentIds, [parentContext.id]) : [],
      parentEvent: parentContext,
      parentActionEvent: parentActionContext
    }, fn);
  };

  res._isMSTAction = true;
  return res;
}
/**
 * Middleware can be used to intercept any action is invoked on the subtree where it is attached.
 * If a tree is protected (by default), this means that any mutation of the tree will pass through your middleware.
 *
 * For more details, see the [middleware docs](concepts/middleware.md)
 *
 * @param target Node to apply the middleware to.
 * @param middleware Middleware to apply.
 * @returns A callable function to dispose the middleware.
 */


function addMiddleware(target, handler, includeHooks) {
  if (includeHooks === void 0) {
    includeHooks = true;
  }

  var node = getStateTreeNode(target);

  if (devMode()) {
    if (!node.isProtectionEnabled) {
      warnError("It is recommended to protect the state tree before attaching action middleware, as otherwise it cannot be guaranteed that all changes are passed through middleware. See `protect`");
    }
  }

  return node.addMiddleWare(handler, includeHooks);
}
/**
 * Binds middleware to a specific action.
 *
 * Example:
 * ```ts
 * type.actions(self => {
 *   function takeA____() {
 *       self.toilet.donate()
 *       self.wipe()
 *       self.wipe()
 *       self.toilet.flush()
 *   }
 *   return {
 *     takeA____: decorate(atomic, takeA____)
 *   }
 * })
 * ```
 *
 * @param handler
 * @param fn
 * @param includeHooks
 * @returns The original function
 */


function decorate(handler, fn, includeHooks) {
  if (includeHooks === void 0) {
    includeHooks = true;
  }

  var middleware = {
    handler: handler,
    includeHooks: includeHooks
  };
  fn.$mst_middleware = fn.$mst_middleware || [];
  fn.$mst_middleware.push(middleware);
  return fn;
}

var CollectedMiddlewares =
/** @class */
function () {
  function CollectedMiddlewares(node, fn) {
    Object.defineProperty(this, "arrayIndex", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "inArrayIndex", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "middlewares", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    }); // we just push middleware arrays into an array of arrays to avoid making copies

    if (fn.$mst_middleware) {
      this.middlewares.push(fn.$mst_middleware);
    }

    var n = node; // Find all middlewares. Optimization: cache this?

    while (n) {
      if (n.middlewares) this.middlewares.push(n.middlewares);
      n = n.parent;
    }
  }

  Object.defineProperty(CollectedMiddlewares.prototype, "isEmpty", {
    get: function () {
      return this.middlewares.length <= 0;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(CollectedMiddlewares.prototype, "getNextMiddleware", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var array = this.middlewares[this.arrayIndex];
      if (!array) return undefined;
      var item = array[this.inArrayIndex++];

      if (!item) {
        this.arrayIndex++;
        this.inArrayIndex = 0;
        return this.getNextMiddleware();
      }

      return item;
    }
  });
  return CollectedMiddlewares;
}();

function runMiddleWares(node, baseCall, originalFn) {
  var middlewares = new CollectedMiddlewares(node, originalFn); // Short circuit

  if (middlewares.isEmpty) return Object(mobx__WEBPACK_IMPORTED_MODULE_0__["action"])(originalFn).apply(null, baseCall.args);
  var result = null;

  function runNextMiddleware(call) {
    var middleware = middlewares.getNextMiddleware();
    var handler = middleware && middleware.handler;

    if (!handler) {
      return Object(mobx__WEBPACK_IMPORTED_MODULE_0__["action"])(originalFn).apply(null, call.args);
    } // skip hooks if asked to


    if (!middleware.includeHooks && Hook[call.name]) {
      return runNextMiddleware(call);
    }

    var nextInvoked = false;

    function next(call2, callback) {
      nextInvoked = true; // the result can contain
      // - the non manipulated return value from an action
      // - the non manipulated abort value
      // - one of the above but manipulated through the callback function

      result = runNextMiddleware(call2);

      if (callback) {
        result = callback(result);
      }
    }

    var abortInvoked = false;

    function abort(value) {
      abortInvoked = true; // overwrite the result
      // can be manipulated through middlewares earlier in the queue using the callback fn

      result = value;
    }

    handler(call, next, abort);

    if (devMode()) {
      if (!nextInvoked && !abortInvoked) {
        var node2 = getStateTreeNode(call.tree);
        throw fail$1("Neither the next() nor the abort() callback within the middleware " + handler.name + " for the action: \"" + call.name + "\" on the node: " + node2.type.name + " was invoked.");
      } else if (nextInvoked && abortInvoked) {
        var node2 = getStateTreeNode(call.tree);
        throw fail$1("The next() and abort() callback within the middleware " + handler.name + " for the action: \"" + call.name + "\" on the node: " + node2.type.name + " were invoked.");
      }
    }

    return result;
  }

  return runNextMiddleware(baseCall);
}
/**
 * Returns the currently executing MST action context, or undefined if none.
 */


function getRunningActionContext() {
  var current = getCurrentActionContext();

  while (current && current.type !== "action") {
    current = current.parentActionEvent;
  }

  return current;
}

function _isActionContextThisOrChildOf(actionContext, sameOrParent, includeSame) {
  var parentId = typeof sameOrParent === "number" ? sameOrParent : sameOrParent.id;
  var current = includeSame ? actionContext : actionContext.parentActionEvent;

  while (current) {
    if (current.id === parentId) {
      return true;
    }

    current = current.parentActionEvent;
  }

  return false;
}
/**
 * Returns if the given action context is a parent of this action context.
 */


function isActionContextChildOf(actionContext, parent) {
  return _isActionContextThisOrChildOf(actionContext, parent, false);
}
/**
 * Returns if the given action context is this or a parent of this action context.
 */


function isActionContextThisOrChildOf(actionContext, parentOrThis) {
  return _isActionContextThisOrChildOf(actionContext, parentOrThis, true);
}

function safeStringify(value) {
  try {
    return JSON.stringify(value);
  } catch (e) {
    // istanbul ignore next
    return "<Unserializable: " + e + ">";
  }
}
/**
 * @internal
 * @hidden
 */


function prettyPrintValue(value) {
  return typeof value === "function" ? "<function" + (value.name ? " " + value.name : "") + ">" : isStateTreeNode(value) ? "<" + value + ">" : "`" + safeStringify(value) + "`";
}

function shortenPrintValue(valueInString) {
  return valueInString.length < 280 ? valueInString : valueInString.substring(0, 272) + "......" + valueInString.substring(valueInString.length - 8);
}

function toErrorString(error) {
  var value = error.value;
  var type = error.context[error.context.length - 1].type;
  var fullPath = error.context.map(function (_a) {
    var path = _a.path;
    return path;
  }).filter(function (path) {
    return path.length > 0;
  }).join("/");
  var pathPrefix = fullPath.length > 0 ? "at path \"/" + fullPath + "\" " : "";
  var currentTypename = isStateTreeNode(value) ? "value of type " + getStateTreeNode(value).type.name + ":" : isPrimitive(value) ? "value" : "snapshot";
  var isSnapshotCompatible = type && isStateTreeNode(value) && type.is(getStateTreeNode(value).snapshot);
  return "" + pathPrefix + currentTypename + " " + prettyPrintValue(value) + " is not assignable " + (type ? "to type: `" + type.name + "`" : "") + (error.message ? " (" + error.message + ")" : "") + (type ? isPrimitiveType(type) || isPrimitive(value) ? "." : ", expected an instance of `" + type.name + "` or a snapshot like `" + type.describe() + "` instead." + (isSnapshotCompatible ? " (Note that a snapshot of the provided value is compatible with the targeted type)" : "") : ".");
}
/**
 * @internal
 * @hidden
 */


function getContextForPath(context, path, type) {
  return context.concat([{
    path: path,
    type: type
  }]);
}
/**
 * @internal
 * @hidden
 */


function typeCheckSuccess() {
  return EMPTY_ARRAY;
}
/**
 * @internal
 * @hidden
 */


function typeCheckFailure(context, value, message) {
  return [{
    context: context,
    value: value,
    message: message
  }];
}
/**
 * @internal
 * @hidden
 */


function flattenTypeErrors(errors) {
  return errors.reduce(function (a, i) {
    return a.concat(i);
  }, []);
} // TODO; doublecheck: typecheck should only needed to be invoked from: type.create and array / map / value.property will change

/**
 * @internal
 * @hidden
 */


function typecheckInternal(type, value) {
  // runs typeChecking if it is in dev-mode or through a process.env.ENABLE_TYPE_CHECK flag
  if (isTypeCheckingEnabled()) {
    typecheck(type, value);
  }
}
/**
 * Run's the typechecker for the given type on the given value, which can be a snapshot or an instance.
 * Throws if the given value is not according the provided type specification.
 * Use this if you need typechecks even in a production build (by default all automatic runtime type checks will be skipped in production builds)
 *
 * @param type Type to check against.
 * @param value Value to be checked, either a snapshot or an instance.
 */


function typecheck(type, value) {
  var errors = type.validate(value, [{
    path: "",
    type: type
  }]);

  if (errors.length > 0) {
    throw fail$1(validationErrorsToString(type, value, errors));
  }
}

function validationErrorsToString(type, value, errors) {
  if (errors.length === 0) {
    return undefined;
  }

  return "Error while converting " + shortenPrintValue(prettyPrintValue(value)) + " to `" + type.name + "`:\n\n    " + errors.map(toErrorString).join("\n    ");
}

var identifierCacheId = 0;
/**
 * @internal
 * @hidden
 */

var IdentifierCache =
/** @class */
function () {
  function IdentifierCache() {
    Object.defineProperty(this, "cacheId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: identifierCacheId++
    }); // n.b. in cache all identifiers are normalized to strings

    Object.defineProperty(this, "cache", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: mobx__WEBPACK_IMPORTED_MODULE_0__["observable"].map()
    }); // last time the cache (array) for a given time changed
    // n.b. it is not really the time, but just an integer that gets increased after each modification to the array

    Object.defineProperty(this, "lastCacheModificationPerId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: mobx__WEBPACK_IMPORTED_MODULE_0__["observable"].map()
    });
  }

  Object.defineProperty(IdentifierCache.prototype, "updateLastCacheModificationPerId", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (identifier) {
      var lcm = this.lastCacheModificationPerId.get(identifier); // we start at 1 since 0 means no update since cache creation

      this.lastCacheModificationPerId.set(identifier, lcm === undefined ? 1 : lcm + 1);
    }
  });
  Object.defineProperty(IdentifierCache.prototype, "getLastCacheModificationPerId", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (identifier) {
      var modificationId = this.lastCacheModificationPerId.get(identifier) || 0;
      return this.cacheId + "-" + modificationId;
    }
  });
  Object.defineProperty(IdentifierCache.prototype, "addNodeToCache", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, lastCacheUpdate) {
      if (lastCacheUpdate === void 0) {
        lastCacheUpdate = true;
      }

      if (node.identifierAttribute) {
        var identifier = node.identifier;

        if (!this.cache.has(identifier)) {
          this.cache.set(identifier, mobx__WEBPACK_IMPORTED_MODULE_0__["observable"].array([], mobxShallow));
        }

        var set = this.cache.get(identifier);
        if (set.indexOf(node) !== -1) throw fail$1("Already registered");
        set.push(node);

        if (lastCacheUpdate) {
          this.updateLastCacheModificationPerId(identifier);
        }
      }
    }
  });
  Object.defineProperty(IdentifierCache.prototype, "mergeCache", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      var _this = this;

      Object(mobx__WEBPACK_IMPORTED_MODULE_0__["values"])(node.identifierCache.cache).forEach(function (nodes) {
        return nodes.forEach(function (child) {
          _this.addNodeToCache(child);
        });
      });
    }
  });
  Object.defineProperty(IdentifierCache.prototype, "notifyDied", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      if (node.identifierAttribute) {
        var id = node.identifier;
        var set = this.cache.get(id);

        if (set) {
          set.remove(node); // remove empty sets from cache

          if (!set.length) {
            this.cache.delete(id);
          }

          this.updateLastCacheModificationPerId(node.identifier);
        }
      }
    }
  });
  Object.defineProperty(IdentifierCache.prototype, "splitCache", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      var _this = this;

      var res = new IdentifierCache();
      var basePath = node.path;
      Object(mobx__WEBPACK_IMPORTED_MODULE_0__["entries"])(this.cache).forEach(function (_a) {
        var _b = __read(_a, 2),
            id = _b[0],
            nodes = _b[1];

        var modified = false;

        for (var i = nodes.length - 1; i >= 0; i--) {
          if (nodes[i].path.indexOf(basePath) === 0) {
            res.addNodeToCache(nodes[i], false); // no need to update lastUpdated since it is a whole new cache

            nodes.splice(i, 1);
            modified = true;
          }
        }

        if (modified) {
          _this.updateLastCacheModificationPerId(id);
        }
      });
      return res;
    }
  });
  Object.defineProperty(IdentifierCache.prototype, "has", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (type, identifier) {
      var set = this.cache.get(identifier);
      if (!set) return false;
      return set.some(function (candidate) {
        return type.isAssignableFrom(candidate.type);
      });
    }
  });
  Object.defineProperty(IdentifierCache.prototype, "resolve", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (type, identifier) {
      var set = this.cache.get(identifier);
      if (!set) return null;
      var matches = set.filter(function (candidate) {
        return type.isAssignableFrom(candidate.type);
      });

      switch (matches.length) {
        case 0:
          return null;

        case 1:
          return matches[0];

        default:
          throw fail$1("Cannot resolve a reference to type '" + type.name + "' with id: '" + identifier + "' unambigously, there are multiple candidates: " + matches.map(function (n) {
            return n.path;
          }).join(", "));
      }
    }
  });
  return IdentifierCache;
}();
/**
 * @internal
 * @hidden
 */


function createObjectNode(type, parent, subpath, environment, initialValue) {
  var existingNode = getStateTreeNodeSafe(initialValue);

  if (existingNode) {
    if (existingNode.parent) {
      // istanbul ignore next
      throw fail$1("Cannot add an object to a state tree if it is already part of the same or another state tree. Tried to assign an object to '" + (parent ? parent.path : "") + "/" + subpath + "', but it lives already at '" + existingNode.path + "'");
    }

    if (parent) {
      existingNode.setParent(parent, subpath);
    } // else it already has no parent since it is a pre-requisite


    return existingNode;
  } // not a node, a snapshot


  return new ObjectNode(type, parent, subpath, environment, initialValue);
}
/**
 * @internal
 * @hidden
 */


function createScalarNode(type, parent, subpath, environment, initialValue) {
  return new ScalarNode(type, parent, subpath, environment, initialValue);
}
/**
 * @internal
 * @hidden
 */


function isNode(value) {
  return value instanceof ScalarNode || value instanceof ObjectNode;
}
/**
 * @internal
 * @hidden
 */


var NodeLifeCycle;

(function (NodeLifeCycle) {
  NodeLifeCycle[NodeLifeCycle["INITIALIZING"] = 0] = "INITIALIZING";
  NodeLifeCycle[NodeLifeCycle["CREATED"] = 1] = "CREATED";
  NodeLifeCycle[NodeLifeCycle["FINALIZED"] = 2] = "FINALIZED";
  NodeLifeCycle[NodeLifeCycle["DETACHING"] = 3] = "DETACHING";
  NodeLifeCycle[NodeLifeCycle["DEAD"] = 4] = "DEAD"; // no coming back from this one
})(NodeLifeCycle || (NodeLifeCycle = {}));
/**
 * Returns true if the given value is a node in a state tree.
 * More precisely, that is, if the value is an instance of a
 * `types.model`, `types.array` or `types.map`.
 *
 * @param value
 * @returns true if the value is a state tree node.
 */


function isStateTreeNode(value) {
  return !!(value && value.$treenode);
}
/**
 * @internal
 * @hidden
 */


function assertIsStateTreeNode(value, argNumber) {
  assertArg(value, isStateTreeNode, "mobx-state-tree node", argNumber);
}
/**
 * @internal
 * @hidden
 */


function getStateTreeNode(value) {
  if (!isStateTreeNode(value)) {
    // istanbul ignore next
    throw fail$1("Value " + value + " is no MST Node");
  }

  return value.$treenode;
}
/**
 * @internal
 * @hidden
 */


function getStateTreeNodeSafe(value) {
  return value && value.$treenode || null;
}
/**
 * @internal
 * @hidden
 */


function toJSON() {
  return getStateTreeNode(this).snapshot;
}

var doubleDot = function (_) {
  return "..";
};
/**
 * @internal
 * @hidden
 */


function getRelativePathBetweenNodes(base, target) {
  // PRE condition target is (a child of) base!
  if (base.root !== target.root) {
    throw fail$1("Cannot calculate relative path: objects '" + base + "' and '" + target + "' are not part of the same object tree");
  }

  var baseParts = splitJsonPath(base.path);
  var targetParts = splitJsonPath(target.path);
  var common = 0;

  for (; common < baseParts.length; common++) {
    if (baseParts[common] !== targetParts[common]) break;
  } // TODO: assert that no targetParts paths are "..", "." or ""!


  return baseParts.slice(common).map(doubleDot).join("/") + joinJsonPath(targetParts.slice(common));
}
/**
 * @internal
 * @hidden
 */


function resolveNodeByPath(base, path, failIfResolveFails) {
  if (failIfResolveFails === void 0) {
    failIfResolveFails = true;
  }

  return resolveNodeByPathParts(base, splitJsonPath(path), failIfResolveFails);
}
/**
 * @internal
 * @hidden
 */


function resolveNodeByPathParts(base, pathParts, failIfResolveFails) {
  if (failIfResolveFails === void 0) {
    failIfResolveFails = true;
  }

  var current = base;

  for (var i = 0; i < pathParts.length; i++) {
    var part = pathParts[i];

    if (part === "..") {
      current = current.parent;
      if (current) continue; // not everything has a parent
    } else if (part === ".") {
      continue;
    } else if (current) {
      if (current instanceof ScalarNode) {
        // check if the value of a scalar resolves to a state tree node (e.g. references)
        // then we can continue resolving...
        try {
          var value = current.value;

          if (isStateTreeNode(value)) {
            current = getStateTreeNode(value); // fall through
          }
        } catch (e) {
          if (!failIfResolveFails) {
            return undefined;
          }

          throw e;
        }
      }

      if (current instanceof ObjectNode) {
        var subType = current.getChildType(part);

        if (subType) {
          current = current.getChildNode(part);
          if (current) continue;
        }
      }
    }

    if (failIfResolveFails) throw fail$1("Could not resolve '" + part + "' in path '" + (joinJsonPath(pathParts.slice(0, i)) || "/") + "' while resolving '" + joinJsonPath(pathParts) + "'");else return undefined;
  }

  return current;
}
/**
 * @internal
 * @hidden
 */


function convertChildNodesToArray(childNodes) {
  if (!childNodes) return EMPTY_ARRAY;
  var keys = Object.keys(childNodes);
  if (!keys.length) return EMPTY_ARRAY;
  var result = new Array(keys.length);
  keys.forEach(function (key, index) {
    result[index] = childNodes[key];
  });
  return result;
} // based on: https://github.com/mobxjs/mobx-utils/blob/master/src/async-action.ts

/*
    All contents of this file are deprecated.

    The term `process` has been replaced with `flow` to avoid conflicts with the
    global `process` object.

    Refer to `flow.ts` for any further changes to this implementation.
*/


var DEPRECATION_MESSAGE = "See https://github.com/mobxjs/mobx-state-tree/issues/399 for more information. " + "Note that the middleware event types starting with `process` now start with `flow`.";
/**
 * @hidden
 *
 * @deprecated has been renamed to `flow()`.
 * See https://github.com/mobxjs/mobx-state-tree/issues/399 for more information.
 * Note that the middleware event types starting with `process` now start with `flow`.
 *
 * @returns {Promise}
 */

function process$1(asyncAction) {
  deprecated("process", "`process()` has been renamed to `flow()`. " + DEPRECATION_MESSAGE);
  return flow(asyncAction);
}

var plainObjectString = Object.toString();
/**
 * @internal
 * @hidden
 */

var EMPTY_ARRAY = Object.freeze([]);
/**
 * @internal
 * @hidden
 */

var EMPTY_OBJECT = Object.freeze({});
/**
 * @internal
 * @hidden
 */

var mobxShallow = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["_getGlobalState"])().useProxies ? {
  deep: false
} : {
  deep: false,
  proxy: false
};
Object.freeze(mobxShallow);
/**
 * @internal
 * @hidden
 */

function fail$1(message) {
  if (message === void 0) {
    message = "Illegal state";
  }

  return new Error("[mobx-state-tree] " + message);
}
/**
 * @internal
 * @hidden
 */


function identity(_) {
  return _;
}
/**
 * pollyfill (for IE) suggested in MDN:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger
 * @internal
 * @hidden
 */


var isInteger = Number.isInteger || function (value) {
  return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
};
/**
 * @internal
 * @hidden
 */


function isArray(val) {
  return Array.isArray(val) || Object(mobx__WEBPACK_IMPORTED_MODULE_0__["isObservableArray"])(val);
}
/**
 * @internal
 * @hidden
 */


function asArray(val) {
  if (!val) return EMPTY_ARRAY;
  if (isArray(val)) return val;
  return [val];
}
/**
 * @internal
 * @hidden
 */


function extend(a) {
  var b = [];

  for (var _i = 1; _i < arguments.length; _i++) {
    b[_i - 1] = arguments[_i];
  }

  for (var i = 0; i < b.length; i++) {
    var current = b[i];

    for (var key in current) a[key] = current[key];
  }

  return a;
}
/**
 * @internal
 * @hidden
 */


function isPlainObject(value) {
  var _a;

  if (value === null || typeof value !== "object") return false;
  var proto = Object.getPrototypeOf(value);
  if (proto == null) return true;
  return ((_a = proto.constructor) === null || _a === void 0 ? void 0 : _a.toString()) === plainObjectString;
}
/**
 * @internal
 * @hidden
 */


function isMutable(value) {
  return value !== null && typeof value === "object" && !(value instanceof Date) && !(value instanceof RegExp);
}
/**
 * @internal
 * @hidden
 */


function isPrimitive(value, includeDate) {
  if (includeDate === void 0) {
    includeDate = true;
  }

  if (value === null || value === undefined) return true;
  if (typeof value === "string" || typeof value === "number" || typeof value === "boolean" || includeDate && value instanceof Date) return true;
  return false;
}
/**
 * @internal
 * @hidden
 * Freeze a value and return it (if not in production)
 */


function freeze(value) {
  if (!devMode()) return value;
  return isPrimitive(value) || Object(mobx__WEBPACK_IMPORTED_MODULE_0__["isObservableArray"])(value) ? value : Object.freeze(value);
}
/**
 * @internal
 * @hidden
 * Recursively freeze a value (if not in production)
 */


function deepFreeze(value) {
  if (!devMode()) return value;
  freeze(value);

  if (isPlainObject(value)) {
    Object.keys(value).forEach(function (propKey) {
      if (!isPrimitive(value[propKey]) && !Object.isFrozen(value[propKey])) {
        deepFreeze(value[propKey]);
      }
    });
  }

  return value;
}
/**
 * @internal
 * @hidden
 */


function isSerializable(value) {
  return typeof value !== "function";
}
/**
 * @internal
 * @hidden
 */


function addHiddenFinalProp(object, propName, value) {
  Object.defineProperty(object, propName, {
    enumerable: false,
    writable: false,
    configurable: true,
    value: value
  });
}
/**
 * @internal
 * @hidden
 */


function addHiddenWritableProp(object, propName, value) {
  Object.defineProperty(object, propName, {
    enumerable: false,
    writable: true,
    configurable: true,
    value: value
  });
}
/**
 * @internal
 * @hidden
 */


var EventHandler =
/** @class */
function () {
  function EventHandler() {
    Object.defineProperty(this, "handlers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
  }

  Object.defineProperty(EventHandler.prototype, "hasSubscribers", {
    get: function () {
      return this.handlers.length > 0;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(EventHandler.prototype, "register", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (fn, atTheBeginning) {
      var _this = this;

      if (atTheBeginning === void 0) {
        atTheBeginning = false;
      }

      if (atTheBeginning) {
        this.handlers.unshift(fn);
      } else {
        this.handlers.push(fn);
      }

      return function () {
        _this.unregister(fn);
      };
    }
  });
  Object.defineProperty(EventHandler.prototype, "has", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (fn) {
      return this.handlers.indexOf(fn) >= 0;
    }
  });
  Object.defineProperty(EventHandler.prototype, "unregister", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (fn) {
      var index = this.handlers.indexOf(fn);

      if (index >= 0) {
        this.handlers.splice(index, 1);
      }
    }
  });
  Object.defineProperty(EventHandler.prototype, "clear", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      this.handlers.length = 0;
    }
  });
  Object.defineProperty(EventHandler.prototype, "emit", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      } // make a copy just in case it changes


      var handlers = this.handlers.slice();
      handlers.forEach(function (f) {
        return f.apply(void 0, __spread(args));
      });
    }
  });
  return EventHandler;
}();
/**
 * @internal
 * @hidden
 */


var EventHandlers =
/** @class */
function () {
  function EventHandlers() {
    Object.defineProperty(this, "eventHandlers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
  }

  Object.defineProperty(EventHandlers.prototype, "hasSubscribers", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (event) {
      var handler = this.eventHandlers && this.eventHandlers[event];
      return !!handler && handler.hasSubscribers;
    }
  });
  Object.defineProperty(EventHandlers.prototype, "register", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (event, fn, atTheBeginning) {
      if (atTheBeginning === void 0) {
        atTheBeginning = false;
      }

      if (!this.eventHandlers) {
        this.eventHandlers = {};
      }

      var handler = this.eventHandlers[event];

      if (!handler) {
        handler = this.eventHandlers[event] = new EventHandler();
      }

      return handler.register(fn, atTheBeginning);
    }
  });
  Object.defineProperty(EventHandlers.prototype, "has", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (event, fn) {
      var handler = this.eventHandlers && this.eventHandlers[event];
      return !!handler && handler.has(fn);
    }
  });
  Object.defineProperty(EventHandlers.prototype, "unregister", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (event, fn) {
      var handler = this.eventHandlers && this.eventHandlers[event];

      if (handler) {
        handler.unregister(fn);
      }
    }
  });
  Object.defineProperty(EventHandlers.prototype, "clear", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (event) {
      if (this.eventHandlers) {
        delete this.eventHandlers[event];
      }
    }
  });
  Object.defineProperty(EventHandlers.prototype, "clearAll", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      this.eventHandlers = undefined;
    }
  });
  Object.defineProperty(EventHandlers.prototype, "emit", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (event) {
      var _a;

      var args = [];

      for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
      }

      var handler = this.eventHandlers && this.eventHandlers[event];

      if (handler) {
        (_a = handler).emit.apply(_a, __spread(args));
      }
    }
  });
  return EventHandlers;
}();
/**
 * @internal
 * @hidden
 */


function argsToArray(args) {
  var res = new Array(args.length);

  for (var i = 0; i < args.length; i++) res[i] = args[i];

  return res;
}
/**
 * @internal
 * @hidden
 */


function stringStartsWith(str, beginning) {
  return str.indexOf(beginning) === 0;
}
/**
 * @internal
 * @hidden
 */


var deprecated = function (id, message) {
  // skip if running production
  if (!devMode()) return; // warn if hasn't been warned before

  if (deprecated.ids && !deprecated.ids.hasOwnProperty(id)) {
    warnError("Deprecation warning: " + message);
  } // mark as warned to avoid duplicate warn message


  if (deprecated.ids) deprecated.ids[id] = true;
};

deprecated.ids = {};
/**
 * @internal
 * @hidden
 */

function warnError(msg) {
  console.warn(new Error("[mobx-state-tree] " + msg));
}
/**
 * @internal
 * @hidden
 */


function isTypeCheckingEnabled() {
  return devMode() || typeof process !== "undefined" && process.env && process.env.ENABLE_TYPE_CHECK === "true";
}
/**
 * @internal
 * @hidden
 */


function devMode() {
  return "development" !== "production";
}
/**
 * @internal
 * @hidden
 */


function assertArg(value, fn, typeName, argNumber) {
  if (devMode()) {
    if (!fn(value)) {
      // istanbul ignore next
      throw fail$1("expected " + typeName + " as argument " + asArray(argNumber).join(" or ") + ", got " + value + " instead");
    }
  }
}
/**
 * @internal
 * @hidden
 */


function assertIsFunction(value, argNumber) {
  assertArg(value, function (fn) {
    return typeof fn === "function";
  }, "function", argNumber);
}
/**
 * @internal
 * @hidden
 */


function assertIsNumber(value, argNumber, min, max) {
  assertArg(value, function (n) {
    return typeof n === "number";
  }, "number", argNumber);

  if (min !== undefined) {
    assertArg(value, function (n) {
      return n >= min;
    }, "number greater than " + min, argNumber);
  }

  if (max !== undefined) {
    assertArg(value, function (n) {
      return n <= max;
    }, "number lesser than " + max, argNumber);
  }
}
/**
 * @internal
 * @hidden
 */


function assertIsString(value, argNumber, canBeEmpty) {
  if (canBeEmpty === void 0) {
    canBeEmpty = true;
  }

  assertArg(value, function (s) {
    return typeof s === "string";
  }, "string", argNumber);

  if (!canBeEmpty) {
    assertArg(value, function (s) {
      return s !== "";
    }, "not empty string", argNumber);
  }
}
/**
 * @internal
 * @hidden
 */


function setImmediateWithFallback(fn) {
  if (typeof queueMicrotask === "function") {
    queueMicrotask(fn);
  } else if (typeof setImmediate === "function") {
    setImmediate(fn);
  } else {
    setTimeout(fn, 1);
  }
}
/**
 * See [asynchronous actions](concepts/async-actions.md).
 *
 * @returns The flow as a promise.
 */


function flow(generator) {
  return createFlowSpawner(generator.name, generator);
}
/**
 * @deprecated Not needed since TS3.6.
 * Used for TypeScript to make flows that return a promise return the actual promise result.
 *
 * @param val
 * @returns
 */


function castFlowReturn(val) {
  return val;
}
/**
 * @experimental
 * experimental api - might change on minor/patch releases
 *
 * Convert a promise-returning function to a generator-returning one.
 * This is intended to allow for usage of `yield*` in async actions to
 * retain the promise return type.
 *
 * Example:
 * ```ts
 * function getDataAsync(input: string): Promise<number> { ... }
 * const getDataGen = toGeneratorFunction(getDataAsync);
 *
 * const someModel.actions(self => ({
 *   someAction: flow(function*() {
 *     // value is typed as number
 *     const value = yield* getDataGen("input value");
 *     ...
 *   })
 * }))
 * ```
 */


function toGeneratorFunction(p) {
  return function () {
    var _i;

    var args = [];

    for (_i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , p.apply(void 0, __spread(args))];

        case 1:
          return [2
          /*return*/
          , _a.sent()];
      }
    });
  };
}
/**
 * @experimental
 * experimental api - might change on minor/patch releases
 *
 * Convert a promise to a generator yielding that promise
 * This is intended to allow for usage of `yield*` in async actions to
 * retain the promise return type.
 *
 * Example:
 * ```ts
 * function getDataAsync(input: string): Promise<number> { ... }
 *
 * const someModel.actions(self => ({
 *   someAction: flow(function*() {
 *     // value is typed as number
 *     const value = yield* toGenerator(getDataAsync("input value"));
 *     ...
 *   })
 * }))
 * ```
 */


function toGenerator(p) {
  return __generator(this, function (_a) {
    switch (_a.label) {
      case 0:
        return [4
        /*yield*/
        , p];

      case 1:
        return [2
        /*return*/
        , _a.sent()];
    }
  });
}
/**
 * @internal
 * @hidden
 */


function createFlowSpawner(name, generator) {
  var spawner = function flowSpawner() {
    // Implementation based on https://github.com/tj/co/blob/master/index.js
    var runId = getNextActionId();
    var parentContext = getCurrentActionContext();

    if (!parentContext) {
      throw fail$1("a mst flow must always have a parent context");
    }

    var parentActionContext = getParentActionContext(parentContext);

    if (!parentActionContext) {
      throw fail$1("a mst flow must always have a parent action context");
    }

    var contextBase = {
      name: name,
      id: runId,
      tree: parentContext.tree,
      context: parentContext.context,
      parentId: parentContext.id,
      allParentIds: __spread(parentContext.allParentIds, [parentContext.id]),
      rootId: parentContext.rootId,
      parentEvent: parentContext,
      parentActionEvent: parentActionContext
    };
    var args = arguments;

    function wrap(fn, type, arg) {
      fn.$mst_middleware = spawner.$mst_middleware; // pick up any middleware attached to the flow

      runWithActionContext(__assign(__assign({}, contextBase), {
        type: type,
        args: [arg]
      }), fn);
    }

    return new Promise(function (resolve, reject) {
      var gen;

      var init = function asyncActionInit() {
        gen = generator.apply(null, arguments);
        onFulfilled(undefined); // kick off the flow
      };

      init.$mst_middleware = spawner.$mst_middleware;
      runWithActionContext(__assign(__assign({}, contextBase), {
        type: "flow_spawn",
        args: argsToArray(args)
      }), init);

      function onFulfilled(res) {
        var ret;

        try {
          // prettier-ignore
          wrap(function (r) {
            ret = gen.next(r);
          }, "flow_resume", res);
        } catch (e) {
          // prettier-ignore
          setImmediateWithFallback(function () {
            wrap(function (r) {
              reject(e);
            }, "flow_throw", e);
          });
          return;
        }

        next(ret);
        return;
      }

      function onRejected(err) {
        var ret;

        try {
          // prettier-ignore
          wrap(function (r) {
            ret = gen.throw(r);
          }, "flow_resume_error", err); // or yieldError?
        } catch (e) {
          // prettier-ignore
          setImmediateWithFallback(function () {
            wrap(function (r) {
              reject(e);
            }, "flow_throw", e);
          });
          return;
        }

        next(ret);
      }

      function next(ret) {
        if (ret.done) {
          // prettier-ignore
          setImmediateWithFallback(function () {
            wrap(function (r) {
              resolve(r);
            }, "flow_return", ret.value);
          });
          return;
        } // TODO: support more type of values? See https://github.com/tj/co/blob/249bbdc72da24ae44076afd716349d2089b31c4c/index.js#L100


        if (!ret.value || typeof ret.value.then !== "function") {
          // istanbul ignore next
          throw fail$1("Only promises can be yielded to `async`, got: " + ret);
        }

        return ret.value.then(onFulfilled, onRejected);
      }
    });
  };

  return spawner;
}
/**
 * @internal
 * @hidden
 */


function splitPatch(patch) {
  if (!("oldValue" in patch)) throw fail$1("Patches without `oldValue` field cannot be inversed");
  return [stripPatch(patch), invertPatch(patch)];
}
/**
 * @internal
 * @hidden
 */


function stripPatch(patch) {
  // strips `oldvalue` information from the patch, so that it becomes a patch conform the json-patch spec
  // this removes the ability to undo the patch
  switch (patch.op) {
    case "add":
      return {
        op: "add",
        path: patch.path,
        value: patch.value
      };

    case "remove":
      return {
        op: "remove",
        path: patch.path
      };

    case "replace":
      return {
        op: "replace",
        path: patch.path,
        value: patch.value
      };
  }
}

function invertPatch(patch) {
  switch (patch.op) {
    case "add":
      return {
        op: "remove",
        path: patch.path
      };

    case "remove":
      return {
        op: "add",
        path: patch.path,
        value: patch.oldValue
      };

    case "replace":
      return {
        op: "replace",
        path: patch.path,
        value: patch.oldValue
      };
  }
}
/**
 * Simple simple check to check it is a number.
 */


function isNumber(x) {
  return typeof x === "number";
}
/**
 * Escape slashes and backslashes.
 *
 * http://tools.ietf.org/html/rfc6901
 */


function escapeJsonPath(path) {
  if (isNumber(path) === true) {
    return "" + path;
  }

  if (path.indexOf("/") === -1 && path.indexOf("~") === -1) return path;
  return path.replace(/~/g, "~0").replace(/\//g, "~1");
}
/**
 * Unescape slashes and backslashes.
 */


function unescapeJsonPath(path) {
  return path.replace(/~1/g, "/").replace(/~0/g, "~");
}
/**
 * Generates a json-path compliant json path from path parts.
 *
 * @param path
 * @returns
 */


function joinJsonPath(path) {
  // `/` refers to property with an empty name, while `` refers to root itself!
  if (path.length === 0) return "";

  var getPathStr = function (p) {
    return p.map(escapeJsonPath).join("/");
  };

  if (path[0] === "." || path[0] === "..") {
    // relative
    return getPathStr(path);
  } else {
    // absolute
    return "/" + getPathStr(path);
  }
}
/**
 * Splits and decodes a json path into several parts.
 *
 * @param path
 * @returns
 */


function splitJsonPath(path) {
  // `/` refers to property with an empty name, while `` refers to root itself!
  var parts = path.split("/").map(unescapeJsonPath);
  var valid = path === "" || path === "." || path === ".." || stringStartsWith(path, "/") || stringStartsWith(path, "./") || stringStartsWith(path, "../");

  if (!valid) {
    throw fail$1("a json path must be either rooted, empty or relative, but got '" + path + "'");
  } // '/a/b/c' -> ["a", "b", "c"]
  // '../../b/c' -> ["..", "..", "b", "c"]
  // '' -> []
  // '/' -> ['']
  // './a' -> [".", "a"]
  // /./a' -> [".", "a"] equivalent to './a'


  if (parts[0] === "") {
    parts.shift();
  }

  return parts;
}

var SnapshotProcessor =
/** @class */
function (_super) {
  __extends(SnapshotProcessor, _super);

  function SnapshotProcessor(_subtype, _processors, name) {
    var _this = _super.call(this, name || _subtype.name) || this;

    Object.defineProperty(_this, "_subtype", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _subtype
    });
    Object.defineProperty(_this, "_processors", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _processors
    });
    return _this;
  }

  Object.defineProperty(SnapshotProcessor.prototype, "flags", {
    get: function () {
      return this._subtype.flags | TypeFlags.SnapshotProcessor;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(SnapshotProcessor.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return "snapshotProcessor(" + this._subtype.describe() + ")";
    }
  });
  Object.defineProperty(SnapshotProcessor.prototype, "preProcessSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (sn) {
      if (this._processors.preProcessor) {
        return this._processors.preProcessor.call(null, sn);
      }

      return sn;
    }
  });
  Object.defineProperty(SnapshotProcessor.prototype, "postProcessSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (sn) {
      if (this._processors.postProcessor) {
        return this._processors.postProcessor.call(null, sn);
      }

      return sn;
    }
  });
  Object.defineProperty(SnapshotProcessor.prototype, "_fixNode", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      var _this = this; // the node has to use these methods rather than the original type ones


      proxyNodeTypeMethods(node.type, this, "create");
      var oldGetSnapshot = node.getSnapshot;

      node.getSnapshot = function () {
        return _this.postProcessSnapshot(oldGetSnapshot.call(node));
      };
    }
  });
  Object.defineProperty(SnapshotProcessor.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      var processedInitialValue = isStateTreeNode(initialValue) ? initialValue : this.preProcessSnapshot(initialValue);

      var node = this._subtype.instantiate(parent, subpath, environment, processedInitialValue);

      this._fixNode(node);

      return node;
    }
  });
  Object.defineProperty(SnapshotProcessor.prototype, "reconcile", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (current, newValue, parent, subpath) {
      var node = this._subtype.reconcile(current, isStateTreeNode(newValue) ? newValue : this.preProcessSnapshot(newValue), parent, subpath);

      if (node !== current) {
        this._fixNode(node);
      }

      return node;
    }
  });
  Object.defineProperty(SnapshotProcessor.prototype, "getSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, applyPostProcess) {
      if (applyPostProcess === void 0) {
        applyPostProcess = true;
      }

      var sn = this._subtype.getSnapshot(node);

      return applyPostProcess ? this.postProcessSnapshot(sn) : sn;
    }
  });
  Object.defineProperty(SnapshotProcessor.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      var processedSn = this.preProcessSnapshot(value);
      return this._subtype.validate(processedSn, context);
    }
  });
  Object.defineProperty(SnapshotProcessor.prototype, "getSubTypes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this._subtype;
    }
  });
  Object.defineProperty(SnapshotProcessor.prototype, "is", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (thing) {
      var value = isType(thing) ? this._subtype : isStateTreeNode(thing) ? getSnapshot(thing, false) : this.preProcessSnapshot(thing);
      return this._subtype.validate(value, [{
        path: "",
        type: this._subtype
      }]).length === 0;
    }
  });
  Object.defineProperty(SnapshotProcessor.prototype, "isAssignableFrom", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (type) {
      return this._subtype.isAssignableFrom(type);
    }
  });
  return SnapshotProcessor;
}(BaseType);

function proxyNodeTypeMethods(nodeType, snapshotProcessorType) {
  var e_1, _a;

  var methods = [];

  for (var _i = 2; _i < arguments.length; _i++) {
    methods[_i - 2] = arguments[_i];
  }

  try {
    for (var methods_1 = __values(methods), methods_1_1 = methods_1.next(); !methods_1_1.done; methods_1_1 = methods_1.next()) {
      var method = methods_1_1.value;
      nodeType[method] = snapshotProcessorType[method].bind(snapshotProcessorType);
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (methods_1_1 && !methods_1_1.done && (_a = methods_1.return)) _a.call(methods_1);
    } finally {
      if (e_1) throw e_1.error;
    }
  }
}
/**
 * `types.snapshotProcessor` - Runs a pre/post snapshot processor before/after serializing a given type.
 *
 * Example:
 * ```ts
 * const Todo1 = types.model({ text: types.string })
 * // in the backend the text type must be null when empty
 * interface BackendTodo {
 *     text: string | null
 * }
 * const Todo2 = types.snapshotProcessor(Todo1, {
 *     // from snapshot to instance
 *     preProcessor(sn: BackendTodo) {
 *         return {
 *             text: sn.text || "";
 *         }
 *     },
 *     // from instance to snapshot
 *     postProcessor(sn): BackendTodo {
 *         return {
 *             text: !sn.text ? null : sn.text
 *         }
 *     }
 * })
 * ```
 *
 * @param type Type to run the processors over.
 * @param processors Processors to run.
 * @param name Type name, or undefined to inherit the inner type one.
 * @returns
 */


function snapshotProcessor(type, processors, name) {
  assertIsType(type, 1);

  if (devMode()) {
    if (processors.postProcessor && typeof processors.postProcessor !== "function") {
      // istanbul ignore next
      throw fail("postSnapshotProcessor must be a function");
    }

    if (processors.preProcessor && typeof processors.preProcessor !== "function") {
      // istanbul ignore next
      throw fail("preSnapshotProcessor must be a function");
    }
  }

  return new SnapshotProcessor(type, processors, name);
}

var needsIdentifierError = "Map.put can only be used to store complex values that have an identifier type attribute";

function tryCollectModelTypes(type, modelTypes) {
  var e_1, _a;

  var subtypes = type.getSubTypes();

  if (subtypes === cannotDetermineSubtype) {
    return false;
  }

  if (subtypes) {
    var subtypesArray = asArray(subtypes);

    try {
      for (var subtypesArray_1 = __values(subtypesArray), subtypesArray_1_1 = subtypesArray_1.next(); !subtypesArray_1_1.done; subtypesArray_1_1 = subtypesArray_1.next()) {
        var subtype = subtypesArray_1_1.value;
        if (!tryCollectModelTypes(subtype, modelTypes)) return false;
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (subtypesArray_1_1 && !subtypesArray_1_1.done && (_a = subtypesArray_1.return)) _a.call(subtypesArray_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
  }

  if (type instanceof ModelType) {
    modelTypes.push(type);
  }

  return true;
}
/**
 * @internal
 * @hidden
 */


var MapIdentifierMode;

(function (MapIdentifierMode) {
  MapIdentifierMode[MapIdentifierMode["UNKNOWN"] = 0] = "UNKNOWN";
  MapIdentifierMode[MapIdentifierMode["YES"] = 1] = "YES";
  MapIdentifierMode[MapIdentifierMode["NO"] = 2] = "NO";
})(MapIdentifierMode || (MapIdentifierMode = {}));

var MSTMap =
/** @class */
function (_super) {
  __extends(MSTMap, _super);

  function MSTMap(initialData) {
    return _super.call(this, initialData, mobx__WEBPACK_IMPORTED_MODULE_0__["observable"].ref.enhancer) || this;
  }

  Object.defineProperty(MSTMap.prototype, "get", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (key) {
      // maybe this is over-enthousiastic? normalize numeric keys to strings
      return _super.prototype.get.call(this, "" + key);
    }
  });
  Object.defineProperty(MSTMap.prototype, "has", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (key) {
      return _super.prototype.has.call(this, "" + key);
    }
  });
  Object.defineProperty(MSTMap.prototype, "delete", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (key) {
      return _super.prototype.delete.call(this, "" + key);
    }
  });
  Object.defineProperty(MSTMap.prototype, "set", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (key, value) {
      return _super.prototype.set.call(this, "" + key, value);
    }
  });
  Object.defineProperty(MSTMap.prototype, "put", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value) {
      if (!value) throw fail$1("Map.put cannot be used to set empty values");

      if (isStateTreeNode(value)) {
        var node = getStateTreeNode(value);

        if (devMode()) {
          if (!node.identifierAttribute) {
            throw fail$1(needsIdentifierError);
          }
        }

        if (node.identifier === null) {
          throw fail$1(needsIdentifierError);
        }

        this.set(node.identifier, value);
        return value;
      } else if (!isMutable(value)) {
        throw fail$1("Map.put can only be used to store complex values");
      } else {
        var mapNode = getStateTreeNode(this);
        var mapType = mapNode.type;

        if (mapType.identifierMode !== MapIdentifierMode.YES) {
          throw fail$1(needsIdentifierError);
        }

        var idAttr = mapType.mapIdentifierAttribute;
        var id = value[idAttr];

        if (!isValidIdentifier(id)) {
          // try again but this time after creating a node for the value
          // since it might be an optional identifier
          var newNode = this.put(mapType.getChildType().create(value, mapNode.environment));
          return this.put(getSnapshot(newNode));
        }

        var key = normalizeIdentifier(id);
        this.set(key, value);
        return this.get(key);
      }
    }
  });
  return MSTMap;
}(mobx__WEBPACK_IMPORTED_MODULE_0__["ObservableMap"]);
/**
 * @internal
 * @hidden
 */


var MapType =
/** @class */
function (_super) {
  __extends(MapType, _super);

  function MapType(name, _subType, hookInitializers) {
    if (hookInitializers === void 0) {
      hookInitializers = [];
    }

    var _this = _super.call(this, name) || this;

    Object.defineProperty(_this, "_subType", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _subType
    });
    Object.defineProperty(_this, "identifierMode", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: MapIdentifierMode.UNKNOWN
    });
    Object.defineProperty(_this, "mapIdentifierAttribute", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: undefined
    });
    Object.defineProperty(_this, "flags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: TypeFlags.Map
    });
    Object.defineProperty(_this, "hookInitializers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });

    _this._determineIdentifierMode();

    _this.hookInitializers = hookInitializers;
    return _this;
  }

  Object.defineProperty(MapType.prototype, "hooks", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (hooks) {
      var hookInitializers = this.hookInitializers.length > 0 ? this.hookInitializers.concat(hooks) : [hooks];
      return new MapType(this.name, this._subType, hookInitializers);
    }
  });
  Object.defineProperty(MapType.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      this._determineIdentifierMode();

      return createObjectNode(this, parent, subpath, environment, initialValue);
    }
  });
  Object.defineProperty(MapType.prototype, "_determineIdentifierMode", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      if (this.identifierMode !== MapIdentifierMode.UNKNOWN) {
        return;
      }

      var modelTypes = [];

      if (tryCollectModelTypes(this._subType, modelTypes)) {
        var identifierAttribute_1 = undefined;
        modelTypes.forEach(function (type) {
          if (type.identifierAttribute) {
            if (identifierAttribute_1 && identifierAttribute_1 !== type.identifierAttribute) {
              throw fail$1("The objects in a map should all have the same identifier attribute, expected '" + identifierAttribute_1 + "', but child of type '" + type.name + "' declared attribute '" + type.identifierAttribute + "' as identifier");
            }

            identifierAttribute_1 = type.identifierAttribute;
          }
        });

        if (identifierAttribute_1) {
          this.identifierMode = MapIdentifierMode.YES;
          this.mapIdentifierAttribute = identifierAttribute_1;
        } else {
          this.identifierMode = MapIdentifierMode.NO;
        }
      }
    }
  });
  Object.defineProperty(MapType.prototype, "initializeChildNodes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (objNode, initialSnapshot) {
      if (initialSnapshot === void 0) {
        initialSnapshot = {};
      }

      var subType = objNode.type._subType;
      var result = {};
      Object.keys(initialSnapshot).forEach(function (name) {
        result[name] = subType.instantiate(objNode, name, undefined, initialSnapshot[name]);
      });
      return result;
    }
  });
  Object.defineProperty(MapType.prototype, "createNewInstance", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (childNodes) {
      return new MSTMap(childNodes);
    }
  });
  Object.defineProperty(MapType.prototype, "finalizeNewInstance", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, instance) {
      Object(mobx__WEBPACK_IMPORTED_MODULE_0__["_interceptReads"])(instance, node.unbox);

      var type = node.type;
      type.hookInitializers.forEach(function (initializer) {
        var hooks = initializer(instance);
        Object.keys(hooks).forEach(function (name) {
          var hook = hooks[name];
          var actionInvoker = createActionInvoker(instance, name, hook);
          (!devMode() ? addHiddenFinalProp : addHiddenWritableProp)(instance, name, actionInvoker);
        });
      });
      Object(mobx__WEBPACK_IMPORTED_MODULE_0__["intercept"])(instance, this.willChange);
      Object(mobx__WEBPACK_IMPORTED_MODULE_0__["observe"])(instance, this.didChange);
    }
  });
  Object.defineProperty(MapType.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return "Map<string, " + this._subType.describe() + ">";
    }
  });
  Object.defineProperty(MapType.prototype, "getChildren", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      // return (node.storedValue as ObservableMap<any>).values()
      return Object(mobx__WEBPACK_IMPORTED_MODULE_0__["values"])(node.storedValue);
    }
  });
  Object.defineProperty(MapType.prototype, "getChildNode", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, key) {
      var childNode = node.storedValue.get("" + key);
      if (!childNode) throw fail$1("Not a child " + key);
      return childNode;
    }
  });
  Object.defineProperty(MapType.prototype, "willChange", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (change) {
      var node = getStateTreeNode(change.object);
      var key = change.name;
      node.assertWritable({
        subpath: key
      });
      var mapType = node.type;
      var subType = mapType._subType;

      switch (change.type) {
        case "update":
          {
            var newValue = change.newValue;
            var oldValue = change.object.get(key);
            if (newValue === oldValue) return null;
            typecheckInternal(subType, newValue);
            change.newValue = subType.reconcile(node.getChildNode(key), change.newValue, node, key);
            mapType.processIdentifier(key, change.newValue);
          }
          break;

        case "add":
          {
            typecheckInternal(subType, change.newValue);
            change.newValue = subType.instantiate(node, key, undefined, change.newValue);
            mapType.processIdentifier(key, change.newValue);
          }
          break;
      }

      return change;
    }
  });
  Object.defineProperty(MapType.prototype, "processIdentifier", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (expected, node) {
      if (this.identifierMode === MapIdentifierMode.YES && node instanceof ObjectNode) {
        var identifier = node.identifier;
        if (identifier !== expected) throw fail$1("A map of objects containing an identifier should always store the object under their own identifier. Trying to store key '" + identifier + "', but expected: '" + expected + "'");
      }
    }
  });
  Object.defineProperty(MapType.prototype, "getSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      var res = {};
      node.getChildren().forEach(function (childNode) {
        res[childNode.subpath] = childNode.snapshot;
      });
      return res;
    }
  });
  Object.defineProperty(MapType.prototype, "processInitialSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (childNodes) {
      var processed = {};
      Object.keys(childNodes).forEach(function (key) {
        processed[key] = childNodes[key].getSnapshot();
      });
      return processed;
    }
  });
  Object.defineProperty(MapType.prototype, "didChange", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (change) {
      var node = getStateTreeNode(change.object);

      switch (change.type) {
        case "update":
          return void node.emitPatch({
            op: "replace",
            path: escapeJsonPath(change.name),
            value: change.newValue.snapshot,
            oldValue: change.oldValue ? change.oldValue.snapshot : undefined
          }, node);

        case "add":
          return void node.emitPatch({
            op: "add",
            path: escapeJsonPath(change.name),
            value: change.newValue.snapshot,
            oldValue: undefined
          }, node);

        case "delete":
          // a node got deleted, get the old snapshot and make the node die
          var oldSnapshot = change.oldValue.snapshot;
          change.oldValue.die(); // emit the patch

          return void node.emitPatch({
            op: "remove",
            path: escapeJsonPath(change.name),
            oldValue: oldSnapshot
          }, node);
      }
    }
  });
  Object.defineProperty(MapType.prototype, "applyPatchLocally", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, subpath, patch) {
      var target = node.storedValue;

      switch (patch.op) {
        case "add":
        case "replace":
          target.set(subpath, patch.value);
          break;

        case "remove":
          target.delete(subpath);
          break;
      }
    }
  });
  Object.defineProperty(MapType.prototype, "applySnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, snapshot) {
      typecheckInternal(this, snapshot);
      var target = node.storedValue;
      var currentKeys = {};
      Array.from(target.keys()).forEach(function (key) {
        currentKeys[key] = false;
      });

      if (snapshot) {
        // Don't use target.replace, as it will throw away all existing items first
        for (var key in snapshot) {
          target.set(key, snapshot[key]);
          currentKeys["" + key] = true;
        }
      }

      Object.keys(currentKeys).forEach(function (key) {
        if (currentKeys[key] === false) target.delete(key);
      });
    }
  });
  Object.defineProperty(MapType.prototype, "getChildType", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this._subType;
    }
  });
  Object.defineProperty(MapType.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      var _this = this;

      if (!isPlainObject(value)) {
        return typeCheckFailure(context, value, "Value is not a plain object");
      }

      return flattenTypeErrors(Object.keys(value).map(function (path) {
        return _this._subType.validate(value[path], getContextForPath(context, path, _this._subType));
      }));
    }
  });
  Object.defineProperty(MapType.prototype, "getDefaultSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return EMPTY_OBJECT;
    }
  });
  Object.defineProperty(MapType.prototype, "removeChild", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, subpath) {
      node.storedValue.delete(subpath);
    }
  });
  return MapType;
}(ComplexType);

MapType.prototype.applySnapshot = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["action"])(MapType.prototype.applySnapshot);
/**
 * `types.map` - Creates a key based collection type who's children are all of a uniform declared type.
 * If the type stored in a map has an identifier, it is mandatory to store the child under that identifier in the map.
 *
 * This type will always produce [observable maps](https://mobx.js.org/refguide/map.html)
 *
 * Example:
 * ```ts
 * const Todo = types.model({
 *   id: types.identifier,
 *   task: types.string
 * })
 *
 * const TodoStore = types.model({
 *   todos: types.map(Todo)
 * })
 *
 * const s = TodoStore.create({ todos: {} })
 * unprotect(s)
 * s.todos.set(17, { task: "Grab coffee", id: 17 })
 * s.todos.put({ task: "Grab cookie", id: 18 }) // put will infer key from the identifier
 * console.log(s.todos.get(17).task) // prints: "Grab coffee"
 * ```
 *
 * @param subtype
 * @returns
 */

function map(subtype) {
  return new MapType("map<string, " + subtype.name + ">", subtype);
}
/**
 * Returns if a given value represents a map type.
 *
 * @param type
 * @returns `true` if it is a map type.
 */


function isMapType(type) {
  return isType(type) && (type.flags & TypeFlags.Map) > 0;
}
/**
 * @internal
 * @hidden
 */


var ArrayType =
/** @class */
function (_super) {
  __extends(ArrayType, _super);

  function ArrayType(name, _subType, hookInitializers) {
    if (hookInitializers === void 0) {
      hookInitializers = [];
    }

    var _this = _super.call(this, name) || this;

    Object.defineProperty(_this, "_subType", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _subType
    });
    Object.defineProperty(_this, "flags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: TypeFlags.Array
    });
    Object.defineProperty(_this, "hookInitializers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    _this.hookInitializers = hookInitializers;
    return _this;
  }

  Object.defineProperty(ArrayType.prototype, "hooks", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (hooks) {
      var hookInitializers = this.hookInitializers.length > 0 ? this.hookInitializers.concat(hooks) : [hooks];
      return new ArrayType(this.name, this._subType, hookInitializers);
    }
  });
  Object.defineProperty(ArrayType.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      return createObjectNode(this, parent, subpath, environment, initialValue);
    }
  });
  Object.defineProperty(ArrayType.prototype, "initializeChildNodes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (objNode, snapshot) {
      if (snapshot === void 0) {
        snapshot = [];
      }

      var subType = objNode.type._subType;
      var result = {};
      snapshot.forEach(function (item, index) {
        var subpath = "" + index;
        result[subpath] = subType.instantiate(objNode, subpath, undefined, item);
      });
      return result;
    }
  });
  Object.defineProperty(ArrayType.prototype, "createNewInstance", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (childNodes) {
      return mobx__WEBPACK_IMPORTED_MODULE_0__["observable"].array(convertChildNodesToArray(childNodes), mobxShallow);
    }
  });
  Object.defineProperty(ArrayType.prototype, "finalizeNewInstance", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, instance) {
      Object(mobx__WEBPACK_IMPORTED_MODULE_0__["_getAdministration"])(instance).dehancer = node.unbox;
      var type = node.type;
      type.hookInitializers.forEach(function (initializer) {
        var hooks = initializer(instance);
        Object.keys(hooks).forEach(function (name) {
          var hook = hooks[name];
          var actionInvoker = createActionInvoker(instance, name, hook);
          (!devMode() ? addHiddenFinalProp : addHiddenWritableProp)(instance, name, actionInvoker);
        });
      });
      Object(mobx__WEBPACK_IMPORTED_MODULE_0__["intercept"])(instance, this.willChange);
      Object(mobx__WEBPACK_IMPORTED_MODULE_0__["observe"])(instance, this.didChange);
    }
  });
  Object.defineProperty(ArrayType.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this._subType.describe() + "[]";
    }
  });
  Object.defineProperty(ArrayType.prototype, "getChildren", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      return node.storedValue.slice();
    }
  });
  Object.defineProperty(ArrayType.prototype, "getChildNode", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, key) {
      var index = Number(key);
      if (index < node.storedValue.length) return node.storedValue[index];
      throw fail$1("Not a child: " + key);
    }
  });
  Object.defineProperty(ArrayType.prototype, "willChange", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (change) {
      var node = getStateTreeNode(change.object);
      node.assertWritable({
        subpath: "" + change.index
      });
      var subType = node.type._subType;
      var childNodes = node.getChildren();

      switch (change.type) {
        case "update":
          {
            if (change.newValue === change.object[change.index]) return null;
            var updatedNodes = reconcileArrayChildren(node, subType, [childNodes[change.index]], [change.newValue], [change.index]);

            if (!updatedNodes) {
              return null;
            }

            change.newValue = updatedNodes[0];
          }
          break;

        case "splice":
          {
            var index_1 = change.index,
                removedCount = change.removedCount,
                added = change.added;
            var addedNodes = reconcileArrayChildren(node, subType, childNodes.slice(index_1, index_1 + removedCount), added, added.map(function (_, i) {
              return index_1 + i;
            }));

            if (!addedNodes) {
              return null;
            }

            change.added = addedNodes; // update paths of remaining items

            for (var i = index_1 + removedCount; i < childNodes.length; i++) {
              childNodes[i].setParent(node, "" + (i + added.length - removedCount));
            }
          }
          break;
      }

      return change;
    }
  });
  Object.defineProperty(ArrayType.prototype, "getSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      return node.getChildren().map(function (childNode) {
        return childNode.snapshot;
      });
    }
  });
  Object.defineProperty(ArrayType.prototype, "processInitialSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (childNodes) {
      var processed = [];
      Object.keys(childNodes).forEach(function (key) {
        processed.push(childNodes[key].getSnapshot());
      });
      return processed;
    }
  });
  Object.defineProperty(ArrayType.prototype, "didChange", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (change) {
      var node = getStateTreeNode(change.object);

      switch (change.type) {
        case "update":
          return void node.emitPatch({
            op: "replace",
            path: "" + change.index,
            value: change.newValue.snapshot,
            oldValue: change.oldValue ? change.oldValue.snapshot : undefined
          }, node);

        case "splice":
          for (var i = change.removedCount - 1; i >= 0; i--) node.emitPatch({
            op: "remove",
            path: "" + (change.index + i),
            oldValue: change.removed[i].snapshot
          }, node);

          for (var i = 0; i < change.addedCount; i++) node.emitPatch({
            op: "add",
            path: "" + (change.index + i),
            value: node.getChildNode("" + (change.index + i)).snapshot,
            oldValue: undefined
          }, node);

          return;
      }
    }
  });
  Object.defineProperty(ArrayType.prototype, "applyPatchLocally", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, subpath, patch) {
      var target = node.storedValue;
      var index = subpath === "-" ? target.length : Number(subpath);

      switch (patch.op) {
        case "replace":
          target[index] = patch.value;
          break;

        case "add":
          target.splice(index, 0, patch.value);
          break;

        case "remove":
          target.splice(index, 1);
          break;
      }
    }
  });
  Object.defineProperty(ArrayType.prototype, "applySnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, snapshot) {
      typecheckInternal(this, snapshot);
      var target = node.storedValue;
      target.replace(snapshot);
    }
  });
  Object.defineProperty(ArrayType.prototype, "getChildType", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this._subType;
    }
  });
  Object.defineProperty(ArrayType.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      var _this = this;

      if (!isArray(value)) {
        return typeCheckFailure(context, value, "Value is not an array");
      }

      return flattenTypeErrors(value.map(function (item, index) {
        return _this._subType.validate(item, getContextForPath(context, "" + index, _this._subType));
      }));
    }
  });
  Object.defineProperty(ArrayType.prototype, "getDefaultSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return EMPTY_ARRAY;
    }
  });
  Object.defineProperty(ArrayType.prototype, "removeChild", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, subpath) {
      node.storedValue.splice(Number(subpath), 1);
    }
  });
  return ArrayType;
}(ComplexType);

ArrayType.prototype.applySnapshot = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["action"])(ArrayType.prototype.applySnapshot);
/**
 * `types.array` - Creates an index based collection type who's children are all of a uniform declared type.
 *
 * This type will always produce [observable arrays](https://mobx.js.org/refguide/array.html)
 *
 * Example:
 * ```ts
 * const Todo = types.model({
 *   task: types.string
 * })
 *
 * const TodoStore = types.model({
 *   todos: types.array(Todo)
 * })
 *
 * const s = TodoStore.create({ todos: [] })
 * unprotect(s) // needed to allow modifying outside of an action
 * s.todos.push({ task: "Grab coffee" })
 * console.log(s.todos[0]) // prints: "Grab coffee"
 * ```
 *
 * @param subtype
 * @returns
 */

function array(subtype) {
  assertIsType(subtype, 1);
  return new ArrayType(subtype.name + "[]", subtype);
}

function reconcileArrayChildren(parent, childType, oldNodes, newValues, newPaths) {
  var nothingChanged = true;

  for (var i = 0;; i++) {
    var hasNewNode = i <= newValues.length - 1;
    var oldNode = oldNodes[i];
    var newValue = hasNewNode ? newValues[i] : undefined;
    var newPath = "" + newPaths[i]; // for some reason, instead of newValue we got a node, fallback to the storedValue
    // TODO: https://github.com/mobxjs/mobx-state-tree/issues/340#issuecomment-325581681

    if (isNode(newValue)) newValue = newValue.storedValue;

    if (!oldNode && !hasNewNode) {
      // both are empty, end
      break;
    } else if (!hasNewNode) {
      // new one does not exists
      nothingChanged = false;
      oldNodes.splice(i, 1);

      if (oldNode instanceof ObjectNode) {
        // since it is going to be returned by pop/splice/shift better create it before killing it
        // so it doesn't end up in an undead state
        oldNode.createObservableInstanceIfNeeded();
      }

      oldNode.die();
      i--;
    } else if (!oldNode) {
      // there is no old node, create it
      // check if already belongs to the same parent. if so, avoid pushing item in. only swapping can occur.
      if (isStateTreeNode(newValue) && getStateTreeNode(newValue).parent === parent) {
        // this node is owned by this parent, but not in the reconcilable set, so it must be double
        throw fail$1("Cannot add an object to a state tree if it is already part of the same or another state tree. Tried to assign an object to '" + parent.path + "/" + newPath + "', but it lives already at '" + getStateTreeNode(newValue).path + "'");
      }

      nothingChanged = false;
      var newNode = valueAsNode(childType, parent, newPath, newValue);
      oldNodes.splice(i, 0, newNode);
    } else if (areSame(oldNode, newValue)) {
      // both are the same, reconcile
      oldNodes[i] = valueAsNode(childType, parent, newPath, newValue, oldNode);
    } else {
      // nothing to do, try to reorder
      var oldMatch = undefined; // find a possible candidate to reuse

      for (var j = i; j < oldNodes.length; j++) {
        if (areSame(oldNodes[j], newValue)) {
          oldMatch = oldNodes.splice(j, 1)[0];
          break;
        }
      }

      nothingChanged = false;
      var newNode = valueAsNode(childType, parent, newPath, newValue, oldMatch);
      oldNodes.splice(i, 0, newNode);
    }
  }

  return nothingChanged ? null : oldNodes;
}
/**
 * Convert a value to a node at given parent and subpath. Attempts to reuse old node if possible and given.
 */


function valueAsNode(childType, parent, subpath, newValue, oldNode) {
  // ensure the value is valid-ish
  typecheckInternal(childType, newValue);

  function getNewNode() {
    // the new value has a MST node
    if (isStateTreeNode(newValue)) {
      var childNode = getStateTreeNode(newValue);
      childNode.assertAlive(EMPTY_OBJECT); // the node lives here

      if (childNode.parent !== null && childNode.parent === parent) {
        childNode.setParent(parent, subpath);
        return childNode;
      }
    } // there is old node and new one is a value/snapshot


    if (oldNode) {
      return childType.reconcile(oldNode, newValue, parent, subpath);
    } // nothing to do, create from scratch


    return childType.instantiate(parent, subpath, undefined, newValue);
  }

  var newNode = getNewNode();

  if (oldNode && oldNode !== newNode) {
    if (oldNode instanceof ObjectNode) {
      // since it is going to be returned by pop/splice/shift better create it before killing it
      // so it doesn't end up in an undead state
      oldNode.createObservableInstanceIfNeeded();
    }

    oldNode.die();
  }

  return newNode;
}
/**
 * Check if a node holds a value.
 */


function areSame(oldNode, newValue) {
  // never consider dead old nodes for reconciliation
  if (!oldNode.isAlive) {
    return false;
  } // the new value has the same node


  if (isStateTreeNode(newValue)) {
    var newNode = getStateTreeNode(newValue);
    return newNode.isAlive && newNode === oldNode;
  } // the provided value is the snapshot of the old node


  if (oldNode.snapshot === newValue) {
    return true;
  } // new value is a snapshot with the correct identifier


  return oldNode instanceof ObjectNode && oldNode.identifier !== null && oldNode.identifierAttribute && isPlainObject(newValue) && oldNode.identifier === normalizeIdentifier(newValue[oldNode.identifierAttribute]) && oldNode.type.is(newValue);
}
/**
 * Returns if a given value represents an array type.
 *
 * @param type
 * @returns `true` if the type is an array type.
 */


function isArrayType(type) {
  return isType(type) && (type.flags & TypeFlags.Array) > 0;
}

var PRE_PROCESS_SNAPSHOT = "preProcessSnapshot";
var POST_PROCESS_SNAPSHOT = "postProcessSnapshot";

function objectTypeToString() {
  return getStateTreeNode(this).toString();
}

var defaultObjectOptions = {
  name: "AnonymousModel",
  properties: {},
  initializers: EMPTY_ARRAY
};

function toPropertiesObject(declaredProps) {
  // loop through properties and ensures that all items are types
  return Object.keys(declaredProps).reduce(function (props, key) {
    var _a, _b, _c; // warn if user intended a HOOK


    if (key in Hook) throw fail$1("Hook '" + key + "' was defined as property. Hooks should be defined as part of the actions"); // the user intended to use a view

    var descriptor = Object.getOwnPropertyDescriptor(props, key);

    if ("get" in descriptor) {
      throw fail$1("Getters are not supported as properties. Please use views instead");
    } // undefined and null are not valid


    var value = descriptor.value;

    if (value === null || value === undefined) {
      throw fail$1("The default value of an attribute cannot be null or undefined as the type cannot be inferred. Did you mean `types.maybe(someType)`?"); // its a primitive, convert to its type
    } else if (isPrimitive(value)) {
      return Object.assign({}, props, (_a = {}, _a[key] = optional(getPrimitiveFactoryFromValue(value), value), _a)); // map defaults to empty object automatically for models
    } else if (value instanceof MapType) {
      return Object.assign({}, props, (_b = {}, _b[key] = optional(value, {}), _b));
    } else if (value instanceof ArrayType) {
      return Object.assign({}, props, (_c = {}, _c[key] = optional(value, []), _c)); // its already a type
    } else if (isType(value)) {
      return props; // its a function, maybe the user wanted a view?
    } else if (devMode() && typeof value === "function") {
      throw fail$1("Invalid type definition for property '" + key + "', it looks like you passed a function. Did you forget to invoke it, or did you intend to declare a view / action?"); // no other complex values
    } else if (devMode() && typeof value === "object") {
      throw fail$1("Invalid type definition for property '" + key + "', it looks like you passed an object. Try passing another model type or a types.frozen."); // WTF did you pass in mate?
    } else {
      throw fail$1("Invalid type definition for property '" + key + "', cannot infer a type from a value like '" + value + "' (" + typeof value + ")");
    }
  }, declaredProps);
}
/**
 * @internal
 * @hidden
 */


var ModelType =
/** @class */
function (_super) {
  __extends(ModelType, _super);

  function ModelType(opts) {
    var _this = _super.call(this, opts.name || defaultObjectOptions.name) || this;

    Object.defineProperty(_this, "flags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: TypeFlags.Object
    });
    /*
     * The original object definition
     */

    Object.defineProperty(_this, "initializers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "properties", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "preProcessor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "postProcessor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "propertyNames", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "named", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: function (name) {
        return _this.cloneAndEnhance({
          name: name
        });
      }
    });
    Object.defineProperty(_this, "props", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: function (properties) {
        return _this.cloneAndEnhance({
          properties: properties
        });
      }
    });
    Object.defineProperty(_this, "preProcessSnapshot", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: function (preProcessor) {
        var currentPreprocessor = _this.preProcessor;
        if (!currentPreprocessor) return _this.cloneAndEnhance({
          preProcessor: preProcessor
        });else return _this.cloneAndEnhance({
          preProcessor: function (snapshot) {
            return currentPreprocessor(preProcessor(snapshot));
          }
        });
      }
    });
    Object.defineProperty(_this, "postProcessSnapshot", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: function (postProcessor) {
        var currentPostprocessor = _this.postProcessor;
        if (!currentPostprocessor) return _this.cloneAndEnhance({
          postProcessor: postProcessor
        });else return _this.cloneAndEnhance({
          postProcessor: function (snapshot) {
            return postProcessor(currentPostprocessor(snapshot));
          }
        });
      }
    });
    Object.assign(_this, defaultObjectOptions, opts); // ensures that any default value gets converted to its related type

    _this.properties = toPropertiesObject(_this.properties);
    freeze(_this.properties); // make sure nobody messes with it

    _this.propertyNames = Object.keys(_this.properties);
    _this.identifierAttribute = _this._getIdentifierAttribute();
    return _this;
  }

  Object.defineProperty(ModelType.prototype, "_getIdentifierAttribute", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var identifierAttribute = undefined;
      this.forAllProps(function (propName, propType) {
        if (propType.flags & TypeFlags.Identifier) {
          if (identifierAttribute) throw fail$1("Cannot define property '" + propName + "' as object identifier, property '" + identifierAttribute + "' is already defined as identifier property");
          identifierAttribute = propName;
        }
      });
      return identifierAttribute;
    }
  });
  Object.defineProperty(ModelType.prototype, "cloneAndEnhance", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (opts) {
      return new ModelType({
        name: opts.name || this.name,
        properties: Object.assign({}, this.properties, opts.properties),
        initializers: this.initializers.concat(opts.initializers || []),
        preProcessor: opts.preProcessor || this.preProcessor,
        postProcessor: opts.postProcessor || this.postProcessor
      });
    }
  });
  Object.defineProperty(ModelType.prototype, "actions", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (fn) {
      var _this = this;

      var actionInitializer = function (self) {
        _this.instantiateActions(self, fn(self));

        return self;
      };

      return this.cloneAndEnhance({
        initializers: [actionInitializer]
      });
    }
  });
  Object.defineProperty(ModelType.prototype, "instantiateActions", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (self, actions) {
      // check if return is correct
      if (!isPlainObject(actions)) throw fail$1("actions initializer should return a plain object containing actions"); // bind actions to the object created

      Object.keys(actions).forEach(function (name) {
        // warn if preprocessor was given
        if (name === PRE_PROCESS_SNAPSHOT) throw fail$1("Cannot define action '" + PRE_PROCESS_SNAPSHOT + "', it should be defined using 'type.preProcessSnapshot(fn)' instead"); // warn if postprocessor was given

        if (name === POST_PROCESS_SNAPSHOT) throw fail$1("Cannot define action '" + POST_PROCESS_SNAPSHOT + "', it should be defined using 'type.postProcessSnapshot(fn)' instead");
        var action2 = actions[name]; // apply hook composition

        var baseAction = self[name];

        if (name in Hook && baseAction) {
          var specializedAction_1 = action2;

          action2 = function () {
            baseAction.apply(null, arguments);
            specializedAction_1.apply(null, arguments);
          };
        } // the goal of this is to make sure actions using "this" can call themselves,
        // while still allowing the middlewares to register them


        var middlewares = action2.$mst_middleware; // make sure middlewares are not lost

        var boundAction = action2.bind(actions);
        boundAction.$mst_middleware = middlewares;
        var actionInvoker = createActionInvoker(self, name, boundAction);
        actions[name] = actionInvoker;
        (!devMode() ? addHiddenFinalProp : addHiddenWritableProp)(self, name, actionInvoker);
      });
    }
  });
  Object.defineProperty(ModelType.prototype, "volatile", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (fn) {
      var _this = this;

      if (typeof fn !== "function") {
        throw fail$1("You passed an " + typeof fn + " to volatile state as an argument, when function is expected");
      }

      var stateInitializer = function (self) {
        _this.instantiateVolatileState(self, fn(self));

        return self;
      };

      return this.cloneAndEnhance({
        initializers: [stateInitializer]
      });
    }
  });
  Object.defineProperty(ModelType.prototype, "instantiateVolatileState", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (self, state) {
      // check views return
      if (!isPlainObject(state)) throw fail$1("volatile state initializer should return a plain object containing state");
      Object(mobx__WEBPACK_IMPORTED_MODULE_0__["set"])(self, state);
    }
  });
  Object.defineProperty(ModelType.prototype, "extend", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (fn) {
      var _this = this;

      var initializer = function (self) {
        var _a = fn(self),
            actions = _a.actions,
            views = _a.views,
            state = _a.state,
            rest = __rest(_a, ["actions", "views", "state"]);

        for (var key in rest) throw fail$1("The `extend` function should return an object with a subset of the fields 'actions', 'views' and 'state'. Found invalid key '" + key + "'");

        if (state) _this.instantiateVolatileState(self, state);
        if (views) _this.instantiateViews(self, views);
        if (actions) _this.instantiateActions(self, actions);
        return self;
      };

      return this.cloneAndEnhance({
        initializers: [initializer]
      });
    }
  });
  Object.defineProperty(ModelType.prototype, "views", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (fn) {
      var _this = this;

      var viewInitializer = function (self) {
        _this.instantiateViews(self, fn(self));

        return self;
      };

      return this.cloneAndEnhance({
        initializers: [viewInitializer]
      });
    }
  });
  Object.defineProperty(ModelType.prototype, "instantiateViews", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (self, views) {
      // check views return
      if (!isPlainObject(views)) throw fail$1("views initializer should return a plain object containing views");
      Object.keys(views).forEach(function (key) {
        var _a; // is this a computed property?


        var descriptor = Object.getOwnPropertyDescriptor(views, key);

        if ("get" in descriptor) {
          if (Object(mobx__WEBPACK_IMPORTED_MODULE_0__["isComputedProp"])(self, key)) {
            var computedValue = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["_getAdministration"])(self, key); // TODO: mobx currently does not allow redefining computes yet, pending #1121
            // FIXME: this binds to the internals of mobx!


            computedValue.derivation = descriptor.get;
            computedValue.scope = self;
            if (descriptor.set) computedValue.setter = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["action"])(computedValue.name + "-setter", descriptor.set);
          } else {
            Object.defineProperty(self, key, descriptor);
            Object(mobx__WEBPACK_IMPORTED_MODULE_0__["makeObservable"])(self, (_a = {}, _a[key] = mobx__WEBPACK_IMPORTED_MODULE_0__["computed"], _a));
          }
        } else if (typeof descriptor.value === "function") {
          (!devMode() ? addHiddenFinalProp : addHiddenWritableProp)(self, key, descriptor.value);
        } else {
          throw fail$1("A view member should either be a function or getter based property");
        }
      });
    }
  });
  Object.defineProperty(ModelType.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      var value = isStateTreeNode(initialValue) ? initialValue : this.applySnapshotPreProcessor(initialValue);
      return createObjectNode(this, parent, subpath, environment, value); // Optimization: record all prop- view- and action names after first construction, and generate an optimal base class
      // that pre-reserves all these fields for fast object-member lookups
    }
  });
  Object.defineProperty(ModelType.prototype, "initializeChildNodes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (objNode, initialSnapshot) {
      if (initialSnapshot === void 0) {
        initialSnapshot = {};
      }

      var type = objNode.type;
      var result = {};
      type.forAllProps(function (name, childType) {
        result[name] = childType.instantiate(objNode, name, undefined, initialSnapshot[name]);
      });
      return result;
    }
  });
  Object.defineProperty(ModelType.prototype, "createNewInstance", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (childNodes) {
      return mobx__WEBPACK_IMPORTED_MODULE_0__["observable"].object(childNodes, EMPTY_OBJECT, mobxShallow);
    }
  });
  Object.defineProperty(ModelType.prototype, "finalizeNewInstance", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, instance) {
      addHiddenFinalProp(instance, "toString", objectTypeToString);
      this.forAllProps(function (name) {
        Object(mobx__WEBPACK_IMPORTED_MODULE_0__["_interceptReads"])(instance, name, node.unbox);
      });
      this.initializers.reduce(function (self, fn) {
        return fn(self);
      }, instance);
      Object(mobx__WEBPACK_IMPORTED_MODULE_0__["intercept"])(instance, this.willChange);
      Object(mobx__WEBPACK_IMPORTED_MODULE_0__["observe"])(instance, this.didChange);
    }
  });
  Object.defineProperty(ModelType.prototype, "willChange", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (chg) {
      // TODO: mobx typings don't seem to take into account that newValue can be set even when removing a prop
      var change = chg;
      var node = getStateTreeNode(change.object);
      var subpath = change.name;
      node.assertWritable({
        subpath: subpath
      });
      var childType = node.type.properties[subpath]; // only properties are typed, state are stored as-is references

      if (childType) {
        typecheckInternal(childType, change.newValue);
        change.newValue = childType.reconcile(node.getChildNode(subpath), change.newValue, node, subpath);
      }

      return change;
    }
  });
  Object.defineProperty(ModelType.prototype, "didChange", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (chg) {
      // TODO: mobx typings don't seem to take into account that newValue can be set even when removing a prop
      var change = chg;
      var childNode = getStateTreeNode(change.object);
      var childType = childNode.type.properties[change.name];

      if (!childType) {
        // don't emit patches for volatile state
        return;
      }

      var oldChildValue = change.oldValue ? change.oldValue.snapshot : undefined;
      childNode.emitPatch({
        op: "replace",
        path: escapeJsonPath(change.name),
        value: change.newValue.snapshot,
        oldValue: oldChildValue
      }, childNode);
    }
  });
  Object.defineProperty(ModelType.prototype, "getChildren", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      var _this = this;

      var res = [];
      this.forAllProps(function (name) {
        res.push(_this.getChildNode(node, name));
      });
      return res;
    }
  });
  Object.defineProperty(ModelType.prototype, "getChildNode", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, key) {
      if (!(key in this.properties)) throw fail$1("Not a value property: " + key);

      var adm = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["_getAdministration"])(node.storedValue, key);

      var childNode = adm.raw();
      if (!childNode) throw fail$1("Node not available for property " + key);
      return childNode;
    }
  });
  Object.defineProperty(ModelType.prototype, "getSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, applyPostProcess) {
      var _this = this;

      if (applyPostProcess === void 0) {
        applyPostProcess = true;
      }

      var res = {};
      this.forAllProps(function (name, type) {
        Object(mobx__WEBPACK_IMPORTED_MODULE_0__["getAtom"])(node.storedValue, name).reportObserved();
        res[name] = _this.getChildNode(node, name).snapshot;
      });

      if (applyPostProcess) {
        return this.applySnapshotPostProcessor(res);
      }

      return res;
    }
  });
  Object.defineProperty(ModelType.prototype, "processInitialSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (childNodes) {
      var processed = {};
      Object.keys(childNodes).forEach(function (key) {
        processed[key] = childNodes[key].getSnapshot();
      });
      return this.applySnapshotPostProcessor(processed);
    }
  });
  Object.defineProperty(ModelType.prototype, "applyPatchLocally", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, subpath, patch) {
      if (!(patch.op === "replace" || patch.op === "add")) {
        throw fail$1("object does not support operation " + patch.op);
      }

      node.storedValue[subpath] = patch.value;
    }
  });
  Object.defineProperty(ModelType.prototype, "applySnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, snapshot) {
      var preProcessedSnapshot = this.applySnapshotPreProcessor(snapshot);
      typecheckInternal(this, preProcessedSnapshot);
      this.forAllProps(function (name) {
        node.storedValue[name] = preProcessedSnapshot[name];
      });
    }
  });
  Object.defineProperty(ModelType.prototype, "applySnapshotPreProcessor", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (snapshot) {
      var processor = this.preProcessor;
      return processor ? processor.call(null, snapshot) : snapshot;
    }
  });
  Object.defineProperty(ModelType.prototype, "applySnapshotPostProcessor", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (snapshot) {
      var postProcessor = this.postProcessor;
      if (postProcessor) return postProcessor.call(null, snapshot);
      return snapshot;
    }
  });
  Object.defineProperty(ModelType.prototype, "getChildType", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (propertyName) {
      assertIsString(propertyName, 1);
      return this.properties[propertyName];
    }
  });
  Object.defineProperty(ModelType.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      var _this = this;

      var snapshot = this.applySnapshotPreProcessor(value);

      if (!isPlainObject(snapshot)) {
        return typeCheckFailure(context, snapshot, "Value is not a plain object");
      }

      return flattenTypeErrors(this.propertyNames.map(function (key) {
        return _this.properties[key].validate(snapshot[key], getContextForPath(context, key, _this.properties[key]));
      }));
    }
  });
  Object.defineProperty(ModelType.prototype, "forAllProps", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (fn) {
      var _this = this;

      this.propertyNames.forEach(function (key) {
        return fn(key, _this.properties[key]);
      });
    }
  });
  Object.defineProperty(ModelType.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var _this = this; // optimization: cache


      return "{ " + this.propertyNames.map(function (key) {
        return key + ": " + _this.properties[key].describe();
      }).join("; ") + " }";
    }
  });
  Object.defineProperty(ModelType.prototype, "getDefaultSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return EMPTY_OBJECT;
    }
  });
  Object.defineProperty(ModelType.prototype, "removeChild", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, subpath) {
      node.storedValue[subpath] = undefined;
    }
  });
  return ModelType;
}(ComplexType);

ModelType.prototype.applySnapshot = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["action"])(ModelType.prototype.applySnapshot);
/**
 * `types.model` - Creates a new model type by providing a name, properties, volatile state and actions.
 *
 * See the [model type](/concepts/trees#creating-models) description or the [getting started](intro/getting-started.md#getting-started-1) tutorial.
 */

function model() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  var name = typeof args[0] === "string" ? args.shift() : "AnonymousModel";
  var properties = args.shift() || {};
  return new ModelType({
    name: name,
    properties: properties
  });
}
/**
 * `types.compose` - Composes a new model from one or more existing model types.
 * This method can be invoked in two forms:
 * Given 2 or more model types, the types are composed into a new Type.
 * Given first parameter as a string and 2 or more model types,
 * the types are composed into a new Type with the given name
 */


function compose() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  } // TODO: just join the base type names if no name is provided


  var hasTypename = typeof args[0] === "string";
  var typeName = hasTypename ? args[0] : "AnonymousModel";

  if (hasTypename) {
    args.shift();
  } // check all parameters


  if (devMode()) {
    args.forEach(function (type, i) {
      assertArg(type, isModelType, "mobx-state-tree model type", hasTypename ? i + 2 : i + 1);
    });
  }

  return args.reduce(function (prev, cur) {
    return prev.cloneAndEnhance({
      name: prev.name + "_" + cur.name,
      properties: cur.properties,
      initializers: cur.initializers,
      preProcessor: function (snapshot) {
        return cur.applySnapshotPreProcessor(prev.applySnapshotPreProcessor(snapshot));
      },
      postProcessor: function (snapshot) {
        return cur.applySnapshotPostProcessor(prev.applySnapshotPostProcessor(snapshot));
      }
    });
  }).named(typeName);
}
/**
 * Returns if a given value represents a model type.
 *
 * @param type
 * @returns
 */


function isModelType(type) {
  return isType(type) && (type.flags & TypeFlags.Object) > 0;
} // TODO: implement CoreType using types.custom ?

/**
 * @internal
 * @hidden
 */


var CoreType =
/** @class */
function (_super) {
  __extends(CoreType, _super);

  function CoreType(name, flags, checker, initializer) {
    if (initializer === void 0) {
      initializer = identity;
    }

    var _this = _super.call(this, name) || this;

    Object.defineProperty(_this, "flags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: flags
    });
    Object.defineProperty(_this, "checker", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: checker
    });
    Object.defineProperty(_this, "initializer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: initializer
    });
    _this.flags = flags;
    return _this;
  }

  Object.defineProperty(CoreType.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this.name;
    }
  });
  Object.defineProperty(CoreType.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      return createScalarNode(this, parent, subpath, environment, initialValue);
    }
  });
  Object.defineProperty(CoreType.prototype, "createNewInstance", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (snapshot) {
      return this.initializer(snapshot);
    }
  });
  Object.defineProperty(CoreType.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      if (isPrimitive(value) && this.checker(value)) {
        return typeCheckSuccess();
      }

      var typeName = this.name === "Date" ? "Date or a unix milliseconds timestamp" : this.name;
      return typeCheckFailure(context, value, "Value is not a " + typeName);
    }
  });
  return CoreType;
}(SimpleType);
/**
 * `types.string` - Creates a type that can only contain a string value.
 * This type is used for string values by default
 *
 * Example:
 * ```ts
 * const Person = types.model({
 *   firstName: types.string,
 *   lastName: "Doe"
 * })
 * ```
 */
// tslint:disable-next-line:variable-name


var string = new CoreType("string", TypeFlags.String, function (v) {
  return typeof v === "string";
});
/**
 * `types.number` - Creates a type that can only contain a numeric value.
 * This type is used for numeric values by default
 *
 * Example:
 * ```ts
 * const Vector = types.model({
 *   x: types.number,
 *   y: 1.5
 * })
 * ```
 */
// tslint:disable-next-line:variable-name

var number = new CoreType("number", TypeFlags.Number, function (v) {
  return typeof v === "number";
});
/**
 * `types.integer` - Creates a type that can only contain an integer value.
 * This type is used for integer values by default
 *
 * Example:
 * ```ts
 * const Size = types.model({
 *   width: types.integer,
 *   height: 10
 * })
 * ```
 */
// tslint:disable-next-line:variable-name

var integer = new CoreType("integer", TypeFlags.Integer, function (v) {
  return isInteger(v);
});
/**
 * `types.boolean` - Creates a type that can only contain a boolean value.
 * This type is used for boolean values by default
 *
 * Example:
 * ```ts
 * const Thing = types.model({
 *   isCool: types.boolean,
 *   isAwesome: false
 * })
 * ```
 */
// tslint:disable-next-line:variable-name

var boolean = new CoreType("boolean", TypeFlags.Boolean, function (v) {
  return typeof v === "boolean";
});
/**
 * `types.null` - The type of the value `null`
 */

var nullType = new CoreType("null", TypeFlags.Null, function (v) {
  return v === null;
});
/**
 * `types.undefined` - The type of the value `undefined`
 */

var undefinedType = new CoreType("undefined", TypeFlags.Undefined, function (v) {
  return v === undefined;
});

var _DatePrimitive = new CoreType("Date", TypeFlags.Date, function (v) {
  return typeof v === "number" || v instanceof Date;
}, function (v) {
  return v instanceof Date ? v : new Date(v);
});

_DatePrimitive.getSnapshot = function (node) {
  return node.storedValue.getTime();
};
/**
 * `types.Date` - Creates a type that can only contain a javascript Date value.
 *
 * Example:
 * ```ts
 * const LogLine = types.model({
 *   timestamp: types.Date,
 * })
 *
 * LogLine.create({ timestamp: new Date() })
 * ```
 */


var DatePrimitive = _DatePrimitive;
/**
 * @internal
 * @hidden
 */

function getPrimitiveFactoryFromValue(value) {
  switch (typeof value) {
    case "string":
      return string;

    case "number":
      return number;
    // In the future, isInteger(value) ? integer : number would be interesting, but would be too breaking for now

    case "boolean":
      return boolean;

    case "object":
      if (value instanceof Date) return DatePrimitive;
  }

  throw fail$1("Cannot determine primitive type from value " + value);
}
/**
 * Returns if a given value represents a primitive type.
 *
 * @param type
 * @returns
 */


function isPrimitiveType(type) {
  return isType(type) && (type.flags & (TypeFlags.String | TypeFlags.Number | TypeFlags.Integer | TypeFlags.Boolean | TypeFlags.Date)) > 0;
}
/**
 * @internal
 * @hidden
 */


var Literal =
/** @class */
function (_super) {
  __extends(Literal, _super);

  function Literal(value) {
    var _this = _super.call(this, JSON.stringify(value)) || this;

    Object.defineProperty(_this, "value", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "flags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: TypeFlags.Literal
    });
    _this.value = value;
    return _this;
  }

  Object.defineProperty(Literal.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      return createScalarNode(this, parent, subpath, environment, initialValue);
    }
  });
  Object.defineProperty(Literal.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return JSON.stringify(this.value);
    }
  });
  Object.defineProperty(Literal.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      if (isPrimitive(value) && value === this.value) {
        return typeCheckSuccess();
      }

      return typeCheckFailure(context, value, "Value is not a literal " + JSON.stringify(this.value));
    }
  });
  return Literal;
}(SimpleType);
/**
 * `types.literal` - The literal type will return a type that will match only the exact given type.
 * The given value must be a primitive, in order to be serialized to a snapshot correctly.
 * You can use literal to match exact strings for example the exact male or female string.
 *
 * Example:
 * ```ts
 * const Person = types.model({
 *     name: types.string,
 *     gender: types.union(types.literal('male'), types.literal('female'))
 * })
 * ```
 *
 * @param value The value to use in the strict equal check
 * @returns
 */


function literal(value) {
  // check that the given value is a primitive
  assertArg(value, isPrimitive, "primitive", 1);
  return new Literal(value);
}
/**
 * Returns if a given value represents a literal type.
 *
 * @param type
 * @returns
 */


function isLiteralType(type) {
  return isType(type) && (type.flags & TypeFlags.Literal) > 0;
}

var Refinement =
/** @class */
function (_super) {
  __extends(Refinement, _super);

  function Refinement(name, _subtype, _predicate, _message) {
    var _this = _super.call(this, name) || this;

    Object.defineProperty(_this, "_subtype", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _subtype
    });
    Object.defineProperty(_this, "_predicate", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _predicate
    });
    Object.defineProperty(_this, "_message", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _message
    });
    return _this;
  }

  Object.defineProperty(Refinement.prototype, "flags", {
    get: function () {
      return this._subtype.flags | TypeFlags.Refinement;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Refinement.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this.name;
    }
  });
  Object.defineProperty(Refinement.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      // create the child type
      return this._subtype.instantiate(parent, subpath, environment, initialValue);
    }
  });
  Object.defineProperty(Refinement.prototype, "isAssignableFrom", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (type) {
      return this._subtype.isAssignableFrom(type);
    }
  });
  Object.defineProperty(Refinement.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      var subtypeErrors = this._subtype.validate(value, context);

      if (subtypeErrors.length > 0) return subtypeErrors;
      var snapshot = isStateTreeNode(value) ? getStateTreeNode(value).snapshot : value;

      if (!this._predicate(snapshot)) {
        return typeCheckFailure(context, value, this._message(value));
      }

      return typeCheckSuccess();
    }
  });
  Object.defineProperty(Refinement.prototype, "reconcile", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (current, newValue, parent, subpath) {
      return this._subtype.reconcile(current, newValue, parent, subpath);
    }
  });
  Object.defineProperty(Refinement.prototype, "getSubTypes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this._subtype;
    }
  });
  return Refinement;
}(BaseType);
/**
 * `types.refinement` - Creates a type that is more specific than the base type, e.g. `types.refinement(types.string, value => value.length > 5)` to create a type of strings that can only be longer then 5.
 *
 * @param name
 * @param type
 * @param predicate
 * @returns
 */


function refinement() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  var name = typeof args[0] === "string" ? args.shift() : isType(args[0]) ? args[0].name : null;
  var type = args[0];
  var predicate = args[1];
  var message = args[2] ? args[2] : function (v) {
    return "Value does not respect the refinement predicate";
  }; // ensures all parameters are correct

  assertIsType(type, [1, 2]);
  assertIsString(name, 1);
  assertIsFunction(predicate, [2, 3]);
  assertIsFunction(message, [3, 4]);
  return new Refinement(name, type, predicate, message);
}
/**
 * Returns if a given value is a refinement type.
 *
 * @param type
 * @returns
 */


function isRefinementType(type) {
  return (type.flags & TypeFlags.Refinement) > 0;
}
/**
 * `types.enumeration` - Can be used to create an string based enumeration.
 * (note: this methods is just sugar for a union of string literals)
 *
 * Example:
 * ```ts
 * const TrafficLight = types.model({
 *   color: types.enumeration("Color", ["Red", "Orange", "Green"])
 * })
 * ```
 *
 * @param name descriptive name of the enumeration (optional)
 * @param options possible values this enumeration can have
 * @returns
 */


function enumeration(name, options) {
  var realOptions = typeof name === "string" ? options : name; // check all options

  if (devMode()) {
    realOptions.forEach(function (option, i) {
      assertIsString(option, i + 1);
    });
  }

  var type = union.apply(void 0, __spread(realOptions.map(function (option) {
    return literal("" + option);
  })));
  if (typeof name === "string") type.name = name;
  return type;
}
/**
 * @internal
 * @hidden
 */


var Union =
/** @class */
function (_super) {
  __extends(Union, _super);

  function Union(name, _types, options) {
    var _this = _super.call(this, name) || this;

    Object.defineProperty(_this, "_types", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _types
    });
    Object.defineProperty(_this, "_dispatcher", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_eager", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    });
    options = __assign({
      eager: true,
      dispatcher: undefined
    }, options);
    _this._dispatcher = options.dispatcher;
    if (!options.eager) _this._eager = false;
    return _this;
  }

  Object.defineProperty(Union.prototype, "flags", {
    get: function () {
      var result = TypeFlags.Union;

      this._types.forEach(function (type) {
        result |= type.flags;
      });

      return result;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Union.prototype, "isAssignableFrom", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (type) {
      return this._types.some(function (subType) {
        return subType.isAssignableFrom(type);
      });
    }
  });
  Object.defineProperty(Union.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return "(" + this._types.map(function (factory) {
        return factory.describe();
      }).join(" | ") + ")";
    }
  });
  Object.defineProperty(Union.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      var type = this.determineType(initialValue, undefined);
      if (!type) throw fail$1("No matching type for union " + this.describe()); // can happen in prod builds

      return type.instantiate(parent, subpath, environment, initialValue);
    }
  });
  Object.defineProperty(Union.prototype, "reconcile", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (current, newValue, parent, subpath) {
      var type = this.determineType(newValue, current.type);
      if (!type) throw fail$1("No matching type for union " + this.describe()); // can happen in prod builds

      return type.reconcile(current, newValue, parent, subpath);
    }
  });
  Object.defineProperty(Union.prototype, "determineType", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, reconcileCurrentType) {
      // try the dispatcher, if defined
      if (this._dispatcher) {
        return this._dispatcher(value);
      } // find the most accomodating type
      // if we are using reconciliation try the current node type first (fix for #1045)


      if (reconcileCurrentType) {
        if (reconcileCurrentType.is(value)) {
          return reconcileCurrentType;
        }

        return this._types.filter(function (t) {
          return t !== reconcileCurrentType;
        }).find(function (type) {
          return type.is(value);
        });
      } else {
        return this._types.find(function (type) {
          return type.is(value);
        });
      }
    }
  });
  Object.defineProperty(Union.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      if (this._dispatcher) {
        return this._dispatcher(value).validate(value, context);
      }

      var allErrors = [];
      var applicableTypes = 0;

      for (var i = 0; i < this._types.length; i++) {
        var type = this._types[i];
        var errors = type.validate(value, context);

        if (errors.length === 0) {
          if (this._eager) return typeCheckSuccess();else applicableTypes++;
        } else {
          allErrors.push(errors);
        }
      }

      if (applicableTypes === 1) return typeCheckSuccess();
      return typeCheckFailure(context, value, "No type is applicable for the union").concat(flattenTypeErrors(allErrors));
    }
  });
  Object.defineProperty(Union.prototype, "getSubTypes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this._types;
    }
  });
  return Union;
}(BaseType);
/**
 * `types.union` - Create a union of multiple types. If the correct type cannot be inferred unambiguously from a snapshot, provide a dispatcher function of the form `(snapshot) => Type`.
 *
 * @param optionsOrType
 * @param otherTypes
 * @returns
 */


function union(optionsOrType) {
  var otherTypes = [];

  for (var _i = 1; _i < arguments.length; _i++) {
    otherTypes[_i - 1] = arguments[_i];
  }

  var options = isType(optionsOrType) ? undefined : optionsOrType;
  var types = isType(optionsOrType) ? __spread([optionsOrType], otherTypes) : otherTypes;
  var name = "(" + types.map(function (type) {
    return type.name;
  }).join(" | ") + ")"; // check all options

  if (devMode()) {
    if (options) {
      assertArg(options, function (o) {
        return isPlainObject(o);
      }, "object { eager?: boolean, dispatcher?: Function }", 1);
    }

    types.forEach(function (type, i) {
      assertIsType(type, options ? i + 2 : i + 1);
    });
  }

  return new Union(name, types, options);
}
/**
 * Returns if a given value represents a union type.
 *
 * @param type
 * @returns
 */


function isUnionType(type) {
  return (type.flags & TypeFlags.Union) > 0;
}
/**
 * @hidden
 * @internal
 */


var OptionalValue =
/** @class */
function (_super) {
  __extends(OptionalValue, _super);

  function OptionalValue(_subtype, _defaultValue, optionalValues) {
    var _this = _super.call(this, _subtype.name) || this;

    Object.defineProperty(_this, "_subtype", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _subtype
    });
    Object.defineProperty(_this, "_defaultValue", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _defaultValue
    });
    Object.defineProperty(_this, "optionalValues", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: optionalValues
    });
    return _this;
  }

  Object.defineProperty(OptionalValue.prototype, "flags", {
    get: function () {
      return this._subtype.flags | TypeFlags.Optional;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(OptionalValue.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this._subtype.describe() + "?";
    }
  });
  Object.defineProperty(OptionalValue.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      if (this.optionalValues.indexOf(initialValue) >= 0) {
        var defaultInstanceOrSnapshot = this.getDefaultInstanceOrSnapshot();
        return this._subtype.instantiate(parent, subpath, environment, defaultInstanceOrSnapshot);
      }

      return this._subtype.instantiate(parent, subpath, environment, initialValue);
    }
  });
  Object.defineProperty(OptionalValue.prototype, "reconcile", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (current, newValue, parent, subpath) {
      return this._subtype.reconcile(current, this.optionalValues.indexOf(newValue) < 0 && this._subtype.is(newValue) ? newValue : this.getDefaultInstanceOrSnapshot(), parent, subpath);
    }
  });
  Object.defineProperty(OptionalValue.prototype, "getDefaultInstanceOrSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var defaultInstanceOrSnapshot = typeof this._defaultValue === "function" ? this._defaultValue() : this._defaultValue; // while static values are already snapshots and checked on types.optional
      // generator functions must always be rechecked just in case

      if (typeof this._defaultValue === "function") {
        typecheckInternal(this, defaultInstanceOrSnapshot);
      }

      return defaultInstanceOrSnapshot;
    }
  });
  Object.defineProperty(OptionalValue.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      // defaulted values can be skipped
      if (this.optionalValues.indexOf(value) >= 0) {
        return typeCheckSuccess();
      } // bounce validation to the sub-type


      return this._subtype.validate(value, context);
    }
  });
  Object.defineProperty(OptionalValue.prototype, "isAssignableFrom", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (type) {
      return this._subtype.isAssignableFrom(type);
    }
  });
  Object.defineProperty(OptionalValue.prototype, "getSubTypes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this._subtype;
    }
  });
  return OptionalValue;
}(BaseType);

function checkOptionalPreconditions(type, defaultValueOrFunction) {
  // make sure we never pass direct instances
  if (typeof defaultValueOrFunction !== "function" && isStateTreeNode(defaultValueOrFunction)) {
    throw fail$1("default value cannot be an instance, pass a snapshot or a function that creates an instance/snapshot instead");
  }

  assertIsType(type, 1);

  if (devMode()) {
    // we only check default values if they are passed directly
    // if they are generator functions they will be checked once they are generated
    // we don't check generator function results here to avoid generating a node just for type-checking purposes
    // which might generate side-effects
    if (typeof defaultValueOrFunction !== "function") {
      typecheckInternal(type, defaultValueOrFunction);
    }
  }
}
/**
 * `types.optional` - Can be used to create a property with a default value.
 *
 * Depending on the third argument (`optionalValues`) there are two ways of operation:
 * - If the argument is not provided, then if a value is not provided in the snapshot (`undefined` or missing),
 *   it will default to the provided `defaultValue`
 * - If the argument is provided, then if the value in the snapshot matches one of the optional values inside the array then it will
 *   default to the provided `defaultValue`. Additionally, if one of the optional values inside the array is `undefined` then a missing
 *   property is also valid.
 *
 *   Note that it is also possible to include values of the same type as the intended subtype as optional values,
 *   in this case the optional value will be transformed into the `defaultValue` (e.g. `types.optional(types.string, "unnamed", [undefined, ""])`
 *   will transform the snapshot values `undefined` (and therefore missing) and empty strings into the string `"unnamed"` when it gets
 *   instantiated).
 *
 * If `defaultValue` is a function, the function will be invoked for every new instance.
 * Applying a snapshot in which the optional value is one of the optional values (or `undefined`/_not_ present if none are provided) causes the
 * value to be reset.
 *
 * Example:
 * ```ts
 * const Todo = types.model({
 *   title: types.string,
 *   subtitle1: types.optional(types.string, "", [null]),
 *   subtitle2: types.optional(types.string, "", [null, undefined]),
 *   done: types.optional(types.boolean, false),
 *   created: types.optional(types.Date, () => new Date()),
 * })
 *
 * // if done is missing / undefined it will become false
 * // if created is missing / undefined it will get a freshly generated timestamp
 * // if subtitle1 is null it will default to "", but it cannot be missing or undefined
 * // if subtitle2 is null or undefined it will default to ""; since it can be undefined it can also be missing
 * const todo = Todo.create({ title: "Get coffee", subtitle1: null })
 * ```
 *
 * @param type
 * @param defaultValueOrFunction
 * @param optionalValues an optional array with zero or more primitive values (string, number, boolean, null or undefined)
 *                       that will be converted into the default. `[ undefined ]` is assumed when none is provided
 * @returns
 */


function optional(type, defaultValueOrFunction, optionalValues) {
  checkOptionalPreconditions(type, defaultValueOrFunction);
  return new OptionalValue(type, defaultValueOrFunction, optionalValues ? optionalValues : undefinedAsOptionalValues);
}

var undefinedAsOptionalValues = [undefined];
/**
 * Returns if a value represents an optional type.
 *
 * @template IT
 * @param type
 * @returns
 */

function isOptionalType(type) {
  return isType(type) && (type.flags & TypeFlags.Optional) > 0;
}

var optionalUndefinedType = optional(undefinedType, undefined);
var optionalNullType = optional(nullType, null);
/**
 * `types.maybe` - Maybe will make a type nullable, and also optional.
 * The value `undefined` will be used to represent nullability.
 *
 * @param type
 * @returns
 */

function maybe(type) {
  assertIsType(type, 1);
  return union(type, optionalUndefinedType);
}
/**
 * `types.maybeNull` - Maybe will make a type nullable, and also optional.
 * The value `null` will be used to represent no value.
 *
 * @param type
 * @returns
 */


function maybeNull(type) {
  assertIsType(type, 1);
  return union(type, optionalNullType);
}

var Late =
/** @class */
function (_super) {
  __extends(Late, _super);

  function Late(name, _definition) {
    var _this = _super.call(this, name) || this;

    Object.defineProperty(_this, "_definition", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _definition
    });
    Object.defineProperty(_this, "_subType", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    return _this;
  }

  Object.defineProperty(Late.prototype, "flags", {
    get: function () {
      return (this._subType ? this._subType.flags : 0) | TypeFlags.Late;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Late.prototype, "getSubType", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (mustSucceed) {
      if (!this._subType) {
        var t = undefined;

        try {
          t = this._definition();
        } catch (e) {
          if (e instanceof ReferenceError) // can happen in strict ES5 code when a definition is self refering
            t = undefined;else throw e;
        }

        if (mustSucceed && t === undefined) throw fail$1("Late type seems to be used too early, the definition (still) returns undefined");

        if (t) {
          if (devMode() && !isType(t)) throw fail$1("Failed to determine subtype, make sure types.late returns a type definition.");
          this._subType = t;
        }
      }

      return this._subType;
    }
  });
  Object.defineProperty(Late.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      return this.getSubType(true).instantiate(parent, subpath, environment, initialValue);
    }
  });
  Object.defineProperty(Late.prototype, "reconcile", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (current, newValue, parent, subpath) {
      return this.getSubType(true).reconcile(current, newValue, parent, subpath);
    }
  });
  Object.defineProperty(Late.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var t = this.getSubType(false);
      return t ? t.name : "<uknown late type>";
    }
  });
  Object.defineProperty(Late.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      var t = this.getSubType(false);

      if (!t) {
        // See #916; the variable the definition closure is pointing to wasn't defined yet, so can't be evaluted yet here
        return typeCheckSuccess();
      }

      return t.validate(value, context);
    }
  });
  Object.defineProperty(Late.prototype, "isAssignableFrom", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (type) {
      var t = this.getSubType(false);
      return t ? t.isAssignableFrom(type) : false;
    }
  });
  Object.defineProperty(Late.prototype, "getSubTypes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var subtype = this.getSubType(false);
      return subtype ? subtype : cannotDetermineSubtype;
    }
  });
  return Late;
}(BaseType);
/**
 * `types.late` - Defines a type that gets implemented later. This is useful when you have to deal with circular dependencies.
 * Please notice that when defining circular dependencies TypeScript isn't smart enough to inference them.
 *
 * Example:
 * ```ts
 *   // TypeScript isn't smart enough to infer self referencing types.
 *  const Node = types.model({
 *       children: types.array(types.late((): IAnyModelType => Node)) // then typecast each array element to Instance<typeof Node>
 *  })
 * ```
 *
 * @param name The name to use for the type that will be returned.
 * @param type A function that returns the type that will be defined.
 * @returns
 */


function late(nameOrType, maybeType) {
  var name = typeof nameOrType === "string" ? nameOrType : "late(" + nameOrType.toString() + ")";
  var type = typeof nameOrType === "string" ? maybeType : nameOrType; // checks that the type is actually a late type

  if (devMode()) {
    if (!(typeof type === "function" && type.length === 0)) throw fail$1("Invalid late type, expected a function with zero arguments that returns a type, got: " + type);
  }

  return new Late(name, type);
}
/**
 * Returns if a given value represents a late type.
 *
 * @param type
 * @returns
 */


function isLateType(type) {
  return isType(type) && (type.flags & TypeFlags.Late) > 0;
}
/**
 * @internal
 * @hidden
 */


var Frozen =
/** @class */
function (_super) {
  __extends(Frozen, _super);

  function Frozen(subType) {
    var _this = _super.call(this, subType ? "frozen(" + subType.name + ")" : "frozen") || this;

    Object.defineProperty(_this, "subType", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: subType
    });
    Object.defineProperty(_this, "flags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: TypeFlags.Frozen
    });
    return _this;
  }

  Object.defineProperty(Frozen.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return "<any immutable value>";
    }
  });
  Object.defineProperty(Frozen.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, value) {
      // create the node
      return createScalarNode(this, parent, subpath, environment, deepFreeze(value));
    }
  });
  Object.defineProperty(Frozen.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      if (!isSerializable(value)) {
        return typeCheckFailure(context, value, "Value is not serializable and cannot be frozen");
      }

      if (this.subType) return this.subType.validate(value, context);
      return typeCheckSuccess();
    }
  });
  return Frozen;
}(SimpleType);

var untypedFrozenInstance = new Frozen();
/**
 * `types.frozen` - Frozen can be used to store any value that is serializable in itself (that is valid JSON).
 * Frozen values need to be immutable or treated as if immutable. They need be serializable as well.
 * Values stored in frozen will snapshotted as-is by MST, and internal changes will not be tracked.
 *
 * This is useful to store complex, but immutable values like vectors etc. It can form a powerful bridge to parts of your application that should be immutable, or that assume data to be immutable.
 *
 * Note: if you want to store free-form state that is mutable, or not serializeable, consider using volatile state instead.
 *
 * Frozen properties can be defined in three different ways
 * 1. `types.frozen(SubType)` - provide a valid MST type and frozen will check if the provided data conforms the snapshot for that type
 * 2. `types.frozen({ someDefaultValue: true})` - provide a primitive value, object or array, and MST will infer the type from that object, and also make it the default value for the field
 * 3. `types.frozen<TypeScriptType>()` - provide a typescript type, to help in strongly typing the field (design time only)
 *
 * Example:
 * ```ts
 * const GameCharacter = types.model({
 *   name: string,
 *   location: types.frozen({ x: 0, y: 0})
 * })
 *
 * const hero = GameCharacter.create({
 *   name: "Mario",
 *   location: { x: 7, y: 4 }
 * })
 *
 * hero.location = { x: 10, y: 2 } // OK
 * hero.location.x = 7 // Not ok!
 * ```
 *
 * ```ts
 * type Point = { x: number, y: number }
 *    const Mouse = types.model({
 *         loc: types.frozen<Point>()
 *    })
 * ```
 *
 * @param defaultValueOrType
 * @returns
 */

function frozen(arg) {
  if (arguments.length === 0) return untypedFrozenInstance;else if (isType(arg)) return new Frozen(arg);else return optional(untypedFrozenInstance, arg);
}
/**
 * Returns if a given value represents a frozen type.
 *
 * @param type
 * @returns
 */


function isFrozenType(type) {
  return isType(type) && (type.flags & TypeFlags.Frozen) > 0;
}

function getInvalidationCause(hook) {
  switch (hook) {
    case Hook.beforeDestroy:
      return "destroy";

    case Hook.beforeDetach:
      return "detach";

    default:
      return undefined;
  }
}

var StoredReference =
/** @class */
function () {
  function StoredReference(value, targetType) {
    Object.defineProperty(this, "targetType", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: targetType
    });
    Object.defineProperty(this, "identifier", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "node", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "resolvedReference", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });

    if (isValidIdentifier(value)) {
      this.identifier = value;
    } else if (isStateTreeNode(value)) {
      var targetNode = getStateTreeNode(value);
      if (!targetNode.identifierAttribute) throw fail$1("Can only store references with a defined identifier attribute.");
      var id = targetNode.unnormalizedIdentifier;

      if (id === null || id === undefined) {
        throw fail$1("Can only store references to tree nodes with a defined identifier.");
      }

      this.identifier = id;
    } else {
      throw fail$1("Can only store references to tree nodes or identifiers, got: '" + value + "'");
    }
  }

  Object.defineProperty(StoredReference.prototype, "updateResolvedReference", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      var normalizedId = normalizeIdentifier(this.identifier);
      var root = node.root;
      var lastCacheModification = root.identifierCache.getLastCacheModificationPerId(normalizedId);

      if (!this.resolvedReference || this.resolvedReference.lastCacheModification !== lastCacheModification) {
        var targetType = this.targetType; // reference was initialized with the identifier of the target

        var target = root.identifierCache.resolve(targetType, normalizedId);

        if (!target) {
          throw new InvalidReferenceError("[mobx-state-tree] Failed to resolve reference '" + this.identifier + "' to type '" + this.targetType.name + "' (from node: " + node.path + ")");
        }

        this.resolvedReference = {
          node: target,
          lastCacheModification: lastCacheModification
        };
      }
    }
  });
  Object.defineProperty(StoredReference.prototype, "resolvedValue", {
    get: function () {
      this.updateResolvedReference(this.node);
      return this.resolvedReference.node.value;
    },
    enumerable: false,
    configurable: true
  });
  return StoredReference;
}();
/**
 * @internal
 * @hidden
 */


var InvalidReferenceError =
/** @class */
function (_super) {
  __extends(InvalidReferenceError, _super);

  function InvalidReferenceError(m) {
    var _this = _super.call(this, m) || this;

    Object.setPrototypeOf(_this, InvalidReferenceError.prototype);
    return _this;
  }

  return InvalidReferenceError;
}(Error);
/**
 * @internal
 * @hidden
 */


var BaseReferenceType =
/** @class */
function (_super) {
  __extends(BaseReferenceType, _super);

  function BaseReferenceType(targetType, onInvalidated) {
    var _this = _super.call(this, "reference(" + targetType.name + ")") || this;

    Object.defineProperty(_this, "targetType", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: targetType
    });
    Object.defineProperty(_this, "onInvalidated", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: onInvalidated
    });
    Object.defineProperty(_this, "flags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: TypeFlags.Reference
    });
    return _this;
  }

  Object.defineProperty(BaseReferenceType.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this.name;
    }
  });
  Object.defineProperty(BaseReferenceType.prototype, "isAssignableFrom", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (type) {
      return this.targetType.isAssignableFrom(type);
    }
  });
  Object.defineProperty(BaseReferenceType.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      return isValidIdentifier(value) ? typeCheckSuccess() : typeCheckFailure(context, value, "Value is not a valid identifier, which is a string or a number");
    }
  });
  Object.defineProperty(BaseReferenceType.prototype, "fireInvalidated", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (cause, storedRefNode, referenceId, refTargetNode) {
      // to actually invalidate a reference we need an alive parent,
      // since it is a scalar value (immutable-ish) and we need to change it
      // from the parent
      var storedRefParentNode = storedRefNode.parent;

      if (!storedRefParentNode || !storedRefParentNode.isAlive) {
        return;
      }

      var storedRefParentValue = storedRefParentNode.storedValue;

      if (!storedRefParentValue) {
        return;
      }

      this.onInvalidated({
        cause: cause,
        parent: storedRefParentValue,
        invalidTarget: refTargetNode ? refTargetNode.storedValue : undefined,
        invalidId: referenceId,
        replaceRef: function (newRef) {
          applyPatch(storedRefNode.root.storedValue, {
            op: "replace",
            value: newRef,
            path: storedRefNode.path
          });
        },
        removeRef: function () {
          if (isModelType(storedRefParentNode.type)) {
            this.replaceRef(undefined);
          } else {
            applyPatch(storedRefNode.root.storedValue, {
              op: "remove",
              path: storedRefNode.path
            });
          }
        }
      });
    }
  });
  Object.defineProperty(BaseReferenceType.prototype, "addTargetNodeWatcher", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (storedRefNode, referenceId) {
      var _this = this; // this will make sure the target node becomes created


      var refTargetValue = this.getValue(storedRefNode);

      if (!refTargetValue) {
        return undefined;
      }

      var refTargetNode = getStateTreeNode(refTargetValue);

      var hookHandler = function (_, refTargetNodeHook) {
        var cause = getInvalidationCause(refTargetNodeHook);

        if (!cause) {
          return;
        }

        _this.fireInvalidated(cause, storedRefNode, referenceId, refTargetNode);
      };

      var refTargetDetachHookDisposer = refTargetNode.registerHook(Hook.beforeDetach, hookHandler);
      var refTargetDestroyHookDisposer = refTargetNode.registerHook(Hook.beforeDestroy, hookHandler);
      return function () {
        refTargetDetachHookDisposer();
        refTargetDestroyHookDisposer();
      };
    }
  });
  Object.defineProperty(BaseReferenceType.prototype, "watchTargetNodeForInvalidations", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (storedRefNode, identifier, customGetSet) {
      var _this = this;

      if (!this.onInvalidated) {
        return;
      }

      var onRefTargetDestroyedHookDisposer; // get rid of the watcher hook when the stored ref node is destroyed
      // detached is ignored since scalar nodes (where the reference resides) cannot be detached

      storedRefNode.registerHook(Hook.beforeDestroy, function () {
        if (onRefTargetDestroyedHookDisposer) {
          onRefTargetDestroyedHookDisposer();
        }
      });

      var startWatching = function (sync) {
        // re-create hook in case the stored ref gets reattached
        if (onRefTargetDestroyedHookDisposer) {
          onRefTargetDestroyedHookDisposer();
        } // make sure the target node is actually there and initialized


        var storedRefParentNode = storedRefNode.parent;
        var storedRefParentValue = storedRefParentNode && storedRefParentNode.storedValue;

        if (storedRefParentNode && storedRefParentNode.isAlive && storedRefParentValue) {
          var refTargetNodeExists = void 0;

          if (customGetSet) {
            refTargetNodeExists = !!customGetSet.get(identifier, storedRefParentValue);
          } else {
            refTargetNodeExists = storedRefNode.root.identifierCache.has(_this.targetType, normalizeIdentifier(identifier));
          }

          if (!refTargetNodeExists) {
            // we cannot change the reference in sync mode
            // since we are in the middle of a reconciliation/instantiation and the change would be overwritten
            // for those cases just let the wrong reference be assigned and fail upon usage
            // (like current references do)
            // this means that effectively this code will only run when it is created from a snapshot
            if (!sync) {
              _this.fireInvalidated("invalidSnapshotReference", storedRefNode, identifier, null);
            }
          } else {
            onRefTargetDestroyedHookDisposer = _this.addTargetNodeWatcher(storedRefNode, identifier);
          }
        }
      };

      if (storedRefNode.state === NodeLifeCycle.FINALIZED) {
        // already attached, so the whole tree is ready
        startWatching(true);
      } else {
        if (!storedRefNode.isRoot) {
          // start watching once the whole tree is ready
          storedRefNode.root.registerHook(Hook.afterCreationFinalization, function () {
            // make sure to attach it so it can start listening
            if (storedRefNode.parent) {
              storedRefNode.parent.createObservableInstanceIfNeeded();
            }
          });
        } // start watching once the node is attached somewhere / parent changes


        storedRefNode.registerHook(Hook.afterAttach, function () {
          startWatching(false);
        });
      }
    }
  });
  return BaseReferenceType;
}(SimpleType);
/**
 * @internal
 * @hidden
 */


var IdentifierReferenceType =
/** @class */
function (_super) {
  __extends(IdentifierReferenceType, _super);

  function IdentifierReferenceType(targetType, onInvalidated) {
    return _super.call(this, targetType, onInvalidated) || this;
  }

  Object.defineProperty(IdentifierReferenceType.prototype, "getValue", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (storedRefNode) {
      if (!storedRefNode.isAlive) return undefined;
      var storedRef = storedRefNode.storedValue;
      return storedRef.resolvedValue;
    }
  });
  Object.defineProperty(IdentifierReferenceType.prototype, "getSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (storedRefNode) {
      var ref = storedRefNode.storedValue;
      return ref.identifier;
    }
  });
  Object.defineProperty(IdentifierReferenceType.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      var identifier = isStateTreeNode(initialValue) ? getIdentifier(initialValue) : initialValue;
      var storedRef = new StoredReference(initialValue, this.targetType);
      var storedRefNode = createScalarNode(this, parent, subpath, environment, storedRef);
      storedRef.node = storedRefNode;
      this.watchTargetNodeForInvalidations(storedRefNode, identifier, undefined);
      return storedRefNode;
    }
  });
  Object.defineProperty(IdentifierReferenceType.prototype, "reconcile", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (current, newValue, parent, subpath) {
      if (!current.isDetaching && current.type === this) {
        var compareByValue = isStateTreeNode(newValue);
        var ref = current.storedValue;

        if (!compareByValue && ref.identifier === newValue || compareByValue && ref.resolvedValue === newValue) {
          current.setParent(parent, subpath);
          return current;
        }
      }

      var newNode = this.instantiate(parent, subpath, undefined, newValue);
      current.die(); // noop if detaching

      return newNode;
    }
  });
  return IdentifierReferenceType;
}(BaseReferenceType);
/**
 * @internal
 * @hidden
 */


var CustomReferenceType =
/** @class */
function (_super) {
  __extends(CustomReferenceType, _super);

  function CustomReferenceType(targetType, options, onInvalidated) {
    var _this = _super.call(this, targetType, onInvalidated) || this;

    Object.defineProperty(_this, "options", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: options
    });
    return _this;
  }

  Object.defineProperty(CustomReferenceType.prototype, "getValue", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (storedRefNode) {
      if (!storedRefNode.isAlive) return undefined;
      var referencedNode = this.options.get(storedRefNode.storedValue, storedRefNode.parent ? storedRefNode.parent.storedValue : null);
      return referencedNode;
    }
  });
  Object.defineProperty(CustomReferenceType.prototype, "getSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (storedRefNode) {
      return storedRefNode.storedValue;
    }
  });
  Object.defineProperty(CustomReferenceType.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, newValue) {
      var identifier = isStateTreeNode(newValue) ? this.options.set(newValue, parent ? parent.storedValue : null) : newValue;
      var storedRefNode = createScalarNode(this, parent, subpath, environment, identifier);
      this.watchTargetNodeForInvalidations(storedRefNode, identifier, this.options);
      return storedRefNode;
    }
  });
  Object.defineProperty(CustomReferenceType.prototype, "reconcile", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (current, newValue, parent, subpath) {
      var newIdentifier = isStateTreeNode(newValue) ? this.options.set(newValue, current ? current.storedValue : null) : newValue;

      if (!current.isDetaching && current.type === this && current.storedValue === newIdentifier) {
        current.setParent(parent, subpath);
        return current;
      }

      var newNode = this.instantiate(parent, subpath, undefined, newIdentifier);
      current.die(); // noop if detaching

      return newNode;
    }
  });
  return CustomReferenceType;
}(BaseReferenceType);
/**
 * `types.reference` - Creates a reference to another type, which should have defined an identifier.
 * See also the [reference and identifiers](https://github.com/mobxjs/mobx-state-tree#references-and-identifiers) section.
 */


function reference(subType, options) {
  assertIsType(subType, 1);

  if (devMode()) {
    if (arguments.length === 2 && typeof arguments[1] === "string") {
      // istanbul ignore next
      throw fail$1("References with base path are no longer supported. Please remove the base path.");
    }
  }

  var getSetOptions = options ? options : undefined;
  var onInvalidated = options ? options.onInvalidated : undefined;

  if (getSetOptions && (getSetOptions.get || getSetOptions.set)) {
    if (devMode()) {
      if (!getSetOptions.get || !getSetOptions.set) {
        throw fail$1("reference options must either contain both a 'get' and a 'set' method or none of them");
      }
    }

    return new CustomReferenceType(subType, {
      get: getSetOptions.get,
      set: getSetOptions.set
    }, onInvalidated);
  } else {
    return new IdentifierReferenceType(subType, onInvalidated);
  }
}
/**
 * Returns if a given value represents a reference type.
 *
 * @param type
 * @returns
 */


function isReferenceType(type) {
  return (type.flags & TypeFlags.Reference) > 0;
}
/**
 * `types.safeReference` - A safe reference is like a standard reference, except that it accepts the undefined value by default
 * and automatically sets itself to undefined (when the parent is a model) / removes itself from arrays and maps
 * when the reference it is pointing to gets detached/destroyed.
 *
 * The optional options parameter object accepts a parameter named `acceptsUndefined`, which is set to true by default, so it is suitable
 * for model properties.
 * When used inside collections (arrays/maps), it is recommended to set this option to false so it can't take undefined as value,
 * which is usually the desired in those cases.
 * Additionally, the optional options parameter object accepts a parameter named `onInvalidated`, which will be called when the reference target node that the reference is pointing to is about to be detached/destroyed
 *
 * Strictly speaking it is a `types.maybe(types.reference(X))` (when `acceptsUndefined` is set to true, the default) and
 * `types.reference(X)` (when `acceptsUndefined` is set to false), both of them with a customized `onInvalidated` option.
 *
 * @param subType
 * @param options
 * @returns
 */


function safeReference(subType, options) {
  var refType = reference(subType, __assign(__assign({}, options), {
    onInvalidated: function (ev) {
      if (options && options.onInvalidated) {
        options.onInvalidated(ev);
      }

      ev.removeRef();
    }
  }));

  if (options && options.acceptsUndefined === false) {
    return refType;
  } else {
    return maybe(refType);
  }
}

var BaseIdentifierType =
/** @class */
function (_super) {
  __extends(BaseIdentifierType, _super);

  function BaseIdentifierType(name, validType) {
    var _this = _super.call(this, name) || this;

    Object.defineProperty(_this, "validType", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: validType
    });
    Object.defineProperty(_this, "flags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: TypeFlags.Identifier
    });
    return _this;
  }

  Object.defineProperty(BaseIdentifierType.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      if (!parent || !(parent.type instanceof ModelType)) throw fail$1("Identifier types can only be instantiated as direct child of a model type");
      return createScalarNode(this, parent, subpath, environment, initialValue);
    }
  });
  Object.defineProperty(BaseIdentifierType.prototype, "reconcile", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (current, newValue, parent, subpath) {
      // we don't consider detaching here since identifier are scalar nodes, and scalar nodes cannot be detached
      if (current.storedValue !== newValue) throw fail$1("Tried to change identifier from '" + current.storedValue + "' to '" + newValue + "'. Changing identifiers is not allowed.");
      current.setParent(parent, subpath);
      return current;
    }
  });
  Object.defineProperty(BaseIdentifierType.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      if (typeof value !== this.validType) {
        return typeCheckFailure(context, value, "Value is not a valid " + this.describe() + ", expected a " + this.validType);
      }

      return typeCheckSuccess();
    }
  });
  return BaseIdentifierType;
}(SimpleType);
/**
 * @internal
 * @hidden
 */


var IdentifierType =
/** @class */
function (_super) {
  __extends(IdentifierType, _super);

  function IdentifierType() {
    var _this = _super.call(this, "identifier", "string") || this;

    Object.defineProperty(_this, "flags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: TypeFlags.Identifier
    });
    return _this;
  }

  Object.defineProperty(IdentifierType.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return "identifier";
    }
  });
  return IdentifierType;
}(BaseIdentifierType);
/**
 * @internal
 * @hidden
 */


var IdentifierNumberType =
/** @class */
function (_super) {
  __extends(IdentifierNumberType, _super);

  function IdentifierNumberType() {
    return _super.call(this, "identifierNumber", "number") || this;
  }

  Object.defineProperty(IdentifierNumberType.prototype, "getSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      return node.storedValue;
    }
  });
  Object.defineProperty(IdentifierNumberType.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return "identifierNumber";
    }
  });
  return IdentifierNumberType;
}(BaseIdentifierType);
/**
 * `types.identifier` - Identifiers are used to make references, lifecycle events and reconciling works.
 * Inside a state tree, for each type can exist only one instance for each given identifier.
 * For example there couldn't be 2 instances of user with id 1. If you need more, consider using references.
 * Identifier can be used only as type property of a model.
 * This type accepts as parameter the value type of the identifier field that can be either string or number.
 *
 * Example:
 * ```ts
 *  const Todo = types.model("Todo", {
 *      id: types.identifier,
 *      title: types.string
 *  })
 * ```
 *
 * @returns
 */


var identifier = new IdentifierType();
/**
 * `types.identifierNumber` - Similar to `types.identifier`. This one will serialize from / to a number when applying snapshots
 *
 * Example:
 * ```ts
 *  const Todo = types.model("Todo", {
 *      id: types.identifierNumber,
 *      title: types.string
 *  })
 * ```
 *
 * @returns
 */

var identifierNumber = new IdentifierNumberType();
/**
 * Returns if a given value represents an identifier type.
 *
 * @param type
 * @returns
 */

function isIdentifierType(type) {
  return isType(type) && (type.flags & TypeFlags.Identifier) > 0;
}
/**
 * @internal
 * @hidden
 */


function normalizeIdentifier(id) {
  return "" + id;
}
/**
 * @internal
 * @hidden
 */


function isValidIdentifier(id) {
  return typeof id === "string" || typeof id === "number";
}
/**
 * @internal
 * @hidden
 */


function assertIsValidIdentifier(id, argNumber) {
  assertArg(id, isValidIdentifier, "string or number (identifier)", argNumber);
}
/**
 * `types.custom` - Creates a custom type. Custom types can be used for arbitrary immutable values, that have a serializable representation. For example, to create your own Date representation, Decimal type etc.
 *
 * The signature of the options is:
 * ```ts
 * export interface CustomTypeOptions<S, T> {
 *     // Friendly name
 *     name: string
 *     // given a serialized value and environment, how to turn it into the target type
 *     fromSnapshot(snapshot: S, env: any): T
 *     // return the serialization of the current value
 *     toSnapshot(value: T): S
 *     // if true, this is a converted value, if false, it's a snapshot
 *     isTargetType(value: T | S): value is T
 *     // a non empty string is assumed to be a validation error
 *     getValidationMessage?(snapshot: S): string
 * }
 * ```
 *
 * Example:
 * ```ts
 * const DecimalPrimitive = types.custom<string, Decimal>({
 *     name: "Decimal",
 *     fromSnapshot(value: string) {
 *         return new Decimal(value)
 *     },
 *     toSnapshot(value: Decimal) {
 *         return value.toString()
 *     },
 *     isTargetType(value: string | Decimal): boolean {
 *         return value instanceof Decimal
 *     },
 *     getValidationMessage(value: string): string {
 *         if (/^-?\d+\.\d+$/.test(value)) return "" // OK
 *         return `'${value}' doesn't look like a valid decimal number`
 *     }
 * })
 *
 * const Wallet = types.model({
 *     balance: DecimalPrimitive
 * })
 * ```
 *
 * @param options
 * @returns
 */


function custom(options) {
  return new CustomType(options);
}
/**
 * @internal
 * @hidden
 */


var CustomType =
/** @class */
function (_super) {
  __extends(CustomType, _super);

  function CustomType(options) {
    var _this = _super.call(this, options.name) || this;

    Object.defineProperty(_this, "options", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: options
    });
    Object.defineProperty(_this, "flags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: TypeFlags.Custom
    });
    return _this;
  }

  Object.defineProperty(CustomType.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this.name;
    }
  });
  Object.defineProperty(CustomType.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      if (this.options.isTargetType(value)) return typeCheckSuccess();
      var typeError = this.options.getValidationMessage(value);

      if (typeError) {
        return typeCheckFailure(context, value, "Invalid value for type '" + this.name + "': " + typeError);
      }

      return typeCheckSuccess();
    }
  });
  Object.defineProperty(CustomType.prototype, "getSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      return this.options.toSnapshot(node.storedValue);
    }
  });
  Object.defineProperty(CustomType.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      var valueToStore = this.options.isTargetType(initialValue) ? initialValue : this.options.fromSnapshot(initialValue, parent && parent.root.environment);
      return createScalarNode(this, parent, subpath, environment, valueToStore);
    }
  });
  Object.defineProperty(CustomType.prototype, "reconcile", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (current, value, parent, subpath) {
      var isSnapshot = !this.options.isTargetType(value); // in theory customs use scalar nodes which cannot be detached, but still...

      if (!current.isDetaching) {
        var unchanged = current.type === this && (isSnapshot ? value === current.snapshot : value === current.storedValue);

        if (unchanged) {
          current.setParent(parent, subpath);
          return current;
        }
      }

      var valueToStore = isSnapshot ? this.options.fromSnapshot(value, parent.root.environment) : value;
      var newNode = this.instantiate(parent, subpath, undefined, valueToStore);
      current.die(); // noop if detaching

      return newNode;
    }
  });
  return CustomType;
}(SimpleType); // we import the types to re-export them inside types.


var types = {
  enumeration: enumeration,
  model: model,
  compose: compose,
  custom: custom,
  reference: reference,
  safeReference: safeReference,
  union: union,
  optional: optional,
  literal: literal,
  maybe: maybe,
  maybeNull: maybeNull,
  refinement: refinement,
  string: string,
  boolean: boolean,
  number: number,
  integer: integer,
  Date: DatePrimitive,
  map: map,
  array: array,
  frozen: frozen,
  identifier: identifier,
  identifierNumber: identifierNumber,
  late: late,
  undefined: undefinedType,
  null: nullType,
  snapshotProcessor: snapshotProcessor
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js"), __webpack_require__(/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "./node_modules/mobx/dist/mobx.esm.js":
/*!********************************************!*\
  !*** ./node_modules/mobx/dist/mobx.esm.js ***!
  \********************************************/
/*! exports provided: $mobx, FlowCancellationError, ObservableMap, ObservableSet, Reaction, _allowStateChanges, _allowStateChangesInsideComputed, _allowStateReadsEnd, _allowStateReadsStart, _autoAction, _endAction, _getAdministration, _getGlobalState, _interceptReads, _isComputingDerivation, _resetGlobalState, _startAction, action, autorun, comparer, computed, configure, createAtom, entries, extendObservable, flow, flowResult, get, getAtom, getDebugName, getDependencyTree, getObserverTree, has, intercept, isAction, isBoxedObservable, isComputed, isComputedProp, isFlowCancellationError, isObservable, isObservableArray, isObservableMap, isObservableObject, isObservableProp, isObservableSet, keys, makeAutoObservable, makeObservable, observable, observe, onBecomeObserved, onBecomeUnobserved, onReactionError, override, reaction, remove, runInAction, set, spy, toJS, trace, transaction, untracked, values, when */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$mobx", function() { return $mobx; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlowCancellationError", function() { return FlowCancellationError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObservableMap", function() { return ObservableMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObservableSet", function() { return ObservableSet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Reaction", function() { return Reaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_allowStateChanges", function() { return allowStateChanges; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_allowStateChangesInsideComputed", function() { return runInAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_allowStateReadsEnd", function() { return allowStateReadsEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_allowStateReadsStart", function() { return allowStateReadsStart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_autoAction", function() { return autoAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_endAction", function() { return _endAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_getAdministration", function() { return getAdministration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_getGlobalState", function() { return getGlobalState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_interceptReads", function() { return interceptReads; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_isComputingDerivation", function() { return isComputingDerivation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_resetGlobalState", function() { return resetGlobalState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_startAction", function() { return _startAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "action", function() { return action; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "autorun", function() { return autorun; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comparer", function() { return comparer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computed", function() { return computed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "configure", function() { return configure; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createAtom", function() { return createAtom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "entries", function() { return entries; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extendObservable", function() { return extendObservable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flow", function() { return flow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flowResult", function() { return flowResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "get", function() { return get; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAtom", function() { return getAtom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDebugName", function() { return getDebugName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDependencyTree", function() { return getDependencyTree; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getObserverTree", function() { return getObserverTree; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "has", function() { return has; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intercept", function() { return intercept; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isAction", function() { return isAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isBoxedObservable", function() { return isObservableValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isComputed", function() { return isComputed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isComputedProp", function() { return isComputedProp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFlowCancellationError", function() { return isFlowCancellationError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservable", function() { return isObservable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservableArray", function() { return isObservableArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservableMap", function() { return isObservableMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservableObject", function() { return isObservableObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservableProp", function() { return isObservableProp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservableSet", function() { return isObservableSet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keys", function() { return keys; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeAutoObservable", function() { return makeAutoObservable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeObservable", function() { return makeObservable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "observable", function() { return observable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "observe", function() { return observe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onBecomeObserved", function() { return onBecomeObserved; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onBecomeUnobserved", function() { return onBecomeUnobserved; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onReactionError", function() { return onReactionError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "override", function() { return override; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reaction", function() { return reaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "remove", function() { return remove; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "runInAction", function() { return runInAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "spy", function() { return spy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toJS", function() { return toJS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trace", function() { return trace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transaction", function() { return transaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "untracked", function() { return untracked; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "values", function() { return values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "when", function() { return when; });
var niceErrors = {
  0: "Invalid value for configuration 'enforceActions', expected 'never', 'always' or 'observed'",
  1: function _(annotationType, key) {
    return "Cannot apply '" + annotationType + "' to '" + key.toString() + "': Field not found.";
  },
  5: "'keys()' can only be used on observable objects, arrays, sets and maps",
  6: "'values()' can only be used on observable objects, arrays, sets and maps",
  7: "'entries()' can only be used on observable objects, arrays and maps",
  8: "'set()' can only be used on observable objects, arrays and maps",
  9: "'remove()' can only be used on observable objects, arrays and maps",
  10: "'has()' can only be used on observable objects, arrays and maps",
  11: "'get()' can only be used on observable objects, arrays and maps",
  12: "Invalid annotation",
  13: "Dynamic observable objects cannot be frozen",
  14: "Intercept handlers should return nothing or a change object",
  15: "Observable arrays cannot be frozen",
  16: "Modification exception: the internal structure of an observable array was changed.",
  17: function _(index, length) {
    return "[mobx.array] Index out of bounds, " + index + " is larger than " + length;
  },
  18: "mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js",
  19: function _(other) {
    return "Cannot initialize from classes that inherit from Map: " + other.constructor.name;
  },
  20: function _(other) {
    return "Cannot initialize map from " + other;
  },
  21: function _(dataStructure) {
    return "Cannot convert to map from '" + dataStructure + "'";
  },
  22: "mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js",
  23: "It is not possible to get index atoms from arrays",
  24: function _(thing) {
    return "Cannot obtain administration from " + thing;
  },
  25: function _(property, name) {
    return "the entry '" + property + "' does not exist in the observable map '" + name + "'";
  },
  26: "please specify a property",
  27: function _(property, name) {
    return "no observable property '" + property.toString() + "' found on the observable object '" + name + "'";
  },
  28: function _(thing) {
    return "Cannot obtain atom from " + thing;
  },
  29: "Expecting some object",
  30: "invalid action stack. did you forget to finish an action?",
  31: "missing option for computed: get",
  32: function _(name, derivation) {
    return "Cycle detected in computation " + name + ": " + derivation;
  },
  33: function _(name) {
    return "The setter of computed value '" + name + "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?";
  },
  34: function _(name) {
    return "[ComputedValue '" + name + "'] It is not possible to assign a new value to a computed value.";
  },
  35: "There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`",
  36: "isolateGlobalState should be called before MobX is running any reactions",
  37: function _(method) {
    return "[mobx] `observableArray." + method + "()` mutates the array in-place, which is not allowed inside a derivation. Use `array.slice()." + method + "()` instead";
  }
};
var errors =  true ? niceErrors : undefined;

function die(error) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  if (true) {
    var e = typeof error === "string" ? error : errors[error];
    if (typeof e === "function") e = e.apply(null, args);
    throw new Error("[MobX] " + e);
  }

  throw new Error(typeof error === "number" ? "[MobX] minified error nr: " + error + (args.length ? " " + args.map(String).join(",") : "") + ". Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts" : "[MobX] " + error);
}

var mockGlobal = {};

function getGlobal() {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }

  if (typeof window !== "undefined") {
    return window;
  }

  if (typeof global !== "undefined") {
    return global;
  }

  if (typeof self !== "undefined") {
    return self;
  }

  return mockGlobal;
}

var assign = Object.assign;
var getDescriptor = Object.getOwnPropertyDescriptor;
var defineProperty = Object.defineProperty;
var objectPrototype = Object.prototype;
var EMPTY_ARRAY = [];
Object.freeze(EMPTY_ARRAY);
var EMPTY_OBJECT = {};
Object.freeze(EMPTY_OBJECT);
var hasProxy = typeof Proxy !== "undefined";
var plainObjectString = /*#__PURE__*/Object.toString();

function assertProxies() {
  if (!hasProxy) {
    die( true ? "`Proxy` objects are not available in the current environment. Please configure MobX to enable a fallback implementation.`" : undefined);
  }
}

function warnAboutProxyRequirement(msg) {
  if ( true && globalState.verifyProxies) {
    die("MobX is currently configured to be able to run in ES5 mode, but in ES5 MobX won't be able to " + msg);
  }
}

function getNextId() {
  return ++globalState.mobxGuid;
}
/**
 * Makes sure that the provided function is invoked at most once.
 */


function once(func) {
  var invoked = false;
  return function () {
    if (invoked) return;
    invoked = true;
    return func.apply(this, arguments);
  };
}

var noop = function noop() {};

function isFunction(fn) {
  return typeof fn === "function";
}

function isStringish(value) {
  var t = typeof value;

  switch (t) {
    case "string":
    case "symbol":
    case "number":
      return true;
  }

  return false;
}

function isObject(value) {
  return value !== null && typeof value === "object";
}

function isPlainObject(value) {
  var _proto$constructor;

  if (!isObject(value)) return false;
  var proto = Object.getPrototypeOf(value);
  if (proto == null) return true;
  return ((_proto$constructor = proto.constructor) == null ? void 0 : _proto$constructor.toString()) === plainObjectString;
} // https://stackoverflow.com/a/37865170


function isGenerator(obj) {
  var constructor = obj == null ? void 0 : obj.constructor;
  if (!constructor) return false;
  if ("GeneratorFunction" === constructor.name || "GeneratorFunction" === constructor.displayName) return true;
  return false;
}

function addHiddenProp(object, propName, value) {
  defineProperty(object, propName, {
    enumerable: false,
    writable: true,
    configurable: true,
    value: value
  });
}

function addHiddenFinalProp(object, propName, value) {
  defineProperty(object, propName, {
    enumerable: false,
    writable: false,
    configurable: true,
    value: value
  });
}

function createInstanceofPredicate(name, theClass) {
  var propName = "isMobX" + name;
  theClass.prototype[propName] = true;
  return function (x) {
    return isObject(x) && x[propName] === true;
  };
}

function isES6Map(thing) {
  return thing instanceof Map;
}

function isES6Set(thing) {
  return thing instanceof Set;
}

var hasGetOwnPropertySymbols = typeof Object.getOwnPropertySymbols !== "undefined";
/**
 * Returns the following: own enumerable keys and symbols.
 */

function getPlainObjectKeys(object) {
  var keys = Object.keys(object); // Not supported in IE, so there are not going to be symbol props anyway...

  if (!hasGetOwnPropertySymbols) return keys;
  var symbols = Object.getOwnPropertySymbols(object);
  if (!symbols.length) return keys;
  return [].concat(keys, symbols.filter(function (s) {
    return objectPrototype.propertyIsEnumerable.call(object, s);
  }));
} // From Immer utils
// Returns all own keys, including non-enumerable and symbolic


var ownKeys = typeof Reflect !== "undefined" && Reflect.ownKeys ? Reflect.ownKeys : hasGetOwnPropertySymbols ? function (obj) {
  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));
} :
/* istanbul ignore next */
Object.getOwnPropertyNames;

function stringifyKey(key) {
  if (typeof key === "string") return key;
  if (typeof key === "symbol") return key.toString();
  return new String(key).toString();
}

function toPrimitive(value) {
  return value === null ? null : typeof value === "object" ? "" + value : value;
}

function hasProp(target, prop) {
  return objectPrototype.hasOwnProperty.call(target, prop);
} // From Immer utils


var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(target) {
  // Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274
  var res = {}; // Note: without polyfill for ownKeys, symbols won't be picked up

  ownKeys(target).forEach(function (key) {
    res[key] = getDescriptor(target, key);
  });
  return res;
};

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  it = o[Symbol.iterator]();
  return it.next.bind(it);
}

var storedAnnotationsSymbol = /*#__PURE__*/Symbol("mobx-stored-annotations");
/**
 * Creates a function that acts as
 * - decorator
 * - annotation object
 */

function createDecoratorAnnotation(annotation) {
  function decorator(target, property) {
    storeAnnotation(target, property, annotation);
  }

  return Object.assign(decorator, annotation);
}
/**
 * Stores annotation to prototype,
 * so it can be inspected later by `makeObservable` called from constructor
 */


function storeAnnotation(prototype, key, annotation) {
  if (!hasProp(prototype, storedAnnotationsSymbol)) {
    addHiddenProp(prototype, storedAnnotationsSymbol, _extends({}, prototype[storedAnnotationsSymbol]));
  } // @override must override something


  if ( true && isOverride(annotation) && !hasProp(prototype[storedAnnotationsSymbol], key)) {
    var fieldName = prototype.constructor.name + ".prototype." + key.toString();
    die("'" + fieldName + "' is decorated with 'override', " + "but no such decorated member was found on prototype.");
  } // Cannot re-decorate


  assertNotDecorated(prototype, annotation, key); // Ignore override

  if (!isOverride(annotation)) {
    prototype[storedAnnotationsSymbol][key] = annotation;
  }
}

function assertNotDecorated(prototype, annotation, key) {
  if ( true && !isOverride(annotation) && hasProp(prototype[storedAnnotationsSymbol], key)) {
    var fieldName = prototype.constructor.name + ".prototype." + key.toString();
    var currentAnnotationType = prototype[storedAnnotationsSymbol][key].annotationType_;
    var requestedAnnotationType = annotation.annotationType_;
    die("Cannot apply '@" + requestedAnnotationType + "' to '" + fieldName + "':" + ("\nThe field is already decorated with '@" + currentAnnotationType + "'.") + "\nRe-decorating fields is not allowed." + "\nUse '@override' decorator for methods overriden by subclass.");
  }
}
/**
 * Collects annotations from prototypes and stores them on target (instance)
 */


function collectStoredAnnotations(target) {
  if (!hasProp(target, storedAnnotationsSymbol)) {
    if ( true && !target[storedAnnotationsSymbol]) {
      die("No annotations were passed to makeObservable, but no decorated members have been found either");
    } // We need a copy as we will remove annotation from the list once it's applied.


    addHiddenProp(target, storedAnnotationsSymbol, _extends({}, target[storedAnnotationsSymbol]));
  }

  return target[storedAnnotationsSymbol];
}

var $mobx = /*#__PURE__*/Symbol("mobx administration");

var Atom = /*#__PURE__*/function () {
  // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed

  /**
   * Create a new atom. For debugging purposes it is recommended to give it a name.
   * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.
   */
  function Atom(name_) {
    if (name_ === void 0) {
      name_ =  true ? "Atom@" + getNextId() : undefined;
    }

    this.name_ = void 0;
    this.isPendingUnobservation_ = false;
    this.isBeingObserved_ = false;
    this.observers_ = new Set();
    this.diffValue_ = 0;
    this.lastAccessedBy_ = 0;
    this.lowestObserverState_ = IDerivationState_.NOT_TRACKING_;
    this.onBOL = void 0;
    this.onBUOL = void 0;
    this.name_ = name_;
  } // onBecomeObservedListeners


  var _proto = Atom.prototype;

  _proto.onBO = function onBO() {
    if (this.onBOL) {
      this.onBOL.forEach(function (listener) {
        return listener();
      });
    }
  };

  _proto.onBUO = function onBUO() {
    if (this.onBUOL) {
      this.onBUOL.forEach(function (listener) {
        return listener();
      });
    }
  }
  /**
   * Invoke this method to notify mobx that your atom has been used somehow.
   * Returns true if there is currently a reactive context.
   */
  ;

  _proto.reportObserved = function reportObserved$1() {
    return reportObserved(this);
  }
  /**
   * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.
   */
  ;

  _proto.reportChanged = function reportChanged() {
    startBatch();
    propagateChanged(this);
    endBatch();
  };

  _proto.toString = function toString() {
    return this.name_;
  };

  return Atom;
}();

var isAtom = /*#__PURE__*/createInstanceofPredicate("Atom", Atom);

function createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
  if (onBecomeObservedHandler === void 0) {
    onBecomeObservedHandler = noop;
  }

  if (onBecomeUnobservedHandler === void 0) {
    onBecomeUnobservedHandler = noop;
  }

  var atom = new Atom(name); // default `noop` listener will not initialize the hook Set

  if (onBecomeObservedHandler !== noop) {
    onBecomeObserved(atom, onBecomeObservedHandler);
  }

  if (onBecomeUnobservedHandler !== noop) {
    onBecomeUnobserved(atom, onBecomeUnobservedHandler);
  }

  return atom;
}

function identityComparer(a, b) {
  return a === b;
}

function structuralComparer(a, b) {
  return deepEqual(a, b);
}

function shallowComparer(a, b) {
  return deepEqual(a, b, 1);
}

function defaultComparer(a, b) {
  return Object.is(a, b);
}

var comparer = {
  identity: identityComparer,
  structural: structuralComparer,
  "default": defaultComparer,
  shallow: shallowComparer
};

function deepEnhancer(v, _, name) {
  // it is an observable already, done
  if (isObservable(v)) return v; // something that can be converted and mutated?

  if (Array.isArray(v)) return observable.array(v, {
    name: name
  });
  if (isPlainObject(v)) return observable.object(v, undefined, {
    name: name
  });
  if (isES6Map(v)) return observable.map(v, {
    name: name
  });
  if (isES6Set(v)) return observable.set(v, {
    name: name
  });
  return v;
}

function shallowEnhancer(v, _, name) {
  if (v === undefined || v === null) return v;
  if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v)) return v;
  if (Array.isArray(v)) return observable.array(v, {
    name: name,
    deep: false
  });
  if (isPlainObject(v)) return observable.object(v, undefined, {
    name: name,
    deep: false
  });
  if (isES6Map(v)) return observable.map(v, {
    name: name,
    deep: false
  });
  if (isES6Set(v)) return observable.set(v, {
    name: name,
    deep: false
  });
  if (true) die("The shallow modifier / decorator can only used in combination with arrays, objects, maps and sets");
}

function referenceEnhancer(newValue) {
  // never turn into an observable
  return newValue;
}

function refStructEnhancer(v, oldValue) {
  if ( true && isObservable(v)) die("observable.struct should not be used with observable values");
  if (deepEqual(v, oldValue)) return oldValue;
  return v;
}

var OVERRIDE = "override";
var override = /*#__PURE__*/createDecoratorAnnotation({
  annotationType_: OVERRIDE,
  make_: make_,
  extend_: extend_
});

function isOverride(annotation) {
  return annotation.annotationType_ === OVERRIDE;
}

function make_(adm, key) {
  // Must not be plain object
  if ( true && adm.isPlainObject_) {
    die("Cannot apply '" + this.annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + this.annotationType_ + "' cannot be used on plain objects."));
  } // Must override something


  if ( true && !hasProp(adm.appliedAnnotations_, key)) {
    die("'" + adm.name_ + "." + key.toString() + "' is annotated with '" + this.annotationType_ + "', " + "but no such annotated member was found on prototype.");
  }
}

function extend_(adm, key, descriptor, proxyTrap) {
  die("'" + this.annotationType_ + "' can only be used with 'makeObservable'");
}

function createActionAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$1,
    extend_: extend_$1
  };
}

function make_$1(adm, key) {
  var _this$options_$bound, _this$options_, _adm$target_$storedAn;

  var annotated = false;
  var source = adm.target_;
  var bound = (_this$options_$bound = (_this$options_ = this.options_) == null ? void 0 : _this$options_.bound) != null ? _this$options_$bound : false;

  while (source && source !== objectPrototype) {
    var descriptor = getDescriptor(source, key);

    if (descriptor) {
      // Instance or bound
      // Keep first because the operation can be intercepted
      // and we don't want to end up with partially annotated proto chain
      if (source === adm.target_ || bound) {
        var actionDescriptor = createActionDescriptor(adm, this, key, descriptor);
        var definePropertyOutcome = adm.defineProperty_(key, actionDescriptor);

        if (!definePropertyOutcome) {
          // Intercepted
          return;
        }

        annotated = true; // Don't annotate protos if bound

        if (bound) {
          break;
        }
      } // Prototype


      if (source !== adm.target_) {
        if (isAction(descriptor.value)) {
          // A prototype could have been annotated already by other constructor,
          // rest of the proto chain must be annotated already
          annotated = true;
          break;
        }

        var _actionDescriptor = createActionDescriptor(adm, this, key, descriptor, false);

        defineProperty(source, key, _actionDescriptor);
        annotated = true;
      }
    }

    source = Object.getPrototypeOf(source);
  }

  if (annotated) {
    recordAnnotationApplied(adm, this, key);
  } else if (!((_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? void 0 : _adm$target_$storedAn[key])) {
    // Throw on missing key, except for decorators:
    // Decorator annotations are collected from whole prototype chain.
    // When called from super() some props may not exist yet.
    // However we don't have to worry about missing prop,
    // because the decorator must have been applied to something.
    die(1, this.annotationType_, adm.name_ + "." + key.toString());
  }
}

function extend_$1(adm, key, descriptor, proxyTrap) {
  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor);
  return adm.defineProperty_(key, actionDescriptor, proxyTrap);
}

function assertActionDescriptor(adm, _ref, key, _ref2) {
  var annotationType_ = _ref.annotationType_;
  var value = _ref2.value;

  if ( true && !isFunction(value)) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on properties with a function value."));
  }
}

function createActionDescriptor(adm, annotation, key, descriptor, // provides ability to disable safeDescriptors for prototypes
safeDescriptors) {
  var _annotation$options_, _annotation$options_$, _annotation$options_2, _annotation$options_$2, _annotation$options_3;

  if (safeDescriptors === void 0) {
    safeDescriptors = globalState.safeDescriptors;
  }

  assertActionDescriptor(adm, annotation, key, descriptor);
  var value = descriptor.value;

  if ((_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.bound) {
    var _adm$proxy_;

    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
  }

  return {
    value: createAction((_annotation$options_$ = (_annotation$options_2 = annotation.options_) == null ? void 0 : _annotation$options_2.name) != null ? _annotation$options_$ : key.toString(), value, (_annotation$options_$2 = (_annotation$options_3 = annotation.options_) == null ? void 0 : _annotation$options_3.autoAction) != null ? _annotation$options_$2 : false),
    // Non-configurable for classes
    // prevents accidental field redefinition in subclass
    configurable: safeDescriptors ? adm.isPlainObject_ : true,
    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058
    enumerable: false,
    // Non-obsevable, therefore non-writable
    // Also prevents rewriting in subclass constructor
    writable: safeDescriptors ? false : true
  };
}

function createFlowAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$2,
    extend_: extend_$2
  };
}

function make_$2(adm, key) {
  var _adm$target_$storedAn;

  var annotated = false;
  var source = adm.target_;

  while (source && source !== objectPrototype) {
    var descriptor = getDescriptor(source, key);

    if (descriptor) {
      if (source !== adm.target_) {
        // Prototype
        if (isFlow(descriptor.value)) {
          // A prototype could have been annotated already by other constructor,
          // rest of the proto chain must be annotated already
          annotated = true;
          break;
        }

        var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, false);
        defineProperty(source, key, flowDescriptor);
      } else {
        var _flowDescriptor = createFlowDescriptor(adm, this, key, descriptor);

        var definePropertyOutcome = adm.defineProperty_(key, _flowDescriptor);

        if (!definePropertyOutcome) {
          // Intercepted
          return;
        }
      }

      annotated = true;
    }

    source = Object.getPrototypeOf(source);
  }

  if (annotated) {
    recordAnnotationApplied(adm, this, key);
  } else if (!((_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? void 0 : _adm$target_$storedAn[key])) {
    // Throw on missing key, except for decorators:
    // Decorator annotations are collected from whole prototype chain.
    // When called from super() some props may not exist yet.
    // However we don't have to worry about missing prop,
    // because the decorator must have been applied to something.
    die(1, this.annotationType_, adm.name_ + "." + key.toString());
  }
}

function extend_$2(adm, key, descriptor, proxyTrap) {
  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor);
  return adm.defineProperty_(key, flowDescriptor, proxyTrap);
}

function assertFlowDescriptor(adm, _ref, key, _ref2) {
  var annotationType_ = _ref.annotationType_;
  var value = _ref2.value;

  if ( true && !isFunction(value)) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on properties with a generator function value."));
  }
}

function createFlowDescriptor(adm, annotation, key, descriptor, // provides ability to disable safeDescriptors for prototypes
safeDescriptors) {
  if (safeDescriptors === void 0) {
    safeDescriptors = globalState.safeDescriptors;
  }

  assertFlowDescriptor(adm, annotation, key, descriptor);
  return {
    value: flow(descriptor.value),
    // Non-configurable for classes
    // prevents accidental field redefinition in subclass
    configurable: safeDescriptors ? adm.isPlainObject_ : true,
    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058
    enumerable: false,
    // Non-obsevable, therefore non-writable
    // Also prevents rewriting in subclass constructor
    writable: safeDescriptors ? false : true
  };
}

function createComputedAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$3,
    extend_: extend_$3
  };
}

function make_$3(adm, key) {
  var _adm$target_$storedAn;

  var source = adm.target_;

  while (source && source !== objectPrototype) {
    var descriptor = getDescriptor(source, key);

    if (descriptor) {
      assertComputedDescriptor(adm, this, key, descriptor);
      var definePropertyOutcome = adm.defineComputedProperty_(key, _extends({}, this.options_, {
        get: descriptor.get,
        set: descriptor.set
      }));

      if (!definePropertyOutcome) {
        // Intercepted
        return;
      }

      recordAnnotationApplied(adm, this, key);
      return;
    }

    source = Object.getPrototypeOf(source);
  }

  if (!((_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? void 0 : _adm$target_$storedAn[key])) {
    // Throw on missing key, except for decorators:
    // Decorator annotations are collected from whole prototype chain.
    // When called from super() some props may not exist yet.
    // However we don't have to worry about missing prop,
    // because the decorator must have been applied to something.
    die(1, this.annotationType_, adm.name_ + "." + key.toString());
  }
}

function extend_$3(adm, key, descriptor, proxyTrap) {
  assertComputedDescriptor(adm, this, key, descriptor);
  return adm.defineComputedProperty_(key, _extends({}, this.options_, {
    get: descriptor.get,
    set: descriptor.set
  }), proxyTrap);
}

function assertComputedDescriptor(adm, _ref, key, _ref2) {
  var annotationType_ = _ref.annotationType_;
  var get = _ref2.get;

  if ( true && !get) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on getter(+setter) properties."));
  }
}

function createObservableAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$4,
    extend_: extend_$4
  };
}

function make_$4(adm, key) {
  var _adm$target_$storedAn;

  var source = adm.target_; // Copy props from proto as well, see test:
  // "decorate should work with Object.create"

  while (source && source !== objectPrototype) {
    var descriptor = getDescriptor(source, key);

    if (descriptor) {
      var _this$options_$enhanc, _this$options_;

      assertObservableDescriptor(adm, this, key, descriptor);
      var definePropertyOutcome = adm.defineObservableProperty_(key, descriptor.value, (_this$options_$enhanc = (_this$options_ = this.options_) == null ? void 0 : _this$options_.enhancer) != null ? _this$options_$enhanc : deepEnhancer);

      if (!definePropertyOutcome) {
        // Intercepted
        return;
      }

      recordAnnotationApplied(adm, this, key);
      return;
    }

    source = Object.getPrototypeOf(source);
  }

  if (!((_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? void 0 : _adm$target_$storedAn[key])) {
    // Throw on missing key, except for decorators:
    // Decorator annotations are collected from whole prototype chain.
    // When called from super() some props may not exist yet.
    // However we don't have to worry about missing prop,
    // because the decorator must have been applied to something.
    die(1, this.annotationType_, adm.name_ + "." + key.toString());
  }
}

function extend_$4(adm, key, descriptor, proxyTrap) {
  var _this$options_$enhanc2, _this$options_2;

  assertObservableDescriptor(adm, this, key, descriptor);
  return adm.defineObservableProperty_(key, descriptor.value, (_this$options_$enhanc2 = (_this$options_2 = this.options_) == null ? void 0 : _this$options_2.enhancer) != null ? _this$options_$enhanc2 : deepEnhancer, proxyTrap);
}

function assertObservableDescriptor(adm, _ref, key, descriptor) {
  var annotationType_ = _ref.annotationType_;

  if ( true && !("value" in descriptor)) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' cannot be used on getter/setter properties"));
  }
} // in the majority of cases


var defaultCreateObservableOptions = {
  deep: true,
  name: undefined,
  defaultDecorator: undefined,
  proxy: true
};
Object.freeze(defaultCreateObservableOptions);

function asCreateObservableOptions(thing) {
  return thing || defaultCreateObservableOptions;
}

var observableAnnotation = /*#__PURE__*/createObservableAnnotation("observable");
var observableRefAnnotation = /*#__PURE__*/createObservableAnnotation("observable.ref", {
  enhancer: referenceEnhancer
});
var observableShallowAnnotation = /*#__PURE__*/createObservableAnnotation("observable.shallow", {
  enhancer: shallowEnhancer
});
var observableStructAnnotation = /*#__PURE__*/createObservableAnnotation("observable.struct", {
  enhancer: refStructEnhancer
});
var observableDecoratorAnnotation = /*#__PURE__*/createDecoratorAnnotation(observableAnnotation);

function getEnhancerFromOptions(options) {
  return options.deep === true ? deepEnhancer : options.deep === false ? referenceEnhancer : getEnhancerFromAnnotation(options.defaultDecorator);
}

function getAnnotationFromOptions(options) {
  return options ? options.deep === true ? observableAnnotation : options.deep === false ? observableRefAnnotation : options.defaultDecorator : undefined;
}

function getEnhancerFromAnnotation(annotation) {
  var _annotation$options_$, _annotation$options_;

  return !annotation ? deepEnhancer : (_annotation$options_$ = (_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.enhancer) != null ? _annotation$options_$ : deepEnhancer;
}
/**
 * Turns an object, array or function into a reactive structure.
 * @param v the value which should become observable.
 */


function createObservable(v, arg2, arg3) {
  // @observable someProp;
  if (isStringish(arg2)) {
    storeAnnotation(v, arg2, observableAnnotation);
    return;
  } // already observable - ignore


  if (isObservable(v)) return v; // plain object

  if (isPlainObject(v)) return observable.object(v, arg2, arg3); // Array

  if (Array.isArray(v)) return observable.array(v, arg2); // Map

  if (isES6Map(v)) return observable.map(v, arg2); // Set

  if (isES6Set(v)) return observable.set(v, arg2); // other object - ignore

  if (typeof v === "object" && v !== null) return v; // anything else

  return observable.box(v, arg2);
}

Object.assign(createObservable, observableDecoratorAnnotation);
var observableFactories = {
  box: function box(value, options) {
    var o = asCreateObservableOptions(options);
    return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals);
  },
  array: function array(initialValues, options) {
    var o = asCreateObservableOptions(options);
    return (globalState.useProxies === false || o.proxy === false ? createLegacyArray : createObservableArray)(initialValues, getEnhancerFromOptions(o), o.name);
  },
  map: function map(initialValues, options) {
    var o = asCreateObservableOptions(options);
    return new ObservableMap(initialValues, getEnhancerFromOptions(o), o.name);
  },
  set: function set(initialValues, options) {
    var o = asCreateObservableOptions(options);
    return new ObservableSet(initialValues, getEnhancerFromOptions(o), o.name);
  },
  object: function object(props, decorators, options) {
    return extendObservable(globalState.useProxies === false || (options == null ? void 0 : options.proxy) === false ? asObservableObject({}, options) : asDynamicObservableObject({}, options), props, decorators);
  },
  ref: /*#__PURE__*/createDecoratorAnnotation(observableRefAnnotation),
  shallow: /*#__PURE__*/createDecoratorAnnotation(observableShallowAnnotation),
  deep: observableDecoratorAnnotation,
  struct: /*#__PURE__*/createDecoratorAnnotation(observableStructAnnotation)
}; // eslint-disable-next-line

var observable = /*#__PURE__*/assign(createObservable, observableFactories);
var COMPUTED = "computed";
var COMPUTED_STRUCT = "computed.struct";
var computedAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED);
var computedStructAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED_STRUCT, {
  equals: comparer.structural
});
/**
 * Decorator for class properties: @computed get value() { return expr; }.
 * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;
 */

var computed = function computed(arg1, arg2) {
  if (isStringish(arg2)) {
    // @computed
    return storeAnnotation(arg1, arg2, computedAnnotation);
  }

  if (isPlainObject(arg1)) {
    // @computed({ options })
    return createDecoratorAnnotation(createComputedAnnotation(COMPUTED, arg1));
  } // computed(expr, options?)


  if (true) {
    if (!isFunction(arg1)) die("First argument to `computed` should be an expression.");
    if (isFunction(arg2)) die("A setter as second argument is no longer supported, use `{ set: fn }` option instead");
  }

  var opts = isPlainObject(arg2) ? arg2 : {};
  opts.get = arg1;
  opts.name || (opts.name = arg1.name || "");
  /* for generated name */

  return new ComputedValue(opts);
};

Object.assign(computed, computedAnnotation);
computed.struct = /*#__PURE__*/createDecoratorAnnotation(computedStructAnnotation);

var _getDescriptor$config, _getDescriptor; // mobx versions


var currentActionId = 0;
var nextActionId = 1;
var isFunctionNameConfigurable = (_getDescriptor$config = (_getDescriptor = /*#__PURE__*/getDescriptor(function () {}, "name")) == null ? void 0 : _getDescriptor.configurable) != null ? _getDescriptor$config : false; // we can safely recycle this object

var tmpNameDescriptor = {
  value: "action",
  configurable: true,
  writable: false,
  enumerable: false
};

function createAction(actionName, fn, autoAction, ref) {
  if (autoAction === void 0) {
    autoAction = false;
  }

  if (true) {
    if (!isFunction(fn)) die("`action` can only be invoked on functions");
    if (typeof actionName !== "string" || !actionName) die("actions should have valid names, got: '" + actionName + "'");
  }

  function res() {
    return executeAction(actionName, autoAction, fn, ref || this, arguments);
  }

  res.isMobxAction = true;

  if (isFunctionNameConfigurable) {
    tmpNameDescriptor.value = actionName;
    Object.defineProperty(res, "name", tmpNameDescriptor);
  }

  return res;
}

function executeAction(actionName, canRunAsDerivation, fn, scope, args) {
  var runInfo = _startAction(actionName, canRunAsDerivation, scope, args);

  try {
    return fn.apply(scope, args);
  } catch (err) {
    runInfo.error_ = err;
    throw err;
  } finally {
    _endAction(runInfo);
  }
}

function _startAction(actionName, canRunAsDerivation, // true for autoAction
scope, args) {
  var notifySpy_ =  true && isSpyEnabled() && !!actionName;
  var startTime_ = 0;

  if ( true && notifySpy_) {
    startTime_ = Date.now();
    var flattenedArgs = args ? Array.from(args) : EMPTY_ARRAY;
    spyReportStart({
      type: ACTION,
      name: actionName,
      object: scope,
      arguments: flattenedArgs
    });
  }

  var prevDerivation_ = globalState.trackingDerivation;
  var runAsAction = !canRunAsDerivation || !prevDerivation_;
  startBatch();
  var prevAllowStateChanges_ = globalState.allowStateChanges; // by default preserve previous allow

  if (runAsAction) {
    untrackedStart();
    prevAllowStateChanges_ = allowStateChangesStart(true);
  }

  var prevAllowStateReads_ = allowStateReadsStart(true);
  var runInfo = {
    runAsAction_: runAsAction,
    prevDerivation_: prevDerivation_,
    prevAllowStateChanges_: prevAllowStateChanges_,
    prevAllowStateReads_: prevAllowStateReads_,
    notifySpy_: notifySpy_,
    startTime_: startTime_,
    actionId_: nextActionId++,
    parentActionId_: currentActionId
  };
  currentActionId = runInfo.actionId_;
  return runInfo;
}

function _endAction(runInfo) {
  if (currentActionId !== runInfo.actionId_) {
    die(30);
  }

  currentActionId = runInfo.parentActionId_;

  if (runInfo.error_ !== undefined) {
    globalState.suppressReactionErrors = true;
  }

  allowStateChangesEnd(runInfo.prevAllowStateChanges_);
  allowStateReadsEnd(runInfo.prevAllowStateReads_);
  endBatch();
  if (runInfo.runAsAction_) untrackedEnd(runInfo.prevDerivation_);

  if ( true && runInfo.notifySpy_) {
    spyReportEnd({
      time: Date.now() - runInfo.startTime_
    });
  }

  globalState.suppressReactionErrors = false;
}

function allowStateChanges(allowStateChanges, func) {
  var prev = allowStateChangesStart(allowStateChanges);

  try {
    return func();
  } finally {
    allowStateChangesEnd(prev);
  }
}

function allowStateChangesStart(allowStateChanges) {
  var prev = globalState.allowStateChanges;
  globalState.allowStateChanges = allowStateChanges;
  return prev;
}

function allowStateChangesEnd(prev) {
  globalState.allowStateChanges = prev;
}

var _Symbol$toPrimitive;

var CREATE = "create";
_Symbol$toPrimitive = Symbol.toPrimitive;

var ObservableValue = /*#__PURE__*/function (_Atom) {
  _inheritsLoose(ObservableValue, _Atom);

  function ObservableValue(value, enhancer, name_, notifySpy, equals) {
    var _this;

    if (name_ === void 0) {
      name_ =  true ? "ObservableValue@" + getNextId() : undefined;
    }

    if (notifySpy === void 0) {
      notifySpy = true;
    }

    if (equals === void 0) {
      equals = comparer["default"];
    }

    _this = _Atom.call(this, name_) || this;
    _this.enhancer = void 0;
    _this.name_ = void 0;
    _this.equals = void 0;
    _this.hasUnreportedChange_ = false;
    _this.interceptors_ = void 0;
    _this.changeListeners_ = void 0;
    _this.value_ = void 0;
    _this.dehancer = void 0;
    _this.enhancer = enhancer;
    _this.name_ = name_;
    _this.equals = equals;
    _this.value_ = enhancer(value, undefined, name_);

    if ( true && notifySpy && isSpyEnabled()) {
      // only notify spy if this is a stand-alone observable
      spyReport({
        type: CREATE,
        object: _assertThisInitialized(_this),
        observableKind: "value",
        debugObjectName: _this.name_,
        newValue: "" + _this.value_
      });
    }

    return _this;
  }

  var _proto = ObservableValue.prototype;

  _proto.dehanceValue = function dehanceValue(value) {
    if (this.dehancer !== undefined) return this.dehancer(value);
    return value;
  };

  _proto.set = function set(newValue) {
    var oldValue = this.value_;
    newValue = this.prepareNewValue_(newValue);

    if (newValue !== globalState.UNCHANGED) {
      var notifySpy = isSpyEnabled();

      if ( true && notifySpy) {
        spyReportStart({
          type: UPDATE,
          object: this,
          observableKind: "value",
          debugObjectName: this.name_,
          newValue: newValue,
          oldValue: oldValue
        });
      }

      this.setNewValue_(newValue);
      if ( true && notifySpy) spyReportEnd();
    }
  };

  _proto.prepareNewValue_ = function prepareNewValue_(newValue) {
    checkIfStateModificationsAreAllowed(this);

    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this,
        type: UPDATE,
        newValue: newValue
      });
      if (!change) return globalState.UNCHANGED;
      newValue = change.newValue;
    } // apply modifier


    newValue = this.enhancer(newValue, this.value_, this.name_);
    return this.equals(this.value_, newValue) ? globalState.UNCHANGED : newValue;
  };

  _proto.setNewValue_ = function setNewValue_(newValue) {
    var oldValue = this.value_;
    this.value_ = newValue;
    this.reportChanged();

    if (hasListeners(this)) {
      notifyListeners(this, {
        type: UPDATE,
        object: this,
        newValue: newValue,
        oldValue: oldValue
      });
    }
  };

  _proto.get = function get() {
    this.reportObserved();
    return this.dehanceValue(this.value_);
  };

  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };

  _proto.observe_ = function observe_(listener, fireImmediately) {
    if (fireImmediately) listener({
      observableKind: "value",
      debugObjectName: this.name_,
      object: this,
      type: UPDATE,
      newValue: this.value_,
      oldValue: undefined
    });
    return registerListener(this, listener);
  };

  _proto.raw = function raw() {
    // used by MST ot get undehanced value
    return this.value_;
  };

  _proto.toJSON = function toJSON() {
    return this.get();
  };

  _proto.toString = function toString() {
    return this.name_ + "[" + this.value_ + "]";
  };

  _proto.valueOf = function valueOf() {
    return toPrimitive(this.get());
  };

  _proto[_Symbol$toPrimitive] = function () {
    return this.valueOf();
  };

  return ObservableValue;
}(Atom);

var isObservableValue = /*#__PURE__*/createInstanceofPredicate("ObservableValue", ObservableValue);

var _Symbol$toPrimitive$1;
/**
 * A node in the state dependency root that observes other nodes, and can be observed itself.
 *
 * ComputedValue will remember the result of the computation for the duration of the batch, or
 * while being observed.
 *
 * During this time it will recompute only when one of its direct dependencies changed,
 * but only when it is being accessed with `ComputedValue.get()`.
 *
 * Implementation description:
 * 1. First time it's being accessed it will compute and remember result
 *    give back remembered result until 2. happens
 * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.
 * 3. When it's being accessed, recompute if any shallow dependency changed.
 *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.
 *    go to step 2. either way
 *
 * If at any point it's outside batch and it isn't observed: reset everything and go to 1.
 */


_Symbol$toPrimitive$1 = Symbol.toPrimitive;

var ComputedValue = /*#__PURE__*/function () {
  // nodes we are looking at. Our value depends on these nodes
  // during tracking it's an array with new observed observers
  // to check for cycles
  // N.B: unminified as it is used by MST

  /**
   * Create a new computed value based on a function expression.
   *
   * The `name` property is for debug purposes only.
   *
   * The `equals` property specifies the comparer function to use to determine if a newly produced
   * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`
   * compares based on identity comparison (===), and `structuralComparer` deeply compares the structure.
   * Structural comparison can be convenient if you always produce a new aggregated object and
   * don't want to notify observers if it is structurally the same.
   * This is useful for working with vectors, mouse coordinates etc.
   */
  function ComputedValue(options) {
    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
    this.observing_ = [];
    this.newObserving_ = null;
    this.isBeingObserved_ = false;
    this.isPendingUnobservation_ = false;
    this.observers_ = new Set();
    this.diffValue_ = 0;
    this.runId_ = 0;
    this.lastAccessedBy_ = 0;
    this.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
    this.unboundDepsCount_ = 0;
    this.value_ = new CaughtException(null);
    this.name_ = void 0;
    this.triggeredBy_ = void 0;
    this.isComputing_ = false;
    this.isRunningSetter_ = false;
    this.derivation = void 0;
    this.setter_ = void 0;
    this.isTracing_ = TraceMode.NONE;
    this.scope_ = void 0;
    this.equals_ = void 0;
    this.requiresReaction_ = void 0;
    this.keepAlive_ = void 0;
    this.onBOL = void 0;
    this.onBUOL = void 0;
    if (!options.get) die(31);
    this.derivation = options.get;
    this.name_ = options.name || ( true ? "ComputedValue@" + getNextId() : undefined);

    if (options.set) {
      this.setter_ = createAction( true ? this.name_ + "-setter" : undefined, options.set);
    }

    this.equals_ = options.equals || (options.compareStructural || options.struct ? comparer.structural : comparer["default"]);
    this.scope_ = options.context;
    this.requiresReaction_ = !!options.requiresReaction;
    this.keepAlive_ = !!options.keepAlive;
  }

  var _proto = ComputedValue.prototype;

  _proto.onBecomeStale_ = function onBecomeStale_() {
    propagateMaybeChanged(this);
  };

  _proto.onBO = function onBO() {
    if (this.onBOL) {
      this.onBOL.forEach(function (listener) {
        return listener();
      });
    }
  };

  _proto.onBUO = function onBUO() {
    if (this.onBUOL) {
      this.onBUOL.forEach(function (listener) {
        return listener();
      });
    }
  }
  /**
   * Returns the current value of this computed value.
   * Will evaluate its computation first if needed.
   */
  ;

  _proto.get = function get() {
    if (this.isComputing_) die(32, this.name_, this.derivation);

    if (globalState.inBatch === 0 && // !globalState.trackingDerivatpion &&
    this.observers_.size === 0 && !this.keepAlive_) {
      if (shouldCompute(this)) {
        this.warnAboutUntrackedRead_();
        startBatch(); // See perf test 'computed memoization'

        this.value_ = this.computeValue_(false);
        endBatch();
      }
    } else {
      reportObserved(this);

      if (shouldCompute(this)) {
        var prevTrackingContext = globalState.trackingContext;
        if (this.keepAlive_ && !prevTrackingContext) globalState.trackingContext = this;
        if (this.trackAndCompute()) propagateChangeConfirmed(this);
        globalState.trackingContext = prevTrackingContext;
      }
    }

    var result = this.value_;
    if (isCaughtException(result)) throw result.cause;
    return result;
  };

  _proto.set = function set(value) {
    if (this.setter_) {
      if (this.isRunningSetter_) die(33, this.name_);
      this.isRunningSetter_ = true;

      try {
        this.setter_.call(this.scope_, value);
      } finally {
        this.isRunningSetter_ = false;
      }
    } else die(34, this.name_);
  };

  _proto.trackAndCompute = function trackAndCompute() {
    // N.B: unminified as it is used by MST
    var oldValue = this.value_;
    var wasSuspended =
    /* see #1208 */
    this.dependenciesState_ === IDerivationState_.NOT_TRACKING_;
    var newValue = this.computeValue_(true);

    if ( true && isSpyEnabled()) {
      spyReport({
        observableKind: "computed",
        debugObjectName: this.name_,
        object: this.scope_,
        type: "update",
        oldValue: this.value_,
        newValue: newValue
      });
    }

    var changed = wasSuspended || isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals_(oldValue, newValue);

    if (changed) {
      this.value_ = newValue;
    }

    return changed;
  };

  _proto.computeValue_ = function computeValue_(track) {
    this.isComputing_ = true; // don't allow state changes during computation

    var prev = allowStateChangesStart(false);
    var res;

    if (track) {
      res = trackDerivedFunction(this, this.derivation, this.scope_);
    } else {
      if (globalState.disableErrorBoundaries === true) {
        res = this.derivation.call(this.scope_);
      } else {
        try {
          res = this.derivation.call(this.scope_);
        } catch (e) {
          res = new CaughtException(e);
        }
      }
    }

    allowStateChangesEnd(prev);
    this.isComputing_ = false;
    return res;
  };

  _proto.suspend_ = function suspend_() {
    if (!this.keepAlive_) {
      clearObserving(this);
      this.value_ = undefined; // don't hold on to computed value!
    }
  };

  _proto.observe_ = function observe_(listener, fireImmediately) {
    var _this = this;

    var firstTime = true;
    var prevValue = undefined;
    return autorun(function () {
      // TODO: why is this in a different place than the spyReport() function? in all other observables it's called in the same place
      var newValue = _this.get();

      if (!firstTime || fireImmediately) {
        var prevU = untrackedStart();
        listener({
          observableKind: "computed",
          debugObjectName: _this.name_,
          type: UPDATE,
          object: _this,
          newValue: newValue,
          oldValue: prevValue
        });
        untrackedEnd(prevU);
      }

      firstTime = false;
      prevValue = newValue;
    });
  };

  _proto.warnAboutUntrackedRead_ = function warnAboutUntrackedRead_() {
    if (false) {}

    if (this.requiresReaction_ === true) {
      die("[mobx] Computed value " + this.name_ + " is read outside a reactive context");
    }

    if (this.isTracing_ !== TraceMode.NONE) {
      console.log("[mobx.trace] '" + this.name_ + "' is being read outside a reactive context. Doing a full recompute");
    }

    if (globalState.computedRequiresReaction) {
      console.warn("[mobx] Computed value " + this.name_ + " is being read outside a reactive context. Doing a full recompute");
    }
  };

  _proto.toString = function toString() {
    return this.name_ + "[" + this.derivation.toString() + "]";
  };

  _proto.valueOf = function valueOf() {
    return toPrimitive(this.get());
  };

  _proto[_Symbol$toPrimitive$1] = function () {
    return this.valueOf();
  };

  return ComputedValue;
}();

var isComputedValue = /*#__PURE__*/createInstanceofPredicate("ComputedValue", ComputedValue);
var IDerivationState_;

(function (IDerivationState_) {
  // before being run or (outside batch and not being observed)
  // at this point derivation is not holding any data about dependency tree
  IDerivationState_[IDerivationState_["NOT_TRACKING_"] = -1] = "NOT_TRACKING_"; // no shallow dependency changed since last computation
  // won't recalculate derivation
  // this is what makes mobx fast

  IDerivationState_[IDerivationState_["UP_TO_DATE_"] = 0] = "UP_TO_DATE_"; // some deep dependency changed, but don't know if shallow dependency changed
  // will require to check first if UP_TO_DATE or POSSIBLY_STALE
  // currently only ComputedValue will propagate POSSIBLY_STALE
  //
  // having this state is second big optimization:
  // don't have to recompute on every dependency change, but only when it's needed

  IDerivationState_[IDerivationState_["POSSIBLY_STALE_"] = 1] = "POSSIBLY_STALE_"; // A shallow dependency has changed since last computation and the derivation
  // will need to recompute when it's needed next.

  IDerivationState_[IDerivationState_["STALE_"] = 2] = "STALE_";
})(IDerivationState_ || (IDerivationState_ = {}));

var TraceMode;

(function (TraceMode) {
  TraceMode[TraceMode["NONE"] = 0] = "NONE";
  TraceMode[TraceMode["LOG"] = 1] = "LOG";
  TraceMode[TraceMode["BREAK"] = 2] = "BREAK";
})(TraceMode || (TraceMode = {}));

var CaughtException = function CaughtException(cause) {
  this.cause = void 0;
  this.cause = cause; // Empty
};

function isCaughtException(e) {
  return e instanceof CaughtException;
}
/**
 * Finds out whether any dependency of the derivation has actually changed.
 * If dependenciesState is 1 then it will recalculate dependencies,
 * if any dependency changed it will propagate it by changing dependenciesState to 2.
 *
 * By iterating over the dependencies in the same order that they were reported and
 * stopping on the first change, all the recalculations are only called for ComputedValues
 * that will be tracked by derivation. That is because we assume that if the first x
 * dependencies of the derivation doesn't change then the derivation should run the same way
 * up until accessing x-th dependency.
 */


function shouldCompute(derivation) {
  switch (derivation.dependenciesState_) {
    case IDerivationState_.UP_TO_DATE_:
      return false;

    case IDerivationState_.NOT_TRACKING_:
    case IDerivationState_.STALE_:
      return true;

    case IDerivationState_.POSSIBLY_STALE_:
      {
        // state propagation can occur outside of action/reactive context #2195
        var prevAllowStateReads = allowStateReadsStart(true);
        var prevUntracked = untrackedStart(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.

        var obs = derivation.observing_,
            l = obs.length;

        for (var i = 0; i < l; i++) {
          var obj = obs[i];

          if (isComputedValue(obj)) {
            if (globalState.disableErrorBoundaries) {
              obj.get();
            } else {
              try {
                obj.get();
              } catch (e) {
                // we are not interested in the value *or* exception at this moment, but if there is one, notify all
                untrackedEnd(prevUntracked);
                allowStateReadsEnd(prevAllowStateReads);
                return true;
              }
            } // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.
            // and `derivation` is an observer of `obj`
            // invariantShouldCompute(derivation)


            if (derivation.dependenciesState_ === IDerivationState_.STALE_) {
              untrackedEnd(prevUntracked);
              allowStateReadsEnd(prevAllowStateReads);
              return true;
            }
          }
        }

        changeDependenciesStateTo0(derivation);
        untrackedEnd(prevUntracked);
        allowStateReadsEnd(prevAllowStateReads);
        return false;
      }
  }
}

function isComputingDerivation() {
  return globalState.trackingDerivation !== null; // filter out actions inside computations
}

function checkIfStateModificationsAreAllowed(atom) {
  if (false) {}

  var hasObservers = atom.observers_.size > 0; // Should not be possible to change observed state outside strict mode, except during initialization, see #563

  if (!globalState.allowStateChanges && (hasObservers || globalState.enforceActions === "always")) console.warn("[MobX] " + (globalState.enforceActions ? "Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed. Tried to modify: " : "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, a computed value or the render function of a React component? You can wrap side effects in 'runInAction' (or decorate functions with 'action') if needed. Tried to modify: ") + atom.name_);
}

function checkIfStateReadsAreAllowed(observable) {
  if ( true && !globalState.allowStateReads && globalState.observableRequiresReaction) {
    console.warn("[mobx] Observable " + observable.name_ + " being read outside a reactive context");
  }
}
/**
 * Executes the provided function `f` and tracks which observables are being accessed.
 * The tracking information is stored on the `derivation` object and the derivation is registered
 * as observer of any of the accessed observables.
 */


function trackDerivedFunction(derivation, f, context) {
  var prevAllowStateReads = allowStateReadsStart(true); // pre allocate array allocation + room for variation in deps
  // array will be trimmed by bindDependencies

  changeDependenciesStateTo0(derivation);
  derivation.newObserving_ = new Array(derivation.observing_.length + 100);
  derivation.unboundDepsCount_ = 0;
  derivation.runId_ = ++globalState.runId;
  var prevTracking = globalState.trackingDerivation;
  globalState.trackingDerivation = derivation;
  globalState.inBatch++;
  var result;

  if (globalState.disableErrorBoundaries === true) {
    result = f.call(context);
  } else {
    try {
      result = f.call(context);
    } catch (e) {
      result = new CaughtException(e);
    }
  }

  globalState.inBatch--;
  globalState.trackingDerivation = prevTracking;
  bindDependencies(derivation);
  warnAboutDerivationWithoutDependencies(derivation);
  allowStateReadsEnd(prevAllowStateReads);
  return result;
}

function warnAboutDerivationWithoutDependencies(derivation) {
  if (false) {}
  if (derivation.observing_.length !== 0) return;

  if (globalState.reactionRequiresObservable || derivation.requiresObservable_) {
    console.warn("[mobx] Derivation " + derivation.name_ + " is created/updated without reading any observable value");
  }
}
/**
 * diffs newObserving with observing.
 * update observing to be newObserving with unique observables
 * notify observers that become observed/unobserved
 */


function bindDependencies(derivation) {
  // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1");
  var prevObserving = derivation.observing_;
  var observing = derivation.observing_ = derivation.newObserving_;
  var lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_; // Go through all new observables and check diffValue: (this list can contain duplicates):
  //   0: first occurrence, change to 1 and keep it
  //   1: extra occurrence, drop it

  var i0 = 0,
      l = derivation.unboundDepsCount_;

  for (var i = 0; i < l; i++) {
    var dep = observing[i];

    if (dep.diffValue_ === 0) {
      dep.diffValue_ = 1;
      if (i0 !== i) observing[i0] = dep;
      i0++;
    } // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,
    // not hitting the condition


    if (dep.dependenciesState_ > lowestNewObservingDerivationState) {
      lowestNewObservingDerivationState = dep.dependenciesState_;
    }
  }

  observing.length = i0;
  derivation.newObserving_ = null; // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)
  // Go through all old observables and check diffValue: (it is unique after last bindDependencies)
  //   0: it's not in new observables, unobserve it
  //   1: it keeps being observed, don't want to notify it. change to 0

  l = prevObserving.length;

  while (l--) {
    var _dep = prevObserving[l];

    if (_dep.diffValue_ === 0) {
      removeObserver(_dep, derivation);
    }

    _dep.diffValue_ = 0;
  } // Go through all new observables and check diffValue: (now it should be unique)
  //   0: it was set to 0 in last loop. don't need to do anything.
  //   1: it wasn't observed, let's observe it. set back to 0


  while (i0--) {
    var _dep2 = observing[i0];

    if (_dep2.diffValue_ === 1) {
      _dep2.diffValue_ = 0;
      addObserver(_dep2, derivation);
    }
  } // Some new observed derivations may become stale during this derivation computation
  // so they have had no chance to propagate staleness (#916)


  if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {
    derivation.dependenciesState_ = lowestNewObservingDerivationState;
    derivation.onBecomeStale_();
  }
}

function clearObserving(derivation) {
  // invariant(globalState.inBatch > 0, "INTERNAL ERROR clearObserving should be called only inside batch");
  var obs = derivation.observing_;
  derivation.observing_ = [];
  var i = obs.length;

  while (i--) {
    removeObserver(obs[i], derivation);
  }

  derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
}

function untracked(action) {
  var prev = untrackedStart();

  try {
    return action();
  } finally {
    untrackedEnd(prev);
  }
}

function untrackedStart() {
  var prev = globalState.trackingDerivation;
  globalState.trackingDerivation = null;
  return prev;
}

function untrackedEnd(prev) {
  globalState.trackingDerivation = prev;
}

function allowStateReadsStart(allowStateReads) {
  var prev = globalState.allowStateReads;
  globalState.allowStateReads = allowStateReads;
  return prev;
}

function allowStateReadsEnd(prev) {
  globalState.allowStateReads = prev;
}
/**
 * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0
 *
 */


function changeDependenciesStateTo0(derivation) {
  if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_) return;
  derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_;
  var obs = derivation.observing_;
  var i = obs.length;

  while (i--) {
    obs[i].lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
  }
}
/**
 * These values will persist if global state is reset
 */


var persistentKeys = ["mobxGuid", "spyListeners", "enforceActions", "computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "allowStateReads", "disableErrorBoundaries", "runId", "UNCHANGED", "useProxies"];

var MobXGlobals = function MobXGlobals() {
  this.version = 6;
  this.UNCHANGED = {};
  this.trackingDerivation = null;
  this.trackingContext = null;
  this.runId = 0;
  this.mobxGuid = 0;
  this.inBatch = 0;
  this.pendingUnobservations = [];
  this.pendingReactions = [];
  this.isRunningReactions = false;
  this.allowStateChanges = false;
  this.allowStateReads = true;
  this.enforceActions = true;
  this.spyListeners = [];
  this.globalReactionErrorHandlers = [];
  this.computedRequiresReaction = false;
  this.reactionRequiresObservable = false;
  this.observableRequiresReaction = false;
  this.disableErrorBoundaries = false;
  this.suppressReactionErrors = false;
  this.useProxies = true;
  this.verifyProxies = false;
  this.safeDescriptors = true;
};

var canMergeGlobalState = true;
var isolateCalled = false;

var globalState = /*#__PURE__*/function () {
  var global = /*#__PURE__*/getGlobal();
  if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals) canMergeGlobalState = false;
  if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals().version) canMergeGlobalState = false;

  if (!canMergeGlobalState) {
    setTimeout(function () {
      if (!isolateCalled) {
        die(35);
      }
    }, 1);
    return new MobXGlobals();
  } else if (global.__mobxGlobals) {
    global.__mobxInstanceCount += 1;
    if (!global.__mobxGlobals.UNCHANGED) global.__mobxGlobals.UNCHANGED = {}; // make merge backward compatible

    return global.__mobxGlobals;
  } else {
    global.__mobxInstanceCount = 1;
    return global.__mobxGlobals = /*#__PURE__*/new MobXGlobals();
  }
}();

function isolateGlobalState() {
  if (globalState.pendingReactions.length || globalState.inBatch || globalState.isRunningReactions) die(36);
  isolateCalled = true;

  if (canMergeGlobalState) {
    var global = getGlobal();
    if (--global.__mobxInstanceCount === 0) global.__mobxGlobals = undefined;
    globalState = new MobXGlobals();
  }
}

function getGlobalState() {
  return globalState;
}
/**
 * For testing purposes only; this will break the internal state of existing observables,
 * but can be used to get back at a stable state after throwing errors
 */


function resetGlobalState() {
  var defaultGlobals = new MobXGlobals();

  for (var key in defaultGlobals) {
    if (persistentKeys.indexOf(key) === -1) globalState[key] = defaultGlobals[key];
  }

  globalState.allowStateChanges = !globalState.enforceActions;
}

function hasObservers(observable) {
  return observable.observers_ && observable.observers_.size > 0;
}

function getObservers(observable) {
  return observable.observers_;
} // function invariantObservers(observable: IObservable) {
//     const list = observable.observers
//     const map = observable.observersIndexes
//     const l = list.length
//     for (let i = 0; i < l; i++) {
//         const id = list[i].__mapid
//         if (i) {
//             invariant(map[id] === i, "INTERNAL ERROR maps derivation.__mapid to index in list") // for performance
//         } else {
//             invariant(!(id in map), "INTERNAL ERROR observer on index 0 shouldn't be held in map.") // for performance
//         }
//     }
//     invariant(
//         list.length === 0 || Object.keys(map).length === list.length - 1,
//         "INTERNAL ERROR there is no junk in map"
//     )
// }


function addObserver(observable, node) {
  // invariant(node.dependenciesState !== -1, "INTERNAL ERROR, can add only dependenciesState !== -1");
  // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR add already added node");
  // invariantObservers(observable);
  observable.observers_.add(node);
  if (observable.lowestObserverState_ > node.dependenciesState_) observable.lowestObserverState_ = node.dependenciesState_; // invariantObservers(observable);
  // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR didn't add node");
}

function removeObserver(observable, node) {
  // invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");
  // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR remove already removed node");
  // invariantObservers(observable);
  observable.observers_["delete"](node);

  if (observable.observers_.size === 0) {
    // deleting last observer
    queueForUnobservation(observable);
  } // invariantObservers(observable);
  // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR remove already removed node2");

}

function queueForUnobservation(observable) {
  if (observable.isPendingUnobservation_ === false) {
    // invariant(observable._observers.length === 0, "INTERNAL ERROR, should only queue for unobservation unobserved observables");
    observable.isPendingUnobservation_ = true;
    globalState.pendingUnobservations.push(observable);
  }
}
/**
 * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.
 * During a batch `onBecomeUnobserved` will be called at most once per observable.
 * Avoids unnecessary recalculations.
 */


function startBatch() {
  globalState.inBatch++;
}

function endBatch() {
  if (--globalState.inBatch === 0) {
    runReactions(); // the batch is actually about to finish, all unobserving should happen here.

    var list = globalState.pendingUnobservations;

    for (var i = 0; i < list.length; i++) {
      var observable = list[i];
      observable.isPendingUnobservation_ = false;

      if (observable.observers_.size === 0) {
        if (observable.isBeingObserved_) {
          // if this observable had reactive observers, trigger the hooks
          observable.isBeingObserved_ = false;
          observable.onBUO();
        }

        if (observable instanceof ComputedValue) {
          // computed values are automatically teared down when the last observer leaves
          // this process happens recursively, this computed might be the last observabe of another, etc..
          observable.suspend_();
        }
      }
    }

    globalState.pendingUnobservations = [];
  }
}

function reportObserved(observable) {
  checkIfStateReadsAreAllowed(observable);
  var derivation = globalState.trackingDerivation;

  if (derivation !== null) {
    /**
     * Simple optimization, give each derivation run an unique id (runId)
     * Check if last time this observable was accessed the same runId is used
     * if this is the case, the relation is already known
     */
    if (derivation.runId_ !== observable.lastAccessedBy_) {
      observable.lastAccessedBy_ = derivation.runId_; // Tried storing newObserving, or observing, or both as Set, but performance didn't come close...

      derivation.newObserving_[derivation.unboundDepsCount_++] = observable;

      if (!observable.isBeingObserved_ && globalState.trackingContext) {
        observable.isBeingObserved_ = true;
        observable.onBO();
      }
    }

    return true;
  } else if (observable.observers_.size === 0 && globalState.inBatch > 0) {
    queueForUnobservation(observable);
  }

  return false;
} // function invariantLOS(observable: IObservable, msg: string) {
//     // it's expensive so better not run it in produciton. but temporarily helpful for testing
//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)
//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`
//     throw new Error(
//         "lowestObserverState is wrong for " +
//             msg +
//             " because " +
//             min +
//             " < " +
//             observable.lowestObserverState
//     )
// }

/**
 * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly
 * It will propagate changes to observers from previous run
 * It's hard or maybe impossible (with reasonable perf) to get it right with current approach
 * Hopefully self reruning autoruns aren't a feature people should depend on
 * Also most basic use cases should be ok
 */
// Called by Atom when its value changes


function propagateChanged(observable) {
  // invariantLOS(observable, "changed start");
  if (observable.lowestObserverState_ === IDerivationState_.STALE_) return;
  observable.lowestObserverState_ = IDerivationState_.STALE_; // Ideally we use for..of here, but the downcompiled version is really slow...

  observable.observers_.forEach(function (d) {
    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
      if ( true && d.isTracing_ !== TraceMode.NONE) {
        logTraceInfo(d, observable);
      }

      d.onBecomeStale_();
    }

    d.dependenciesState_ = IDerivationState_.STALE_;
  }); // invariantLOS(observable, "changed end");
} // Called by ComputedValue when it recalculate and its value changed


function propagateChangeConfirmed(observable) {
  // invariantLOS(observable, "confirmed start");
  if (observable.lowestObserverState_ === IDerivationState_.STALE_) return;
  observable.lowestObserverState_ = IDerivationState_.STALE_;
  observable.observers_.forEach(function (d) {
    if (d.dependenciesState_ === IDerivationState_.POSSIBLY_STALE_) d.dependenciesState_ = IDerivationState_.STALE_;else if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_ // this happens during computing of `d`, just keep lowestObserverState up to date.
    ) observable.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
  }); // invariantLOS(observable, "confirmed end");
} // Used by computed when its dependency changed, but we don't wan't to immediately recompute.


function propagateMaybeChanged(observable) {
  // invariantLOS(observable, "maybe start");
  if (observable.lowestObserverState_ !== IDerivationState_.UP_TO_DATE_) return;
  observable.lowestObserverState_ = IDerivationState_.POSSIBLY_STALE_;
  observable.observers_.forEach(function (d) {
    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
      d.dependenciesState_ = IDerivationState_.POSSIBLY_STALE_;

      if ( true && d.isTracing_ !== TraceMode.NONE) {
        logTraceInfo(d, observable);
      }

      d.onBecomeStale_();
    }
  }); // invariantLOS(observable, "maybe end");
}

function logTraceInfo(derivation, observable) {
  console.log("[mobx.trace] '" + derivation.name_ + "' is invalidated due to a change in: '" + observable.name_ + "'");

  if (derivation.isTracing_ === TraceMode.BREAK) {
    var lines = [];
    printDepTree(getDependencyTree(derivation), lines, 1); // prettier-ignore

    new Function("debugger;\n/*\nTracing '" + derivation.name_ + "'\n\nYou are entering this break point because derivation '" + derivation.name_ + "' is being traced and '" + observable.name_ + "' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n" + (derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\//g, "/") : "") + "\n\nThe dependencies for this derivation are:\n\n" + lines.join("\n") + "\n*/\n    ")();
  }
}

function printDepTree(tree, lines, depth) {
  if (lines.length >= 1000) {
    lines.push("(and many more)");
    return;
  }

  lines.push("" + new Array(depth).join("\t") + tree.name); // MWE: not the fastest, but the easiest way :)

  if (tree.dependencies) tree.dependencies.forEach(function (child) {
    return printDepTree(child, lines, depth + 1);
  });
}

var Reaction = /*#__PURE__*/function () {
  // nodes we are looking at. Our value depends on these nodes
  function Reaction(name_, onInvalidate_, errorHandler_, requiresObservable_) {
    if (name_ === void 0) {
      name_ =  true ? "Reaction@" + getNextId() : undefined;
    }

    if (requiresObservable_ === void 0) {
      requiresObservable_ = false;
    }

    this.name_ = void 0;
    this.onInvalidate_ = void 0;
    this.errorHandler_ = void 0;
    this.requiresObservable_ = void 0;
    this.observing_ = [];
    this.newObserving_ = [];
    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
    this.diffValue_ = 0;
    this.runId_ = 0;
    this.unboundDepsCount_ = 0;
    this.isDisposed_ = false;
    this.isScheduled_ = false;
    this.isTrackPending_ = false;
    this.isRunning_ = false;
    this.isTracing_ = TraceMode.NONE;
    this.name_ = name_;
    this.onInvalidate_ = onInvalidate_;
    this.errorHandler_ = errorHandler_;
    this.requiresObservable_ = requiresObservable_;
  }

  var _proto = Reaction.prototype;

  _proto.onBecomeStale_ = function onBecomeStale_() {
    this.schedule_();
  };

  _proto.schedule_ = function schedule_() {
    if (!this.isScheduled_) {
      this.isScheduled_ = true;
      globalState.pendingReactions.push(this);
      runReactions();
    }
  };

  _proto.isScheduled = function isScheduled() {
    return this.isScheduled_;
  }
  /**
   * internal, use schedule() if you intend to kick off a reaction
   */
  ;

  _proto.runReaction_ = function runReaction_() {
    if (!this.isDisposed_) {
      startBatch();
      this.isScheduled_ = false;
      var prev = globalState.trackingContext;
      globalState.trackingContext = this;

      if (shouldCompute(this)) {
        this.isTrackPending_ = true;

        try {
          this.onInvalidate_();

          if ( true && this.isTrackPending_ && isSpyEnabled()) {
            // onInvalidate didn't trigger track right away..
            spyReport({
              name: this.name_,
              type: "scheduled-reaction"
            });
          }
        } catch (e) {
          this.reportExceptionInDerivation_(e);
        }
      }

      globalState.trackingContext = prev;
      endBatch();
    }
  };

  _proto.track = function track(fn) {
    if (this.isDisposed_) {
      return; // console.warn("Reaction already disposed") // Note: Not a warning / error in mobx 4 either
    }

    startBatch();
    var notify = isSpyEnabled();
    var startTime;

    if ( true && notify) {
      startTime = Date.now();
      spyReportStart({
        name: this.name_,
        type: "reaction"
      });
    }

    this.isRunning_ = true;
    var prevReaction = globalState.trackingContext; // reactions could create reactions...

    globalState.trackingContext = this;
    var result = trackDerivedFunction(this, fn, undefined);
    globalState.trackingContext = prevReaction;
    this.isRunning_ = false;
    this.isTrackPending_ = false;

    if (this.isDisposed_) {
      // disposed during last run. Clean up everything that was bound after the dispose call.
      clearObserving(this);
    }

    if (isCaughtException(result)) this.reportExceptionInDerivation_(result.cause);

    if ( true && notify) {
      spyReportEnd({
        time: Date.now() - startTime
      });
    }

    endBatch();
  };

  _proto.reportExceptionInDerivation_ = function reportExceptionInDerivation_(error) {
    var _this = this;

    if (this.errorHandler_) {
      this.errorHandler_(error, this);
      return;
    }

    if (globalState.disableErrorBoundaries) throw error;
    var message =  true ? "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" + this + "'" : undefined;

    if (!globalState.suppressReactionErrors) {
      console.error(message, error);
      /** If debugging brought you here, please, read the above message :-). Tnx! */
    } else if (true) console.warn("[mobx] (error in reaction '" + this.name_ + "' suppressed, fix error of causing action below)"); // prettier-ignore


    if ( true && isSpyEnabled()) {
      spyReport({
        type: "error",
        name: this.name_,
        message: message,
        error: "" + error
      });
    }

    globalState.globalReactionErrorHandlers.forEach(function (f) {
      return f(error, _this);
    });
  };

  _proto.dispose = function dispose() {
    if (!this.isDisposed_) {
      this.isDisposed_ = true;

      if (!this.isRunning_) {
        // if disposed while running, clean up later. Maybe not optimal, but rare case
        startBatch();
        clearObserving(this);
        endBatch();
      }
    }
  };

  _proto.getDisposer_ = function getDisposer_() {
    var r = this.dispose.bind(this);
    r[$mobx] = this;
    return r;
  };

  _proto.toString = function toString() {
    return "Reaction[" + this.name_ + "]";
  };

  _proto.trace = function trace$1(enterBreakPoint) {
    if (enterBreakPoint === void 0) {
      enterBreakPoint = false;
    }

    trace(this, enterBreakPoint);
  };

  return Reaction;
}();

function onReactionError(handler) {
  globalState.globalReactionErrorHandlers.push(handler);
  return function () {
    var idx = globalState.globalReactionErrorHandlers.indexOf(handler);
    if (idx >= 0) globalState.globalReactionErrorHandlers.splice(idx, 1);
  };
}
/**
 * Magic number alert!
 * Defines within how many times a reaction is allowed to re-trigger itself
 * until it is assumed that this is gonna be a never ending loop...
 */


var MAX_REACTION_ITERATIONS = 100;

var reactionScheduler = function reactionScheduler(f) {
  return f();
};

function runReactions() {
  // Trampolining, if runReactions are already running, new reactions will be picked up
  if (globalState.inBatch > 0 || globalState.isRunningReactions) return;
  reactionScheduler(runReactionsHelper);
}

function runReactionsHelper() {
  globalState.isRunningReactions = true;
  var allReactions = globalState.pendingReactions;
  var iterations = 0; // While running reactions, new reactions might be triggered.
  // Hence we work with two variables and check whether
  // we converge to no remaining reactions after a while.

  while (allReactions.length > 0) {
    if (++iterations === MAX_REACTION_ITERATIONS) {
      console.error( true ? "Reaction doesn't converge to a stable state after " + MAX_REACTION_ITERATIONS + " iterations." + (" Probably there is a cycle in the reactive function: " + allReactions[0]) : undefined);
      allReactions.splice(0); // clear reactions
    }

    var remainingReactions = allReactions.splice(0);

    for (var i = 0, l = remainingReactions.length; i < l; i++) {
      remainingReactions[i].runReaction_();
    }
  }

  globalState.isRunningReactions = false;
}

var isReaction = /*#__PURE__*/createInstanceofPredicate("Reaction", Reaction);

function setReactionScheduler(fn) {
  var baseScheduler = reactionScheduler;

  reactionScheduler = function reactionScheduler(f) {
    return fn(function () {
      return baseScheduler(f);
    });
  };
}

function isSpyEnabled() {
  return  true && !!globalState.spyListeners.length;
}

function spyReport(event) {
  if (false) {} // dead code elimination can do the rest

  if (!globalState.spyListeners.length) return;
  var listeners = globalState.spyListeners;

  for (var i = 0, l = listeners.length; i < l; i++) {
    listeners[i](event);
  }
}

function spyReportStart(event) {
  if (false) {}

  var change = _extends({}, event, {
    spyReportStart: true
  });

  spyReport(change);
}

var END_EVENT = {
  type: "report-end",
  spyReportEnd: true
};

function spyReportEnd(change) {
  if (false) {}
  if (change) spyReport(_extends({}, change, {
    type: "report-end",
    spyReportEnd: true
  }));else spyReport(END_EVENT);
}

function spy(listener) {
  if (false) {} else {
    globalState.spyListeners.push(listener);
    return once(function () {
      globalState.spyListeners = globalState.spyListeners.filter(function (l) {
        return l !== listener;
      });
    });
  }
}

var ACTION = "action";
var ACTION_BOUND = "action.bound";
var AUTOACTION = "autoAction";
var AUTOACTION_BOUND = "autoAction.bound";
var DEFAULT_ACTION_NAME = "<unnamed action>";
var actionAnnotation = /*#__PURE__*/createActionAnnotation(ACTION);
var actionBoundAnnotation = /*#__PURE__*/createActionAnnotation(ACTION_BOUND, {
  bound: true
});
var autoActionAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION, {
  autoAction: true
});
var autoActionBoundAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION_BOUND, {
  autoAction: true,
  bound: true
});

function createActionFactory(autoAction) {
  var res = function action(arg1, arg2) {
    // action(fn() {})
    if (isFunction(arg1)) return createAction(arg1.name || DEFAULT_ACTION_NAME, arg1, autoAction); // action("name", fn() {})

    if (isFunction(arg2)) return createAction(arg1, arg2, autoAction); // @action

    if (isStringish(arg2)) {
      return storeAnnotation(arg1, arg2, autoAction ? autoActionAnnotation : actionAnnotation);
    } // action("name") & @action("name")


    if (isStringish(arg1)) {
      return createDecoratorAnnotation(createActionAnnotation(autoAction ? AUTOACTION : ACTION, {
        name: arg1,
        autoAction: autoAction
      }));
    }

    if (true) die("Invalid arguments for `action`");
  };

  return res;
}

var action = /*#__PURE__*/createActionFactory(false);
Object.assign(action, actionAnnotation);
var autoAction = /*#__PURE__*/createActionFactory(true);
Object.assign(autoAction, autoActionAnnotation);
action.bound = /*#__PURE__*/createDecoratorAnnotation(actionBoundAnnotation);
autoAction.bound = /*#__PURE__*/createDecoratorAnnotation(autoActionBoundAnnotation);

function runInAction(fn) {
  return executeAction(fn.name || DEFAULT_ACTION_NAME, false, fn, this, undefined);
}

function isAction(thing) {
  return isFunction(thing) && thing.isMobxAction === true;
}
/**
 * Creates a named reactive view and keeps it alive, so that the view is always
 * updated if one of the dependencies changes, even when the view is not further used by something else.
 * @param view The reactive view
 * @returns disposer function, which can be used to stop the view from being updated in the future.
 */


function autorun(view, opts) {
  var _opts$name, _opts;

  if (opts === void 0) {
    opts = EMPTY_OBJECT;
  }

  if (true) {
    if (!isFunction(view)) die("Autorun expects a function as first argument");
    if (isAction(view)) die("Autorun does not accept actions since actions are untrackable");
  }

  var name = (_opts$name = (_opts = opts) == null ? void 0 : _opts.name) != null ? _opts$name :  true ? view.name || "Autorun@" + getNextId() : undefined;
  var runSync = !opts.scheduler && !opts.delay;
  var reaction;

  if (runSync) {
    // normal autorun
    reaction = new Reaction(name, function () {
      this.track(reactionRunner);
    }, opts.onError, opts.requiresObservable);
  } else {
    var scheduler = createSchedulerFromOptions(opts); // debounced autorun

    var isScheduled = false;
    reaction = new Reaction(name, function () {
      if (!isScheduled) {
        isScheduled = true;
        scheduler(function () {
          isScheduled = false;
          if (!reaction.isDisposed_) reaction.track(reactionRunner);
        });
      }
    }, opts.onError, opts.requiresObservable);
  }

  function reactionRunner() {
    view(reaction);
  }

  reaction.schedule_();
  return reaction.getDisposer_();
}

var run = function run(f) {
  return f();
};

function createSchedulerFromOptions(opts) {
  return opts.scheduler ? opts.scheduler : opts.delay ? function (f) {
    return setTimeout(f, opts.delay);
  } : run;
}

function reaction(expression, effect, opts) {
  var _opts$name2;

  if (opts === void 0) {
    opts = EMPTY_OBJECT;
  }

  if (true) {
    if (!isFunction(expression) || !isFunction(effect)) die("First and second argument to reaction should be functions");
    if (!isPlainObject(opts)) die("Third argument of reactions should be an object");
  }

  var name = (_opts$name2 = opts.name) != null ? _opts$name2 :  true ? "Reaction@" + getNextId() : undefined;
  var effectAction = action(name, opts.onError ? wrapErrorHandler(opts.onError, effect) : effect);
  var runSync = !opts.scheduler && !opts.delay;
  var scheduler = createSchedulerFromOptions(opts);
  var firstTime = true;
  var isScheduled = false;
  var value;
  var oldValue = undefined; // only an issue with fireImmediately

  var equals = opts.compareStructural ? comparer.structural : opts.equals || comparer["default"];
  var r = new Reaction(name, function () {
    if (firstTime || runSync) {
      reactionRunner();
    } else if (!isScheduled) {
      isScheduled = true;
      scheduler(reactionRunner);
    }
  }, opts.onError, opts.requiresObservable);

  function reactionRunner() {
    isScheduled = false;
    if (r.isDisposed_) return;
    var changed = false;
    r.track(function () {
      var nextValue = allowStateChanges(false, function () {
        return expression(r);
      });
      changed = firstTime || !equals(value, nextValue);
      oldValue = value;
      value = nextValue;
    });
    if (firstTime && opts.fireImmediately) effectAction(value, oldValue, r);else if (!firstTime && changed) effectAction(value, oldValue, r);
    firstTime = false;
  }

  r.schedule_();
  return r.getDisposer_();
}

function wrapErrorHandler(errorHandler, baseFn) {
  return function () {
    try {
      return baseFn.apply(this, arguments);
    } catch (e) {
      errorHandler.call(this, e);
    }
  };
}

var ON_BECOME_OBSERVED = "onBO";
var ON_BECOME_UNOBSERVED = "onBUO";

function onBecomeObserved(thing, arg2, arg3) {
  return interceptHook(ON_BECOME_OBSERVED, thing, arg2, arg3);
}

function onBecomeUnobserved(thing, arg2, arg3) {
  return interceptHook(ON_BECOME_UNOBSERVED, thing, arg2, arg3);
}

function interceptHook(hook, thing, arg2, arg3) {
  var atom = typeof arg3 === "function" ? getAtom(thing, arg2) : getAtom(thing);
  var cb = isFunction(arg3) ? arg3 : arg2;
  var listenersKey = hook + "L";

  if (atom[listenersKey]) {
    atom[listenersKey].add(cb);
  } else {
    atom[listenersKey] = new Set([cb]);
  }

  return function () {
    var hookListeners = atom[listenersKey];

    if (hookListeners) {
      hookListeners["delete"](cb);

      if (hookListeners.size === 0) {
        delete atom[listenersKey];
      }
    }
  };
}

var NEVER = "never";
var ALWAYS = "always";
var OBSERVED = "observed"; // const IF_AVAILABLE = "ifavailable"

function configure(options) {
  if (options.isolateGlobalState === true) {
    isolateGlobalState();
  }

  var useProxies = options.useProxies,
      enforceActions = options.enforceActions;

  if (useProxies !== undefined) {
    globalState.useProxies = useProxies === ALWAYS ? true : useProxies === NEVER ? false : typeof Proxy !== "undefined";
  }

  if (useProxies === "ifavailable") globalState.verifyProxies = true;

  if (enforceActions !== undefined) {
    var ea = enforceActions === ALWAYS ? ALWAYS : enforceActions === OBSERVED;
    globalState.enforceActions = ea;
    globalState.allowStateChanges = ea === true || ea === ALWAYS ? false : true;
  }

  ["computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "disableErrorBoundaries", "safeDescriptors"].forEach(function (key) {
    if (key in options) globalState[key] = !!options[key];
  });
  globalState.allowStateReads = !globalState.observableRequiresReaction;

  if ( true && globalState.disableErrorBoundaries === true) {
    console.warn("WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled.");
  }

  if (options.reactionScheduler) {
    setReactionScheduler(options.reactionScheduler);
  }
}

function extendObservable(target, properties, annotations, options) {
  if (true) {
    if (arguments.length > 4) die("'extendObservable' expected 2-4 arguments");
    if (typeof target !== "object") die("'extendObservable' expects an object as first argument");
    if (isObservableMap(target)) die("'extendObservable' should not be used on maps, use map.merge instead");
    if (!isPlainObject(properties)) die("'extendObservabe' only accepts plain objects as second argument");
    if (isObservable(properties) || isObservable(annotations)) die("Extending an object with another observable (object) is not supported");
  } // Pull descriptors first, so we don't have to deal with props added by administration ($mobx)


  var descriptors = getOwnPropertyDescriptors(properties);
  var adm = asObservableObject(target, options)[$mobx];
  startBatch();

  try {
    ownKeys(descriptors).forEach(function (key) {
      adm.extend_(key, descriptors[key], // must pass "undefined" for { key: undefined }
      !annotations ? true : key in annotations ? annotations[key] : true);
    });
  } finally {
    endBatch();
  }

  return target;
}

function getDependencyTree(thing, property) {
  return nodeToDependencyTree(getAtom(thing, property));
}

function nodeToDependencyTree(node) {
  var result = {
    name: node.name_
  };
  if (node.observing_ && node.observing_.length > 0) result.dependencies = unique(node.observing_).map(nodeToDependencyTree);
  return result;
}

function getObserverTree(thing, property) {
  return nodeToObserverTree(getAtom(thing, property));
}

function nodeToObserverTree(node) {
  var result = {
    name: node.name_
  };
  if (hasObservers(node)) result.observers = Array.from(getObservers(node)).map(nodeToObserverTree);
  return result;
}

function unique(list) {
  return Array.from(new Set(list));
}

var generatorId = 0;

function FlowCancellationError() {
  this.message = "FLOW_CANCELLED";
}

FlowCancellationError.prototype = /*#__PURE__*/Object.create(Error.prototype);

function isFlowCancellationError(error) {
  return error instanceof FlowCancellationError;
}

var flowAnnotation = /*#__PURE__*/createFlowAnnotation("flow");
var flow = /*#__PURE__*/Object.assign(function flow(arg1, arg2) {
  // @flow
  if (isStringish(arg2)) {
    return storeAnnotation(arg1, arg2, flowAnnotation);
  } // flow(fn)


  if ( true && arguments.length !== 1) die("Flow expects single argument with generator function");
  var generator = arg1;
  var name = generator.name || "<unnamed flow>"; // Implementation based on https://github.com/tj/co/blob/master/index.js

  var res = function res() {
    var ctx = this;
    var args = arguments;
    var runId = ++generatorId;
    var gen = action(name + " - runid: " + runId + " - init", generator).apply(ctx, args);
    var rejector;
    var pendingPromise = undefined;
    var promise = new Promise(function (resolve, reject) {
      var stepId = 0;
      rejector = reject;

      function onFulfilled(res) {
        pendingPromise = undefined;
        var ret;

        try {
          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen.next).call(gen, res);
        } catch (e) {
          return reject(e);
        }

        next(ret);
      }

      function onRejected(err) {
        pendingPromise = undefined;
        var ret;

        try {
          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen["throw"]).call(gen, err);
        } catch (e) {
          return reject(e);
        }

        next(ret);
      }

      function next(ret) {
        if (isFunction(ret == null ? void 0 : ret.then)) {
          // an async iterator
          ret.then(next, reject);
          return;
        }

        if (ret.done) return resolve(ret.value);
        pendingPromise = Promise.resolve(ret.value);
        return pendingPromise.then(onFulfilled, onRejected);
      }

      onFulfilled(undefined); // kick off the process
    });
    promise.cancel = action(name + " - runid: " + runId + " - cancel", function () {
      try {
        if (pendingPromise) cancelPromise(pendingPromise); // Finally block can return (or yield) stuff..

        var _res = gen["return"](undefined); // eat anything that promise would do, it's cancelled!


        var yieldedPromise = Promise.resolve(_res.value);
        yieldedPromise.then(noop, noop);
        cancelPromise(yieldedPromise); // maybe it can be cancelled :)
        // reject our original promise

        rejector(new FlowCancellationError());
      } catch (e) {
        rejector(e); // there could be a throwing finally block
      }
    });
    return promise;
  };

  res.isMobXFlow = true;
  return res;
}, flowAnnotation);

function cancelPromise(promise) {
  if (isFunction(promise.cancel)) promise.cancel();
}

function flowResult(result) {
  return result; // just tricking TypeScript :)
}

function isFlow(fn) {
  return (fn == null ? void 0 : fn.isMobXFlow) === true;
}

function interceptReads(thing, propOrHandler, handler) {
  var target;

  if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {
    target = getAdministration(thing);
  } else if (isObservableObject(thing)) {
    if ( true && !isStringish(propOrHandler)) return die("InterceptReads can only be used with a specific property, not with an object in general");
    target = getAdministration(thing, propOrHandler);
  } else if (true) {
    return die("Expected observable map, object or array as first array");
  }

  if ( true && target.dehancer !== undefined) return die("An intercept reader was already established");
  target.dehancer = typeof propOrHandler === "function" ? propOrHandler : handler;
  return function () {
    target.dehancer = undefined;
  };
}

function intercept(thing, propOrHandler, handler) {
  if (isFunction(handler)) return interceptProperty(thing, propOrHandler, handler);else return interceptInterceptable(thing, propOrHandler);
}

function interceptInterceptable(thing, handler) {
  return getAdministration(thing).intercept_(handler);
}

function interceptProperty(thing, property, handler) {
  return getAdministration(thing, property).intercept_(handler);
}

function _isComputed(value, property) {
  if (property !== undefined) {
    if (isObservableObject(value) === false) return false;
    if (!value[$mobx].values_.has(property)) return false;
    var atom = getAtom(value, property);
    return isComputedValue(atom);
  }

  return isComputedValue(value);
}

function isComputed(value) {
  if ( true && arguments.length > 1) return die("isComputed expects only 1 argument. Use isComputedProp to inspect the observability of a property");
  return _isComputed(value);
}

function isComputedProp(value, propName) {
  if ( true && !isStringish(propName)) return die("isComputed expected a property name as second argument");
  return _isComputed(value, propName);
}

function _isObservable(value, property) {
  if (!value) return false;

  if (property !== undefined) {
    if ( true && (isObservableMap(value) || isObservableArray(value))) return die("isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.");

    if (isObservableObject(value)) {
      return value[$mobx].values_.has(property);
    }

    return false;
  } // For first check, see #701


  return isObservableObject(value) || !!value[$mobx] || isAtom(value) || isReaction(value) || isComputedValue(value);
}

function isObservable(value) {
  if ( true && arguments.length !== 1) die("isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property");
  return _isObservable(value);
}

function isObservableProp(value, propName) {
  if ( true && !isStringish(propName)) return die("expected a property name as second argument");
  return _isObservable(value, propName);
}

function keys(obj) {
  if (isObservableObject(obj)) {
    return obj[$mobx].keys_();
  }

  if (isObservableMap(obj) || isObservableSet(obj)) {
    return Array.from(obj.keys());
  }

  if (isObservableArray(obj)) {
    return obj.map(function (_, index) {
      return index;
    });
  }

  die(5);
}

function values(obj) {
  if (isObservableObject(obj)) {
    return keys(obj).map(function (key) {
      return obj[key];
    });
  }

  if (isObservableMap(obj)) {
    return keys(obj).map(function (key) {
      return obj.get(key);
    });
  }

  if (isObservableSet(obj)) {
    return Array.from(obj.values());
  }

  if (isObservableArray(obj)) {
    return obj.slice();
  }

  die(6);
}

function entries(obj) {
  if (isObservableObject(obj)) {
    return keys(obj).map(function (key) {
      return [key, obj[key]];
    });
  }

  if (isObservableMap(obj)) {
    return keys(obj).map(function (key) {
      return [key, obj.get(key)];
    });
  }

  if (isObservableSet(obj)) {
    return Array.from(obj.entries());
  }

  if (isObservableArray(obj)) {
    return obj.map(function (key, index) {
      return [index, key];
    });
  }

  die(7);
}

function set(obj, key, value) {
  if (arguments.length === 2 && !isObservableSet(obj)) {
    startBatch();
    var _values = key;

    try {
      for (var _key in _values) {
        set(obj, _key, _values[_key]);
      }
    } finally {
      endBatch();
    }

    return;
  }

  if (isObservableObject(obj)) {
    obj[$mobx].set_(key, value);
  } else if (isObservableMap(obj)) {
    obj.set(key, value);
  } else if (isObservableSet(obj)) {
    obj.add(key);
  } else if (isObservableArray(obj)) {
    if (typeof key !== "number") key = parseInt(key, 10);
    if (key < 0) die("Invalid index: '" + key + "'");
    startBatch();
    if (key >= obj.length) obj.length = key + 1;
    obj[key] = value;
    endBatch();
  } else die(8);
}

function remove(obj, key) {
  if (isObservableObject(obj)) {
    obj[$mobx].delete_(key);
  } else if (isObservableMap(obj)) {
    obj["delete"](key);
  } else if (isObservableSet(obj)) {
    obj["delete"](key);
  } else if (isObservableArray(obj)) {
    if (typeof key !== "number") key = parseInt(key, 10);
    obj.splice(key, 1);
  } else {
    die(9);
  }
}

function has(obj, key) {
  if (isObservableObject(obj)) {
    return obj[$mobx].has_(key);
  } else if (isObservableMap(obj)) {
    return obj.has(key);
  } else if (isObservableSet(obj)) {
    return obj.has(key);
  } else if (isObservableArray(obj)) {
    return key >= 0 && key < obj.length;
  }

  die(10);
}

function get(obj, key) {
  if (!has(obj, key)) return undefined;

  if (isObservableObject(obj)) {
    return obj[$mobx].get_(key);
  } else if (isObservableMap(obj)) {
    return obj.get(key);
  } else if (isObservableArray(obj)) {
    return obj[key];
  }

  die(11);
}

function observe(thing, propOrCb, cbOrFire, fireImmediately) {
  if (isFunction(cbOrFire)) return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);else return observeObservable(thing, propOrCb, cbOrFire);
}

function observeObservable(thing, listener, fireImmediately) {
  return getAdministration(thing).observe_(listener, fireImmediately);
}

function observeObservableProperty(thing, property, listener, fireImmediately) {
  return getAdministration(thing, property).observe_(listener, fireImmediately);
}

function cache(map, key, value) {
  map.set(key, value);
  return value;
}

function toJSHelper(source, __alreadySeen) {
  if (source == null || typeof source !== "object" || source instanceof Date || !isObservable(source)) return source;
  if (isObservableValue(source)) return toJSHelper(source.get(), __alreadySeen);

  if (__alreadySeen.has(source)) {
    return __alreadySeen.get(source);
  }

  if (isObservableArray(source)) {
    var res = cache(__alreadySeen, source, new Array(source.length));
    source.forEach(function (value, idx) {
      res[idx] = toJSHelper(value, __alreadySeen);
    });
    return res;
  }

  if (isObservableSet(source)) {
    var _res = cache(__alreadySeen, source, new Set());

    source.forEach(function (value) {
      _res.add(toJSHelper(value, __alreadySeen));
    });
    return _res;
  }

  if (isObservableMap(source)) {
    var _res2 = cache(__alreadySeen, source, new Map());

    source.forEach(function (value, key) {
      _res2.set(key, toJSHelper(value, __alreadySeen));
    });
    return _res2;
  } else {
    // must be observable object
    keys(source); // make sure keys are observed

    var _res3 = cache(__alreadySeen, source, {});

    getPlainObjectKeys(source).forEach(function (key) {
      _res3[key] = toJSHelper(source[key], __alreadySeen);
    });
    return _res3;
  }
}
/**
 * Basically, a deep clone, so that no reactive property will exist anymore.
 */


function toJS(source, options) {
  if ( true && options) die("toJS no longer supports options");
  return toJSHelper(source, new Map());
}

function trace() {
  if (false) {}
  var enterBreakPoint = false;

  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (typeof args[args.length - 1] === "boolean") enterBreakPoint = args.pop();
  var derivation = getAtomFromArgs(args);

  if (!derivation) {
    return die("'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");
  }

  if (derivation.isTracing_ === TraceMode.NONE) {
    console.log("[mobx.trace] '" + derivation.name_ + "' tracing enabled");
  }

  derivation.isTracing_ = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;
}

function getAtomFromArgs(args) {
  switch (args.length) {
    case 0:
      return globalState.trackingDerivation;

    case 1:
      return getAtom(args[0]);

    case 2:
      return getAtom(args[0], args[1]);
  }
}
/**
 * During a transaction no views are updated until the end of the transaction.
 * The transaction will be run synchronously nonetheless.
 *
 * @param action a function that updates some reactive state
 * @returns any value that was returned by the 'action' parameter.
 */


function transaction(action, thisArg) {
  if (thisArg === void 0) {
    thisArg = undefined;
  }

  startBatch();

  try {
    return action.apply(thisArg);
  } finally {
    endBatch();
  }
}

function when(predicate, arg1, arg2) {
  if (arguments.length === 1 || arg1 && typeof arg1 === "object") return whenPromise(predicate, arg1);
  return _when(predicate, arg1, arg2 || {});
}

function _when(predicate, effect, opts) {
  var timeoutHandle;

  if (typeof opts.timeout === "number") {
    timeoutHandle = setTimeout(function () {
      if (!disposer[$mobx].isDisposed_) {
        disposer();
        var error = new Error("WHEN_TIMEOUT");
        if (opts.onError) opts.onError(error);else throw error;
      }
    }, opts.timeout);
  }

  opts.name =  true ? opts.name || "When@" + getNextId() : undefined;
  var effectAction = createAction( true ? opts.name + "-effect" : undefined, effect); // eslint-disable-next-line

  var disposer = autorun(function (r) {
    // predicate should not change state
    var cond = allowStateChanges(false, predicate);

    if (cond) {
      r.dispose();
      if (timeoutHandle) clearTimeout(timeoutHandle);
      effectAction();
    }
  }, opts);
  return disposer;
}

function whenPromise(predicate, opts) {
  if ( true && opts && opts.onError) return die("the options 'onError' and 'promise' cannot be combined");
  var cancel;
  var res = new Promise(function (resolve, reject) {
    var disposer = _when(predicate, resolve, _extends({}, opts, {
      onError: reject
    }));

    cancel = function cancel() {
      disposer();
      reject("WHEN_CANCELLED");
    };
  });
  res.cancel = cancel;
  return res;
}

function getAdm(target) {
  return target[$mobx];
} // Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,
// and skip either the internal values map, or the base object with its property descriptors!


var objectProxyTraps = {
  has: function has(target, name) {
    if ( true && globalState.trackingDerivation) warnAboutProxyRequirement("detect new properties using the 'in' operator. Use 'has' from 'mobx' instead.");
    return getAdm(target).has_(name);
  },
  get: function get(target, name) {
    return getAdm(target).get_(name);
  },
  set: function set(target, name, value) {
    var _getAdm$set_;

    if (!isStringish(name)) return false;

    if ( true && !getAdm(target).values_.has(name)) {
      warnAboutProxyRequirement("add a new observable property through direct assignment. Use 'set' from 'mobx' instead.");
    } // null (intercepted) -> true (success)


    return (_getAdm$set_ = getAdm(target).set_(name, value, true)) != null ? _getAdm$set_ : true;
  },
  deleteProperty: function deleteProperty(target, name) {
    var _getAdm$delete_;

    if (true) {
      warnAboutProxyRequirement("delete properties from an observable object. Use 'remove' from 'mobx' instead.");
    }

    if (!isStringish(name)) return false; // null (intercepted) -> true (success)

    return (_getAdm$delete_ = getAdm(target).delete_(name, true)) != null ? _getAdm$delete_ : true;
  },
  defineProperty: function defineProperty(target, name, descriptor) {
    var _getAdm$definePropert;

    if (true) {
      warnAboutProxyRequirement("define property on an observable object. Use 'defineProperty' from 'mobx' instead.");
    } // null (intercepted) -> true (success)


    return (_getAdm$definePropert = getAdm(target).defineProperty_(name, descriptor)) != null ? _getAdm$definePropert : true;
  },
  ownKeys: function ownKeys(target) {
    if ( true && globalState.trackingDerivation) warnAboutProxyRequirement("iterate keys to detect added / removed properties. Use `keys` from 'mobx' instead.");
    return getAdm(target).ownKeys_();
  },
  preventExtensions: function preventExtensions(target) {
    die(13);
  }
};

function asDynamicObservableObject(target, options) {
  var _target$$mobx, _target$$mobx$proxy_;

  assertProxies();
  target = asObservableObject(target, options);
  return (_target$$mobx$proxy_ = (_target$$mobx = target[$mobx]).proxy_) != null ? _target$$mobx$proxy_ : _target$$mobx.proxy_ = new Proxy(target, objectProxyTraps);
}

function hasInterceptors(interceptable) {
  return interceptable.interceptors_ !== undefined && interceptable.interceptors_.length > 0;
}

function registerInterceptor(interceptable, handler) {
  var interceptors = interceptable.interceptors_ || (interceptable.interceptors_ = []);
  interceptors.push(handler);
  return once(function () {
    var idx = interceptors.indexOf(handler);
    if (idx !== -1) interceptors.splice(idx, 1);
  });
}

function interceptChange(interceptable, change) {
  var prevU = untrackedStart();

  try {
    // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950
    var interceptors = [].concat(interceptable.interceptors_ || []);

    for (var i = 0, l = interceptors.length; i < l; i++) {
      change = interceptors[i](change);
      if (change && !change.type) die(14);
      if (!change) break;
    }

    return change;
  } finally {
    untrackedEnd(prevU);
  }
}

function hasListeners(listenable) {
  return listenable.changeListeners_ !== undefined && listenable.changeListeners_.length > 0;
}

function registerListener(listenable, handler) {
  var listeners = listenable.changeListeners_ || (listenable.changeListeners_ = []);
  listeners.push(handler);
  return once(function () {
    var idx = listeners.indexOf(handler);
    if (idx !== -1) listeners.splice(idx, 1);
  });
}

function notifyListeners(listenable, change) {
  var prevU = untrackedStart();
  var listeners = listenable.changeListeners_;
  if (!listeners) return;
  listeners = listeners.slice();

  for (var i = 0, l = listeners.length; i < l; i++) {
    listeners[i](change);
  }

  untrackedEnd(prevU);
}

function makeObservable(target, annotations, options) {
  var adm = asObservableObject(target, options)[$mobx];
  startBatch();

  try {
    var _annotations; // Default to decorators


    (_annotations = annotations) != null ? _annotations : annotations = collectStoredAnnotations(target); // Annotate

    ownKeys(annotations).forEach(function (key) {
      return adm.make_(key, annotations[key]);
    });
  } finally {
    endBatch();
  }

  return target;
}

function makeAutoObservable(target, overrides, options) {
  if (true) {
    if (!isPlainObject(target) && !isPlainObject(Object.getPrototypeOf(target))) die("'makeAutoObservable' can only be used for classes that don't have a superclass");
    if (isObservableObject(target)) die("makeAutoObservable can only be used on objects not already made observable");
  } // Optimization (avoids visiting protos)
  // assumes that annotation.make_/.extend_ works the same for plain objects


  if (isPlainObject(target)) {
    return extendObservable(target, target, overrides, options);
  }

  var adm = asObservableObject(target, options)[$mobx];
  startBatch();

  try {
    // Use cached inferred annotations if available (only in classes)
    if (target[inferredAnnotationsSymbol]) {
      target[inferredAnnotationsSymbol].forEach(function (value, key) {
        return adm.make_(key, value);
      });
    } else {
      var _ignoreKeys;

      var ignoreKeys = (_ignoreKeys = {}, _ignoreKeys[$mobx] = 1, _ignoreKeys[inferredAnnotationsSymbol] = 1, _ignoreKeys.constructor = 1, _ignoreKeys);

      var make = function make(key) {
        if (ignoreKeys[key]) return;
        ignoreKeys[key] = 1;
        adm.make_(key, // must pass "undefined" for { key: undefined }
        !overrides ? true : key in overrides ? overrides[key] : true);
      };

      var current = target;

      while (current && current !== objectPrototype) {
        ownKeys(current).forEach(make);
        current = Object.getPrototypeOf(current);
      }
    }
  } finally {
    endBatch();
  }

  return target;
}

var SPLICE = "splice";
var UPDATE = "update";
var MAX_SPLICE_SIZE = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859

var arrayTraps = {
  get: function get(target, name) {
    var adm = target[$mobx];
    if (name === $mobx) return adm;
    if (name === "length") return adm.getArrayLength_();

    if (typeof name === "string" && !isNaN(name)) {
      return adm.get_(parseInt(name));
    }

    if (hasProp(arrayExtensions, name)) {
      return arrayExtensions[name];
    }

    return target[name];
  },
  set: function set(target, name, value) {
    var adm = target[$mobx];

    if (name === "length") {
      adm.setArrayLength_(value);
    }

    if (typeof name === "symbol" || isNaN(name)) {
      target[name] = value;
    } else {
      // numeric string
      adm.set_(parseInt(name), value);
    }

    return true;
  },
  preventExtensions: function preventExtensions() {
    die(15);
  }
};

var ObservableArrayAdministration = /*#__PURE__*/function () {
  // this is the prop that gets proxied, so can't replace it!
  function ObservableArrayAdministration(name, enhancer, owned_, legacyMode_) {
    if (name === void 0) {
      name =  true ? "ObservableArray@" + getNextId() : undefined;
    }

    this.owned_ = void 0;
    this.legacyMode_ = void 0;
    this.atom_ = void 0;
    this.values_ = [];
    this.interceptors_ = void 0;
    this.changeListeners_ = void 0;
    this.enhancer_ = void 0;
    this.dehancer = void 0;
    this.proxy_ = void 0;
    this.lastKnownLength_ = 0;
    this.owned_ = owned_;
    this.legacyMode_ = legacyMode_;
    this.atom_ = new Atom(name);

    this.enhancer_ = function (newV, oldV) {
      return enhancer(newV, oldV,  true ? name + "[..]" : undefined);
    };
  }

  var _proto = ObservableArrayAdministration.prototype;

  _proto.dehanceValue_ = function dehanceValue_(value) {
    if (this.dehancer !== undefined) return this.dehancer(value);
    return value;
  };

  _proto.dehanceValues_ = function dehanceValues_(values) {
    if (this.dehancer !== undefined && values.length > 0) return values.map(this.dehancer);
    return values;
  };

  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };

  _proto.observe_ = function observe_(listener, fireImmediately) {
    if (fireImmediately === void 0) {
      fireImmediately = false;
    }

    if (fireImmediately) {
      listener({
        observableKind: "array",
        object: this.proxy_,
        debugObjectName: this.atom_.name_,
        type: "splice",
        index: 0,
        added: this.values_.slice(),
        addedCount: this.values_.length,
        removed: [],
        removedCount: 0
      });
    }

    return registerListener(this, listener);
  };

  _proto.getArrayLength_ = function getArrayLength_() {
    this.atom_.reportObserved();
    return this.values_.length;
  };

  _proto.setArrayLength_ = function setArrayLength_(newLength) {
    if (typeof newLength !== "number" || newLength < 0) die("Out of range: " + newLength);
    var currentLength = this.values_.length;
    if (newLength === currentLength) return;else if (newLength > currentLength) {
      var newItems = new Array(newLength - currentLength);

      for (var i = 0; i < newLength - currentLength; i++) {
        newItems[i] = undefined;
      } // No Array.fill everywhere...


      this.spliceWithArray_(currentLength, 0, newItems);
    } else this.spliceWithArray_(newLength, currentLength - newLength);
  };

  _proto.updateArrayLength_ = function updateArrayLength_(oldLength, delta) {
    if (oldLength !== this.lastKnownLength_) die(16);
    this.lastKnownLength_ += delta;
    if (this.legacyMode_ && delta > 0) reserveArrayBuffer(oldLength + delta + 1);
  };

  _proto.spliceWithArray_ = function spliceWithArray_(index, deleteCount, newItems) {
    var _this = this;

    checkIfStateModificationsAreAllowed(this.atom_);
    var length = this.values_.length;
    if (index === undefined) index = 0;else if (index > length) index = length;else if (index < 0) index = Math.max(0, length + index);
    if (arguments.length === 1) deleteCount = length - index;else if (deleteCount === undefined || deleteCount === null) deleteCount = 0;else deleteCount = Math.max(0, Math.min(deleteCount, length - index));
    if (newItems === undefined) newItems = EMPTY_ARRAY;

    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this.proxy_,
        type: SPLICE,
        index: index,
        removedCount: deleteCount,
        added: newItems
      });
      if (!change) return EMPTY_ARRAY;
      deleteCount = change.removedCount;
      newItems = change.added;
    }

    newItems = newItems.length === 0 ? newItems : newItems.map(function (v) {
      return _this.enhancer_(v, undefined);
    });

    if (this.legacyMode_ || "development" !== "production") {
      var lengthDelta = newItems.length - deleteCount;
      this.updateArrayLength_(length, lengthDelta); // checks if internal array wasn't modified
    }

    var res = this.spliceItemsIntoValues_(index, deleteCount, newItems);
    if (deleteCount !== 0 || newItems.length !== 0) this.notifyArraySplice_(index, newItems, res);
    return this.dehanceValues_(res);
  };

  _proto.spliceItemsIntoValues_ = function spliceItemsIntoValues_(index, deleteCount, newItems) {
    if (newItems.length < MAX_SPLICE_SIZE) {
      var _this$values_;

      return (_this$values_ = this.values_).splice.apply(_this$values_, [index, deleteCount].concat(newItems));
    } else {
      var res = this.values_.slice(index, index + deleteCount);
      var oldItems = this.values_.slice(index + deleteCount);
      this.values_.length = index + newItems.length - deleteCount;

      for (var i = 0; i < newItems.length; i++) {
        this.values_[index + i] = newItems[i];
      }

      for (var _i = 0; _i < oldItems.length; _i++) {
        this.values_[index + newItems.length + _i] = oldItems[_i];
      }

      return res;
    }
  };

  _proto.notifyArrayChildUpdate_ = function notifyArrayChildUpdate_(index, newValue, oldValue) {
    var notifySpy = !this.owned_ && isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      observableKind: "array",
      object: this.proxy_,
      type: UPDATE,
      debugObjectName: this.atom_.name_,
      index: index,
      newValue: newValue,
      oldValue: oldValue
    } : null; // The reason why this is on right hand side here (and not above), is this way the uglifier will drop it, but it won't
    // cause any runtime overhead in development mode without NODE_ENV set, unless spying is enabled

    if ( true && notifySpy) spyReportStart(change);
    this.atom_.reportChanged();
    if (notify) notifyListeners(this, change);
    if ( true && notifySpy) spyReportEnd();
  };

  _proto.notifyArraySplice_ = function notifyArraySplice_(index, added, removed) {
    var notifySpy = !this.owned_ && isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      observableKind: "array",
      object: this.proxy_,
      debugObjectName: this.atom_.name_,
      type: SPLICE,
      index: index,
      removed: removed,
      added: added,
      removedCount: removed.length,
      addedCount: added.length
    } : null;
    if ( true && notifySpy) spyReportStart(change);
    this.atom_.reportChanged(); // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe

    if (notify) notifyListeners(this, change);
    if ( true && notifySpy) spyReportEnd();
  };

  _proto.get_ = function get_(index) {
    if (index < this.values_.length) {
      this.atom_.reportObserved();
      return this.dehanceValue_(this.values_[index]);
    }

    console.warn( true ? "[mobx] Out of bounds read: " + index : undefined);
  };

  _proto.set_ = function set_(index, newValue) {
    var values = this.values_;

    if (index < values.length) {
      // update at index in range
      checkIfStateModificationsAreAllowed(this.atom_);
      var oldValue = values[index];

      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          type: UPDATE,
          object: this.proxy_,
          index: index,
          newValue: newValue
        });
        if (!change) return;
        newValue = change.newValue;
      }

      newValue = this.enhancer_(newValue, oldValue);
      var changed = newValue !== oldValue;

      if (changed) {
        values[index] = newValue;
        this.notifyArrayChildUpdate_(index, newValue, oldValue);
      }
    } else if (index === values.length) {
      // add a new item
      this.spliceWithArray_(index, 0, [newValue]);
    } else {
      // out of bounds
      die(17, index, values.length);
    }
  };

  return ObservableArrayAdministration;
}();

function createObservableArray(initialValues, enhancer, name, owned) {
  if (name === void 0) {
    name =  true ? "ObservableArray@" + getNextId() : undefined;
  }

  if (owned === void 0) {
    owned = false;
  }

  assertProxies();
  var adm = new ObservableArrayAdministration(name, enhancer, owned, false);
  addHiddenFinalProp(adm.values_, $mobx, adm);
  var proxy = new Proxy(adm.values_, arrayTraps);
  adm.proxy_ = proxy;

  if (initialValues && initialValues.length) {
    var prev = allowStateChangesStart(true);
    adm.spliceWithArray_(0, 0, initialValues);
    allowStateChangesEnd(prev);
  }

  return proxy;
} // eslint-disable-next-line


var arrayExtensions = {
  clear: function clear() {
    return this.splice(0);
  },
  replace: function replace(newItems) {
    var adm = this[$mobx];
    return adm.spliceWithArray_(0, adm.values_.length, newItems);
  },
  // Used by JSON.stringify
  toJSON: function toJSON() {
    return this.slice();
  },

  /*
   * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)
   * since these functions alter the inner structure of the array, the have side effects.
   * Because the have side effects, they should not be used in computed function,
   * and for that reason the do not call dependencyState.notifyObserved
   */
  splice: function splice(index, deleteCount) {
    for (var _len = arguments.length, newItems = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      newItems[_key - 2] = arguments[_key];
    }

    var adm = this[$mobx];

    switch (arguments.length) {
      case 0:
        return [];

      case 1:
        return adm.spliceWithArray_(index);

      case 2:
        return adm.spliceWithArray_(index, deleteCount);
    }

    return adm.spliceWithArray_(index, deleteCount, newItems);
  },
  spliceWithArray: function spliceWithArray(index, deleteCount, newItems) {
    return this[$mobx].spliceWithArray_(index, deleteCount, newItems);
  },
  push: function push() {
    var adm = this[$mobx];

    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      items[_key2] = arguments[_key2];
    }

    adm.spliceWithArray_(adm.values_.length, 0, items);
    return adm.values_.length;
  },
  pop: function pop() {
    return this.splice(Math.max(this[$mobx].values_.length - 1, 0), 1)[0];
  },
  shift: function shift() {
    return this.splice(0, 1)[0];
  },
  unshift: function unshift() {
    var adm = this[$mobx];

    for (var _len3 = arguments.length, items = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      items[_key3] = arguments[_key3];
    }

    adm.spliceWithArray_(0, 0, items);
    return adm.values_.length;
  },
  reverse: function reverse() {
    // reverse by default mutates in place before returning the result
    // which makes it both a 'derivation' and a 'mutation'.
    if (globalState.trackingDerivation) {
      die(37, "reverse");
    }

    this.replace(this.slice().reverse());
    return this;
  },
  sort: function sort() {
    // sort by default mutates in place before returning the result
    // which goes against all good practices. Let's not change the array in place!
    if (globalState.trackingDerivation) {
      die(37, "sort");
    }

    var copy = this.slice();
    copy.sort.apply(copy, arguments);
    this.replace(copy);
    return this;
  },
  remove: function remove(value) {
    var adm = this[$mobx];
    var idx = adm.dehanceValues_(adm.values_).indexOf(value);

    if (idx > -1) {
      this.splice(idx, 1);
      return true;
    }

    return false;
  }
};
/**
 * Wrap function from prototype
 * Without this, everything works as well, but this works
 * faster as everything works on unproxied values
 */

addArrayExtension("concat", simpleFunc);
addArrayExtension("flat", simpleFunc);
addArrayExtension("includes", simpleFunc);
addArrayExtension("indexOf", simpleFunc);
addArrayExtension("join", simpleFunc);
addArrayExtension("lastIndexOf", simpleFunc);
addArrayExtension("slice", simpleFunc);
addArrayExtension("toString", simpleFunc);
addArrayExtension("toLocaleString", simpleFunc); // map

addArrayExtension("every", mapLikeFunc);
addArrayExtension("filter", mapLikeFunc);
addArrayExtension("find", mapLikeFunc);
addArrayExtension("findIndex", mapLikeFunc);
addArrayExtension("flatMap", mapLikeFunc);
addArrayExtension("forEach", mapLikeFunc);
addArrayExtension("map", mapLikeFunc);
addArrayExtension("some", mapLikeFunc); // reduce

addArrayExtension("reduce", reduceLikeFunc);
addArrayExtension("reduceRight", reduceLikeFunc);

function addArrayExtension(funcName, funcFactory) {
  if (typeof Array.prototype[funcName] === "function") {
    arrayExtensions[funcName] = funcFactory(funcName);
  }
} // Report and delegate to dehanced array


function simpleFunc(funcName) {
  return function () {
    var adm = this[$mobx];
    adm.atom_.reportObserved();
    var dehancedValues = adm.dehanceValues_(adm.values_);
    return dehancedValues[funcName].apply(dehancedValues, arguments);
  };
} // Make sure callbacks recieve correct array arg #2326


function mapLikeFunc(funcName) {
  return function (callback, thisArg) {
    var _this2 = this;

    var adm = this[$mobx];
    adm.atom_.reportObserved();
    var dehancedValues = adm.dehanceValues_(adm.values_);
    return dehancedValues[funcName](function (element, index) {
      return callback.call(thisArg, element, index, _this2);
    });
  };
} // Make sure callbacks recieve correct array arg #2326


function reduceLikeFunc(funcName) {
  return function () {
    var _this3 = this;

    var adm = this[$mobx];
    adm.atom_.reportObserved();
    var dehancedValues = adm.dehanceValues_(adm.values_); // #2432 - reduce behavior depends on arguments.length

    var callback = arguments[0];

    arguments[0] = function (accumulator, currentValue, index) {
      return callback(accumulator, currentValue, index, _this3);
    };

    return dehancedValues[funcName].apply(dehancedValues, arguments);
  };
}

var isObservableArrayAdministration = /*#__PURE__*/createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);

function isObservableArray(thing) {
  return isObject(thing) && isObservableArrayAdministration(thing[$mobx]);
}

var _Symbol$iterator, _Symbol$toStringTag;

var ObservableMapMarker = {};
var ADD = "add";
var DELETE = "delete"; // just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54
// But: https://github.com/mobxjs/mobx/issues/1556

_Symbol$iterator = Symbol.iterator;
_Symbol$toStringTag = Symbol.toStringTag;

var ObservableMap = /*#__PURE__*/function () {
  // hasMap, not hashMap >-).
  function ObservableMap(initialData, enhancer_, name_) {
    if (enhancer_ === void 0) {
      enhancer_ = deepEnhancer;
    }

    if (name_ === void 0) {
      name_ =  true ? "ObservableMap@" + getNextId() : undefined;
    }

    this.enhancer_ = void 0;
    this.name_ = void 0;
    this[$mobx] = ObservableMapMarker;
    this.data_ = void 0;
    this.hasMap_ = void 0;
    this.keysAtom_ = void 0;
    this.interceptors_ = void 0;
    this.changeListeners_ = void 0;
    this.dehancer = void 0;
    this.enhancer_ = enhancer_;
    this.name_ = name_;

    if (!isFunction(Map)) {
      die(18);
    }

    this.keysAtom_ = createAtom( true ? this.name_ + ".keys()" : undefined);
    this.data_ = new Map();
    this.hasMap_ = new Map();
    this.merge(initialData);
  }

  var _proto = ObservableMap.prototype;

  _proto.has_ = function has_(key) {
    return this.data_.has(key);
  };

  _proto.has = function has(key) {
    var _this = this;

    if (!globalState.trackingDerivation) return this.has_(key);
    var entry = this.hasMap_.get(key);

    if (!entry) {
      var newEntry = entry = new ObservableValue(this.has_(key), referenceEnhancer,  true ? this.name_ + "." + stringifyKey(key) + "?" : undefined, false);
      this.hasMap_.set(key, newEntry);
      onBecomeUnobserved(newEntry, function () {
        return _this.hasMap_["delete"](key);
      });
    }

    return entry.get();
  };

  _proto.set = function set(key, value) {
    var hasKey = this.has_(key);

    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: hasKey ? UPDATE : ADD,
        object: this,
        newValue: value,
        name: key
      });
      if (!change) return this;
      value = change.newValue;
    }

    if (hasKey) {
      this.updateValue_(key, value);
    } else {
      this.addValue_(key, value);
    }

    return this;
  };

  _proto["delete"] = function _delete(key) {
    var _this2 = this;

    checkIfStateModificationsAreAllowed(this.keysAtom_);

    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: DELETE,
        object: this,
        name: key
      });
      if (!change) return false;
    }

    if (this.has_(key)) {
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);

      var _change = notify || notifySpy ? {
        observableKind: "map",
        debugObjectName: this.name_,
        type: DELETE,
        object: this,
        oldValue: this.data_.get(key).value_,
        name: key
      } : null;

      if ( true && notifySpy) spyReportStart(_change);
      transaction(function () {
        _this2.keysAtom_.reportChanged();

        _this2.updateHasMapEntry_(key, false);

        var observable = _this2.data_.get(key);

        observable.setNewValue_(undefined);

        _this2.data_["delete"](key);
      });
      if (notify) notifyListeners(this, _change);
      if ( true && notifySpy) spyReportEnd();
      return true;
    }

    return false;
  };

  _proto.updateHasMapEntry_ = function updateHasMapEntry_(key, value) {
    var entry = this.hasMap_.get(key);

    if (entry) {
      entry.setNewValue_(value);
    }
  };

  _proto.updateValue_ = function updateValue_(key, newValue) {
    var observable = this.data_.get(key);
    newValue = observable.prepareNewValue_(newValue);

    if (newValue !== globalState.UNCHANGED) {
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);
      var change = notify || notifySpy ? {
        observableKind: "map",
        debugObjectName: this.name_,
        type: UPDATE,
        object: this,
        oldValue: observable.value_,
        name: key,
        newValue: newValue
      } : null;
      if ( true && notifySpy) spyReportStart(change);
      observable.setNewValue_(newValue);
      if (notify) notifyListeners(this, change);
      if ( true && notifySpy) spyReportEnd();
    }
  };

  _proto.addValue_ = function addValue_(key, newValue) {
    var _this3 = this;

    checkIfStateModificationsAreAllowed(this.keysAtom_);
    transaction(function () {
      var observable = new ObservableValue(newValue, _this3.enhancer_,  true ? _this3.name_ + "." + stringifyKey(key) : undefined, false);

      _this3.data_.set(key, observable);

      newValue = observable.value_; // value might have been changed

      _this3.updateHasMapEntry_(key, true);

      _this3.keysAtom_.reportChanged();
    });
    var notifySpy = isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      observableKind: "map",
      debugObjectName: this.name_,
      type: ADD,
      object: this,
      name: key,
      newValue: newValue
    } : null;
    if ( true && notifySpy) spyReportStart(change);
    if (notify) notifyListeners(this, change);
    if ( true && notifySpy) spyReportEnd();
  };

  _proto.get = function get(key) {
    if (this.has(key)) return this.dehanceValue_(this.data_.get(key).get());
    return this.dehanceValue_(undefined);
  };

  _proto.dehanceValue_ = function dehanceValue_(value) {
    if (this.dehancer !== undefined) {
      return this.dehancer(value);
    }

    return value;
  };

  _proto.keys = function keys() {
    this.keysAtom_.reportObserved();
    return this.data_.keys();
  };

  _proto.values = function values() {
    var self = this;
    var keys = this.keys();
    return makeIterable({
      next: function next() {
        var _keys$next = keys.next(),
            done = _keys$next.done,
            value = _keys$next.value;

        return {
          done: done,
          value: done ? undefined : self.get(value)
        };
      }
    });
  };

  _proto.entries = function entries() {
    var self = this;
    var keys = this.keys();
    return makeIterable({
      next: function next() {
        var _keys$next2 = keys.next(),
            done = _keys$next2.done,
            value = _keys$next2.value;

        return {
          done: done,
          value: done ? undefined : [value, self.get(value)]
        };
      }
    });
  };

  _proto[_Symbol$iterator] = function () {
    return this.entries();
  };

  _proto.forEach = function forEach(callback, thisArg) {
    for (var _iterator = _createForOfIteratorHelperLoose(this), _step; !(_step = _iterator()).done;) {
      var _step$value = _step.value,
          key = _step$value[0],
          value = _step$value[1];
      callback.call(thisArg, value, key, this);
    }
  }
  /** Merge another object into this object, returns this. */
  ;

  _proto.merge = function merge(other) {
    var _this4 = this;

    if (isObservableMap(other)) {
      other = new Map(other);
    }

    transaction(function () {
      if (isPlainObject(other)) getPlainObjectKeys(other).forEach(function (key) {
        return _this4.set(key, other[key]);
      });else if (Array.isArray(other)) other.forEach(function (_ref) {
        var key = _ref[0],
            value = _ref[1];
        return _this4.set(key, value);
      });else if (isES6Map(other)) {
        if (other.constructor !== Map) die(19, other);
        other.forEach(function (value, key) {
          return _this4.set(key, value);
        });
      } else if (other !== null && other !== undefined) die(20, other);
    });
    return this;
  };

  _proto.clear = function clear() {
    var _this5 = this;

    transaction(function () {
      untracked(function () {
        for (var _iterator2 = _createForOfIteratorHelperLoose(_this5.keys()), _step2; !(_step2 = _iterator2()).done;) {
          var key = _step2.value;

          _this5["delete"](key);
        }
      });
    });
  };

  _proto.replace = function replace(values) {
    var _this6 = this; // Implementation requirements:
    // - respect ordering of replacement map
    // - allow interceptors to run and potentially prevent individual operations
    // - don't recreate observables that already exist in original map (so we don't destroy existing subscriptions)
    // - don't _keysAtom.reportChanged if the keys of resulting map are indentical (order matters!)
    // - note that result map may differ from replacement map due to the interceptors


    transaction(function () {
      // Convert to map so we can do quick key lookups
      var replacementMap = convertToMap(values);
      var orderedData = new Map(); // Used for optimization

      var keysReportChangedCalled = false; // Delete keys that don't exist in replacement map
      // if the key deletion is prevented by interceptor
      // add entry at the beginning of the result map

      for (var _iterator3 = _createForOfIteratorHelperLoose(_this6.data_.keys()), _step3; !(_step3 = _iterator3()).done;) {
        var key = _step3.value; // Concurrently iterating/deleting keys
        // iterator should handle this correctly

        if (!replacementMap.has(key)) {
          var deleted = _this6["delete"](key); // Was the key removed?


          if (deleted) {
            // _keysAtom.reportChanged() was already called
            keysReportChangedCalled = true;
          } else {
            // Delete prevented by interceptor
            var value = _this6.data_.get(key);

            orderedData.set(key, value);
          }
        }
      } // Merge entries


      for (var _iterator4 = _createForOfIteratorHelperLoose(replacementMap.entries()), _step4; !(_step4 = _iterator4()).done;) {
        var _step4$value = _step4.value,
            _key = _step4$value[0],
            _value = _step4$value[1]; // We will want to know whether a new key is added

        var keyExisted = _this6.data_.has(_key); // Add or update value


        _this6.set(_key, _value); // The addition could have been prevent by interceptor


        if (_this6.data_.has(_key)) {
          // The update could have been prevented by interceptor
          // and also we want to preserve existing values
          // so use value from _data map (instead of replacement map)
          var _value2 = _this6.data_.get(_key);

          orderedData.set(_key, _value2); // Was a new key added?

          if (!keyExisted) {
            // _keysAtom.reportChanged() was already called
            keysReportChangedCalled = true;
          }
        }
      } // Check for possible key order change


      if (!keysReportChangedCalled) {
        if (_this6.data_.size !== orderedData.size) {
          // If size differs, keys are definitely modified
          _this6.keysAtom_.reportChanged();
        } else {
          var iter1 = _this6.data_.keys();

          var iter2 = orderedData.keys();
          var next1 = iter1.next();
          var next2 = iter2.next();

          while (!next1.done) {
            if (next1.value !== next2.value) {
              _this6.keysAtom_.reportChanged();

              break;
            }

            next1 = iter1.next();
            next2 = iter2.next();
          }
        }
      } // Use correctly ordered map


      _this6.data_ = orderedData;
    });
    return this;
  };

  _proto.toString = function toString() {
    return "[object ObservableMap]";
  };

  _proto.toJSON = function toJSON() {
    return Array.from(this);
  };
  /**
   * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
   * for callback details
   */


  _proto.observe_ = function observe_(listener, fireImmediately) {
    if ( true && fireImmediately === true) die("`observe` doesn't support fireImmediately=true in combination with maps.");
    return registerListener(this, listener);
  };

  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };

  _createClass(ObservableMap, [{
    key: "size",
    get: function get() {
      this.keysAtom_.reportObserved();
      return this.data_.size;
    }
  }, {
    key: _Symbol$toStringTag,
    get: function get() {
      return "Map";
    }
  }]);

  return ObservableMap;
}(); // eslint-disable-next-line


var isObservableMap = /*#__PURE__*/createInstanceofPredicate("ObservableMap", ObservableMap);

function convertToMap(dataStructure) {
  if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {
    return dataStructure;
  } else if (Array.isArray(dataStructure)) {
    return new Map(dataStructure);
  } else if (isPlainObject(dataStructure)) {
    var map = new Map();

    for (var key in dataStructure) {
      map.set(key, dataStructure[key]);
    }

    return map;
  } else {
    return die(21, dataStructure);
  }
}

var _Symbol$iterator$1, _Symbol$toStringTag$1;

var ObservableSetMarker = {};
_Symbol$iterator$1 = Symbol.iterator;
_Symbol$toStringTag$1 = Symbol.toStringTag;

var ObservableSet = /*#__PURE__*/function () {
  function ObservableSet(initialData, enhancer, name_) {
    if (enhancer === void 0) {
      enhancer = deepEnhancer;
    }

    if (name_ === void 0) {
      name_ =  true ? "ObservableSet@" + getNextId() : undefined;
    }

    this.name_ = void 0;
    this[$mobx] = ObservableSetMarker;
    this.data_ = new Set();
    this.atom_ = void 0;
    this.changeListeners_ = void 0;
    this.interceptors_ = void 0;
    this.dehancer = void 0;
    this.enhancer_ = void 0;
    this.name_ = name_;

    if (!isFunction(Set)) {
      die(22);
    }

    this.atom_ = createAtom(this.name_);

    this.enhancer_ = function (newV, oldV) {
      return enhancer(newV, oldV, name_);
    };

    if (initialData) {
      this.replace(initialData);
    }
  }

  var _proto = ObservableSet.prototype;

  _proto.dehanceValue_ = function dehanceValue_(value) {
    if (this.dehancer !== undefined) {
      return this.dehancer(value);
    }

    return value;
  };

  _proto.clear = function clear() {
    var _this = this;

    transaction(function () {
      untracked(function () {
        for (var _iterator = _createForOfIteratorHelperLoose(_this.data_.values()), _step; !(_step = _iterator()).done;) {
          var value = _step.value;

          _this["delete"](value);
        }
      });
    });
  };

  _proto.forEach = function forEach(callbackFn, thisArg) {
    for (var _iterator2 = _createForOfIteratorHelperLoose(this), _step2; !(_step2 = _iterator2()).done;) {
      var value = _step2.value;
      callbackFn.call(thisArg, value, value, this);
    }
  };

  _proto.add = function add(value) {
    var _this2 = this;

    checkIfStateModificationsAreAllowed(this.atom_);

    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: ADD,
        object: this,
        newValue: value
      });
      if (!change) return this; // ideally, value = change.value would be done here, so that values can be
      // changed by interceptor. Same applies for other Set and Map api's.
    }

    if (!this.has(value)) {
      transaction(function () {
        _this2.data_.add(_this2.enhancer_(value, undefined));

        _this2.atom_.reportChanged();
      });
      var notifySpy =  true && isSpyEnabled();
      var notify = hasListeners(this);

      var _change = notify || notifySpy ? {
        observableKind: "set",
        debugObjectName: this.name_,
        type: ADD,
        object: this,
        newValue: value
      } : null;

      if (notifySpy && "development" !== "production") spyReportStart(_change);
      if (notify) notifyListeners(this, _change);
      if (notifySpy && "development" !== "production") spyReportEnd();
    }

    return this;
  };

  _proto["delete"] = function _delete(value) {
    var _this3 = this;

    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: DELETE,
        object: this,
        oldValue: value
      });
      if (!change) return false;
    }

    if (this.has(value)) {
      var notifySpy =  true && isSpyEnabled();
      var notify = hasListeners(this);

      var _change2 = notify || notifySpy ? {
        observableKind: "set",
        debugObjectName: this.name_,
        type: DELETE,
        object: this,
        oldValue: value
      } : null;

      if (notifySpy && "development" !== "production") spyReportStart(_change2);
      transaction(function () {
        _this3.atom_.reportChanged();

        _this3.data_["delete"](value);
      });
      if (notify) notifyListeners(this, _change2);
      if (notifySpy && "development" !== "production") spyReportEnd();
      return true;
    }

    return false;
  };

  _proto.has = function has(value) {
    this.atom_.reportObserved();
    return this.data_.has(this.dehanceValue_(value));
  };

  _proto.entries = function entries() {
    var nextIndex = 0;
    var keys = Array.from(this.keys());
    var values = Array.from(this.values());
    return makeIterable({
      next: function next() {
        var index = nextIndex;
        nextIndex += 1;
        return index < values.length ? {
          value: [keys[index], values[index]],
          done: false
        } : {
          done: true
        };
      }
    });
  };

  _proto.keys = function keys() {
    return this.values();
  };

  _proto.values = function values() {
    this.atom_.reportObserved();
    var self = this;
    var nextIndex = 0;
    var observableValues = Array.from(this.data_.values());
    return makeIterable({
      next: function next() {
        return nextIndex < observableValues.length ? {
          value: self.dehanceValue_(observableValues[nextIndex++]),
          done: false
        } : {
          done: true
        };
      }
    });
  };

  _proto.replace = function replace(other) {
    var _this4 = this;

    if (isObservableSet(other)) {
      other = new Set(other);
    }

    transaction(function () {
      if (Array.isArray(other)) {
        _this4.clear();

        other.forEach(function (value) {
          return _this4.add(value);
        });
      } else if (isES6Set(other)) {
        _this4.clear();

        other.forEach(function (value) {
          return _this4.add(value);
        });
      } else if (other !== null && other !== undefined) {
        die("Cannot initialize set from " + other);
      }
    });
    return this;
  };

  _proto.observe_ = function observe_(listener, fireImmediately) {
    // ... 'fireImmediately' could also be true?
    if ( true && fireImmediately === true) die("`observe` doesn't support fireImmediately=true in combination with sets.");
    return registerListener(this, listener);
  };

  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };

  _proto.toJSON = function toJSON() {
    return Array.from(this);
  };

  _proto.toString = function toString() {
    return "[object ObservableSet]";
  };

  _proto[_Symbol$iterator$1] = function () {
    return this.values();
  };

  _createClass(ObservableSet, [{
    key: "size",
    get: function get() {
      this.atom_.reportObserved();
      return this.data_.size;
    }
  }, {
    key: _Symbol$toStringTag$1,
    get: function get() {
      return "Set";
    }
  }]);

  return ObservableSet;
}(); // eslint-disable-next-line


var isObservableSet = /*#__PURE__*/createInstanceofPredicate("ObservableSet", ObservableSet);
var inferredAnnotationsSymbol = /*#__PURE__*/Symbol("mobx-inferred-annotations");
var descriptorCache = /*#__PURE__*/Object.create(null);
var REMOVE = "remove";

var ObservableObjectAdministration = /*#__PURE__*/function () {
  function ObservableObjectAdministration(target_, values_, name_, // Used anytime annotation is not explicitely provided
  defaultAnnotation_, // Bind automatically inferred actions?
  autoBind_) {
    if (values_ === void 0) {
      values_ = new Map();
    }

    if (defaultAnnotation_ === void 0) {
      defaultAnnotation_ = observable;
    }

    if (autoBind_ === void 0) {
      autoBind_ = false;
    }

    this.target_ = void 0;
    this.values_ = void 0;
    this.name_ = void 0;
    this.defaultAnnotation_ = void 0;
    this.autoBind_ = void 0;
    this.keysAtom_ = void 0;
    this.changeListeners_ = void 0;
    this.interceptors_ = void 0;
    this.proxy_ = void 0;
    this.isPlainObject_ = void 0;
    this.appliedAnnotations_ = void 0;
    this.pendingKeys_ = void 0;
    this.target_ = target_;
    this.values_ = values_;
    this.name_ = name_;
    this.defaultAnnotation_ = defaultAnnotation_;
    this.autoBind_ = autoBind_;
    this.keysAtom_ = new Atom( true ? this.name_ + ".keys" : undefined); // Optimization: we use this frequently

    this.isPlainObject_ = isPlainObject(this.target_);

    if ( true && !isAnnotation(this.defaultAnnotation_)) {
      die("defaultAnnotation must be valid annotation");
    }

    if ( true && typeof this.autoBind_ !== "boolean") {
      die("autoBind must be boolean");
    }

    if (true) {
      // Prepare structure for tracking which fields were already annotated
      this.appliedAnnotations_ = {};
    }
  }

  var _proto = ObservableObjectAdministration.prototype;

  _proto.getObservablePropValue_ = function getObservablePropValue_(key) {
    return this.values_.get(key).get();
  };

  _proto.setObservablePropValue_ = function setObservablePropValue_(key, newValue) {
    var observable = this.values_.get(key);

    if (observable instanceof ComputedValue) {
      observable.set(newValue);
      return true;
    } // intercept


    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: UPDATE,
        object: this.proxy_ || this.target_,
        name: key,
        newValue: newValue
      });
      if (!change) return null;
      newValue = change.newValue;
    }

    newValue = observable.prepareNewValue_(newValue); // notify spy & observers

    if (newValue !== globalState.UNCHANGED) {
      var notify = hasListeners(this);
      var notifySpy =  true && isSpyEnabled();

      var _change = notify || notifySpy ? {
        type: UPDATE,
        observableKind: "object",
        debugObjectName: this.name_,
        object: this.proxy_ || this.target_,
        oldValue: observable.value_,
        name: key,
        newValue: newValue
      } : null;

      if ( true && notifySpy) spyReportStart(_change);
      observable.setNewValue_(newValue);
      if (notify) notifyListeners(this, _change);
      if ( true && notifySpy) spyReportEnd();
    }

    return true;
  };

  _proto.get_ = function get_(key) {
    if (globalState.trackingDerivation && !hasProp(this.target_, key)) {
      // Key doesn't exist yet, subscribe for it in case it's added later
      this.has_(key);
    }

    return this.target_[key];
  }
  /**
   * @param {PropertyKey} key
   * @param {any} value
   * @param {Annotation|boolean} annotation true - infer from descriptor, false - copy as is
   * @param {boolean} proxyTrap whether it's called from proxy trap
   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
   */
  ;

  _proto.set_ = function set_(key, value, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    } // Don't use .has(key) - we care about own


    if (hasProp(this.target_, key)) {
      // Existing prop
      if (this.values_.has(key)) {
        // Observable (can be intercepted)
        return this.setObservablePropValue_(key, value);
      } else if (proxyTrap) {
        // Non-observable - proxy
        return Reflect.set(this.target_, key, value);
      } else {
        // Non-observable
        this.target_[key] = value;
        return true;
      }
    } else {
      // New prop
      return this.extend_(key, {
        value: value,
        enumerable: true,
        writable: true,
        configurable: true
      }, this.defaultAnnotation_, proxyTrap);
    }
  } // Trap for "in"
  ;

  _proto.has_ = function has_(key) {
    if (!globalState.trackingDerivation) {
      // Skip key subscription outside derivation
      return key in this.target_;
    }

    this.pendingKeys_ || (this.pendingKeys_ = new Map());
    var entry = this.pendingKeys_.get(key);

    if (!entry) {
      entry = new ObservableValue(key in this.target_, referenceEnhancer,  true ? this.name_ + "." + stringifyKey(key) + "?" : undefined, false);
      this.pendingKeys_.set(key, entry);
    }

    return entry.get();
  }
  /**
   * @param {PropertyKey} key
   * @param {Annotation|boolean} annotation true - infer from object or it's prototype, false - ignore
   */
  ;

  _proto.make_ = function make_(key, annotation) {
    if (annotation === true) {
      annotation = this.inferAnnotation_(key);
    }

    if (annotation === false) {
      return;
    }

    assertAnnotable(this, annotation, key);
    annotation.make_(this, key);
  }
  /**
   * @param {PropertyKey} key
   * @param {PropertyDescriptor} descriptor
   * @param {Annotation|boolean} annotation true - infer from descriptor, false - copy as is
   * @param {boolean} proxyTrap whether it's called from proxy trap
   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
   */
  ;

  _proto.extend_ = function extend_(key, descriptor, annotation, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }

    if (annotation === true) {
      annotation = inferAnnotationFromDescriptor(descriptor, this.defaultAnnotation_, this.autoBind_);
    }

    if (annotation === false) {
      return this.defineProperty_(key, descriptor, proxyTrap);
    }

    assertAnnotable(this, annotation, key);
    var outcome = annotation.extend_(this, key, descriptor, proxyTrap);

    if (outcome) {
      recordAnnotationApplied(this, annotation, key);
    }

    return outcome;
  };

  _proto.inferAnnotation_ = function inferAnnotation_(key) {
    var _this$target_$inferre; // Inherited is fine - annotation cannot differ in subclass


    var annotation = (_this$target_$inferre = this.target_[inferredAnnotationsSymbol]) == null ? void 0 : _this$target_$inferre.get(key);
    if (annotation) return annotation;
    var current = this.target_;

    while (current && current !== objectPrototype) {
      var descriptor = getDescriptor(current, key);

      if (descriptor) {
        annotation = inferAnnotationFromDescriptor(descriptor, this.defaultAnnotation_, this.autoBind_);
        break;
      }

      current = Object.getPrototypeOf(current);
    } // Not found (false means ignore)


    if (annotation === undefined) {
      die(1, "true", key);
    } // Cache the annotation.
    // Note we can do this only because annotation and field can't change.


    if (!this.isPlainObject_) {
      // We could also place it on furthest proto, shoudn't matter
      var closestProto = Object.getPrototypeOf(this.target_);

      if (!hasProp(closestProto, inferredAnnotationsSymbol)) {
        addHiddenProp(closestProto, inferredAnnotationsSymbol, new Map());
      }

      closestProto[inferredAnnotationsSymbol].set(key, annotation);
    }

    return annotation;
  }
  /**
   * @param {PropertyKey} key
   * @param {PropertyDescriptor} descriptor
   * @param {boolean} proxyTrap whether it's called from proxy trap
   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
   */
  ;

  _proto.defineProperty_ = function defineProperty_(key, descriptor, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }

    try {
      startBatch(); // Delete

      var deleteOutcome = this.delete_(key);

      if (!deleteOutcome) {
        // Failure or intercepted
        return deleteOutcome;
      } // ADD interceptor


      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: ADD,
          newValue: descriptor.value
        });
        if (!change) return null;
        var newValue = change.newValue;

        if (descriptor.value !== newValue) {
          descriptor = _extends({}, descriptor, {
            value: newValue
          });
        }
      } // Define


      if (proxyTrap) {
        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
          return false;
        }
      } else {
        defineProperty(this.target_, key, descriptor);
      } // Notify


      this.notifyPropertyAddition_(key, descriptor.value);
    } finally {
      endBatch();
    }

    return true;
  } // If original descriptor becomes relevant, move this to annotation directly
  ;

  _proto.defineObservableProperty_ = function defineObservableProperty_(key, value, enhancer, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }

    try {
      startBatch(); // Delete

      var deleteOutcome = this.delete_(key);

      if (!deleteOutcome) {
        // Failure or intercepted
        return deleteOutcome;
      } // ADD interceptor


      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: ADD,
          newValue: value
        });
        if (!change) return null;
        value = change.newValue;
      }

      var cachedDescriptor = getCachedObservablePropDescriptor(key);
      var descriptor = {
        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
        enumerable: true,
        get: cachedDescriptor.get,
        set: cachedDescriptor.set
      }; // Define

      if (proxyTrap) {
        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
          return false;
        }
      } else {
        defineProperty(this.target_, key, descriptor);
      }

      var _observable = new ObservableValue(value, enhancer,  true ? this.name_ + "." + key.toString() : undefined, false);

      this.values_.set(key, _observable); // Notify (value possibly changed by ObservableValue)

      this.notifyPropertyAddition_(key, _observable.value_);
    } finally {
      endBatch();
    }

    return true;
  } // If original descriptor becomes relevant, move this to annotation directly
  ;

  _proto.defineComputedProperty_ = function defineComputedProperty_(key, options, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }

    try {
      startBatch(); // Delete

      var deleteOutcome = this.delete_(key);

      if (!deleteOutcome) {
        // Failure or intercepted
        return deleteOutcome;
      } // ADD interceptor


      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: ADD,
          newValue: undefined
        });
        if (!change) return null;
      }

      options.name || (options.name =  true ? this.name_ + "." + key.toString() : undefined);
      options.context = this.proxy_ || this.target_;
      var cachedDescriptor = getCachedObservablePropDescriptor(key);
      var descriptor = {
        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
        enumerable: false,
        get: cachedDescriptor.get,
        set: cachedDescriptor.set
      }; // Define

      if (proxyTrap) {
        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
          return false;
        }
      } else {
        defineProperty(this.target_, key, descriptor);
      }

      this.values_.set(key, new ComputedValue(options)); // Notify

      this.notifyPropertyAddition_(key, undefined);
    } finally {
      endBatch();
    }

    return true;
  }
  /**
   * @param {PropertyKey} key
   * @param {PropertyDescriptor} descriptor
   * @param {boolean} proxyTrap whether it's called from proxy trap
   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
   */
  ;

  _proto.delete_ = function delete_(key, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    } // No such prop


    if (!hasProp(this.target_, key)) {
      return true;
    } // Intercept


    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this.proxy_ || this.target_,
        name: key,
        type: REMOVE
      }); // Cancelled

      if (!change) return null;
    } // Delete


    try {
      var _this$pendingKeys_, _this$pendingKeys_$ge;

      startBatch();
      var notify = hasListeners(this);
      var notifySpy =  true && isSpyEnabled();

      var _observable2 = this.values_.get(key); // Value needed for spies/listeners


      var value = undefined; // Optimization: don't pull the value unless we will need it

      if (!_observable2 && (notify || notifySpy)) {
        var _getDescriptor;

        value = (_getDescriptor = getDescriptor(this.target_, key)) == null ? void 0 : _getDescriptor.value;
      } // delete prop (do first, may fail)


      if (proxyTrap) {
        if (!Reflect.deleteProperty(this.target_, key)) {
          return false;
        }
      } else {
        delete this.target_[key];
      } // Allow re-annotating this field


      if (true) {
        delete this.appliedAnnotations_[key];
      } // Clear observable


      if (_observable2) {
        this.values_["delete"](key); // for computed, value is undefined

        if (_observable2 instanceof ObservableValue) {
          value = _observable2.value_;
        } // Notify: autorun(() => obj[key]), see #1796


        propagateChanged(_observable2);
      } // Notify "keys/entries/values" observers


      this.keysAtom_.reportChanged(); // Notify "has" observers
      // "in" as it may still exist in proto

      (_this$pendingKeys_ = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_$ge = _this$pendingKeys_.get(key)) == null ? void 0 : _this$pendingKeys_$ge.set(key in this.target_); // Notify spies/listeners

      if (notify || notifySpy) {
        var _change2 = {
          type: REMOVE,
          observableKind: "object",
          object: this.proxy_ || this.target_,
          debugObjectName: this.name_,
          oldValue: value,
          name: key
        };
        if ( true && notifySpy) spyReportStart(_change2);
        if (notify) notifyListeners(this, _change2);
        if ( true && notifySpy) spyReportEnd();
      }
    } finally {
      endBatch();
    }

    return true;
  }
  /**
   * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
   * for callback details
   */
  ;

  _proto.observe_ = function observe_(callback, fireImmediately) {
    if ( true && fireImmediately === true) die("`observe` doesn't support the fire immediately property for observable objects.");
    return registerListener(this, callback);
  };

  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };

  _proto.notifyPropertyAddition_ = function notifyPropertyAddition_(key, value) {
    var _this$pendingKeys_2, _this$pendingKeys_2$g;

    var notify = hasListeners(this);
    var notifySpy =  true && isSpyEnabled();

    if (notify || notifySpy) {
      var change = notify || notifySpy ? {
        type: ADD,
        observableKind: "object",
        debugObjectName: this.name_,
        object: this.proxy_ || this.target_,
        name: key,
        newValue: value
      } : null;
      if ( true && notifySpy) spyReportStart(change);
      if (notify) notifyListeners(this, change);
      if ( true && notifySpy) spyReportEnd();
    }

    (_this$pendingKeys_2 = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_2$g = _this$pendingKeys_2.get(key)) == null ? void 0 : _this$pendingKeys_2$g.set(true); // Notify "keys/entries/values" observers

    this.keysAtom_.reportChanged();
  };

  _proto.ownKeys_ = function ownKeys_() {
    this.keysAtom_.reportObserved();
    return ownKeys(this.target_);
  };

  _proto.keys_ = function keys_() {
    // Returns enumerable && own, but unfortunately keysAtom will report on ANY key change.
    // There is no way to distinguish between Object.keys(object) and Reflect.ownKeys(object) - both are handled by ownKeys trap.
    // We can either over-report in Object.keys(object) or under-report in Reflect.ownKeys(object)
    // We choose to over-report in Object.keys(object), because:
    // - typically it's used with simple data objects
    // - when symbolic/non-enumerable keys are relevant Reflect.ownKeys works as expected
    this.keysAtom_.reportObserved();
    return Object.keys(this.target_);
  };

  return ObservableObjectAdministration;
}();

function asObservableObject(target, options) {
  var _options$name;

  if ( true && options && isObservableObject(target)) {
    die("Options can't be provided for already observable objects.");
  }

  if (hasProp(target, $mobx)) {
    if ( true && !(getAdministration(target) instanceof ObservableObjectAdministration)) {
      die("Cannot convert '" + getDebugName(target) + "' into observable object:" + "\nThe target is already observable of different type." + "\nExtending builtins is not supported.");
    }

    return target;
  }

  if ( true && !Object.isExtensible(target)) die("Cannot make the designated object observable; it is not extensible");
  var name = (_options$name = options == null ? void 0 : options.name) != null ? _options$name :  true ? (isPlainObject(target) ? "ObservableObject" : target.constructor.name) + "@" + getNextId() : undefined;
  var adm = new ObservableObjectAdministration(target, new Map(), String(name), getAnnotationFromOptions(options), options == null ? void 0 : options.autoBind);
  addHiddenProp(target, $mobx, adm);
  return target;
}

var isObservableObjectAdministration = /*#__PURE__*/createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);

function getCachedObservablePropDescriptor(key) {
  return descriptorCache[key] || (descriptorCache[key] = {
    get: function get() {
      return this[$mobx].getObservablePropValue_(key);
    },
    set: function set(value) {
      return this[$mobx].setObservablePropValue_(key, value);
    }
  });
}

function isObservableObject(thing) {
  if (isObject(thing)) {
    return isObservableObjectAdministration(thing[$mobx]);
  }

  return false;
}

function recordAnnotationApplied(adm, annotation, key) {
  var _adm$target_$storedAn;

  if (true) {
    adm.appliedAnnotations_[key] = annotation;
  } // Remove applied decorator annotation so we don't try to apply it again in subclass constructor


  (_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? true : delete _adm$target_$storedAn[key];
}

function assertAnnotable(adm, annotation, key) {
  // Valid annotation
  if ( true && !isAnnotation(annotation)) {
    die("Cannot annotate '" + adm.name_ + "." + key.toString() + "': Invalid annotation.");
  }
  /*
  // Configurable, not sealed, not frozen
  // Possibly not needed, just a little better error then the one thrown by engine.
  // Cases where this would be useful the most (subclass field initializer) are not interceptable by this.
  if (__DEV__) {
      const configurable = getDescriptor(adm.target_, key)?.configurable
      const frozen = Object.isFrozen(adm.target_)
      const sealed = Object.isSealed(adm.target_)
      if (!configurable || frozen || sealed) {
          const fieldName = `${adm.name_}.${key.toString()}`
          const requestedAnnotationType = annotation.annotationType_
          let error = `Cannot apply '${requestedAnnotationType}' to '${fieldName}':`
          if (frozen) {
              error += `\nObject is frozen.`
          }
          if (sealed) {
              error += `\nObject is sealed.`
          }
          if (!configurable) {
              error += `\nproperty is not configurable.`
              // Mention only if caused by us to avoid confusion
              if (hasProp(adm.appliedAnnotations!, key)) {
                  error += `\nTo prevent accidental re-definition of a field by a subclass, `
                  error += `all annotated fields of non-plain objects (classes) are not configurable.`
              }
          }
          die(error)
      }
  }
  */
  // Not annotated


  if ( true && !isOverride(annotation) && hasProp(adm.appliedAnnotations_, key)) {
    var fieldName = adm.name_ + "." + key.toString();
    var currentAnnotationType = adm.appliedAnnotations_[key].annotationType_;
    var requestedAnnotationType = annotation.annotationType_;
    die("Cannot apply '" + requestedAnnotationType + "' to '" + fieldName + "':" + ("\nThe field is already annotated with '" + currentAnnotationType + "'.") + "\nRe-annotating fields is not allowed." + "\nUse 'override' annotation for methods overriden by subclass.");
  }
}
/**
 * This array buffer contains two lists of properties, so that all arrays
 * can recycle their property definitions, which significantly improves performance of creating
 * properties on the fly.
 */


var OBSERVABLE_ARRAY_BUFFER_SIZE = 0; // Typescript workaround to make sure ObservableArray extends Array

var StubArray = function StubArray() {};

function inherit(ctor, proto) {
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(ctor.prototype, proto);
  } else if (ctor.prototype.__proto__ !== undefined) {
    ctor.prototype.__proto__ = proto;
  } else {
    ctor.prototype = proto;
  }
}

inherit(StubArray, Array.prototype); // Weex proto freeze protection was here,
// but it is unclear why the hack is need as MobX never changed the prototype
// anyway, so removed it in V6

var LegacyObservableArray = /*#__PURE__*/function (_StubArray) {
  _inheritsLoose(LegacyObservableArray, _StubArray);

  function LegacyObservableArray(initialValues, enhancer, name, owned) {
    var _this;

    if (name === void 0) {
      name =  true ? "ObservableArray@" + getNextId() : undefined;
    }

    if (owned === void 0) {
      owned = false;
    }

    _this = _StubArray.call(this) || this;
    var adm = new ObservableArrayAdministration(name, enhancer, owned, true);
    adm.proxy_ = _assertThisInitialized(_this);
    addHiddenFinalProp(_assertThisInitialized(_this), $mobx, adm);

    if (initialValues && initialValues.length) {
      var prev = allowStateChangesStart(true); // @ts-ignore

      _this.spliceWithArray(0, 0, initialValues);

      allowStateChangesEnd(prev);
    }

    return _this;
  }

  var _proto = LegacyObservableArray.prototype;

  _proto.concat = function concat() {
    this[$mobx].atom_.reportObserved();

    for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {
      arrays[_key] = arguments[_key];
    }

    return Array.prototype.concat.apply(this.slice(), //@ts-ignore
    arrays.map(function (a) {
      return isObservableArray(a) ? a.slice() : a;
    }));
  };

  _proto[Symbol.iterator] = function () {
    var self = this;
    var nextIndex = 0;
    return makeIterable({
      next: function next() {
        // @ts-ignore
        return nextIndex < self.length ? {
          value: self[nextIndex++],
          done: false
        } : {
          done: true,
          value: undefined
        };
      }
    });
  };

  _createClass(LegacyObservableArray, [{
    key: "length",
    get: function get() {
      return this[$mobx].getArrayLength_();
    },
    set: function set(newLength) {
      this[$mobx].setArrayLength_(newLength);
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return "Array";
    }
  }]);

  return LegacyObservableArray;
}(StubArray);

Object.entries(arrayExtensions).forEach(function (_ref) {
  var prop = _ref[0],
      fn = _ref[1];
  if (prop !== "concat") addHiddenProp(LegacyObservableArray.prototype, prop, fn);
});

function createArrayEntryDescriptor(index) {
  return {
    enumerable: false,
    configurable: true,
    get: function get() {
      return this[$mobx].get_(index);
    },
    set: function set(value) {
      this[$mobx].set_(index, value);
    }
  };
}

function createArrayBufferItem(index) {
  defineProperty(LegacyObservableArray.prototype, "" + index, createArrayEntryDescriptor(index));
}

function reserveArrayBuffer(max) {
  if (max > OBSERVABLE_ARRAY_BUFFER_SIZE) {
    for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max + 100; index++) {
      createArrayBufferItem(index);
    }

    OBSERVABLE_ARRAY_BUFFER_SIZE = max;
  }
}

reserveArrayBuffer(1000);

function createLegacyArray(initialValues, enhancer, name) {
  return new LegacyObservableArray(initialValues, enhancer, name);
}

function getAtom(thing, property) {
  if (typeof thing === "object" && thing !== null) {
    if (isObservableArray(thing)) {
      if (property !== undefined) die(23);
      return thing[$mobx].atom_;
    }

    if (isObservableSet(thing)) {
      return thing[$mobx];
    }

    if (isObservableMap(thing)) {
      if (property === undefined) return thing.keysAtom_;
      var observable = thing.data_.get(property) || thing.hasMap_.get(property);
      if (!observable) die(25, property, getDebugName(thing));
      return observable;
    }

    if (isObservableObject(thing)) {
      if (!property) return die(26);

      var _observable = thing[$mobx].values_.get(property);

      if (!_observable) die(27, property, getDebugName(thing));
      return _observable;
    }

    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
      return thing;
    }
  } else if (isFunction(thing)) {
    if (isReaction(thing[$mobx])) {
      // disposer function
      return thing[$mobx];
    }
  }

  die(28);
}

function getAdministration(thing, property) {
  if (!thing) die(29);
  if (property !== undefined) return getAdministration(getAtom(thing, property));
  if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) return thing;
  if (isObservableMap(thing) || isObservableSet(thing)) return thing;
  if (thing[$mobx]) return thing[$mobx];
  die(24, thing);
}

function getDebugName(thing, property) {
  var named;

  if (property !== undefined) {
    named = getAtom(thing, property);
  } else if (isAction(thing)) {
    return thing.name;
  } else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing)) {
    named = getAdministration(thing);
  } else {
    // valid for arrays as well
    named = getAtom(thing);
  }

  return named.name_;
}

var toString = objectPrototype.toString;

function deepEqual(a, b, depth) {
  if (depth === void 0) {
    depth = -1;
  }

  return eq(a, b, depth);
} // Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289
// Internal recursive comparison function for `isEqual`.


function eq(a, b, depth, aStack, bStack) {
  // Identical objects are equal. `0 === -0`, but they aren't identical.
  // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
  if (a === b) return a !== 0 || 1 / a === 1 / b; // `null` or `undefined` only equal to itself (strict comparison).

  if (a == null || b == null) return false; // `NaN`s are equivalent, but non-reflexive.

  if (a !== a) return b !== b; // Exhaust primitive checks

  var type = typeof a;
  if (!isFunction(type) && type !== "object" && typeof b != "object") return false; // Compare `[[Class]]` names.

  var className = toString.call(a);
  if (className !== toString.call(b)) return false;

  switch (className) {
    // Strings, numbers, regular expressions, dates, and booleans are compared by value.
    case "[object RegExp]": // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')

    case "[object String]":
      // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
      // equivalent to `new String("5")`.
      return "" + a === "" + b;

    case "[object Number]":
      // `NaN`s are equivalent, but non-reflexive.
      // Object(NaN) is equivalent to NaN.
      if (+a !== +a) return +b !== +b; // An `egal` comparison is performed for other numeric values.

      return +a === 0 ? 1 / +a === 1 / b : +a === +b;

    case "[object Date]":
    case "[object Boolean]":
      // Coerce dates and booleans to numeric primitive values. Dates are compared by their
      // millisecond representations. Note that invalid dates with millisecond representations
      // of `NaN` are not equivalent.
      return +a === +b;

    case "[object Symbol]":
      return typeof Symbol !== "undefined" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b);

    case "[object Map]":
    case "[object Set]":
      // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.
      // Hide this extra level by increasing the depth.
      if (depth >= 0) {
        depth++;
      }

      break;
  } // Unwrap any wrapped objects.


  a = unwrap(a);
  b = unwrap(b);
  var areArrays = className === "[object Array]";

  if (!areArrays) {
    if (typeof a != "object" || typeof b != "object") return false; // Objects with different constructors are not equivalent, but `Object`s or `Array`s
    // from different frames are.

    var aCtor = a.constructor,
        bCtor = b.constructor;

    if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor && isFunction(bCtor) && bCtor instanceof bCtor) && "constructor" in a && "constructor" in b) {
      return false;
    }
  }

  if (depth === 0) {
    return false;
  } else if (depth < 0) {
    depth = -1;
  } // Assume equality for cyclic structures. The algorithm for detecting cyclic
  // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
  // Initializing stack of traversed objects.
  // It's done here since we only need them for objects and arrays comparison.


  aStack = aStack || [];
  bStack = bStack || [];
  var length = aStack.length;

  while (length--) {
    // Linear search. Performance is inversely proportional to the number of
    // unique nested structures.
    if (aStack[length] === a) return bStack[length] === b;
  } // Add the first object to the stack of traversed objects.


  aStack.push(a);
  bStack.push(b); // Recursively compare objects and arrays.

  if (areArrays) {
    // Compare array lengths to determine if a deep comparison is necessary.
    length = a.length;
    if (length !== b.length) return false; // Deep compare the contents, ignoring non-numeric properties.

    while (length--) {
      if (!eq(a[length], b[length], depth - 1, aStack, bStack)) return false;
    }
  } else {
    // Deep compare objects.
    var keys = Object.keys(a);
    var key;
    length = keys.length; // Ensure that both objects contain the same number of properties before comparing deep equality.

    if (Object.keys(b).length !== length) return false;

    while (length--) {
      // Deep compare each member
      key = keys[length];
      if (!(hasProp(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack))) return false;
    }
  } // Remove the first object from the stack of traversed objects.


  aStack.pop();
  bStack.pop();
  return true;
}

function unwrap(a) {
  if (isObservableArray(a)) return a.slice();
  if (isES6Map(a) || isObservableMap(a)) return Array.from(a.entries());
  if (isES6Set(a) || isObservableSet(a)) return Array.from(a.entries());
  return a;
}

function makeIterable(iterator) {
  iterator[Symbol.iterator] = getSelf;
  return iterator;
}

function getSelf() {
  return this;
}
/**
 * Infers the best fitting annotation from property descriptor or false if the field shoudn't be annotated
 * - getter(+setter) -> computed
 * - setter w/o getter -> false (ignore)
 * - flow -> false (ignore)
 * - generator -> flow
 * - action -> false (ignore)
 * - function -> action (optionally bound)
 * - other -> defaultAnnotation
 */


function inferAnnotationFromDescriptor(desc, defaultAnnotation, autoBind) {
  if (desc.get) return computed;
  if (desc.set) return false; // ignore lone setter
  // If already wrapped in action/flow, don't do that another time, but assume it is already set up properly.

  return isFunction(desc.value) ? isGenerator(desc.value) ? isFlow(desc.value) ? false : flow : isAction(desc.value) ? false : autoBind ? autoAction.bound : autoAction : defaultAnnotation;
}

function isAnnotation(thing) {
  return (// Can be function
    thing instanceof Object && typeof thing.annotationType_ === "string" && isFunction(thing.make_) && isFunction(thing.extend_)
  );
}
/**
 * (c) Michel Weststrate 2015 - 2020
 * MIT Licensed
 *
 * Welcome to the mobx sources! To get an global overview of how MobX internally works,
 * this is a good place to start:
 * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74
 *
 * Source folders:
 * ===============
 *
 * - api/     Most of the public static methods exposed by the module can be found here.
 * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.
 * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.
 * - utils/   Utility stuff.
 *
 */


["Symbol", "Map", "Set", "Symbol"].forEach(function (m) {
  var g = getGlobal();

  if (typeof g[m] === "undefined") {
    die("MobX requires global '" + m + "' to be available or polyfilled");
  }
});

if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") {
  // See: https://github.com/andykog/mobx-devtools/
  __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({
    spy: spy,
    extras: {
      getDebugName: getDebugName
    },
    $mobx: $mobx
  });
}


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
  "use strict";

  if (global.setImmediate) {
    return;
  }

  var nextHandle = 1; // Spec says greater than zero

  var tasksByHandle = {};
  var currentlyRunningATask = false;
  var doc = global.document;
  var registerImmediate;

  function setImmediate(callback) {
    // Callback can either be a function or a string
    if (typeof callback !== "function") {
      callback = new Function("" + callback);
    } // Copy function arguments


    var args = new Array(arguments.length - 1);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i + 1];
    } // Store and register the task


    var task = {
      callback: callback,
      args: args
    };
    tasksByHandle[nextHandle] = task;
    registerImmediate(nextHandle);
    return nextHandle++;
  }

  function clearImmediate(handle) {
    delete tasksByHandle[handle];
  }

  function run(task) {
    var callback = task.callback;
    var args = task.args;

    switch (args.length) {
      case 0:
        callback();
        break;

      case 1:
        callback(args[0]);
        break;

      case 2:
        callback(args[0], args[1]);
        break;

      case 3:
        callback(args[0], args[1], args[2]);
        break;

      default:
        callback.apply(undefined, args);
        break;
    }
  }

  function runIfPresent(handle) {
    // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
    // So if we're currently running a task, we'll need to delay this invocation.
    if (currentlyRunningATask) {
      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
      // "too much recursion" error.
      setTimeout(runIfPresent, 0, handle);
    } else {
      var task = tasksByHandle[handle];

      if (task) {
        currentlyRunningATask = true;

        try {
          run(task);
        } finally {
          clearImmediate(handle);
          currentlyRunningATask = false;
        }
      }
    }
  }

  function installNextTickImplementation() {
    registerImmediate = function (handle) {
      process.nextTick(function () {
        runIfPresent(handle);
      });
    };
  }

  function canUsePostMessage() {
    // The test against `importScripts` prevents this implementation from being installed inside a web worker,
    // where `global.postMessage` means something completely different and can't be used for this purpose.
    if (global.postMessage && !global.importScripts) {
      var postMessageIsAsynchronous = true;
      var oldOnMessage = global.onmessage;

      global.onmessage = function () {
        postMessageIsAsynchronous = false;
      };

      global.postMessage("", "*");
      global.onmessage = oldOnMessage;
      return postMessageIsAsynchronous;
    }
  }

  function installPostMessageImplementation() {
    // Installs an event handler on `global` for the `message` event: see
    // * https://developer.mozilla.org/en/DOM/window.postMessage
    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
    var messagePrefix = "setImmediate$" + Math.random() + "$";

    var onGlobalMessage = function (event) {
      if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
        runIfPresent(+event.data.slice(messagePrefix.length));
      }
    };

    if (global.addEventListener) {
      global.addEventListener("message", onGlobalMessage, false);
    } else {
      global.attachEvent("onmessage", onGlobalMessage);
    }

    registerImmediate = function (handle) {
      global.postMessage(messagePrefix + handle, "*");
    };
  }

  function installMessageChannelImplementation() {
    var channel = new MessageChannel();

    channel.port1.onmessage = function (event) {
      var handle = event.data;
      runIfPresent(handle);
    };

    registerImmediate = function (handle) {
      channel.port2.postMessage(handle);
    };
  }

  function installReadyStateChangeImplementation() {
    var html = doc.documentElement;

    registerImmediate = function (handle) {
      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
      var script = doc.createElement("script");

      script.onreadystatechange = function () {
        runIfPresent(handle);
        script.onreadystatechange = null;
        html.removeChild(script);
        script = null;
      };

      html.appendChild(script);
    };
  }

  function installSetTimeoutImplementation() {
    registerImmediate = function (handle) {
      setTimeout(runIfPresent, 0, handle);
    };
  } // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.


  var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
  attachTo = attachTo && attachTo.setTimeout ? attachTo : global; // Don't get fooled by e.g. browserify environments.

  if ({}.toString.call(global.process) === "[object process]") {
    // For Node.js before 0.9
    installNextTickImplementation();
  } else if (canUsePostMessage()) {
    // For non-IE10 modern browsers
    installPostMessageImplementation();
  } else if (global.MessageChannel) {
    // For web workers, where supported
    installMessageChannelImplementation();
  } else if (doc && "onreadystatechange" in doc.createElement("script")) {
    // For IE 6–8
    installReadyStateChangeImplementation();
  } else {
    // For older browsers
    installSetTimeoutImplementation();
  }

  attachTo.setImmediate = setImmediate;
  attachTo.clearImmediate = clearImmediate;
})(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = typeof global !== "undefined" && global || typeof self !== "undefined" && self || window;
var apply = Function.prototype.apply; // DOM APIs, for completeness

exports.setTimeout = function () {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};

exports.setInterval = function () {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};

exports.clearTimeout = exports.clearInterval = function (timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}

Timeout.prototype.unref = Timeout.prototype.ref = function () {};

Timeout.prototype.close = function () {
  this._clearFn.call(scope, this._id);
}; // Does not start the time, just sets up the members needed.


exports.enroll = function (item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function (item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function (item) {
  clearTimeout(item._idleTimeoutId);
  var msecs = item._idleTimeout;

  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout) item._onTimeout();
    }, msecs);
  }
}; // setimmediate attaches itself to the global object


__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js"); // On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.


exports.setImmediate = typeof self !== "undefined" && self.setImmediate || typeof global !== "undefined" && global.setImmediate || this && this.setImmediate;
exports.clearImmediate = typeof self !== "undefined" && self.clearImmediate || typeof global !== "undefined" && global.clearImmediate || this && this.clearImmediate;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if (typeof window === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _styles_index_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles/index.scss */ "./src/styles/index.scss");
/* harmony import */ var _styles_index_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_styles_index_scss__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _scripts_App__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/App */ "./src/scripts/App.js");
/* harmony import */ var _scripts_mst_store_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scripts/mst_store/types */ "./src/scripts/mst_store/types.js");



window.puzzleStore = _scripts_mst_store_types__WEBPACK_IMPORTED_MODULE_2__["default"];
document.addEventListener('DOMContentLoaded', function () {
  var puzzleDiv = document.querySelector('.gm-puzzle');
  var squareInfoDiv = document.querySelector('.gm-info-sqr');
  var groupInfoDiv = document.querySelector('.gm-info-grp');
  var app = new _scripts_App__WEBPACK_IMPORTED_MODULE_1__["default"](puzzleDiv, squareInfoDiv, groupInfoDiv);
});

/***/ }),

/***/ "./src/scripts/App.js":
/*!****************************!*\
  !*** ./src/scripts/App.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return App; });
/* harmony import */ var _puzzles_puzzles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./puzzles/puzzles */ "./src/scripts/puzzles/puzzles.js");
/* harmony import */ var _game_components_Puzzle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./game_components/Puzzle */ "./src/scripts/game_components/Puzzle.js");
/* harmony import */ var _listeners_listeners_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./listeners/listeners.js */ "./src/scripts/listeners/listeners.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }





var App = /*#__PURE__*/function () {
  function App(puzzleDiv, squareInfoDiv, groupInfoDiv) {
    _classCallCheck(this, App);

    this.divs = {
      puzzleDiv: puzzleDiv,
      squareInfoDiv: squareInfoDiv,
      groupInfoDiv: groupInfoDiv
    };
    this.opts = {
      block: true,
      autoElim: true,
      limit: null
    };
    this.init();
  }

  _createClass(App, [{
    key: "init",
    value: function init() {
      this.createPuzzle(this.randomPuzzle());
    }
  }, {
    key: "createPuzzle",
    value: function createPuzzle(puzzle) {
      this.puzzle = puzzle;
      this.puzzle.render();
      Object(_listeners_listeners_js__WEBPACK_IMPORTED_MODULE_2__["mountListeners"])(this);
    }
  }, {
    key: "newPuzzle",
    value: function newPuzzle() {
      this.clearPuzzle();
      this.init();
    }
  }, {
    key: "clearPuzzle",
    value: function clearPuzzle() {
      this.divs.puzzleDiv.innerHTML = '';
      this.divs.puzzleDiv.className = 'gm-puzzle'; // this.divs.squareInfoDiv.innerHTML = '';

      this.divs.squareInfoDiv.className = 'gm-info gm-info-sqr'; // this.divs.groupInfoDiv.innerHTML = '';

      this.divs.groupInfoDiv.className = 'gm-info gm-info-grp';
    }
  }, {
    key: "randomPuzzle",
    value: function randomPuzzle() {
      var _this = this;

      var _PUZZLES$Math$floor = _puzzles_puzzles__WEBPACK_IMPORTED_MODULE_0__["default"][Math.floor(Math.random() * _puzzles_puzzles__WEBPACK_IMPORTED_MODULE_0__["default"].length)],
          puzzle = _PUZZLES$Math$floor.puzzle,
          solution = _PUZZLES$Math$floor.solution;

      this.resetPuzzle = function () {
        _this.clearPuzzle();

        _this.createPuzzle(new _game_components_Puzzle__WEBPACK_IMPORTED_MODULE_1__["default"](puzzle, solution, _this.divs));
      };

      return new _game_components_Puzzle__WEBPACK_IMPORTED_MODULE_1__["default"](puzzle, solution, this.divs);
    }
  }]);

  return App;
}();



/***/ }),

/***/ "./src/scripts/constants.js":
/*!**********************************!*\
  !*** ./src/scripts/constants.js ***!
  \**********************************/
/*! exports provided: ADD, SUBTRACT, MULTIPLY, DIVIDE */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ADD", function() { return ADD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SUBTRACT", function() { return SUBTRACT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MULTIPLY", function() { return MULTIPLY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DIVIDE", function() { return DIVIDE; });
var ADD = '+';
var SUBTRACT = '−';
var MULTIPLY = '⨉';
var DIVIDE = '÷';

/***/ }),

/***/ "./src/scripts/dom_util.js":
/*!*********************************!*\
  !*** ./src/scripts/dom_util.js ***!
  \*********************************/
/*! exports provided: getSquareDiv, getSquareInp, handleConflicts, illumineSquares */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSquareDiv", function() { return getSquareDiv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSquareInp", function() { return getSquareInp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "handleConflicts", function() { return handleConflicts; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "illumineSquares", function() { return illumineSquares; });
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var getSquareDiv = function getSquareDiv(square) {
  var _square = _slicedToArray(square, 2),
      row = _square[0],
      col = _square[1];

  return document.querySelector("div[data-pos=\"".concat(row, ",").concat(col, "\""));
};
var getSquareInp = function getSquareInp(square) {
  return getSquareDiv(square).querySelector('input');
};
var handleConflicts = function handleConflicts(square, conflictingSquares) {
  illumineSquares(conflictingSquares);
  var squareInp = getSquareInp(square);
  squareInp.classList.add('mistake');
  window.setTimeout(function () {
    squareInp.classList.remove('mistake');
    squareInp.value = '';
  }, 600);
};
var illumineSquares = function illumineSquares(squares) {
  var squareDivs = squares.map(function (sq) {
    return getSquareDiv(sq);
  });
  squareDivs.forEach(function (sq) {
    return sq.classList.add('conflicting');
  });
  window.setTimeout(function () {
    squareDivs.forEach(function (sq) {
      return sq.classList.remove('conflicting');
    });
  }, 600);
};

/***/ }),

/***/ "./src/scripts/game_components/Cage.js":
/*!*********************************************!*\
  !*** ./src/scripts/game_components/Cage.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Cage; });
/* harmony import */ var _Square__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Square */ "./src/scripts/game_components/Square.js");
/* harmony import */ var _GroupInfo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GroupInfo */ "./src/scripts/game_components/GroupInfo.js");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }




var Cage = /*#__PURE__*/function () {
  function Cage(cageData, puzzle) {
    _classCallCheck(this, Cage);

    Object.assign(this, cageData);
    this.squareCoords = cageData.squares.sort(function (a, b) {
      var compareVal = a[0] - b[0];
      return compareVal || a[1] - b[1];
    });
    this.anchor = this.squareCoords[0];
    this.squares = this.squareCoords.map(function (square) {
      return new _Square__WEBPACK_IMPORTED_MODULE_0__["default"](square, puzzle);
    });
    this.puzzle = puzzle;
    this.groupInfo = new _GroupInfo__WEBPACK_IMPORTED_MODULE_1__["default"](puzzle);
    this.anchorText = "".concat(this.result, " ").concat(this.operation);
  }

  _createClass(Cage, [{
    key: "getBounds",
    value: function getBounds() {
      var traversed = [],
          topBounds = [],
          leftBounds = [];
      this.squares.forEach(function (square) {
        var pos = square.pos;

        var _pos = _slicedToArray(pos, 2),
            row = _pos[0],
            col = _pos[1];

        if (!traversed.some(function (a) {
          return a[0] === row - 1 && a[1] === col;
        })) {
          topBounds.push(pos);
        }

        if (!traversed.some(function (a) {
          return a[0] === row && a[1] === col - 1;
        })) {
          leftBounds.push(pos);
        }

        traversed.push(pos);
      });
      return {
        topBounds: topBounds,
        leftBounds: leftBounds
      };
    }
  }]);

  return Cage;
}();



/***/ }),

/***/ "./src/scripts/game_components/GroupInfo.js":
/*!**************************************************!*\
  !*** ./src/scripts/game_components/GroupInfo.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GroupInfo; });
/* harmony import */ var _Info__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Info */ "./src/scripts/game_components/Info.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var GroupInfo = /*#__PURE__*/function (_Info) {
  _inherits(GroupInfo, _Info);

  var _super = _createSuper(GroupInfo);

  function GroupInfo(puzzle) {
    _classCallCheck(this, GroupInfo);

    return _super.call(this, puzzle, puzzle.renderers.groupInfo);
  }

  return GroupInfo;
}(_Info__WEBPACK_IMPORTED_MODULE_0__["default"]);



/***/ }),

/***/ "./src/scripts/game_components/Info.js":
/*!*********************************************!*\
  !*** ./src/scripts/game_components/Info.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Info; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Info = /*#__PURE__*/function () {
  function Info(puzzle, renderer) {
    _classCallCheck(this, Info);

    this.puzzle = puzzle;
    this.renderer = renderer;
    this.square = null;
  }

  _createClass(Info, [{
    key: "setSquare",
    value: function setSquare(square) {
      var appearing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      this.square = square;
      this.render(square, {
        update: true,
        appearing: appearing
      });
    }
  }, {
    key: "clearSquare",
    value: function clearSquare() {
      this.square = null;
      this.render(null, {
        clear: true
      });
    }
  }, {
    key: "render",
    value: function render() {
      var square = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (opts.appearing) {
        this.renderer.show(square);
      } else if (opts.clear) {
        this.renderer.clear();
      } else if (opts.update) {
        this.renderer.update(square);
      } else {
        this.renderer.render();
      }
    }
  }]);

  return Info;
}();



/***/ }),

/***/ "./src/scripts/game_components/Puzzle.js":
/*!***********************************************!*\
  !*** ./src/scripts/game_components/Puzzle.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Puzzle; });
/* harmony import */ var _Cage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Cage */ "./src/scripts/game_components/Cage.js");
/* harmony import */ var _render_components_PuzzleRender__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../render_components/PuzzleRender */ "./src/scripts/render_components/PuzzleRender.js");
/* harmony import */ var _render_components_SquareInfoRender__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../render_components/SquareInfoRender */ "./src/scripts/render_components/SquareInfoRender.js");
/* harmony import */ var _render_components_GroupInfoRender__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../render_components/GroupInfoRender */ "./src/scripts/render_components/GroupInfoRender.js");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }






var Puzzle = /*#__PURE__*/function () {
  function Puzzle(puzzle, solution, divs) {
    _classCallCheck(this, Puzzle);

    var cages = puzzle.cages,
        rest = _objectWithoutProperties(puzzle, ["cages"]);

    Object.assign(this, rest);
    this.solution = solution.grid;
    this.divs = divs;
    this.renderers = {
      puzzle: new _render_components_PuzzleRender__WEBPACK_IMPORTED_MODULE_1__["default"](this),
      squareInfo: new _render_components_SquareInfoRender__WEBPACK_IMPORTED_MODULE_2__["default"](this),
      groupInfo: new _render_components_GroupInfoRender__WEBPACK_IMPORTED_MODULE_3__["default"](this)
    };
    this.grid = Array.from(new Array(puzzle.size), function () {
      return new Array(puzzle.size, null);
    });
    this.cages = this._generateCages(cages);
    this.groups = this.cages;
    this.bounds = this._generateBounds();
    this.focusedSquare = null;
  } // the puzzle IS solved if it is NOT the case that there's an error:
  // ie, that there's some row, with some square, where that square's value 
  // doesn't match the solution


  _createClass(Puzzle, [{
    key: "isSolved",
    value: function isSolved() {
      var _this = this;

      return !this.grid.some(function (row, i) {
        row.some(function (square, j) {
          return parseInt(square.value) !== _this.solution[i][j];
        });
      });
    }
  }, {
    key: "getSquare",
    value: function getSquare(pos) {
      var _pos = _slicedToArray(pos, 2),
          row = _pos[0],
          col = _pos[1];

      return this.grid[row][col];
    }
  }, {
    key: "getRow",
    value: function getRow(idx) {
      return this.grid[idx];
    }
  }, {
    key: "getCol",
    value: function getCol(idx) {
      return this.grid.map(function (row) {
        return row[idx];
      });
    }
  }, {
    key: "getSquareGroups",
    value: function getSquareGroups(pos) {
      return this.groups.filter(function (grp) {
        grp.squareCoords.includes(pos);
      });
    }
  }, {
    key: "checkConflicts",
    value: function checkConflicts(pos, val) {
      return this._rowAndColMatches(pos, function (sq) {
        return sq.val === val;
      });
    }
  }, {
    key: "autoEliminate",
    value: function autoEliminate(pos, val) {
      return this._rowAndColMatches(pos, function (sq) {
        var options = sq.squareInfo.options;
        var idx = options.indexOf(parseInt(val));
        return idx >= 0 ? options.splice(idx, 1) : null;
      });
    }
  }, {
    key: "iterateSquares",
    value: function iterateSquares(cb) {
      this.grid.forEach(function (row) {
        row.forEach(function (square) {
          return cb(square);
        });
      });
    }
  }, {
    key: "render",
    value: function render() {
      Object.values(this.renderers).forEach(function (r) {
        return r.render();
      });
    }
  }, {
    key: "_rowAndColMatches",
    value: function _rowAndColMatches(pos, cb) {
      var _pos2 = _slicedToArray(pos, 2),
          row = _pos2[0],
          col = _pos2[1];

      var matchingSquares = [];
      [this.getRow(row), this.getCol(col)].forEach(function (ln) {
        return ln.forEach(function (sq) {
          if (cb(sq)) {
            matchingSquares.push(sq.pos);
          }
        });
      });
      return matchingSquares;
    }
  }, {
    key: "_generateBounds",
    value: function _generateBounds() {
      var topBounds = [],
          leftBounds = [];
      this.cages.forEach(function (cage) {
        var _cage$getBounds = cage.getBounds(),
            top = _cage$getBounds.topBounds,
            left = _cage$getBounds.leftBounds;

        topBounds = topBounds.concat(top);
        leftBounds = leftBounds.concat(left);
      });
      return {
        topBounds: topBounds,
        leftBounds: leftBounds
      };
    }
  }, {
    key: "_generateCages",
    value: function _generateCages(cagesData) {
      var _this2 = this;

      return cagesData.map(function (cageData) {
        var cage = new _Cage__WEBPACK_IMPORTED_MODULE_0__["default"](cageData, _this2);

        _this2._addSquares(cage.squares);

        return cage;
      });
    }
  }, {
    key: "_addSquares",
    value: function _addSquares(squares) {
      var _this3 = this;

      squares.forEach(function (square) {
        var _square$pos = _slicedToArray(square.pos, 2),
            row = _square$pos[0],
            col = _square$pos[1];

        _this3.grid[row][col] = square;
      });
    }
  }]);

  return Puzzle;
}();



/***/ }),

/***/ "./src/scripts/game_components/Square.js":
/*!***********************************************!*\
  !*** ./src/scripts/game_components/Square.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Square; });
/* harmony import */ var _SquareInfo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SquareInfo */ "./src/scripts/game_components/SquareInfo.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var Square = function Square(pos, puzzle) {
  _classCallCheck(this, Square);

  this.val = null;
  this.pos = pos;
  this.puzzle = puzzle;
  this.squareInfo = new _SquareInfo__WEBPACK_IMPORTED_MODULE_0__["default"](puzzle);
};



/***/ }),

/***/ "./src/scripts/game_components/SquareInfo.js":
/*!***************************************************!*\
  !*** ./src/scripts/game_components/SquareInfo.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SquareInfo; });
/* harmony import */ var _Info__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Info */ "./src/scripts/game_components/Info.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var SquareInfo = /*#__PURE__*/function (_Info) {
  _inherits(SquareInfo, _Info);

  var _super = _createSuper(SquareInfo);

  function SquareInfo(puzzle) {
    var _this;

    _classCallCheck(this, SquareInfo);

    _this = _super.call(this, puzzle, puzzle.renderers.squareInfo);
    _this.options = [];
    _this.locked = false;
    return _this;
  }

  _createClass(SquareInfo, [{
    key: "toggleOption",
    value: function toggleOption(n) {
      var opts = this.options;
      opts.includes(n) ? opts.splice(opts.indexOf(n), 1) : opts.push(n);
    }
  }, {
    key: "toggleLocked",
    value: function toggleLocked() {
      this.locked = !this.locked;
    }
  }]);

  return SquareInfo;
}(_Info__WEBPACK_IMPORTED_MODULE_0__["default"]);



/***/ }),

/***/ "./src/scripts/listeners/listeners.js":
/*!********************************************!*\
  !*** ./src/scripts/listeners/listeners.js ***!
  \********************************************/
/*! exports provided: mountListeners */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mountListeners", function() { return mountListeners; });
/* harmony import */ var _dom_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom_util */ "./src/scripts/dom_util.js");
/* harmony import */ var _puzzle_listeners__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./puzzle_listeners */ "./src/scripts/listeners/puzzle_listeners.js");
/* harmony import */ var _square_info_listeners__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./square_info_listeners */ "./src/scripts/listeners/square_info_listeners.js");



var mountListeners = function mountListeners(ctx) {
  ctx.status = {
    disableUnfocus: {
      puzzle: false,
      options: false,
      about: false,
      instructions: false
    }
  };
  _puzzle_listeners__WEBPACK_IMPORTED_MODULE_1__["mountPuzzleListeners"].call(ctx);
  _square_info_listeners__WEBPACK_IMPORTED_MODULE_2__["mountSquareInfoListeners"].call(ctx);
  mountHeader.call(ctx);
};

function mountHeader() {
  var _this = this;

  document.querySelector('.hd-new').onclick = function (e) {
    e.target.blur();

    _this.newPuzzle.call(_this);
  };

  document.querySelector('.hd-reset').onclick = function (e) {
    e.target.blur();

    _this.resetPuzzle.call(_this);
  };

  mountOptions.call(this);
}

function mountOptions() {
  mountDropdown.call(this, 'options', '.hd-options', 'ul');
  mountDropdown.call(this, 'about', '.hd-about', 'div');
  mountDropdown.call(this, 'instructions', '.hd-instructions', 'ol');
  document.getElementById('tg-block').onclick = optionToggle.call(this, 'block');
  document.getElementById('tg-elim').onclick = optionToggle.call(this, 'autoElim');
  document.querySelector('.hd-options input').onkeydown = keyHandler.bind(this);
}

function optionToggle(option) {
  var _this2 = this;

  return function (e) {
    e.currentTarget.classList.toggle('on');
    _this2.opts[option] = !_this2.opts[option];
  };
}

function mountDropdown(name, selector, subselector) {
  var _this3 = this;

  document.querySelector(selector).onclick = function (e) {
    var btn = e.currentTarget;
    var classList = btn.querySelector(subselector).classList;
    classList.toggle('show');

    if (!classList.contains('show')) {
      btn.blur();
    }
  };

  document.querySelector(selector).onblur = function (e) {
    var classList = e.currentTarget.querySelector(subselector).classList;
    _this3.status.disableUnfocus[name] = false;
    window.setTimeout(function () {
      if (!_this3.status.disableUnfocus[name]) {
        classList.remove('show');
      }

      ;
    }, 50);
  };

  document.querySelector("".concat(selector, " ").concat(subselector)).onclick = function (e) {
    e.stopPropagation();
    _this3.status.disableUnfocus[name] = true;
  };
}

function keyHandler(e) {
  var _this4 = this;

  e.preventDefault();
  e.stopPropagation();

  if (/^\d/.test(e.key)) {
    var n = parseInt(e.key);
    var inp = e.target;
    var errorMsg = document.querySelector('.error-msg');
    window.clearTimeout(this.fadeOut);

    if (n < 2 || n > 4) {
      errorMsg.innerText = 'input a number between 2 and 4';
      errorMsg.classList.add('show');
      inp.classList.add('error');
      inp.value = n;
      this.fadeOut = window.setTimeout(function () {
        errorMsg.classList.add('leaving');
        inp.classList.add('leaving');
      }, 2300);
      window.setTimeout(function () {
        errorMsg.innerText = '';
        errorMsg.classList.remove('show');
        inp.classList.remove('error');
        errorMsg.classList.remove('leaving');
        inp.classList.remove('leaving');
        inp.value = _this4.opts.limit || '';
      }, 2600);
    } else {
      this.opts.limit = n;
      inp.value = n;
      errorMsg.innerText = '';
      errorMsg.classList.remove('show');
      inp.classList.remove('error');
    }
  } else if (e.key === 'Delete' || e.key === 'Backspace') {
    this.opts.limit = null;
    e.target.value = '';
  }
}

/***/ }),

/***/ "./src/scripts/listeners/puzzle_listeners.js":
/*!***************************************************!*\
  !*** ./src/scripts/listeners/puzzle_listeners.js ***!
  \***************************************************/
/*! exports provided: mountPuzzleListeners */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mountPuzzleListeners", function() { return mountPuzzleListeners; });
/* harmony import */ var _dom_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom_util */ "./src/scripts/dom_util.js");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }


function mountPuzzleListeners() {
  mountKeyboardListeners.call(this);
  mountClickListeners.call(this);
  this.divs.puzzleDiv.onblur = puzzleUnfocus.bind(this);
}

function mountClickListeners() {
  this.divs.puzzleDiv.onclick = handleSquareClick.bind(this);
}

function mountKeyboardListeners() {
  var _this = this;

  var arrowMatch = /^Arrow/;

  document.onkeydown = function (e) {
    var key = e.key;

    if (arrowMatch.test(key)) {
      arrowKeyHandler.call(_this, e);
    } else if (/^\d/.test(key)) {
      numKeyHandler.call(_this, e);
    } else if (key === 'Delete' || key === 'Backspace') {
      deleteKeyHandler.call(_this, e);
    } else {
      console.log(key);
    }
  };
}

function arrowKeyHandler(e) {
  var oldSquare = this.puzzle.focusedSquare;

  if (!oldSquare) {
    return;
  }

  e.preventDefault();
  var size = this.puzzle.size;

  var _oldSquare = _slicedToArray(oldSquare, 2),
      row = _oldSquare[0],
      col = _oldSquare[1];

  var newSquare;

  switch (e.key) {
    case 'ArrowDown':
      newSquare = row + 1 < size ? [row + 1, col] : null;
      break;

    case 'ArrowUp':
      newSquare = row > 0 ? [row - 1, col] : null;
      break;

    case 'ArrowRight':
      newSquare = col + 1 < size ? [row, col + 1] : null;
      break;

    case 'ArrowLeft':
      newSquare = col > 0 ? [row, col - 1] : null;
      break;
  }

  if (newSquare) {
    var newSquareDiv = _dom_util__WEBPACK_IMPORTED_MODULE_0__["getSquareDiv"](newSquare);
    switchFocus.call(this, newSquare, newSquareDiv);
  }
}

function numKeyHandler(e) {
  var square = this.puzzle.focusedSquare;

  if (square) {
    var val = parseInt(e.key);
    var squareInp = _dom_util__WEBPACK_IMPORTED_MODULE_0__["getSquareInp"](square);
    squareInp.value = val;

    if (this.opts.block) {
      var conflictingSquares = this.puzzle.checkConflicts(square, val);

      if (conflictingSquares.length) {
        _dom_util__WEBPACK_IMPORTED_MODULE_0__["handleConflicts"](square, conflictingSquares);
        return null;
      }
    }

    if (this.opts.autoElim) {
      var affectedSquares = this.puzzle.autoEliminate(square, val);
      _dom_util__WEBPACK_IMPORTED_MODULE_0__["illumineSquares"](affectedSquares);
    }

    this.puzzle.getSquare(square).val = val;
  }
}

function deleteKeyHandler(e) {
  var square = this.puzzle.focusedSquare;

  if (square) {
    this.puzzle.getSquare(square).val = null;
    _dom_util__WEBPACK_IMPORTED_MODULE_0__["getSquareInp"](square).value = '';
  }
}

function tabKeyHandler(e) {
  var square = this.puzzle.focusedSquare;

  if (square) {
    this.puzzle.getSquare(square).val = null;
    _dom_util__WEBPACK_IMPORTED_MODULE_0__["getSquareInp"](square).value = '';
  }
}

function ctrlNumHandler(e) {
  var square = this.puzzle.focusedSquare;

  if (square) {
    this.puzzle.getSquare(square).val = null;
    _dom_util__WEBPACK_IMPORTED_MODULE_0__["getSquareInp"](square).value = '';
  }
}

function handleSquareClick(e) {
  this.status.disableUnfocus.puzzle = true;
  var squareDiv = e.target.parentElement;
  var square = squareDiv.dataset.pos.split(',').map(function (n) {
    return parseInt(n);
  });
  switchFocus.call(this, square, squareDiv);
}

function switchFocus(newSquare, newSquareDiv) {
  var wasPrev = this.puzzle.focusedSquare;

  if (wasPrev) {
    unfocusOldSquare.call(this);
  }

  if (this.divs.puzzleDiv !== document.activeElement) {
    this.divs.puzzleDiv.focus({
      preventScroll: true
    });
  }

  ;
  newSquareDiv.classList.add('focused');
  this.puzzle.renderers.squareInfo.update(newSquare, !wasPrev);
  this.puzzle.renderers.groupInfo.show();
  this.puzzle.focusedSquare = newSquare;
}

function unfocusOldSquare() {
  var oldSquareDiv = _dom_util__WEBPACK_IMPORTED_MODULE_0__["getSquareDiv"](this.puzzle.focusedSquare);
  oldSquareDiv.classList.remove('focused');
  this.puzzle.focusedSquare = null;
}

function puzzleUnfocus() {
  var _this2 = this;

  if (this.puzzle.focusedSquare) {
    this.status.disableUnfocus.puzzle = false;
    window.setTimeout(function () {
      if (_this2.status.disableUnfocus.puzzle) {
        _this2.divs.puzzleDiv.focus({
          preventScroll: true
        });
      } else {
        unfocusOldSquare.call(_this2);

        _this2.divs.squareInfoDiv.classList.add('leaving');

        _this2.divs.groupInfoDiv.classList.add('leaving');

        window.setTimeout(function () {
          _this2.puzzle.renderers.squareInfo.clear();

          _this2.puzzle.renderers.groupInfo.clear();

          _this2.divs.squareInfoDiv.classList.remove('leaving');

          _this2.divs.groupInfoDiv.classList.remove('leaving');
        }, 200);
      }

      _this2.status.disableUnfocus.puzzle = false;
    }, 30);
  }
}

/***/ }),

/***/ "./src/scripts/listeners/square_info_listeners.js":
/*!********************************************************!*\
  !*** ./src/scripts/listeners/square_info_listeners.js ***!
  \********************************************************/
/*! exports provided: mountSquareInfoListeners */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mountSquareInfoListeners", function() { return mountSquareInfoListeners; });
/* harmony import */ var _dom_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom_util */ "./src/scripts/dom_util.js");

function mountSquareInfoListeners() {
  this.numsDiv = this.divs.squareInfoDiv.querySelector('.gm-info-nums');
  mountKeyboardListeners.call(this);
  mountClickListeners.call(this);
}

function mountClickListeners() {
  var _this = this;

  this.divs.squareInfoDiv.onclick = function () {
    _this.status.disableUnfocus.puzzle = true;
  };

  this.numsDiv.onclick = handleNumsClick.bind(this);
}

function mountKeyboardListeners() {}

function arrowKeyHandler(e) {}

function numKeyHandler(e) {}

function deleteKeyHandler(e) {}

function handleNumsClick(e) {
  var focusedSquarePos = this.puzzle.focusedSquare;

  if (!focusedSquarePos) {
    return null;
  }

  ;
  var focusedSquare = this.puzzle.getSquare(focusedSquarePos);
  var squareInfo = focusedSquare.squareInfo;
  var classList = e.target.classList;
  var numsCheck = e.target.closest('.info-nums-check');

  if (classList.contains('info-num') && !squareInfo.locked) {
    classList.toggle('selected');
    var prevOpts = squareInfo.options;
    squareInfo.toggleOption(parseInt(e.target.innerText));
    this.puzzle.renderers.puzzle.updateSquareOptions(focusedSquare, this.opts.limit);
  } else if (numsCheck) {
    numsCheck.classList.toggle('selected');
    squareInfo.toggleLocked();
    this.numsDiv.querySelectorAll('.info-num').forEach(function (num) {
      var classes = num.classList;
      classes.contains('selected') ? classes.toggle('ruled-in') : classes.toggle('ruled-out');
      num.disabled = true;
    });
  }
}

/***/ }),

/***/ "./src/scripts/mst_store/types.js":
/*!****************************************!*\
  !*** ./src/scripts/mst_store/types.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var mobx_devtools_mst__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx-devtools-mst */ "./node_modules/mobx-devtools-mst/lib/index.js");
/* harmony import */ var mobx_devtools_mst__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mobx_devtools_mst__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mobx-state-tree */ "./node_modules/mobx-state-tree/dist/mobx-state-tree.module.js");
/* harmony import */ var _puzzles_originals_puzzle_01__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../puzzles/originals/puzzle_01 */ "./src/scripts/puzzles/originals/puzzle_01.js");
/* harmony import */ var _puzzles_solutions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../puzzles/solutions */ "./src/scripts/puzzles/solutions.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util */ "./src/scripts/mst_store/util.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






var Id = mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].optional(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].identifier, _util__WEBPACK_IMPORTED_MODULE_4__["nextId"]);
var Position = mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].refinement('Position', mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].array(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].integer), function (array) {
  return array.length === 2;
});
var Filter = mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].model('Filter', {
  includesAll: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].array(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].integer),
  includesOne: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].array(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].array(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].integer)),
  includesNone: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].array(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].integer)
}).views(function (self) {
  return {
    filter: function filter(combo) {
      return includesAll.every(function (num) {
        return combo.includes(num);
      }) && includesOne.every(function (array) {
        return array.some(function (num) {
          return combo.includes(num);
        });
      }) && includesNone.every(function (num) {
        return !combo.includes(num);
      });
    }
  };
});
var Square = mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].model('Square', {
  id: Id,
  position: Position,
  cage: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].reference(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].late(function () {
    return CageGroup;
  })),
  value: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].maybeNull(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].integer),
  solution: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].integer,
  eliminated: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].array(integers),
  status: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].maybeNull(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].enumeration('Status', ['mistake', 'conflict']))
}).volatile(function (self) {
  var dataPos = self.position.join(',');
  return {
    ele: document.querySelector(".square[data-pos=\"".concat(dataPos, "\"")),
    optionsEle: ele.querySelector('.square_options')
  };
}).extend(function (self) {
  var options = Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["getEnv"])(self.options);
  return {
    views: {
      get row() {
        return self.position[0];
      },

      get col() {
        return self.position[1];
      },

      get isCorrect() {
        return self.value === self.solution;
      },

      get isTopSquare() {
        return self.cage.topSquares.includes(self.id);
      },

      get isLeftSquare() {
        return self.cage.leftSquares.includes(self.id);
      },

      get className() {
        return Object(_util__WEBPACK_IMPORTED_MODULE_4__["classes"])('square', [self.isTopSquare, 'square--top-bound'], [self.isLeftSquare, 'square--left-bound'], [self.status === 'mistake', 'square--mistake'], [self.status === 'conflict', 'square--conflict']);
      },

      get inlineStyle() {
        return {
          gridRow: "".concat(self.row + 1, " / span 1"),
          gridColumn: "".concat(self.col + 1, " / span 1")
        };
      },

      get optionsInnerHtml() {
        return options.maxDisplayedPossibilities >= self.possibilities.length && self.value === null ? self.possibilities.map(function (p) {
          return "<span>".concat(p, "</span>");
        }).join('') : '';
      },

      isPossibility: function isPossibility(val) {
        return self.possibilities.includes(val);
      },
      isBelow: function isBelow(otherSquare) {
        return otherSquare.row === self.row - 1 && otherSquare.col === self.col;
      },
      isRightOf: function isRightOf(otherSquare) {
        return otherSquare.row === self.row && otherSquare.col === self.col - 1;
      },
      isAbove: function isAbove(otherSquare) {
        return otherSquare.isBelow(self);
      },
      isLeftOf: function isLeftOf(otherSquare) {
        return otherSquare.isRightOf(self);
      },
      isLogicalSupersetOf: function isLogicalSupersetOf(otherSquare) {
        if (self.value) {
          return self.value === otherSquare.value;
        } else if (otherSquare.value) {
          return self.isPossibility(otherSquare.value);
        } else {
          return otherSquare.possibilities.every(self.isPossibility);
        }
      },
      isLogicalSubsetOf: function isLogicalSubsetOf(otherSquare) {
        return otherSquare.isLogicalSupersetOf(self);
      }
    },
    actions: {}
  };
});
var Group = mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].model('Group', {
  id: Id,
  squares: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].array(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].reference(Square)),
  rules: Filter,
  eliminatedCombinations: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].array(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].array(integer)),
  eliminatedPermutations: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].array(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].array(integer))
}).extend(function (self) {
  return {
    views: {
      get numSquares() {
        return self.squares.length;
      },

      get possibleCombinations() {
        return Object(_util__WEBPACK_IMPORTED_MODULE_4__["combinations"])(self.numSquares).filter(self.filter);
      },

      filter: function filter(combo) {
        return self.rules.filter(combo) && !eliminatedCombinations.includes(combo);
      }
    },
    actions: {
      addSquare: function addSquare(square) {
        squares.push(square.id);
      }
    }
  };
});
var CageGroup = Group.named('CageGroup').props({
  operation: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].enumeration('Operation', ['+', '-', '*', '÷']),
  result: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].integer
}).views(function (self) {
  return {
    get bounds() {
      var traversed = [],
          topSquares = [],
          leftSquares = [];
      self.squares.forEach(function (square) {
        if (!traversed.some(square.isBelow)) topSquares.push(square.id);
        if (!traversed.some(square.isRightOf)) leftSquares.push(square.id);
        traversed.push(square);
      });
      return {
        topSquares: topSquares,
        leftSquares: leftSquares
      };
    }

  };
});
var UserGroup = Group.named('UserGroup').views(function (self) {
  return {
    get isUserGroup() {
      return true;
    }

  };
});
var Puzzle = mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].model('Puzzle', {
  id: idType,
  uuid: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].optional(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].integer, _util__WEBPACK_IMPORTED_MODULE_4__["nextId"]),
  squares: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].map(Square),
  cageGroups: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].map(CageGroup),
  userGroups: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].map(UserGroup)
}).views(function (self) {
  return {
    get allGroups() {
      return _objectSpread(_objectSpread({}, self.cageGroups), self.userGroups);
    }

  };
}).actions(function (self) {
  return {
    addSquare: function addSquare(square) {
      squares[square.id] = square;
    },
    addCageGroup: function addCageGroup(cage) {
      cageGroups[cage.id] = cage;
    },
    addUserGroup: function addUserGroup(group) {
      userGroups[group.id] = group;
    },
    resetUuid: function resetUuid() {
      self.uuid = Object(_util__WEBPACK_IMPORTED_MODULE_4__["nextId"])();
    }
  };
});
var Options = mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].model('Options', {
  autoEliminate: true,
  autoBlock: true,
  maxDisplayedPossibilities: 4
});
var UI = mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].model('UI', {
  focusedSquare: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].maybeNull(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].reference(Square)),
  focusedGroup: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].maybeNull(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].union(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].reference(UserGroup), mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].reference(CageGroup))),
  focusedCombination: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].maybeNull(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].array(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].integer))
});
var env = {
  snapshots: {},
  considerations: {},
  implications: {},
  active: {
    main: null,
    consideration: null,
    implication: null
  },
  options: Options.new(),
  ui: UI.new()
};
var initialPuzzleStore = Puzzle.create({}, env);
env.active.main = initialPuzzleStore;
_puzzles_originals_puzzle_01__WEBPACK_IMPORTED_MODULE_2__["default"].cages.forEach(function (cage) {
  var operation = cage.operation,
      result = cage.result,
      squares = cage.squares;
  var cageStore = CageGroup.create({
    operation: operation,
    result: result,
    rules: Filter.create()
  });
  initialPuzzleStore.addCageGroup(cageStore);
  squares.forEach(function (position) {
    var solution = _puzzles_solutions__WEBPACK_IMPORTED_MODULE_3__["solution01"][position[0]][position[1]];
    var squareStore = Square.create({
      position: position,
      solution: solution,
      cage: cageStore.id
    });
    cageStore.addSquare(squareStore);
    initialPuzzleStore.addSquare(squareStore);
  }, {});
});
mobx_devtools_mst__WEBPACK_IMPORTED_MODULE_0___default()(initialPuzzleStore);
/* harmony default export */ __webpack_exports__["default"] = (initialPuzzleStore);
/*
What I need to do:
-- keep track of implications
  -- what is an implication?
    -- a particular set of moves
    -- and their consequences
  -- the ideal system:
    -- track changes of 'mind':
    - changing the value of a square
    - removing a filter
  -- as soon as a change of mind occurs, every existing consideration gets that change of mind added to their 'premise'
  -- a premise is essentially a set of actions, diffs, or patches
    --- try to figure out if there is some way to essentially merge patches so that 'undos' are eliminated
    --- to test, whether patches emit
-- use implications to narrow down current possible combinations
-- determine which implications are relevant at a given time

*/

/***/ }),

/***/ "./src/scripts/mst_store/util.js":
/*!***************************************!*\
  !*** ./src/scripts/mst_store/util.js ***!
  \***************************************/
/*! exports provided: combinations, nextId, classes, copyPuzzle, ArrayBST */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "combinations", function() { return combinations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nextId", function() { return nextId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "classes", function() { return classes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copyPuzzle", function() { return copyPuzzle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrayBST", function() { return ArrayBST; });
/* harmony import */ var mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx-state-tree */ "./node_modules/mobx-state-tree/dist/mobx-state-tree.module.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }


var combinations = function () {
  var memo = {};

  var recursiveCombinations = function recursiveCombinations(min, max, remaining) {
    return remaining > 0 ? remaining < max - min + 1 ? recursiveCombinations(min + 1, max, remaining - 1).map(function (combo) {
      return console.log([min].concat(_toConsumableArray(combo))) || [min].concat(_toConsumableArray(combo));
    }).concat(recursiveCombinations(min + 1, max, remaining)) : [Array.from(Array(remaining), function (_, idx) {
      return min + idx;
    })] : [[]];
  };

  return function (num) {
    var upTo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 9;
    var key = "".concat(num, ",").concat(upTo);
    if (!memo[key]) memo[key] = recursiveCombinations(1, upTo, num);
    return memo[key];
  };
}();
var nextId = function () {
  var id = 0;
  return function () {
    return id++;
  };
}();
var classes = function classes() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return args.map(function (arg) {
    return arg instanceof Array ? arg[0] ? arg[1] : null : arg;
  }).filter(function (arg) {
    return arg;
  }).join(' ');
};
var copyPuzzle = function copyPuzzle(puzzle) {
  var copy = puzzle.clone();
  copy.resetUuid();
  return copy;
}; // TODO: implement an AVL BST https://en.wikipedia.org/wiki/AVL_tree

var ArrayBST = /*#__PURE__*/function () {
  _createClass(ArrayBST, null, [{
    key: "compare",
    value: function compare(arr1, arr2) {
      return arr1.length === 0 ? 0 : Math.sign(arr1[0] - arr2[0]) === 0 ? this.compare(arr1.slice(1), arr2.slice(1)) : 0;
    }
  }]);

  function ArrayBST(arrays) {
    _classCallCheck(this, ArrayBST);
  }

  _createClass(ArrayBST, [{
    key: "insert",
    value: function insert() {}
  }, {
    key: "remove",
    value: function remove() {}
  }, {
    key: "includes",
    value: function includes() {}
  }]);

  return ArrayBST;
}();

/***/ }),

/***/ "./src/scripts/puzzles/originals/puzzle_01.js":
/*!****************************************************!*\
  !*** ./src/scripts/puzzles/originals/puzzle_01.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../constants */ "./src/scripts/constants.js");

/* harmony default export */ __webpack_exports__["default"] = ({
  id: 1,
  size: 9,
  difficulty: 'hard',
  operations: [_constants__WEBPACK_IMPORTED_MODULE_0__["ADD"], _constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"], _constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"], _constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"]],
  cages: [{
    squares: [[0, 0], [1, 0]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 2
  }, {
    squares: [[0, 1], [1, 1]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 1
  }, {
    squares: [[0, 2], [1, 2]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 3
  }, {
    squares: [[0, 3], [1, 3]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 56
  }, {
    squares: [[0, 4], [0, 5]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 4
  }, {
    squares: [[0, 6], [1, 6]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 11
  }, {
    squares: [[0, 7], [0, 8]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 2
  }, {
    squares: [[1, 4], [2, 4]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 2
  }, {
    squares: [[1, 5], [2, 5]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 72
  }, {
    squares: [[2, 6], [3, 6]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 2
  }, {
    squares: [[1, 7], [2, 7], [3, 7]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 17
  }, {
    squares: [[1, 8], [2, 8]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 3
  }, {
    squares: [[2, 0], [2, 1]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 7
  }, {
    squares: [[2, 2], [2, 3]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 24
  }, {
    squares: [[3, 0], [4, 0]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 14
  }, {
    squares: [[3, 1], [4, 1]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 12
  }, {
    squares: [[3, 2], [3, 3]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 11
  }, {
    squares: [[3, 4], [3, 5]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 9
  }, {
    squares: [[3, 8], [4, 8]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 54
  }, {
    squares: [[4, 2], [5, 1], [5, 2]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 90
  }, {
    squares: [[4, 3], [4, 4]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 11
  }, {
    squares: [[4, 5], [5, 5]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 3
  }, {
    squares: [[4, 6], [4, 7], [5, 7]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 320
  }, {
    squares: [[5, 0], [6, 0], [6, 1]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 15
  }, {
    squares: [[5, 3], [5, 4], [6, 4]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 16
  }, {
    squares: [[5, 6], [6, 6]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 5
  }, {
    squares: [[5, 8], [6, 8]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 9
  }, {
    squares: [[6, 2], [6, 3]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 7
  }, {
    squares: [[6, 5], [7, 5]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 3
  }, {
    squares: [[6, 7], [7, 6], [7, 7], [7, 8]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 45
  }, {
    squares: [[7, 0], [8, 0]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 4
  }, {
    squares: [[7, 1], [7, 2]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 2
  }, {
    squares: [[7, 3], [7, 4]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 13
  }, {
    squares: [[8, 1], [8, 2]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 2
  }, {
    squares: [[8, 3], [8, 4]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 1
  }, {
    squares: [[8, 5], [8, 6]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 3
  }, {
    squares: [[8, 7], [8, 8]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 1
  }]
});

/***/ }),

/***/ "./src/scripts/puzzles/originals/puzzle_02.js":
/*!****************************************************!*\
  !*** ./src/scripts/puzzles/originals/puzzle_02.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../constants */ "./src/scripts/constants.js");

/* harmony default export */ __webpack_exports__["default"] = ({
  id: 2,
  size: 9,
  difficulty: 'hard',
  operations: [_constants__WEBPACK_IMPORTED_MODULE_0__["ADD"], _constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"], _constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"], _constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"]],
  cages: [{
    squares: [[0, 0], [1, 0], [2, 0]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 15
  }, {
    squares: [[0, 1], [1, 1]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 2
  }, {
    squares: [[0, 2], [1, 2]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 2
  }, {
    squares: [[0, 3], [0, 4], [0, 5], [0, 6]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 25
  }, {
    squares: [[0, 7], [0, 8], [1, 8], [2, 8]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 320
  }, {
    squares: [[1, 3], [2, 3]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 11
  }, {
    squares: [[1, 4], [2, 4]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 5
  }, {
    squares: [[1, 5], [2, 5]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 1
  }, {
    squares: [[1, 6], [1, 7]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 3
  }, {
    squares: [[2, 1], [3, 1]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 45
  }, {
    squares: [[2, 2], [3, 2]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 42
  }, {
    squares: [[2, 6], [3, 6]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 2
  }, {
    squares: [[2, 7], [3, 7], [3, 8]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 14
  }, {
    squares: [[3, 0], [4, 0]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 14
  }, {
    squares: [[3, 3], [3, 4], [4, 4]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 80
  }, {
    squares: [[3, 5], [4, 5]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 5
  }, {
    squares: [[4, 1], [4, 2], [4, 3]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 12
  }, {
    squares: [[4, 6], [5, 6], [6, 6]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 14
  }, {
    squares: [[4, 7], [5, 7]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 45
  }, {
    squares: [[4, 8], [5, 8]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 2
  }, {
    squares: [[5, 0], [6, 0]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 2
  }, {
    squares: [[5, 1], [6, 1]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 13
  }, {
    squares: [[5, 2], [6, 2]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 1
  }, {
    squares: [[5, 3], [6, 3]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 1
  }, {
    squares: [[5, 4], [5, 5]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 14
  }, {
    squares: [[6, 4], [6, 5]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 6
  }, {
    squares: [[6, 7], [6, 8]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 5
  }, {
    squares: [[7, 0], [7, 1]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 11
  }, {
    squares: [[7, 2], [8, 2]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 3
  }, {
    squares: [[7, 3], [8, 3]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 28
  }, {
    squares: [[7, 4], [8, 4]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 4
  }, {
    squares: [[7, 5], [8, 5]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 11
  }, {
    squares: [[7, 6], [8, 6]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 3
  }, {
    squares: [[7, 7], [7, 8]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 1
  }, {
    squares: [[8, 0], [8, 1]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 5
  }, {
    squares: [[8, 7], [8, 8]],
    operation: _constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 1
  }]
});

/***/ }),

/***/ "./src/scripts/puzzles/puzzles.js":
/*!****************************************!*\
  !*** ./src/scripts/puzzles/puzzles.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _solutions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./solutions */ "./src/scripts/puzzles/solutions.js");
/* harmony import */ var _originals_puzzle_01__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./originals/puzzle_01 */ "./src/scripts/puzzles/originals/puzzle_01.js");
/* harmony import */ var _originals_puzzle_02__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./originals/puzzle_02 */ "./src/scripts/puzzles/originals/puzzle_02.js");



/* harmony default export */ __webpack_exports__["default"] = ([{
  puzzle: _originals_puzzle_01__WEBPACK_IMPORTED_MODULE_1__["default"],
  solution: _solutions__WEBPACK_IMPORTED_MODULE_0__["solution01"]
}, {
  puzzle: _originals_puzzle_02__WEBPACK_IMPORTED_MODULE_2__["default"],
  solution: _solutions__WEBPACK_IMPORTED_MODULE_0__["solution02"]
}]);

/***/ }),

/***/ "./src/scripts/puzzles/solutions.js":
/*!******************************************!*\
  !*** ./src/scripts/puzzles/solutions.js ***!
  \******************************************/
/*! exports provided: solution01, solution02 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "solution01", function() { return solution01; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "solution02", function() { return solution02; });
var solution01 = {
  puzzleId: 1,
  size: 9,
  grid: [[1, 7, 3, 8, 9, 5, 6, 2, 4], [2, 6, 9, 7, 3, 8, 5, 4, 1], [8, 1, 4, 6, 5, 9, 2, 7, 3], [5, 4, 8, 3, 2, 7, 1, 6, 9], [9, 3, 2, 4, 7, 1, 8, 5, 6], [6, 9, 5, 2, 1, 3, 4, 8, 7], [4, 5, 7, 1, 8, 6, 9, 3, 2], [7, 8, 6, 9, 4, 2, 3, 1, 5], [3, 2, 1, 5, 6, 4, 7, 9, 8]]
};
var solution02 = {
  puzzleId: 2,
  size: 9,
  grid: [[5, 4, 1, 3, 6, 7, 9, 2, 8], [1, 8, 2, 6, 3, 9, 4, 7, 5], [3, 9, 7, 5, 2, 8, 6, 1, 4], [7, 5, 6, 2, 8, 1, 3, 4, 9], [2, 3, 8, 1, 5, 4, 7, 9, 6], [8, 6, 4, 9, 7, 2, 1, 5, 3], [4, 7, 5, 8, 9, 3, 2, 6, 1], [9, 2, 3, 4, 1, 6, 5, 8, 7], [6, 1, 9, 7, 4, 5, 8, 3, 2]]
};

/***/ }),

/***/ "./src/scripts/render_components/GroupInfoRender.js":
/*!**********************************************************!*\
  !*** ./src/scripts/render_components/GroupInfoRender.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GroupInfoRender; });
/* harmony import */ var _InfoRender__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./InfoRender */ "./src/scripts/render_components/InfoRender.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var GroupInfoRender = /*#__PURE__*/function (_InfoRender) {
  _inherits(GroupInfoRender, _InfoRender);

  var _super = _createSuper(GroupInfoRender);

  function GroupInfoRender(puzzle) {
    _classCallCheck(this, GroupInfoRender);

    return _super.call(this, puzzle, puzzle.divs.groupInfoDiv);
  }

  return GroupInfoRender;
}(_InfoRender__WEBPACK_IMPORTED_MODULE_0__["default"]); // -> click number key
// -> find focused square (this.puzzle) ???
// -> find corresponding DOM element (DOMUtil)
// -> change value (imperative) ???
// -> check if option to check conflicts is active (this.opts)
// IF CHECK CONFLICT OPTION: 
//   -> check for conflicts with this.qpuzzle.checkConflicts (this.puzzle)
//   IF CONFLICT: 
//     -> erase in 600 ms with animation (DOMUtil)
//     -> EXIT
// -> check if option to auto eliminate options is on (this.opts)
// IF AUTOELIMINATE OPTION:
//    -> game logic (this.puzzle)
//    -> dom logic (DOMUtil)
// -> set val (this.puzzle)
// refactor ->
//   -> each square has its own keydown listener
//   -> status (error?), focus, value, (updating status is async -> rxjs?)
//   -> dispatches an action to try to place the value
//   -> subcribed to change in status, focus, or value, after which it calls dom manipulation methods
//   -> each square 




/***/ }),

/***/ "./src/scripts/render_components/InfoRender.js":
/*!*****************************************************!*\
  !*** ./src/scripts/render_components/InfoRender.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return InfoRender; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var InfoRender = /*#__PURE__*/function () {
  function InfoRender(puzzle, root) {
    _classCallCheck(this, InfoRender);

    this.puzzle = puzzle;
    this.root = root;
  }

  _createClass(InfoRender, [{
    key: "render",
    value: function render() {}
  }, {
    key: "update",
    value: function update(square, appearing) {}
  }, {
    key: "show",
    value: function show() {
      this.root.classList.add('show');
    }
  }, {
    key: "clear",
    value: function clear() {
      this.root.classList.remove('show');
    }
  }]);

  return InfoRender;
}();



/***/ }),

/***/ "./src/scripts/render_components/PuzzleRender.js":
/*!*******************************************************!*\
  !*** ./src/scripts/render_components/PuzzleRender.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PuzzleRender; });
/* harmony import */ var _dom_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom_util */ "./src/scripts/dom_util.js");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }



var PuzzleRender = /*#__PURE__*/function () {
  function PuzzleRender(puzzle) {
    _classCallCheck(this, PuzzleRender);

    this.puzzle = puzzle;
    this.root = puzzle.divs.puzzleDiv;
  }

  _createClass(PuzzleRender, [{
    key: "render",
    value: function render() {
      this.puzzle.iterateSquares(this._generateSquareDiv.bind(this));
      this.puzzle.cages.forEach(this._generateCageLabel);
    }
  }, {
    key: "updateSquareOptions",
    value: function updateSquareOptions(square, limit) {
      var squareInfo = square.squareInfo;
      var options = squareInfo.options.sort(function (a, b) {
        return b - a;
      });
      var num = options.length;
      var locked = squareInfo.locked ? 'locked-in' : '';
      var display = num ? 'all' : 'none';

      if (limit && num) {
        display = num > limit ? 'flag' : 'limited';
      }

      var optionsSpan = _dom_util__WEBPACK_IMPORTED_MODULE_0__["getSquareDiv"](square.pos).querySelector('.sq-options');
      optionsSpan.className = "sq-options ".concat(display, " ").concat(locked);

      switch (display) {
        case 'all':
        case 'limited':
          var spans = options.map(function (opt) {
            var span = document.createElement('span');
            span.innerText = opt;
            return span;
          });
          optionsSpan.innerHTML = '';
          optionsSpan.append.apply(optionsSpan, _toConsumableArray(spans));
          break;

        case 'flag':
          optionsSpan.innerHTML = '<i class="far fa-sticky-note"></i>';
          break;

        default:
          optionsSpan.innerHTML = '';
      }
    }
  }, {
    key: "_generateCageLabel",
    value: function _generateCageLabel(cage) {
      var anchor = cage.anchor,
          anchorText = cage.anchorText;
      var anchorSpan = document.createElement('span');
      anchorSpan.innerText = anchorText;
      anchorSpan.className = 'cage-label';
      _dom_util__WEBPACK_IMPORTED_MODULE_0__["getSquareDiv"](anchor).prepend(anchorSpan);
    }
  }, {
    key: "_generateSquareDiv",
    value: function _generateSquareDiv(square) {
      var _this$puzzle$bounds = this.puzzle.bounds,
          topBounds = _this$puzzle$bounds.topBounds,
          leftBounds = _this$puzzle$bounds.leftBounds;
      var pos = square.pos;

      var _pos = _slicedToArray(pos, 2),
          row = _pos[0],
          col = _pos[1];

      var squareDiv = document.createElement('div');
      squareDiv.dataset.pos = "".concat(row, ",").concat(col);
      squareDiv.className = 'gm-square';
      squareDiv.className += topBounds.includes(pos) ? ' top-bound' : '';
      squareDiv.className += leftBounds.includes(pos) ? ' left-bound' : '';
      squareDiv.style.gridRow = "".concat(row + 1, " / span 1");
      squareDiv.style.gridColumn = "".concat(col + 1, " / span 1");
      var squareInput = document.createElement('input');
      var options = document.createElement('div');
      options.className = 'sq-options';
      squareDiv.append(squareInput, options);
      this.root.append(squareDiv);
    }
  }]);

  return PuzzleRender;
}();



/***/ }),

/***/ "./src/scripts/render_components/SquareInfoRender.js":
/*!***********************************************************!*\
  !*** ./src/scripts/render_components/SquareInfoRender.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SquareInfoRender; });
/* harmony import */ var _InfoRender__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./InfoRender */ "./src/scripts/render_components/InfoRender.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var SquareInfoRender = /*#__PURE__*/function (_InfoRender) {
  _inherits(SquareInfoRender, _InfoRender);

  var _super = _createSuper(SquareInfoRender);

  function SquareInfoRender(puzzle) {
    var _this;

    _classCallCheck(this, SquareInfoRender);

    _this = _super.call(this, puzzle, puzzle.divs.squareInfoDiv);
    _this.size = puzzle.size;
    _this.nums = _this.root.querySelector('.gm-info-nums');
    _this.check = _this.nums.querySelector('.info-nums-check');
    _this.numSpans = [];
    return _this;
  }

  _createClass(SquareInfoRender, [{
    key: "render",
    value: function render() {
      var _this$nums;

      var numDivs = [];

      if (this.size <= 6) {
        this.nums.classList.add('small');
      }

      ;

      for (var i = 0; i < this.size / 3; i++) {
        var numDiv = document.createElement('div');
        numDiv.className = 'info-num-wrapper';
        numDiv.style = "grid-area: ".concat(i + 1, " / 1 / ").concat(i + 2, " / 2");

        for (var j = i * 3 + 1; j <= (i + 1) * 3 && j <= this.size; j++) {
          var numSpan = document.createElement('span');
          numSpan.innerText = j;
          numSpan.className = 'info-num';
          numDiv.append(numSpan);
          this.numSpans.push(numSpan);
        }

        numDivs.push(numDiv);
      }

      (_this$nums = this.nums).prepend.apply(_this$nums, numDivs);
    }
  }, {
    key: "update",
    value: function update(square, appearing) {
      var _this2 = this;

      this.square = this.puzzle.getSquare(square);
      this.squareInfo = this.square.squareInfo;
      this.numSpans.forEach(function (numSpan, idx) {
        return _this2._renderNum(numSpan, idx);
      });
      var checkClasses = this.check.classList;

      if (checkClasses.contains('selected') !== this.squareInfo.locked) {
        checkClasses.toggle('selected');
      }

      if (appearing) {
        _get(_getPrototypeOf(SquareInfoRender.prototype), "show", this).call(this);
      }

      ;
    }
  }, {
    key: "_renderNum",
    value: function _renderNum(numSpan, idx) {
      var selected = this.squareInfo.options.includes(idx + 1);
      var locked = this.squareInfo.locked;
      var lockedClass = '',
          selectedClass = '';

      if (selected) {
        lockedClass = locked ? 'ruled-in' : '';
        selectedClass = 'selected';
      } else {
        lockedClass = locked ? 'ruled-out' : '';
      }

      numSpan.className = "info-num ".concat(lockedClass, " ").concat(selectedClass);
    }
  }]);

  return SquareInfoRender;
}(_InfoRender__WEBPACK_IMPORTED_MODULE_0__["default"]);



/***/ }),

/***/ "./src/styles/index.scss":
/*!*******************************!*\
  !*** ./src/styles/index.scss ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,