/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/scripts/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@babel/runtime/helpers/arrayLikeToArray.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayLikeToArray.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

module.exports = _arrayLikeToArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayWithHoles.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithHoles.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

module.exports = _arrayWithHoles;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray */ "./node_modules/@babel/runtime/helpers/arrayLikeToArray.js");

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return arrayLikeToArray(arr);
}

module.exports = _arrayWithoutHoles;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/assertThisInitialized.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

module.exports = _assertThisInitialized;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/asyncToGenerator.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/classCallCheck.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/construct.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/construct.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf */ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js");

var isNativeReflectConstruct = __webpack_require__(/*! ./isNativeReflectConstruct */ "./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js");

function _construct(Parent, args, Class) {
  if (isNativeReflectConstruct()) {
    module.exports = _construct = Reflect.construct;
  } else {
    module.exports = _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

module.exports = _construct;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/createClass.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/createClass.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/defineProperty.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/defineProperty.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/getPrototypeOf.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/inherits.js":
/*!*********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/inherits.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf */ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js");

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

module.exports = _inherits;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/isNativeFunction.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/isNativeFunction.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

module.exports = _isNativeFunction;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

module.exports = _isNativeReflectConstruct;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/iterableToArray.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArray.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

module.exports = _iterableToArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

module.exports = _iterableToArrayLimit;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/nonIterableRest.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableRest.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableRest;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/nonIterableSpread.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableSpread.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableSpread;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/objectWithoutProperties.js":
/*!************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/objectWithoutProperties.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var objectWithoutPropertiesLoose = __webpack_require__(/*! ./objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js");

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

module.exports = _objectWithoutProperties;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

module.exports = _objectWithoutPropertiesLoose;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! ../helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

var assertThisInitialized = __webpack_require__(/*! ./assertThisInitialized */ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js");

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

module.exports = _possibleConstructorReturn;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/setPrototypeOf.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/slicedToArray.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/slicedToArray.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithHoles = __webpack_require__(/*! ./arrayWithHoles */ "./node_modules/@babel/runtime/helpers/arrayWithHoles.js");

var iterableToArrayLimit = __webpack_require__(/*! ./iterableToArrayLimit */ "./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js");

var unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray */ "./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js");

var nonIterableRest = __webpack_require__(/*! ./nonIterableRest */ "./node_modules/@babel/runtime/helpers/nonIterableRest.js");

function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}

module.exports = _slicedToArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/toConsumableArray.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toConsumableArray.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithoutHoles = __webpack_require__(/*! ./arrayWithoutHoles */ "./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js");

var iterableToArray = __webpack_require__(/*! ./iterableToArray */ "./node_modules/@babel/runtime/helpers/iterableToArray.js");

var unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray */ "./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js");

var nonIterableSpread = __webpack_require__(/*! ./nonIterableSpread */ "./node_modules/@babel/runtime/helpers/nonIterableSpread.js");

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
}

module.exports = _toConsumableArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray */ "./node_modules/@babel/runtime/helpers/arrayLikeToArray.js");

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}

module.exports = _unsupportedIterableToArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/wrapNativeSuper.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/wrapNativeSuper.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getPrototypeOf = __webpack_require__(/*! ./getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");

var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf */ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js");

var isNativeFunction = __webpack_require__(/*! ./isNativeFunction */ "./node_modules/@babel/runtime/helpers/isNativeFunction.js");

var construct = __webpack_require__(/*! ./construct */ "./node_modules/@babel/runtime/helpers/construct.js");

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return construct(Class, arguments, getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

module.exports = _wrapNativeSuper;

/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/regenerator-runtime/runtime.js");

/***/ }),

/***/ "./node_modules/base-64/base64.js":
/*!****************************************!*\
  !*** ./node_modules/base-64/base64.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! http://mths.be/base64 v0.1.0 by @mathias | MIT license */
;

(function (root) {
  // Detect free variables `exports`.
  var freeExports =  true && exports; // Detect free variable `module`.

  var freeModule =  true && module && module.exports == freeExports && module; // Detect free variable `global`, from Node.js or Browserified code, and use
  // it as `root`.

  var freeGlobal = typeof global == 'object' && global;

  if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
    root = freeGlobal;
  }
  /*--------------------------------------------------------------------------*/


  var InvalidCharacterError = function (message) {
    this.message = message;
  };

  InvalidCharacterError.prototype = new Error();
  InvalidCharacterError.prototype.name = 'InvalidCharacterError';

  var error = function (message) {
    // Note: the error messages used throughout this file match those used by
    // the native `atob`/`btoa` implementation in Chromium.
    throw new InvalidCharacterError(message);
  };

  var TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'; // http://whatwg.org/html/common-microsyntaxes.html#space-character

  var REGEX_SPACE_CHARACTERS = /[\t\n\f\r ]/g; // `decode` is designed to be fully compatible with `atob` as described in the
  // HTML Standard. http://whatwg.org/html/webappapis.html#dom-windowbase64-atob
  // The optimized base64-decoding algorithm used is based on @atk’s excellent
  // implementation. https://gist.github.com/atk/1020396

  var decode = function (input) {
    input = String(input).replace(REGEX_SPACE_CHARACTERS, '');
    var length = input.length;

    if (length % 4 == 0) {
      input = input.replace(/==?$/, '');
      length = input.length;
    }

    if (length % 4 == 1 || // http://whatwg.org/C#alphanumeric-ascii-characters
    /[^+a-zA-Z0-9/]/.test(input)) {
      error('Invalid character: the string to be decoded is not correctly encoded.');
    }

    var bitCounter = 0;
    var bitStorage;
    var buffer;
    var output = '';
    var position = -1;

    while (++position < length) {
      buffer = TABLE.indexOf(input.charAt(position));
      bitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer; // Unless this is the first of a group of 4 characters…

      if (bitCounter++ % 4) {
        // …convert the first 8 bits to a single ASCII character.
        output += String.fromCharCode(0xFF & bitStorage >> (-2 * bitCounter & 6));
      }
    }

    return output;
  }; // `encode` is designed to be fully compatible with `btoa` as described in the
  // HTML Standard: http://whatwg.org/html/webappapis.html#dom-windowbase64-btoa


  var encode = function (input) {
    input = String(input);

    if (/[^\0-\xFF]/.test(input)) {
      // Note: no need to special-case astral symbols here, as surrogates are
      // matched, and the input is supposed to only contain ASCII anyway.
      error('The string to be encoded contains characters outside of the ' + 'Latin1 range.');
    }

    var padding = input.length % 3;
    var output = '';
    var position = -1;
    var a;
    var b;
    var c;
    var d;
    var buffer; // Make sure any padding is handled outside of the loop.

    var length = input.length - padding;

    while (++position < length) {
      // Read three bytes, i.e. 24 bits.
      a = input.charCodeAt(position) << 16;
      b = input.charCodeAt(++position) << 8;
      c = input.charCodeAt(++position);
      buffer = a + b + c; // Turn the 24 bits into four chunks of 6 bits each, and append the
      // matching character for each of them to the output.

      output += TABLE.charAt(buffer >> 18 & 0x3F) + TABLE.charAt(buffer >> 12 & 0x3F) + TABLE.charAt(buffer >> 6 & 0x3F) + TABLE.charAt(buffer & 0x3F);
    }

    if (padding == 2) {
      a = input.charCodeAt(position) << 8;
      b = input.charCodeAt(++position);
      buffer = a + b;
      output += TABLE.charAt(buffer >> 10) + TABLE.charAt(buffer >> 4 & 0x3F) + TABLE.charAt(buffer << 2 & 0x3F) + '=';
    } else if (padding == 1) {
      buffer = input.charCodeAt(position);
      output += TABLE.charAt(buffer >> 2) + TABLE.charAt(buffer << 4 & 0x3F) + '==';
    }

    return output;
  };

  var base64 = {
    'encode': encode,
    'decode': decode,
    'version': '0.1.0'
  }; // Some AMD build optimizers, like r.js, check for specific condition patterns
  // like the following:

  if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return base64;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var key; }
})(this);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module), __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
} // Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications


revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function getLens(b64) {
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  } // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42


  var validLen = b64.indexOf('=');
  if (validLen === -1) validLen = len;
  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
} // base64 is 4/3 + up to two characters of the original data


function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars

  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
  var i;

  for (i = 0; i < len; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp >> 16 & 0xFF;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];

  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64(tmp));
  }

  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3
  // go through the array every three bytes, we'll deal with trailing stuff later

  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  } // pad the end with zeros, but make sure to not forget the extra bytes


  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
  }

  return parts.join('');
}

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */

/* eslint-disable no-proto */


var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js");

var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js");

var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js");

exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */

Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
/*
 * Export kMaxLength after typed array support is determined.
 */

exports.kMaxLength = kMaxLength();

function typedArraySupport() {
  try {
    var arr = new Uint8Array(1);
    arr.__proto__ = {
      __proto__: Uint8Array.prototype,
      foo: function () {
        return 42;
      }
    };
    return arr.foo() === 42 && // typed array instances can be augmented
    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
  } catch (e) {
    return false;
  }
}

function kMaxLength() {
  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}

function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length');
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }

    that.length = length;
  }

  return that;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */


function Buffer(arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length);
  } // Common case.


  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }

    return allocUnsafe(this, arg);
  }

  return from(this, arg, encodingOrOffset, length);
}

Buffer.poolSize = 8192; // not used by this implementation
// TODO: Legacy, not needed anymore. Remove in next major version.

Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr;
};

function from(that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset);
  }

  return fromObject(that, value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/


Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length);
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;

  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    });
  }
}

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}

function alloc(that, size, fill, encoding) {
  assertSize(size);

  if (size <= 0) {
    return createBuffer(that, size);
  }

  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
  }

  return createBuffer(that, size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/


Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding);
};

function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }

  return that;
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */


Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */


Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size);
};

function fromString(that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }

  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);
  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that;
}

function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }

  return that;
}

function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }

  return that;
}

function fromObject(that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that;
    }

    obj.copy(that, 0, 0, len);
    return that;
  }

  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }

      return fromArrayLike(that, obj);
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}

function checked(length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
  }

  return length | 0;
}

function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }

  return Buffer.alloc(+length);
}

Buffer.isBuffer = function isBuffer(b) {
  return !!(b != null && b._isBuffer);
};

Buffer.compare = function compare(a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }

  if (a === b) return 0;
  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;

    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;

  if (length === undefined) {
    length = 0;

    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;

  for (i = 0; i < list.length; ++i) {
    var buf = list[i];

    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }

    buf.copy(buffer, pos);
    pos += buf.length;
  }

  return buffer;
};

function byteLength(string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }

  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }

  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0; // Use a for loop to avoid recursion

  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;

      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;

      case 'hex':
        return len >>> 1;

      case 'base64':
        return base64ToBytes(string).length;

      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8

        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}

Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.
  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

  if (start === undefined || start < 0) {
    start = 0;
  } // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.


  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
} // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.


Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;

  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }

  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }

  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;

  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }

  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }

  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;

  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }

  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }

  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length | 0;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.equals = function equals(b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;

  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }

  return '<Buffer ' + str + '>';
};

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }

  if (start === undefined) {
    start = 0;
  }

  if (end === undefined) {
    end = target ? target.length : 0;
  }

  if (thisStart === undefined) {
    thisStart = 0;
  }

  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }

  if (thisStart >= thisEnd) {
    return -1;
  }

  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;
  if (this === target) return 0;
  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);
  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf


function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1; // Normalize byteOffset

  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }

  byteOffset = +byteOffset; // Coerce to Number.

  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  } // Normalize byteOffset: negative offsets start from the end of the buffer


  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  } // Normalize val


  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  } // Finally, search either indexOf (if dir is true) or lastIndexOf


  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }

    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]

    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }

    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();

    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }

      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;

  if (dir) {
    var foundIndex = -1;

    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

    for (i = byteOffset; i >= 0; i--) {
      var found = true;

      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }

      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;

  if (!length) {
    length = remaining;
  } else {
    length = Number(length);

    if (length > remaining) {
      length = remaining;
    }
  } // must be an even number of digits


  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

  if (length > strLen / 2) {
    length = strLen / 2;
  }

  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }

  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0; // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0; // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;

    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    } // legacy write(string, encoding, offset, length) - remove in v0.13

  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';
  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
        return asciiWrite(this, string, offset, length);

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;

  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }

          break;

        case 2:
          secondByte = buf[i + 1];

          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }

      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
} // Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety


var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;

  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  } // Decode in chunks to avoid "call stack size exceeded".


  var res = '';
  var i = 0;

  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }

  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }

  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }

  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;
  var out = '';

  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }

  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';

  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }

  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;
  var newBuf;

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);

    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */


function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;

  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];

  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 0xff;
  return offset + 1;
};

function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;

  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }

  return offset + 2;
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }

  return offset + 2;
};

function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;

  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }

  return offset + 4;
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }

  return offset + 4;
};

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }

  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }

  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }

  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }

  return offset + 4;
};

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }

  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }

  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }

  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

  if (end > this.length) end = this.length;

  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }

  return len;
}; // Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])


Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }

    if (val.length === 1) {
      var code = val.charCodeAt(0);

      if (code < 256) {
        val = code;
      }
    }

    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }

    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  } // Invalid ranges are not set to a default, so can range check early.


  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;
  if (!val) val = 0;
  var i;

  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;

    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
}; // HELPER FUNCTIONS
// ================


var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

  while (str.length % 4 !== 0) {
    str = str + '=';
  }

  return str;
}

function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i); // is surrogate component

    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } // valid lead


        leadSurrogate = codePoint;
        continue;
      } // 2 leads in a row


      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      } // valid surrogate pair


      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null; // encode utf8

    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }

  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return base64.toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }

  return i;
}

function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/clone/clone.js":
/*!*************************************!*\
  !*** ./node_modules/clone/clone.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var clone = function () {
  'use strict';

  function _instanceof(obj, type) {
    return type != null && obj instanceof type;
  }

  var nativeMap;

  try {
    nativeMap = Map;
  } catch (_) {
    // maybe a reference error because no `Map`. Give it a dummy value that no
    // value will ever be an instanceof.
    nativeMap = function () {};
  }

  var nativeSet;

  try {
    nativeSet = Set;
  } catch (_) {
    nativeSet = function () {};
  }

  var nativePromise;

  try {
    nativePromise = Promise;
  } catch (_) {
    nativePromise = function () {};
  }
  /**
   * Clones (copies) an Object using deep copying.
   *
   * This function supports circular references by default, but if you are certain
   * there are no circular references in your object, you can save some CPU time
   * by calling clone(obj, false).
   *
   * Caution: if `circular` is false and `parent` contains circular references,
   * your program may enter an infinite loop and crash.
   *
   * @param `parent` - the object to be cloned
   * @param `circular` - set to true if the object to be cloned may contain
   *    circular references. (optional - true by default)
   * @param `depth` - set to a number if the object is only to be cloned to
   *    a particular depth. (optional - defaults to Infinity)
   * @param `prototype` - sets the prototype to be used when cloning an object.
   *    (optional - defaults to parent prototype).
   * @param `includeNonEnumerable` - set to true if the non-enumerable properties
   *    should be cloned as well. Non-enumerable properties on the prototype
   *    chain will be ignored. (optional - false by default)
  */


  function clone(parent, circular, depth, prototype, includeNonEnumerable) {
    if (typeof circular === 'object') {
      depth = circular.depth;
      prototype = circular.prototype;
      includeNonEnumerable = circular.includeNonEnumerable;
      circular = circular.circular;
    } // maintain two arrays for circular references, where corresponding parents
    // and children have the same index


    var allParents = [];
    var allChildren = [];
    var useBuffer = typeof Buffer != 'undefined';
    if (typeof circular == 'undefined') circular = true;
    if (typeof depth == 'undefined') depth = Infinity; // recurse this function so we don't reset allParents and allChildren

    function _clone(parent, depth) {
      // cloning null always returns null
      if (parent === null) return null;
      if (depth === 0) return parent;
      var child;
      var proto;

      if (typeof parent != 'object') {
        return parent;
      }

      if (_instanceof(parent, nativeMap)) {
        child = new nativeMap();
      } else if (_instanceof(parent, nativeSet)) {
        child = new nativeSet();
      } else if (_instanceof(parent, nativePromise)) {
        child = new nativePromise(function (resolve, reject) {
          parent.then(function (value) {
            resolve(_clone(value, depth - 1));
          }, function (err) {
            reject(_clone(err, depth - 1));
          });
        });
      } else if (clone.__isArray(parent)) {
        child = [];
      } else if (clone.__isRegExp(parent)) {
        child = new RegExp(parent.source, __getRegExpFlags(parent));
        if (parent.lastIndex) child.lastIndex = parent.lastIndex;
      } else if (clone.__isDate(parent)) {
        child = new Date(parent.getTime());
      } else if (useBuffer && Buffer.isBuffer(parent)) {
        child = new Buffer(parent.length);
        parent.copy(child);
        return child;
      } else if (_instanceof(parent, Error)) {
        child = Object.create(parent);
      } else {
        if (typeof prototype == 'undefined') {
          proto = Object.getPrototypeOf(parent);
          child = Object.create(proto);
        } else {
          child = Object.create(prototype);
          proto = prototype;
        }
      }

      if (circular) {
        var index = allParents.indexOf(parent);

        if (index != -1) {
          return allChildren[index];
        }

        allParents.push(parent);
        allChildren.push(child);
      }

      if (_instanceof(parent, nativeMap)) {
        parent.forEach(function (value, key) {
          var keyChild = _clone(key, depth - 1);

          var valueChild = _clone(value, depth - 1);

          child.set(keyChild, valueChild);
        });
      }

      if (_instanceof(parent, nativeSet)) {
        parent.forEach(function (value) {
          var entryChild = _clone(value, depth - 1);

          child.add(entryChild);
        });
      }

      for (var i in parent) {
        var attrs;

        if (proto) {
          attrs = Object.getOwnPropertyDescriptor(proto, i);
        }

        if (attrs && attrs.set == null) {
          continue;
        }

        child[i] = _clone(parent[i], depth - 1);
      }

      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(parent);

        for (var i = 0; i < symbols.length; i++) {
          // Don't need to worry about cloning a symbol because it is a primitive,
          // like a number or string.
          var symbol = symbols[i];
          var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);

          if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
            continue;
          }

          child[symbol] = _clone(parent[symbol], depth - 1);

          if (!descriptor.enumerable) {
            Object.defineProperty(child, symbol, {
              enumerable: false
            });
          }
        }
      }

      if (includeNonEnumerable) {
        var allPropertyNames = Object.getOwnPropertyNames(parent);

        for (var i = 0; i < allPropertyNames.length; i++) {
          var propertyName = allPropertyNames[i];
          var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);

          if (descriptor && descriptor.enumerable) {
            continue;
          }

          child[propertyName] = _clone(parent[propertyName], depth - 1);
          Object.defineProperty(child, propertyName, {
            enumerable: false
          });
        }
      }

      return child;
    }

    return _clone(parent, depth);
  }
  /**
   * Simple flat clone using prototype, accepts only objects, usefull for property
   * override on FLAT configuration object (no nested props).
   *
   * USE WITH CAUTION! This may not behave as you wish if you do not know how this
   * works.
   */


  clone.clonePrototype = function clonePrototype(parent) {
    if (parent === null) return null;

    var c = function () {};

    c.prototype = parent;
    return new c();
  }; // private utility functions


  function __objToStr(o) {
    return Object.prototype.toString.call(o);
  }

  clone.__objToStr = __objToStr;

  function __isDate(o) {
    return typeof o === 'object' && __objToStr(o) === '[object Date]';
  }

  clone.__isDate = __isDate;

  function __isArray(o) {
    return typeof o === 'object' && __objToStr(o) === '[object Array]';
  }

  clone.__isArray = __isArray;

  function __isRegExp(o) {
    return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
  }

  clone.__isRegExp = __isRegExp;

  function __getRegExpFlags(re) {
    var flags = '';
    if (re.global) flags += 'g';
    if (re.ignoreCase) flags += 'i';
    if (re.multiline) flags += 'm';
    return flags;
  }

  clone.__getRegExpFlags = __getRegExpFlags;
  return clone;
}();

if ( true && module.exports) {
  module.exports = clone;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;

  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;

  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }

  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);

    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }

    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }

    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;

  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/***/ }),

/***/ "./node_modules/jsan/index.js":
/*!************************************!*\
  !*** ./node_modules/jsan/index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib */ "./node_modules/jsan/lib/index.js");

/***/ }),

/***/ "./node_modules/jsan/lib/cycle.js":
/*!****************************************!*\
  !*** ./node_modules/jsan/lib/cycle.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var pathGetter = __webpack_require__(/*! ./path-getter */ "./node_modules/jsan/lib/path-getter.js");

var utils = __webpack_require__(/*! ./utils */ "./node_modules/jsan/lib/utils.js");

var WMap = typeof WeakMap !== 'undefined' ? WeakMap : function () {
  var keys = [];
  var values = [];
  return {
    set: function (key, value) {
      keys.push(key);
      values.push(value);
    },
    get: function (key) {
      for (var i = 0; i < keys.length; i++) {
        if (keys[i] === key) {
          return values[i];
        }
      }
    }
  };
}; // Based on https://github.com/douglascrockford/JSON-js/blob/master/cycle.js

exports.decycle = function decycle(object, options, replacer) {
  'use strict';

  var map = new WMap();
  var noCircularOption = !Object.prototype.hasOwnProperty.call(options, 'circular');
  var withRefs = options.refs !== false;
  return function derez(_value, path, key) {
    // The derez recurses through the object, producing the deep copy.
    var i, // The loop counter
    name, // Property name
    nu; // The new object or array
    // typeof null === 'object', so go on if this value is really an object but not
    // one of the weird builtin objects.

    var value = typeof replacer === 'function' ? replacer(key || '', _value) : _value;

    if (options.date && value instanceof Date) {
      return {
        $jsan: 'd' + value.getTime()
      };
    }

    if (options.regex && value instanceof RegExp) {
      return {
        $jsan: 'r' + utils.getRegexFlags(value) + ',' + value.source
      };
    }

    if (options['function'] && typeof value === 'function') {
      return {
        $jsan: 'f' + utils.stringifyFunction(value, options['function'])
      };
    }

    if (options['nan'] && typeof value === 'number' && isNaN(value)) {
      return {
        $jsan: 'n'
      };
    }

    if (options['infinity']) {
      if (Number.POSITIVE_INFINITY === value) return {
        $jsan: 'i'
      };
      if (Number.NEGATIVE_INFINITY === value) return {
        $jsan: 'y'
      };
    }

    if (options['undefined'] && value === undefined) {
      return {
        $jsan: 'u'
      };
    }

    if (options['error'] && value instanceof Error) {
      return {
        $jsan: 'e' + value.message
      };
    }

    if (options['symbol'] && typeof value === 'symbol') {
      var symbolKey = Symbol.keyFor(value);

      if (symbolKey !== undefined) {
        return {
          $jsan: 'g' + symbolKey
        };
      } // 'Symbol(foo)'.slice(7, -1) === 'foo'


      return {
        $jsan: 's' + value.toString().slice(7, -1)
      };
    }

    if (options['map'] && typeof Map === 'function' && value instanceof Map && typeof Array.from === 'function') {
      return {
        $jsan: 'm' + JSON.stringify(decycle(Array.from(value), options, replacer))
      };
    }

    if (options['set'] && typeof Set === 'function' && value instanceof Set && typeof Array.from === 'function') {
      return {
        $jsan: 'l' + JSON.stringify(decycle(Array.from(value), options, replacer))
      };
    }

    if (value && typeof value.toJSON === 'function') {
      try {
        value = value.toJSON(key);
      } catch (error) {
        var keyString = key || '$';
        return "toJSON failed for '" + (map.get(value) || keyString) + "'";
      }
    }

    if (typeof value === 'object' && value !== null && !(value instanceof Boolean) && !(value instanceof Date) && !(value instanceof Number) && !(value instanceof RegExp) && !(value instanceof String) && !(typeof value === 'symbol') && !(value instanceof Error)) {
      // If the value is an object or array, look to see if we have already
      // encountered it. If so, return a $ref/path object.
      if (typeof value === 'object') {
        var foundPath = map.get(value);

        if (foundPath) {
          if (noCircularOption && withRefs) {
            return {
              $jsan: foundPath
            };
          }

          if (path.indexOf(foundPath) === 0) {
            if (!noCircularOption) {
              return typeof options.circular === 'function' ? options.circular(value, path, foundPath) : options.circular;
            }

            return {
              $jsan: foundPath
            };
          }

          if (withRefs) return {
            $jsan: foundPath
          };
        }

        map.set(value, path);
      } // If it is an array, replicate the array.


      if (Object.prototype.toString.apply(value) === '[object Array]') {
        nu = [];

        for (i = 0; i < value.length; i += 1) {
          nu[i] = derez(value[i], path + '[' + i + ']', i);
        }
      } else {
        // If it is an object, replicate the object.
        nu = {};

        for (name in value) {
          if (Object.prototype.hasOwnProperty.call(value, name)) {
            var nextPath = /^\w+$/.test(name) ? '.' + name : '[' + JSON.stringify(name) + ']';
            nu[name] = name === '$jsan' ? [derez(value[name], path + nextPath)] : derez(value[name], path + nextPath, name);
          }
        }
      }

      return nu;
    }

    return value;
  }(object, '$');
};

exports.retrocycle = function retrocycle($) {
  'use strict';

  return function rez(value) {
    // The rez function walks recursively through the object looking for $jsan
    // properties. When it finds one that has a value that is a path, then it
    // replaces the $jsan object with a reference to the value that is found by
    // the path.
    var i, item, name, path;

    if (value && typeof value === 'object') {
      if (Object.prototype.toString.apply(value) === '[object Array]') {
        for (i = 0; i < value.length; i += 1) {
          item = value[i];

          if (item && typeof item === 'object') {
            if (item.$jsan) {
              value[i] = utils.restore(item.$jsan, $);
            } else {
              rez(item);
            }
          }
        }
      } else {
        for (name in value) {
          // base case passed raw object
          if (typeof value[name] === 'string' && name === '$jsan') {
            return utils.restore(value.$jsan, $);
            break;
          } else {
            if (name === '$jsan') {
              value[name] = value[name][0];
            }

            if (typeof value[name] === 'object') {
              item = value[name];

              if (item && typeof item === 'object') {
                if (item.$jsan) {
                  value[name] = utils.restore(item.$jsan, $);
                } else {
                  rez(item);
                }
              }
            }
          }
        }
      }
    }

    return value;
  }($);
};

/***/ }),

/***/ "./node_modules/jsan/lib/index.js":
/*!****************************************!*\
  !*** ./node_modules/jsan/lib/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var cycle = __webpack_require__(/*! ./cycle */ "./node_modules/jsan/lib/cycle.js");

exports.stringify = function stringify(value, replacer, space, _options) {
  if (arguments.length < 4) {
    try {
      if (arguments.length === 1) {
        return JSON.stringify(value);
      } else {
        return JSON.stringify.apply(JSON, arguments);
      }
    } catch (e) {}
  }

  var options = _options || false;

  if (typeof options === 'boolean') {
    options = {
      'date': options,
      'function': options,
      'regex': options,
      'undefined': options,
      'error': options,
      'symbol': options,
      'map': options,
      'set': options,
      'nan': options,
      'infinity': options
    };
  }

  var decycled = cycle.decycle(value, options, replacer);

  if (arguments.length === 1) {
    return JSON.stringify(decycled);
  } else {
    // decycle already handles when replacer is a function.
    return JSON.stringify(decycled, Array.isArray(replacer) ? replacer : null, space);
  }
};

exports.parse = function parse(text, reviver) {
  var needsRetrocycle = /"\$jsan"/.test(text);
  var parsed;

  if (arguments.length === 1) {
    parsed = JSON.parse(text);
  } else {
    parsed = JSON.parse(text, reviver);
  }

  if (needsRetrocycle) {
    parsed = cycle.retrocycle(parsed);
  }

  return parsed;
};

/***/ }),

/***/ "./node_modules/jsan/lib/path-getter.js":
/*!**********************************************!*\
  !*** ./node_modules/jsan/lib/path-getter.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = pathGetter;

function pathGetter(obj, path) {
  if (path !== '$') {
    var paths = getPaths(path);

    for (var i = 0; i < paths.length; i++) {
      path = paths[i].toString().replace(/\\"/g, '"');
      if (typeof obj[path] === 'undefined' && i !== paths.length - 1) continue;
      obj = obj[path];
    }
  }

  return obj;
}

function getPaths(pathString) {
  var regex = /(?:\.(\w+))|(?:\[(\d+)\])|(?:\["((?:[^\\"]|\\.)*)"\])/g;
  var matches = [];
  var match;

  while (match = regex.exec(pathString)) {
    matches.push(match[1] || match[2] || match[3]);
  }

  return matches;
}

/***/ }),

/***/ "./node_modules/jsan/lib/utils.js":
/*!****************************************!*\
  !*** ./node_modules/jsan/lib/utils.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var pathGetter = __webpack_require__(/*! ./path-getter */ "./node_modules/jsan/lib/path-getter.js");

var jsan = __webpack_require__(/*! ./ */ "./node_modules/jsan/lib/index.js");

exports.getRegexFlags = function getRegexFlags(regex) {
  var flags = '';
  if (regex.ignoreCase) flags += 'i';
  if (regex.global) flags += 'g';
  if (regex.multiline) flags += 'm';
  return flags;
};

exports.stringifyFunction = function stringifyFunction(fn, customToString) {
  if (typeof customToString === 'function') {
    return customToString(fn);
  }

  var str = fn.toString();
  var match = str.match(/^[^{]*{|^[^=]*=>/);
  var start = match ? match[0] : '<function> ';
  var end = str[str.length - 1] === '}' ? '}' : '';
  return start.replace(/\r\n|\n/g, ' ').replace(/\s+/g, ' ') + ' /* ... */ ' + end;
};

exports.restore = function restore(obj, root) {
  var type = obj[0];
  var rest = obj.slice(1);

  switch (type) {
    case '$':
      return pathGetter(root, obj);

    case 'r':
      var comma = rest.indexOf(',');
      var flags = rest.slice(0, comma);
      var source = rest.slice(comma + 1);
      return RegExp(source, flags);

    case 'd':
      return new Date(+rest);

    case 'f':
      var fn = function () {
        throw new Error("can't run jsan parsed function");
      };

      fn.toString = function () {
        return rest;
      };

      return fn;

    case 'u':
      return undefined;

    case 'e':
      var error = new Error(rest);
      error.stack = 'Stack is unavailable for jsan parsed errors';
      return error;

    case 's':
      return Symbol(rest);

    case 'g':
      return Symbol.for(rest);

    case 'm':
      return new Map(jsan.parse(rest));

    case 'l':
      return new Set(jsan.parse(rest));

    case 'n':
      return NaN;

    case 'i':
      return Infinity;

    case 'y':
      return -Infinity;

    default:
      console.warn('unknown type', obj);
      return obj;
  }
};

/***/ }),

/***/ "./node_modules/linked-list/_source/linked-list.js":
/*!*********************************************************!*\
  !*** ./node_modules/linked-list/_source/linked-list.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Constants.
 */

var errorMessage;
errorMessage = 'An argument without append, prepend, ' + 'or detach methods was given to `List';
/**
 * Creates a new List: A linked list is a bit like an Array, but
 * knows nothing about how many items are in it, and knows only about its
 * first (`head`) and last (`tail`) items. Each item (e.g. `head`, `tail`,
 * &c.) knows which item comes before or after it (its more like the
 * implementation of the DOM in JavaScript).
 * @global
 * @private
 * @constructor
 * @class Represents an instance of List.
 */

function List()
/*items...*/
{
  if (arguments.length) {
    return List.from(arguments);
  }
}

var ListPrototype;
ListPrototype = List.prototype;
/**
 * Creates a new list from the arguments (each a list item) passed in.
 * @name List.of
 * @param {...ListItem} [items] - Zero or more items to attach.
 * @returns {list} - A new instance of List.
 */

List.of = function ()
/*items...*/
{
  return List.from.call(this, arguments);
};
/**
 * Creates a new list from the given array-like object (each a list item)
 * passed in.
 * @name List.from
 * @param {ListItem[]} [items] - The items to append.
 * @returns {list} - A new instance of List.
 */


List.from = function (items) {
  var list = new this(),
      length,
      iterator,
      item;

  if (items && (length = items.length)) {
    iterator = -1;

    while (++iterator < length) {
      item = items[iterator];

      if (item !== null && item !== undefined) {
        list.append(item);
      }
    }
  }

  return list;
};
/**
 * List#head
 * Default to `null`.
 */


ListPrototype.head = null;
/**
 * List#tail
 * Default to `null`.
 */

ListPrototype.tail = null;
/**
 * Returns the list's items as an array. This does *not* detach the items.
 * @name List#toArray
 * @returns {ListItem[]} - An array of (still attached) ListItems.
 */

ListPrototype.toArray = function () {
  var item = this.head,
      result = [];

  while (item) {
    result.push(item);
    item = item.next;
  }

  return result;
};
/**
 * Prepends the given item to the list: Item will be the new first item
 * (`head`).
 * @name List#prepend
 * @param {ListItem} item - The item to prepend.
 * @returns {ListItem} - An instance of ListItem (the given item).
 */


ListPrototype.prepend = function (item) {
  if (!item) {
    return false;
  }

  if (!item.append || !item.prepend || !item.detach) {
    throw new Error(errorMessage + '#prepend`.');
  }

  var self, head; // Cache self.

  self = this; // If self has a first item, defer prepend to the first items prepend
  // method, and return the result.

  head = self.head;

  if (head) {
    return head.prepend(item);
  } // ...otherwise, there is no `head` (or `tail`) item yet.
  // Detach the prependee.


  item.detach(); // Set the prependees parent list to reference self.

  item.list = self; // Set self's first item to the prependee, and return the item.

  self.head = item;
  return item;
};
/**
 * Appends the given item to the list: Item will be the new last item (`tail`)
 * if the list had a first item, and its first item (`head`) otherwise.
 * @name List#append
 * @param {ListItem} item - The item to append.
 * @returns {ListItem} - An instance of ListItem (the given item).
 */


ListPrototype.append = function (item) {
  if (!item) {
    return false;
  }

  if (!item.append || !item.prepend || !item.detach) {
    throw new Error(errorMessage + '#append`.');
  }

  var self, head, tail; // Cache self.

  self = this; // If self has a last item, defer appending to the last items append
  // method, and return the result.

  tail = self.tail;

  if (tail) {
    return tail.append(item);
  } // If self has a first item, defer appending to the first items append
  // method, and return the result.


  head = self.head;

  if (head) {
    return head.append(item);
  } // ...otherwise, there is no `tail` or `head` item yet.
  // Detach the appendee.


  item.detach(); // Set the appendees parent list to reference self.

  item.list = self; // Set self's first item to the appendee, and return the item.

  self.head = item;
  return item;
};
/**
 * Creates a new ListItem: A linked list item is a bit like DOM node:
 * It knows only about its "parent" (`list`), the item before it (`prev`),
 * and the item after it (`next`).
 * @global
 * @private
 * @constructor
 * @class Represents an instance of ListItem.
 */


function ListItem() {}

List.Item = ListItem;
var ListItemPrototype = ListItem.prototype;
ListItemPrototype.next = null;
ListItemPrototype.prev = null;
ListItemPrototype.list = null;
/**
 * Detaches the item operated on from its parent list.
 * @name ListItem#detach
 * @returns {ListItem} - The item operated on.
 */

ListItemPrototype.detach = function () {
  // Cache self, the parent list, and the previous and next items.
  var self = this,
      list = self.list,
      prev = self.prev,
      next = self.next; // If the item is already detached, return self.

  if (!list) {
    return self;
  } // If self is the last item in the parent list, link the lists last item
  // to the previous item.


  if (list.tail === self) {
    list.tail = prev;
  } // If self is the first item in the parent list, link the lists first item
  // to the next item.


  if (list.head === self) {
    list.head = next;
  } // If both the last and first items in the parent list are the same,
  // remove the link to the last item.


  if (list.tail === list.head) {
    list.tail = null;
  } // If a previous item exists, link its next item to selfs next item.


  if (prev) {
    prev.next = next;
  } // If a next item exists, link its previous item to selfs previous item.


  if (next) {
    next.prev = prev;
  } // Remove links from self to both the next and previous items, and to the
  // parent list.


  self.prev = self.next = self.list = null; // Return self.

  return self;
};
/**
 * Prepends the given item *before* the item operated on.
 * @name ListItem#prepend
 * @param {ListItem} item - The item to prepend.
 * @returns {ListItem} - The item operated on, or false when that item is not
 * attached.
 */


ListItemPrototype.prepend = function (item) {
  if (!item || !item.append || !item.prepend || !item.detach) {
    throw new Error(errorMessage + 'Item#prepend`.');
  } // Cache self, the parent list, and the previous item.


  var self = this,
      list = self.list,
      prev = self.prev; // If self is detached, return false.

  if (!list) {
    return false;
  } // Detach the prependee.


  item.detach(); // If self has a previous item...

  if (prev) {
    // ...link the prependees previous item, to selfs previous item.
    item.prev = prev; // ...link the previous items next item, to self.

    prev.next = item;
  } // Set the prependees next item to self.


  item.next = self; // Set the prependees parent list to selfs parent list.

  item.list = list; // Set the previous item of self to the prependee.

  self.prev = item; // If self is the first item in the parent list, link the lists first item
  // to the prependee.

  if (self === list.head) {
    list.head = item;
  } // If the the parent list has no last item, link the lists last item to
  // self.


  if (!list.tail) {
    list.tail = self;
  } // Return the prependee.


  return item;
};
/**
 * Appends the given item *after* the item operated on.
 * @name ListItem#append
 * @param {ListItem} item - The item to append.
 * @returns {ListItem} - The item operated on, or false when that item is not
 * attached.
 */


ListItemPrototype.append = function (item) {
  // If item is falsey, return false.
  if (!item || !item.append || !item.prepend || !item.detach) {
    throw new Error(errorMessage + 'Item#append`.');
  } // Cache self, the parent list, and the next item.


  var self = this,
      list = self.list,
      next = self.next; // If self is detached, return false.

  if (!list) {
    return false;
  } // Detach the appendee.


  item.detach(); // If self has a next item...

  if (next) {
    // ...link the appendees next item, to selfs next item.
    item.next = next; // ...link the next items previous item, to the appendee.

    next.prev = item;
  } // Set the appendees previous item to self.


  item.prev = self; // Set the appendees parent list to selfs parent list.

  item.list = list; // Set the next item of self to the appendee.

  self.next = item; // If the the parent list has no last item or if self is the parent lists
  // last item, link the lists last item to the appendee.

  if (self === list.tail || !list.tail) {
    list.tail = item;
  } // Return the appendee.


  return item;
};
/**
 * Expose `List`.
 */


module.exports = List;

/***/ }),

/***/ "./node_modules/linked-list/index.js":
/*!*******************************************!*\
  !*** ./node_modules/linked-list/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(/*! ./_source/linked-list.js */ "./node_modules/linked-list/_source/linked-list.js");

/***/ }),

/***/ "./node_modules/mobx-state-tree/dist/mobx-state-tree.module.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mobx-state-tree/dist/mobx-state-tree.module.js ***!
  \*********************************************************************/
/*! exports provided: addDisposer, addMiddleware, applyAction, applyPatch, applySnapshot, cast, castFlowReturn, castToReferenceSnapshot, castToSnapshot, clone, createActionTrackingMiddleware, createActionTrackingMiddleware2, decorate, destroy, detach, escapeJsonPath, flow, getChildType, getEnv, getIdentifier, getLivelinessChecking, getMembers, getNodeId, getParent, getParentOfType, getPath, getPathParts, getPropertyMembers, getRelativePath, getRoot, getRunningActionContext, getSnapshot, getType, hasParent, hasParentOfType, isActionContextChildOf, isActionContextThisOrChildOf, isAlive, isArrayType, isFrozenType, isIdentifierType, isLateType, isLiteralType, isMapType, isModelType, isOptionalType, isPrimitiveType, isProtected, isReferenceType, isRefinementType, isRoot, isStateTreeNode, isType, isUnionType, isValidReference, joinJsonPath, onAction, onPatch, onSnapshot, process, protect, recordActions, recordPatches, resolveIdentifier, resolvePath, setLivelinessChecking, setLivelynessChecking, splitJsonPath, toGenerator, toGeneratorFunction, tryReference, tryResolve, typecheck, types, unescapeJsonPath, unprotect, walk */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(process, setImmediate) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addDisposer", function() { return addDisposer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addMiddleware", function() { return addMiddleware; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyAction", function() { return applyAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyPatch", function() { return applyPatch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applySnapshot", function() { return applySnapshot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cast", function() { return cast; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "castFlowReturn", function() { return castFlowReturn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "castToReferenceSnapshot", function() { return castToReferenceSnapshot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "castToSnapshot", function() { return castToSnapshot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createActionTrackingMiddleware", function() { return createActionTrackingMiddleware; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createActionTrackingMiddleware2", function() { return createActionTrackingMiddleware2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decorate", function() { return decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "destroy", function() { return destroy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "detach", function() { return detach; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "escapeJsonPath", function() { return escapeJsonPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flow", function() { return flow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getChildType", function() { return getChildType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getEnv", function() { return getEnv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getIdentifier", function() { return getIdentifier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLivelinessChecking", function() { return getLivelinessChecking; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMembers", function() { return getMembers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNodeId", function() { return getNodeId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getParent", function() { return getParent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getParentOfType", function() { return getParentOfType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPath", function() { return getPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPathParts", function() { return getPathParts; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPropertyMembers", function() { return getPropertyMembers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRelativePath", function() { return getRelativePath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRoot", function() { return getRoot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRunningActionContext", function() { return getRunningActionContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSnapshot", function() { return getSnapshot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getType", function() { return getType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasParent", function() { return hasParent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasParentOfType", function() { return hasParentOfType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isActionContextChildOf", function() { return isActionContextChildOf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isActionContextThisOrChildOf", function() { return isActionContextThisOrChildOf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isAlive", function() { return isAlive; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isArrayType", function() { return isArrayType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFrozenType", function() { return isFrozenType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isIdentifierType", function() { return isIdentifierType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isLateType", function() { return isLateType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isLiteralType", function() { return isLiteralType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isMapType", function() { return isMapType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isModelType", function() { return isModelType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isOptionalType", function() { return isOptionalType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPrimitiveType", function() { return isPrimitiveType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isProtected", function() { return isProtected; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isReferenceType", function() { return isReferenceType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isRefinementType", function() { return isRefinementType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isRoot", function() { return isRoot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isStateTreeNode", function() { return isStateTreeNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isType", function() { return isType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isUnionType", function() { return isUnionType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isValidReference", function() { return isValidReference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "joinJsonPath", function() { return joinJsonPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onAction", function() { return onAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onPatch", function() { return onPatch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onSnapshot", function() { return onSnapshot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "process", function() { return process$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "protect", function() { return protect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "recordActions", function() { return recordActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "recordPatches", function() { return recordPatches; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resolveIdentifier", function() { return resolveIdentifier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resolvePath", function() { return resolvePath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setLivelinessChecking", function() { return setLivelinessChecking; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setLivelynessChecking", function() { return setLivelynessChecking; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "splitJsonPath", function() { return splitJsonPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toGenerator", function() { return toGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toGeneratorFunction", function() { return toGeneratorFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tryReference", function() { return tryReference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tryResolve", function() { return tryResolve; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "typecheck", function() { return typecheck; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "types", function() { return types; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unescapeJsonPath", function() { return unescapeJsonPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unprotect", function() { return unprotect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "walk", function() { return walk; });
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx */ "./node_modules/mobx/dist/mobx.esm.js");

var livelinessChecking = "warn";
/**
 * Defines what MST should do when running into reads / writes to objects that have died.
 * By default it will print a warning.
 * Use the `"error"` option to easy debugging to see where the error was thrown and when the offending read / write took place
 *
 * @param mode `"warn"`, `"error"` or `"ignore"`
 */

function setLivelinessChecking(mode) {
  livelinessChecking = mode;
}
/**
 * Returns the current liveliness checking mode.
 *
 * @returns `"warn"`, `"error"` or `"ignore"`
 */


function getLivelinessChecking() {
  return livelinessChecking;
}
/**
 * @deprecated use setLivelinessChecking instead
 * @hidden
 *
 * Defines what MST should do when running into reads / writes to objects that have died.
 * By default it will print a warning.
 * Use the `"error"` option to easy debugging to see where the error was thrown and when the offending read / write took place
 *
 * @param mode `"warn"`, `"error"` or `"ignore"`
 */


function setLivelynessChecking(mode) {
  setLivelinessChecking(mode);
}
/**
 * @hidden
 */


var Hook;

(function (Hook) {
  Hook["afterCreate"] = "afterCreate";
  Hook["afterAttach"] = "afterAttach";
  Hook["afterCreationFinalization"] = "afterCreationFinalization";
  Hook["beforeDetach"] = "beforeDetach";
  Hook["beforeDestroy"] = "beforeDestroy";
})(Hook || (Hook = {}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

/* global Reflect, Promise */


var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

function __rest(s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}

function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
      m = s && o[s],
      i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
}

function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

  return ar;
}
/**
 * Returns the _actual_ type of the given tree node. (Or throws)
 *
 * @param object
 * @returns
 */


function getType(object) {
  assertIsStateTreeNode(object, 1);
  return getStateTreeNode(object).type;
}
/**
 * Returns the _declared_ type of the given sub property of an object, array or map.
 * In the case of arrays and maps the property name is optional and will be ignored.
 *
 * Example:
 * ```ts
 * const Box = types.model({ x: 0, y: 0 })
 * const box = Box.create()
 *
 * console.log(getChildType(box, "x").name) // 'number'
 * ```
 *
 * @param object
 * @param propertyName
 * @returns
 */


function getChildType(object, propertyName) {
  assertIsStateTreeNode(object, 1);
  return getStateTreeNode(object).getChildType(propertyName);
}
/**
 * Registers a function that will be invoked for each mutation that is applied to the provided model instance, or to any of its children.
 * See [patches](https://github.com/mobxjs/mobx-state-tree#patches) for more details. onPatch events are emitted immediately and will not await the end of a transaction.
 * Patches can be used to deep observe a model tree.
 *
 * @param target the model instance from which to receive patches
 * @param callback the callback that is invoked for each patch. The reversePatch is a patch that would actually undo the emitted patch
 * @returns function to remove the listener
 */


function onPatch(target, callback) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  assertIsFunction(callback, 2);
  return getStateTreeNode(target).onPatch(callback);
}
/**
 * Registers a function that is invoked whenever a new snapshot for the given model instance is available.
 * The listener will only be fire at the end of the current MobX (trans)action.
 * See [snapshots](https://github.com/mobxjs/mobx-state-tree#snapshots) for more details.
 *
 * @param target
 * @param callback
 * @returns
 */


function onSnapshot(target, callback) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  assertIsFunction(callback, 2);
  return getStateTreeNode(target).onSnapshot(callback);
}
/**
 * Applies a JSON-patch to the given model instance or bails out if the patch couldn't be applied
 * See [patches](https://github.com/mobxjs/mobx-state-tree#patches) for more details.
 *
 * Can apply a single past, or an array of patches.
 *
 * @param target
 * @param patch
 * @returns
 */


function applyPatch(target, patch) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  assertArg(patch, function (p) {
    return typeof p === "object";
  }, "object or array", 2);
  getStateTreeNode(target).applyPatches(asArray(patch));
}
/**
 * Small abstraction around `onPatch` and `applyPatch`, attaches a patch listener to a tree and records all the patches.
 * Returns an recorder object with the following signature:
 *
 * Example:
 * ```ts
 * export interface IPatchRecorder {
 *      // the recorded patches
 *      patches: IJsonPatch[]
 *      // the inverse of the recorded patches
 *      inversePatches: IJsonPatch[]
 *      // true if currently recording
 *      recording: boolean
 *      // stop recording patches
 *      stop(): void
 *      // resume recording patches
 *      resume(): void
 *      // apply all the recorded patches on the given target (the original subject if omitted)
 *      replay(target?: IAnyStateTreeNode): void
 *      // reverse apply the recorded patches on the given target  (the original subject if omitted)
 *      // stops the recorder if not already stopped
 *      undo(): void
 * }
 * ```
 *
 * The optional filter function allows to skip recording certain patches.
 *
 * @param subject
 * @param filter
 * @returns
 */


function recordPatches(subject, filter) {
  // check all arguments
  assertIsStateTreeNode(subject, 1);
  var data = {
    patches: [],
    reversedInversePatches: []
  }; // we will generate the immutable copy of patches on demand for public consumption

  var publicData = {};
  var disposer;
  var recorder = {
    get recording() {
      return !!disposer;
    },

    get patches() {
      if (!publicData.patches) {
        publicData.patches = data.patches.slice();
      }

      return publicData.patches;
    },

    get reversedInversePatches() {
      if (!publicData.reversedInversePatches) {
        publicData.reversedInversePatches = data.reversedInversePatches.slice();
      }

      return publicData.reversedInversePatches;
    },

    get inversePatches() {
      if (!publicData.inversePatches) {
        publicData.inversePatches = data.reversedInversePatches.slice().reverse();
      }

      return publicData.inversePatches;
    },

    stop: function () {
      if (disposer) {
        disposer();
        disposer = undefined;
      }
    },
    resume: function () {
      if (disposer) return;
      disposer = onPatch(subject, function (patch, inversePatch) {
        // skip patches that are asked to be filtered if there's a filter in place
        if (filter && !filter(patch, inversePatch, getRunningActionContext())) {
          return;
        }

        data.patches.push(patch);
        data.reversedInversePatches.unshift(inversePatch); // mark immutable public patches as dirty

        publicData.patches = undefined;
        publicData.inversePatches = undefined;
        publicData.reversedInversePatches = undefined;
      });
    },
    replay: function (target) {
      applyPatch(target || subject, data.patches);
    },
    undo: function (target) {
      applyPatch(target || subject, data.reversedInversePatches);
    }
  };
  recorder.resume();
  return recorder;
}
/**
 * The inverse of `unprotect`.
 *
 * @param target
 */


function protect(target) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  var node = getStateTreeNode(target);
  if (!node.isRoot) throw fail$1("`protect` can only be invoked on root nodes");
  node.isProtectionEnabled = true;
}
/**
 * By default it is not allowed to directly modify a model. Models can only be modified through actions.
 * However, in some cases you don't care about the advantages (like replayability, traceability, etc) this yields.
 * For example because you are building a PoC or don't have any middleware attached to your tree.
 *
 * In that case you can disable this protection by calling `unprotect` on the root of your tree.
 *
 * Example:
 * ```ts
 * const Todo = types.model({
 *     done: false
 * }).actions(self => ({
 *     toggle() {
 *         self.done = !self.done
 *     }
 * }))
 *
 * const todo = Todo.create()
 * todo.done = true // throws!
 * todo.toggle() // OK
 * unprotect(todo)
 * todo.done = false // OK
 * ```
 */


function unprotect(target) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  var node = getStateTreeNode(target);
  if (!node.isRoot) throw fail$1("`unprotect` can only be invoked on root nodes");
  node.isProtectionEnabled = false;
}
/**
 * Returns true if the object is in protected mode, @see protect
 */


function isProtected(target) {
  return getStateTreeNode(target).isProtected;
}
/**
 * Applies a snapshot to a given model instances. Patch and snapshot listeners will be invoked as usual.
 *
 * @param target
 * @param snapshot
 * @returns
 */


function applySnapshot(target, snapshot) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  return getStateTreeNode(target).applySnapshot(snapshot);
}
/**
 * Calculates a snapshot from the given model instance. The snapshot will always reflect the latest state but use
 * structural sharing where possible. Doesn't require MobX transactions to be completed.
 *
 * @param target
 * @param applyPostProcess If true (the default) then postProcessSnapshot gets applied.
 * @returns
 */


function getSnapshot(target, applyPostProcess) {
  if (applyPostProcess === void 0) {
    applyPostProcess = true;
  } // check all arguments


  assertIsStateTreeNode(target, 1);
  var node = getStateTreeNode(target);
  if (applyPostProcess) return node.snapshot;
  return freeze(node.type.getSnapshot(node, false));
}
/**
 * Given a model instance, returns `true` if the object has a parent, that is, is part of another object, map or array.
 *
 * @param target
 * @param depth How far should we look upward? 1 by default.
 * @returns
 */


function hasParent(target, depth) {
  if (depth === void 0) {
    depth = 1;
  } // check all arguments


  assertIsStateTreeNode(target, 1);
  assertIsNumber(depth, 2, 0);
  var parent = getStateTreeNode(target).parent;

  while (parent) {
    if (--depth === 0) return true;
    parent = parent.parent;
  }

  return false;
}
/**
 * Returns the immediate parent of this object, or throws.
 *
 * Note that the immediate parent can be either an object, map or array, and
 * doesn't necessarily refer to the parent model.
 *
 * Please note that in child nodes access to the root is only possible
 * once the `afterAttach` hook has fired.
 *
 * @param target
 * @param depth How far should we look upward? 1 by default.
 * @returns
 */


function getParent(target, depth) {
  if (depth === void 0) {
    depth = 1;
  } // check all arguments


  assertIsStateTreeNode(target, 1);
  assertIsNumber(depth, 2, 0);
  var d = depth;
  var parent = getStateTreeNode(target).parent;

  while (parent) {
    if (--d === 0) return parent.storedValue;
    parent = parent.parent;
  }

  throw fail$1("Failed to find the parent of " + getStateTreeNode(target) + " at depth " + depth);
}
/**
 * Given a model instance, returns `true` if the object has a parent of given type, that is, is part of another object, map or array
 *
 * @param target
 * @param type
 * @returns
 */


function hasParentOfType(target, type) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  assertIsType(type, 2);
  var parent = getStateTreeNode(target).parent;

  while (parent) {
    if (type.is(parent.storedValue)) return true;
    parent = parent.parent;
  }

  return false;
}
/**
 * Returns the target's parent of a given type, or throws.
 *
 * @param target
 * @param type
 * @returns
 */


function getParentOfType(target, type) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  assertIsType(type, 2);
  var parent = getStateTreeNode(target).parent;

  while (parent) {
    if (type.is(parent.storedValue)) return parent.storedValue;
    parent = parent.parent;
  }

  throw fail$1("Failed to find the parent of " + getStateTreeNode(target) + " of a given type");
}
/**
 * Given an object in a model tree, returns the root object of that tree.
 *
 * Please note that in child nodes access to the root is only possible
 * once the `afterAttach` hook has fired.
 *
 * @param target
 * @returns
 */


function getRoot(target) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  return getStateTreeNode(target).root.storedValue;
}
/**
 * Returns the path of the given object in the model tree
 *
 * @param target
 * @returns
 */


function getPath(target) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  return getStateTreeNode(target).path;
}
/**
 * Returns the path of the given object as unescaped string array.
 *
 * @param target
 * @returns
 */


function getPathParts(target) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  return splitJsonPath(getStateTreeNode(target).path);
}
/**
 * Returns true if the given object is the root of a model tree.
 *
 * @param target
 * @returns
 */


function isRoot(target) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  return getStateTreeNode(target).isRoot;
}
/**
 * Resolves a path relatively to a given object.
 * Returns undefined if no value can be found.
 *
 * @param target
 * @param path escaped json path
 * @returns
 */


function resolvePath(target, path) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  assertIsString(path, 2);
  var node = resolveNodeByPath(getStateTreeNode(target), path);
  return node ? node.value : undefined;
}
/**
 * Resolves a model instance given a root target, the type and the identifier you are searching for.
 * Returns undefined if no value can be found.
 *
 * @param type
 * @param target
 * @param identifier
 * @returns
 */


function resolveIdentifier(type, target, identifier) {
  // check all arguments
  assertIsType(type, 1);
  assertIsStateTreeNode(target, 2);
  assertIsValidIdentifier(identifier, 3);
  var node = getStateTreeNode(target).root.identifierCache.resolve(type, normalizeIdentifier(identifier));
  return node ? node.value : undefined;
}
/**
 * Returns the identifier of the target node.
 * This is the *string normalized* identifier, which might not match the type of the identifier attribute
 *
 * @param target
 * @returns
 */


function getIdentifier(target) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  return getStateTreeNode(target).identifier;
}
/**
 * Tests if a reference is valid (pointing to an existing node and optionally if alive) and returns such reference if it the check passes,
 * else it returns undefined.
 *
 * @param getter Function to access the reference.
 * @param checkIfAlive true to also make sure the referenced node is alive (default), false to skip this check.
 * @returns
 */


function tryReference(getter, checkIfAlive) {
  if (checkIfAlive === void 0) {
    checkIfAlive = true;
  }

  try {
    var node = getter();

    if (node === undefined || node === null) {
      return undefined;
    } else if (isStateTreeNode(node)) {
      if (!checkIfAlive) {
        return node;
      } else {
        return isAlive(node) ? node : undefined;
      }
    } else {
      throw fail$1("The reference to be checked is not one of node, null or undefined");
    }
  } catch (e) {
    if (e instanceof InvalidReferenceError) {
      return undefined;
    }

    throw e;
  }
}
/**
 * Tests if a reference is valid (pointing to an existing node and optionally if alive) and returns if the check passes or not.
 *
 * @param getter Function to access the reference.
 * @param checkIfAlive true to also make sure the referenced node is alive (default), false to skip this check.
 * @returns
 */


function isValidReference(getter, checkIfAlive) {
  if (checkIfAlive === void 0) {
    checkIfAlive = true;
  }

  try {
    var node = getter();

    if (node === undefined || node === null) {
      return false;
    } else if (isStateTreeNode(node)) {
      return checkIfAlive ? isAlive(node) : true;
    } else {
      throw fail$1("The reference to be checked is not one of node, null or undefined");
    }
  } catch (e) {
    if (e instanceof InvalidReferenceError) {
      return false;
    }

    throw e;
  }
}
/**
 * Try to resolve a given path relative to a given node.
 *
 * @param target
 * @param path
 * @returns
 */


function tryResolve(target, path) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  assertIsString(path, 2);
  var node = resolveNodeByPath(getStateTreeNode(target), path, false);
  if (node === undefined) return undefined;

  try {
    return node.value;
  } catch (e) {
    // For what ever reason not resolvable (e.g. totally not existing path, or value that cannot be fetched)
    // see test / issue: 'try resolve doesn't work #686'
    return undefined;
  }
}
/**
 * Given two state tree nodes that are part of the same tree,
 * returns the shortest jsonpath needed to navigate from the one to the other
 *
 * @param base
 * @param target
 * @returns
 */


function getRelativePath(base, target) {
  // check all arguments
  assertIsStateTreeNode(base, 1);
  assertIsStateTreeNode(target, 2);
  return getRelativePathBetweenNodes(getStateTreeNode(base), getStateTreeNode(target));
}
/**
 * Returns a deep copy of the given state tree node as new tree.
 * Short hand for `snapshot(x) = getType(x).create(getSnapshot(x))`
 *
 * _Tip: clone will create a literal copy, including the same identifiers. To modify identifiers etc during cloning, don't use clone but take a snapshot of the tree, modify it, and create new instance_
 *
 * @param source
 * @param keepEnvironment indicates whether the clone should inherit the same environment (`true`, the default), or not have an environment (`false`). If an object is passed in as second argument, that will act as the environment for the cloned tree.
 * @returns
 */


function clone(source, keepEnvironment) {
  if (keepEnvironment === void 0) {
    keepEnvironment = true;
  } // check all arguments


  assertIsStateTreeNode(source, 1);
  var node = getStateTreeNode(source);
  return node.type.create(node.snapshot, keepEnvironment === true ? node.root.environment : keepEnvironment === false ? undefined : keepEnvironment); // it's an object or something else
}
/**
 * Removes a model element from the state tree, and let it live on as a new state tree
 */


function detach(target) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  getStateTreeNode(target).detach();
  return target;
}
/**
 * Removes a model element from the state tree, and mark it as end-of-life; the element should not be used anymore
 */


function destroy(target) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  var node = getStateTreeNode(target);
  if (node.isRoot) node.die();else node.parent.removeChild(node.subpath);
}
/**
 * Returns true if the given state tree node is not killed yet.
 * This means that the node is still a part of a tree, and that `destroy`
 * has not been called. If a node is not alive anymore, the only thing one can do with it
 * is requesting it's last path and snapshot
 *
 * @param target
 * @returns
 */


function isAlive(target) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  return getStateTreeNode(target).observableIsAlive;
}
/**
 * Use this utility to register a function that should be called whenever the
 * targeted state tree node is destroyed. This is a useful alternative to managing
 * cleanup methods yourself using the `beforeDestroy` hook.
 *
 * This methods returns the same disposer that was passed as argument.
 *
 * Example:
 * ```ts
 * const Todo = types.model({
 *   title: types.string
 * }).actions(self => ({
 *   afterCreate() {
 *     const autoSaveDisposer = reaction(
 *       () => getSnapshot(self),
 *       snapshot => sendSnapshotToServerSomehow(snapshot)
 *     )
 *     // stop sending updates to server if this
 *     // instance is destroyed
 *     addDisposer(self, autoSaveDisposer)
 *   }
 * }))
 * ```
 *
 * @param target
 * @param disposer
 * @returns The same disposer that was passed as argument
 */


function addDisposer(target, disposer) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  assertIsFunction(disposer, 2);
  var node = getStateTreeNode(target);
  node.addDisposer(disposer);
  return disposer;
}
/**
 * Returns the environment of the current state tree. For more info on environments,
 * see [Dependency injection](https://github.com/mobxjs/mobx-state-tree#dependency-injection)
 *
 * Please note that in child nodes access to the root is only possible
 * once the `afterAttach` hook has fired
 *
 * Returns an empty environment if the tree wasn't initialized with an environment
 *
 * @param target
 * @returns
 */


function getEnv(target) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  var node = getStateTreeNode(target);
  var env = node.root.environment;
  if (!env) return EMPTY_OBJECT;
  return env;
}
/**
 * Performs a depth first walk through a tree.
 */


function walk(target, processor) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  assertIsFunction(processor, 2);
  var node = getStateTreeNode(target); // tslint:disable-next-line:no_unused-variable

  node.getChildren().forEach(function (child) {
    if (isStateTreeNode(child.storedValue)) walk(child.storedValue, processor);
  });
  processor(node.storedValue);
}
/**
 * Returns a reflection of the model type properties and name for either a model type or model node.
 *
 * @param typeOrNode
 * @returns
 */


function getPropertyMembers(typeOrNode) {
  var type;

  if (isStateTreeNode(typeOrNode)) {
    type = getType(typeOrNode);
  } else {
    type = typeOrNode;
  }

  assertArg(type, function (t) {
    return isModelType(t);
  }, "model type or model instance", 1);
  return {
    name: type.name,
    properties: __assign({}, type.properties)
  };
}
/**
 * Returns a reflection of the model node, including name, properties, views, volatile and actions.
 *
 * @param target
 * @returns
 */


function getMembers(target) {
  var type = getStateTreeNode(target).type;

  var reflected = __assign(__assign({}, getPropertyMembers(type)), {
    actions: [],
    volatile: [],
    views: []
  });

  var props = Object.getOwnPropertyNames(target);
  props.forEach(function (key) {
    if (key in reflected.properties) return;
    var descriptor = Object.getOwnPropertyDescriptor(target, key);

    if (descriptor.get) {
      if (Object(mobx__WEBPACK_IMPORTED_MODULE_0__["isComputedProp"])(target, key)) reflected.views.push(key);else reflected.volatile.push(key);
      return;
    }

    if (descriptor.value._isMSTAction === true) reflected.actions.push(key);else if (Object(mobx__WEBPACK_IMPORTED_MODULE_0__["isObservableProp"])(target, key)) reflected.volatile.push(key);else reflected.views.push(key);
  });
  return reflected;
}
/**
 * Casts a node snapshot or instance type to an instance type so it can be assigned to a type instance.
 * Note that this is just a cast for the type system, this is, it won't actually convert a snapshot to an instance,
 * but just fool typescript into thinking so.
 * Either way, casting when outside an assignation operation won't compile.
 *
 * Example:
 * ```ts
 * const ModelA = types.model({
 *   n: types.number
 * }).actions(self => ({
 *   setN(aNumber: number) {
 *     self.n = aNumber
 *   }
 * }))
 *
 * const ModelB = types.model({
 *   innerModel: ModelA
 * }).actions(self => ({
 *   someAction() {
 *     // this will allow the compiler to assign a snapshot to the property
 *     self.innerModel = cast({ a: 5 })
 *   }
 * }))
 * ```
 *
 * @param snapshotOrInstance Snapshot or instance
 * @returns The same object casted as an instance
 */


function cast(snapshotOrInstance) {
  return snapshotOrInstance;
}
/**
 * Casts a node instance type to an snapshot type so it can be assigned to a type snapshot (e.g. to be used inside a create call).
 * Note that this is just a cast for the type system, this is, it won't actually convert an instance to a snapshot,
 * but just fool typescript into thinking so.
 *
 * Example:
 * ```ts
 * const ModelA = types.model({
 *   n: types.number
 * }).actions(self => ({
 *   setN(aNumber: number) {
 *     self.n = aNumber
 *   }
 * }))
 *
 * const ModelB = types.model({
 *   innerModel: ModelA
 * })
 *
 * const a = ModelA.create({ n: 5 });
 * // this will allow the compiler to use a model as if it were a snapshot
 * const b = ModelB.create({ innerModel: castToSnapshot(a)})
 * ```
 *
 * @param snapshotOrInstance Snapshot or instance
 * @returns The same object casted as an input (creation) snapshot
 */


function castToSnapshot(snapshotOrInstance) {
  return snapshotOrInstance;
}
/**
 * Casts a node instance type to a reference snapshot type so it can be assigned to a refernence snapshot (e.g. to be used inside a create call).
 * Note that this is just a cast for the type system, this is, it won't actually convert an instance to a refererence snapshot,
 * but just fool typescript into thinking so.
 *
 * Example:
 * ```ts
 * const ModelA = types.model({
 *   id: types.identifier,
 *   n: types.number
 * }).actions(self => ({
 *   setN(aNumber: number) {
 *     self.n = aNumber
 *   }
 * }))
 *
 * const ModelB = types.model({
 *   refA: types.reference(ModelA)
 * })
 *
 * const a = ModelA.create({ id: 'someId', n: 5 });
 * // this will allow the compiler to use a model as if it were a reference snapshot
 * const b = ModelB.create({ refA: castToReferenceSnapshot(a)})
 * ```
 *
 * @param instance Instance
 * @returns The same object casted as an reference snapshot (string or number)
 */


function castToReferenceSnapshot(instance) {
  return instance;
}
/**
 * Returns the unique node id (not to be confused with the instance identifier) for a
 * given instance.
 * This id is a number that is unique for each instance.
 *
 * @export
 * @param target
 * @returns
 */


function getNodeId(target) {
  assertIsStateTreeNode(target, 1);
  return getStateTreeNode(target).nodeId;
}
/**
 * @internal
 * @hidden
 */


var BaseNode =
/** @class */
function () {
  function BaseNode(type, parent, subpath, environment) {
    Object.defineProperty(this, "type", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: type
    });
    Object.defineProperty(this, "environment", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: environment
    });
    Object.defineProperty(this, "_escapedSubpath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_subpath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_subpathUponDeath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_pathUponDeath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "storedValue", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    }); // usually the same type as the value, but not always (such as with references)

    Object.defineProperty(this, "aliveAtom", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_state", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: NodeLifeCycle.INITIALIZING
    });
    Object.defineProperty(this, "_hookSubscribers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_parent", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "pathAtom", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.environment = environment;
    this.baseSetParent(parent, subpath);
  }

  Object.defineProperty(BaseNode.prototype, "subpath", {
    get: function () {
      return this._subpath;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseNode.prototype, "subpathUponDeath", {
    get: function () {
      return this._subpathUponDeath;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseNode.prototype, "pathUponDeath", {
    get: function () {
      return this._pathUponDeath;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseNode.prototype, "value", {
    get: function () {
      return this.type.getValue(this);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseNode.prototype, "state", {
    get: function () {
      return this._state;
    },
    set: function (val) {
      var wasAlive = this.isAlive;
      this._state = val;
      var isAlive = this.isAlive;

      if (this.aliveAtom && wasAlive !== isAlive) {
        this.aliveAtom.reportChanged();
      }
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseNode.prototype, "fireInternalHook", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (name) {
      if (this._hookSubscribers) {
        this._hookSubscribers.emit(name, this, name);
      }
    }
  });
  Object.defineProperty(BaseNode.prototype, "registerHook", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (hook, hookHandler) {
      if (!this._hookSubscribers) {
        this._hookSubscribers = new EventHandlers();
      }

      return this._hookSubscribers.register(hook, hookHandler);
    }
  });
  Object.defineProperty(BaseNode.prototype, "parent", {
    get: function () {
      return this._parent;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseNode.prototype, "baseSetParent", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath) {
      this._parent = parent;
      this._subpath = subpath;
      this._escapedSubpath = undefined; // regenerate when needed

      if (this.pathAtom) {
        this.pathAtom.reportChanged();
      }
    }
  });
  Object.defineProperty(BaseNode.prototype, "path", {
    /*
     * Returns (escaped) path representation as string
     */
    get: function () {
      return this.getEscapedPath(true);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseNode.prototype, "getEscapedPath", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (reportObserved) {
      if (reportObserved) {
        if (!this.pathAtom) {
          this.pathAtom = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["createAtom"])("path");
        }

        this.pathAtom.reportObserved();
      }

      if (!this.parent) return ""; // regenerate escaped subpath if needed

      if (this._escapedSubpath === undefined) {
        this._escapedSubpath = !this._subpath ? "" : escapeJsonPath(this._subpath);
      }

      return this.parent.getEscapedPath(reportObserved) + "/" + this._escapedSubpath;
    }
  });
  Object.defineProperty(BaseNode.prototype, "isRoot", {
    get: function () {
      return this.parent === null;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseNode.prototype, "isAlive", {
    get: function () {
      return this.state !== NodeLifeCycle.DEAD;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseNode.prototype, "isDetaching", {
    get: function () {
      return this.state === NodeLifeCycle.DETACHING;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseNode.prototype, "observableIsAlive", {
    get: function () {
      if (!this.aliveAtom) {
        this.aliveAtom = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["createAtom"])("alive");
      }

      this.aliveAtom.reportObserved();
      return this.isAlive;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseNode.prototype, "baseFinalizeCreation", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (whenFinalized) {
      if (devMode()) {
        if (!this.isAlive) {
          // istanbul ignore next
          throw fail("assertion failed: cannot finalize the creation of a node that is already dead");
        }
      } // goal: afterCreate hooks runs depth-first. After attach runs parent first, so on afterAttach the parent has completed already


      if (this.state === NodeLifeCycle.CREATED) {
        if (this.parent) {
          if (this.parent.state !== NodeLifeCycle.FINALIZED) {
            // parent not ready yet, postpone
            return;
          }

          this.fireHook(Hook.afterAttach);
        }

        this.state = NodeLifeCycle.FINALIZED;

        if (whenFinalized) {
          whenFinalized();
        }
      }
    }
  });
  Object.defineProperty(BaseNode.prototype, "baseFinalizeDeath", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      if (this._hookSubscribers) {
        this._hookSubscribers.clearAll();
      }

      this._subpathUponDeath = this._subpath;
      this._pathUponDeath = this.getEscapedPath(false);
      this.baseSetParent(null, "");
      this.state = NodeLifeCycle.DEAD;
    }
  });
  Object.defineProperty(BaseNode.prototype, "baseAboutToDie", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      this.fireHook(Hook.beforeDestroy);
    }
  });
  return BaseNode;
}();
/**
 * @internal
 * @hidden
 */


var ScalarNode =
/** @class */
function (_super) {
  __extends(ScalarNode, _super);

  function ScalarNode(simpleType, parent, subpath, environment, initialSnapshot) {
    var _this = _super.call(this, simpleType, parent, subpath, environment) || this;

    try {
      _this.storedValue = simpleType.createNewInstance(initialSnapshot);
    } catch (e) {
      // short-cut to die the instance, to avoid the snapshot computed starting to throw...
      _this.state = NodeLifeCycle.DEAD;
      throw e;
    }

    _this.state = NodeLifeCycle.CREATED; // for scalar nodes there's no point in firing this event since it would fire on the constructor, before
    // anybody can actually register for/listen to it
    // this.fireHook(Hook.AfterCreate)

    _this.finalizeCreation();

    return _this;
  }

  Object.defineProperty(ScalarNode.prototype, "root", {
    get: function () {
      // future optimization: store root ref in the node and maintain it
      if (!this.parent) throw fail$1("This scalar node is not part of a tree");
      return this.parent.root;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ScalarNode.prototype, "setParent", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (newParent, subpath) {
      var parentChanged = this.parent !== newParent;
      var subpathChanged = this.subpath !== subpath;

      if (!parentChanged && !subpathChanged) {
        return;
      }

      if (devMode()) {
        if (!subpath) {
          // istanbul ignore next
          throw fail$1("assertion failed: subpath expected");
        }

        if (!newParent) {
          // istanbul ignore next
          throw fail$1("assertion failed: parent expected");
        }

        if (parentChanged) {
          // istanbul ignore next
          throw fail$1("assertion failed: scalar nodes cannot change their parent");
        }
      }

      this.environment = undefined; // use parent's

      this.baseSetParent(this.parent, subpath);
    }
  });
  Object.defineProperty(ScalarNode.prototype, "snapshot", {
    get: function () {
      return freeze(this.getSnapshot());
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ScalarNode.prototype, "getSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this.type.getSnapshot(this);
    }
  });
  Object.defineProperty(ScalarNode.prototype, "toString", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var path = (this.isAlive ? this.path : this.pathUponDeath) || "<root>";
      return this.type.name + "@" + path + (this.isAlive ? "" : " [dead]");
    }
  });
  Object.defineProperty(ScalarNode.prototype, "die", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      if (!this.isAlive || this.state === NodeLifeCycle.DETACHING) return;
      this.aboutToDie();
      this.finalizeDeath();
    }
  });
  Object.defineProperty(ScalarNode.prototype, "finalizeCreation", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      this.baseFinalizeCreation();
    }
  });
  Object.defineProperty(ScalarNode.prototype, "aboutToDie", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      this.baseAboutToDie();
    }
  });
  Object.defineProperty(ScalarNode.prototype, "finalizeDeath", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      this.baseFinalizeDeath();
    }
  });
  Object.defineProperty(ScalarNode.prototype, "fireHook", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (name) {
      this.fireInternalHook(name);
    }
  });
  return ScalarNode;
}(BaseNode);

ScalarNode.prototype.die = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["action"])(ScalarNode.prototype.die);
var nextNodeId = 1;
var snapshotReactionOptions = {
  onError: function (e) {
    throw e;
  }
};
/**
 * @internal
 * @hidden
 */

var ObjectNode =
/** @class */
function (_super) {
  __extends(ObjectNode, _super);

  function ObjectNode(complexType, parent, subpath, environment, initialValue) {
    var _this = _super.call(this, complexType, parent, subpath, environment) || this;

    Object.defineProperty(_this, "nodeId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: ++nextNodeId
    });
    Object.defineProperty(_this, "identifierAttribute", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "identifier", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    }); // Identifier is always normalized to string, even if the identifier property isn't

    Object.defineProperty(_this, "unnormalizedIdentifier", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "identifierCache", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "isProtectionEnabled", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    });
    Object.defineProperty(_this, "middlewares", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_applyPatches", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_applySnapshot", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_autoUnbox", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    }); // unboxing is disabled when reading child nodes

    Object.defineProperty(_this, "_isRunningAction", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    }); // only relevant for root

    Object.defineProperty(_this, "_hasSnapshotReaction", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_observableInstanceState", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
      /* UNINITIALIZED */

    });
    Object.defineProperty(_this, "_childNodes", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_initialSnapshot", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_cachedInitialSnapshot", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_cachedInitialSnapshotCreated", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_snapshotComputed", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_snapshotUponDeath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    }); // #region internal event handling

    Object.defineProperty(_this, "_internalEvents", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    _this._snapshotComputed = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["computed"])(function () {
      return freeze(_this.getSnapshot());
    });
    _this.unbox = _this.unbox.bind(_this);
    _this._initialSnapshot = freeze(initialValue);
    _this.identifierAttribute = complexType.identifierAttribute;

    if (!parent) {
      _this.identifierCache = new IdentifierCache();
    }

    _this._childNodes = complexType.initializeChildNodes(_this, _this._initialSnapshot); // identifier can not be changed during lifecycle of a node
    // so we safely can read it from initial snapshot

    _this.identifier = null;
    _this.unnormalizedIdentifier = null;

    if (_this.identifierAttribute && _this._initialSnapshot) {
      var id = _this._initialSnapshot[_this.identifierAttribute];

      if (id === undefined) {
        // try with the actual node if not (for optional identifiers)
        var childNode = _this._childNodes[_this.identifierAttribute];

        if (childNode) {
          id = childNode.value;
        }
      }

      if (typeof id !== "string" && typeof id !== "number") {
        throw fail$1("Instance identifier '" + _this.identifierAttribute + "' for type '" + _this.type.name + "' must be a string or a number");
      } // normalize internal identifier to string


      _this.identifier = normalizeIdentifier(id);
      _this.unnormalizedIdentifier = id;
    }

    if (!parent) {
      _this.identifierCache.addNodeToCache(_this);
    } else {
      parent.root.identifierCache.addNodeToCache(_this);
    }

    return _this;
  }

  Object.defineProperty(ObjectNode.prototype, "applyPatches", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (patches) {
      this.createObservableInstanceIfNeeded();

      this._applyPatches(patches);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "applySnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (snapshot) {
      this.createObservableInstanceIfNeeded();

      this._applySnapshot(snapshot);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "createObservableInstanceIfNeeded", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      if (this._observableInstanceState === 0
      /* UNINITIALIZED */
      ) {
          this.createObservableInstance();
        }
    }
  });
  Object.defineProperty(ObjectNode.prototype, "createObservableInstance", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var e_1, _a;

      if (devMode()) {
        if (this.state !== NodeLifeCycle.INITIALIZING) {
          // istanbul ignore next
          throw fail$1("assertion failed: the creation of the observable instance must be done on the initializing phase");
        }
      }

      this._observableInstanceState = 1
      /* CREATING */
      ; // make sure the parent chain is created as well
      // array with parent chain from parent to child

      var parentChain = [];
      var parent = this.parent; // for performance reasons we never go back further than the most direct
      // uninitialized parent
      // this is done to avoid traversing the whole tree to the root when using
      // the same reference again

      while (parent && parent._observableInstanceState === 0
      /* UNINITIALIZED */
      ) {
        parentChain.unshift(parent);
        parent = parent.parent;
      }

      try {
        // initialize the uninitialized parent chain from parent to child
        for (var parentChain_1 = __values(parentChain), parentChain_1_1 = parentChain_1.next(); !parentChain_1_1.done; parentChain_1_1 = parentChain_1.next()) {
          var p = parentChain_1_1.value;
          p.createObservableInstanceIfNeeded();
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (parentChain_1_1 && !parentChain_1_1.done && (_a = parentChain_1.return)) _a.call(parentChain_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }

      var type = this.type;

      try {
        this.storedValue = type.createNewInstance(this._childNodes);
        this.preboot();
        this._isRunningAction = true;
        type.finalizeNewInstance(this, this.storedValue);
      } catch (e) {
        // short-cut to die the instance, to avoid the snapshot computed starting to throw...
        this.state = NodeLifeCycle.DEAD;
        throw e;
      } finally {
        this._isRunningAction = false;
      }

      this._observableInstanceState = 2
      /* CREATED */
      ;

      this._snapshotComputed.trackAndCompute();

      if (this.isRoot) this._addSnapshotReaction();
      this._childNodes = EMPTY_OBJECT;
      this.state = NodeLifeCycle.CREATED;
      this.fireHook(Hook.afterCreate);
      this.finalizeCreation();
    }
  });
  Object.defineProperty(ObjectNode.prototype, "root", {
    get: function () {
      var parent = this.parent;
      return parent ? parent.root : this;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ObjectNode.prototype, "clearParent", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      if (!this.parent) return; // detach if attached

      this.fireHook(Hook.beforeDetach);
      var previousState = this.state;
      this.state = NodeLifeCycle.DETACHING;
      var root = this.root;
      var newEnv = root.environment;
      var newIdCache = root.identifierCache.splitCache(this);

      try {
        this.parent.removeChild(this.subpath);
        this.baseSetParent(null, "");
        this.environment = newEnv;
        this.identifierCache = newIdCache;
      } finally {
        this.state = previousState;
      }
    }
  });
  Object.defineProperty(ObjectNode.prototype, "setParent", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (newParent, subpath) {
      var parentChanged = newParent !== this.parent;
      var subpathChanged = subpath !== this.subpath;

      if (!parentChanged && !subpathChanged) {
        return;
      }

      if (devMode()) {
        if (!subpath) {
          // istanbul ignore next
          throw fail$1("assertion failed: subpath expected");
        }

        if (!newParent) {
          // istanbul ignore next
          throw fail$1("assertion failed: new parent expected");
        }

        if (this.parent && parentChanged) {
          throw fail$1("A node cannot exists twice in the state tree. Failed to add " + this + " to path '" + newParent.path + "/" + subpath + "'.");
        }

        if (!this.parent && newParent.root === this) {
          throw fail$1("A state tree is not allowed to contain itself. Cannot assign " + this + " to path '" + newParent.path + "/" + subpath + "'");
        }

        if (!this.parent && !!this.environment && this.environment !== newParent.root.environment) {
          throw fail$1("A state tree cannot be made part of another state tree as long as their environments are different.");
        }
      }

      if (parentChanged) {
        // attach to new parent
        this.environment = undefined; // will use root's

        newParent.root.identifierCache.mergeCache(this);
        this.baseSetParent(newParent, subpath);
        this.fireHook(Hook.afterAttach);
      } else if (subpathChanged) {
        // moving to a new subpath on the same parent
        this.baseSetParent(this.parent, subpath);
      }
    }
  });
  Object.defineProperty(ObjectNode.prototype, "fireHook", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (name) {
      var _this = this;

      this.fireInternalHook(name);
      var fn = this.storedValue && typeof this.storedValue === "object" && this.storedValue[name];

      if (typeof fn === "function") {
        // we check for it to allow old mobx peer dependencies that don't have the method to work (even when still bugged)
        if (mobx__WEBPACK_IMPORTED_MODULE_0__["_allowStateChangesInsideComputed"]) {
          Object(mobx__WEBPACK_IMPORTED_MODULE_0__["_allowStateChangesInsideComputed"])(function () {
            fn.apply(_this.storedValue);
          });
        } else {
          fn.apply(this.storedValue);
        }
      }
    }
  });
  Object.defineProperty(ObjectNode.prototype, "snapshot", {
    // advantage of using computed for a snapshot is that nicely respects transactions etc.
    get: function () {
      return this._snapshotComputed.get();
    },
    enumerable: false,
    configurable: true
  }); // NOTE: we use this method to get snapshot without creating @computed overhead

  Object.defineProperty(ObjectNode.prototype, "getSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      if (!this.isAlive) return this._snapshotUponDeath;
      return this._observableInstanceState === 2
      /* CREATED */
      ? this._getActualSnapshot() : this._getCachedInitialSnapshot();
    }
  });
  Object.defineProperty(ObjectNode.prototype, "_getActualSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this.type.getSnapshot(this);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "_getCachedInitialSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      if (!this._cachedInitialSnapshotCreated) {
        var type = this.type;
        var childNodes = this._childNodes;
        var snapshot = this._initialSnapshot;
        this._cachedInitialSnapshot = type.processInitialSnapshot(childNodes, snapshot);
        this._cachedInitialSnapshotCreated = true;
      }

      return this._cachedInitialSnapshot;
    }
  });
  Object.defineProperty(ObjectNode.prototype, "isRunningAction", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      if (this._isRunningAction) return true;
      if (this.isRoot) return false;
      return this.parent.isRunningAction();
    }
  });
  Object.defineProperty(ObjectNode.prototype, "assertAlive", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (context) {
      var livelinessChecking = getLivelinessChecking();

      if (!this.isAlive && livelinessChecking !== "ignore") {
        var error = this._getAssertAliveError(context);

        switch (livelinessChecking) {
          case "error":
            throw fail$1(error);

          case "warn":
            warnError(error);
        }
      }
    }
  });
  Object.defineProperty(ObjectNode.prototype, "_getAssertAliveError", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (context) {
      var escapedPath = this.getEscapedPath(false) || this.pathUponDeath || "";
      var subpath = context.subpath && escapeJsonPath(context.subpath) || "";
      var actionContext = context.actionContext || getCurrentActionContext(); // try to use a real action context if possible since it includes the action name

      if (actionContext && actionContext.type !== "action" && actionContext.parentActionEvent) {
        actionContext = actionContext.parentActionEvent;
      }

      var actionFullPath = "";

      if (actionContext && actionContext.name != null) {
        // try to use the context, and if it not available use the node one
        var actionPath = actionContext && actionContext.context && getPath(actionContext.context) || escapedPath;
        actionFullPath = actionPath + "." + actionContext.name + "()";
      }

      return "You are trying to read or write to an object that is no longer part of a state tree. (Object type: '" + this.type.name + "', Path upon death: '" + escapedPath + "', Subpath: '" + subpath + "', Action: '" + actionFullPath + "'). Either detach nodes first, or don't use objects after removing / replacing them in the tree.";
    }
  });
  Object.defineProperty(ObjectNode.prototype, "getChildNode", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (subpath) {
      this.assertAlive({
        subpath: subpath
      });
      this._autoUnbox = false;

      try {
        return this._observableInstanceState === 2
        /* CREATED */
        ? this.type.getChildNode(this, subpath) : this._childNodes[subpath];
      } finally {
        this._autoUnbox = true;
      }
    }
  });
  Object.defineProperty(ObjectNode.prototype, "getChildren", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      this.assertAlive(EMPTY_OBJECT);
      this._autoUnbox = false;

      try {
        return this._observableInstanceState === 2
        /* CREATED */
        ? this.type.getChildren(this) : convertChildNodesToArray(this._childNodes);
      } finally {
        this._autoUnbox = true;
      }
    }
  });
  Object.defineProperty(ObjectNode.prototype, "getChildType", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (propertyName) {
      return this.type.getChildType(propertyName);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "isProtected", {
    get: function () {
      return this.root.isProtectionEnabled;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ObjectNode.prototype, "assertWritable", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (context) {
      this.assertAlive(context);

      if (!this.isRunningAction() && this.isProtected) {
        throw fail$1("Cannot modify '" + this + "', the object is protected and can only be modified by using an action.");
      }
    }
  });
  Object.defineProperty(ObjectNode.prototype, "removeChild", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (subpath) {
      this.type.removeChild(this, subpath);
    }
  }); // bound on the constructor

  Object.defineProperty(ObjectNode.prototype, "unbox", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (childNode) {
      if (!childNode) return childNode;
      this.assertAlive({
        subpath: childNode.subpath || childNode.subpathUponDeath
      });
      return this._autoUnbox ? childNode.value : childNode;
    }
  });
  Object.defineProperty(ObjectNode.prototype, "toString", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var path = (this.isAlive ? this.path : this.pathUponDeath) || "<root>";
      var identifier = this.identifier ? "(id: " + this.identifier + ")" : "";
      return this.type.name + "@" + path + identifier + (this.isAlive ? "" : " [dead]");
    }
  });
  Object.defineProperty(ObjectNode.prototype, "finalizeCreation", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var _this = this;

      this.baseFinalizeCreation(function () {
        var e_2, _a;

        try {
          for (var _b = __values(_this.getChildren()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var child = _c.value;
            child.finalizeCreation();
          }
        } catch (e_2_1) {
          e_2 = {
            error: e_2_1
          };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
          } finally {
            if (e_2) throw e_2.error;
          }
        }

        _this.fireInternalHook(Hook.afterCreationFinalization);
      });
    }
  });
  Object.defineProperty(ObjectNode.prototype, "detach", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      if (!this.isAlive) throw fail$1("Error while detaching, node is not alive.");
      this.clearParent();
    }
  });
  Object.defineProperty(ObjectNode.prototype, "preboot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var self = this;
      this._applyPatches = createActionInvoker(this.storedValue, "@APPLY_PATCHES", function (patches) {
        patches.forEach(function (patch) {
          if (!patch.path) {
            self.type.applySnapshot(self, patch.value);
            return;
          }

          var parts = splitJsonPath(patch.path);
          var node = resolveNodeByPathParts(self, parts.slice(0, -1));
          node.applyPatchLocally(parts[parts.length - 1], patch);
        });
      });
      this._applySnapshot = createActionInvoker(this.storedValue, "@APPLY_SNAPSHOT", function (snapshot) {
        // if the snapshot is the same as the current one, avoid performing a reconcile
        if (snapshot === self.snapshot) return; // else, apply it by calling the type logic

        return self.type.applySnapshot(self, snapshot);
      });
      addHiddenFinalProp(this.storedValue, "$treenode", this);
      addHiddenFinalProp(this.storedValue, "toJSON", toJSON);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "die", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      if (!this.isAlive || this.state === NodeLifeCycle.DETACHING) return;
      this.aboutToDie();
      this.finalizeDeath();
    }
  });
  Object.defineProperty(ObjectNode.prototype, "aboutToDie", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      if (this._observableInstanceState === 0
      /* UNINITIALIZED */
      ) {
          return;
        }

      this.getChildren().forEach(function (node) {
        node.aboutToDie();
      }); // beforeDestroy should run before the disposers since else we could end up in a situation where
      // a disposer added with addDisposer at this stage (beforeDestroy) is actually never released

      this.baseAboutToDie();

      this._internalEventsEmit("dispose"
      /* Dispose */
      );

      this._internalEventsClear("dispose"
      /* Dispose */
      );
    }
  });
  Object.defineProperty(ObjectNode.prototype, "finalizeDeath", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      // invariant: not called directly but from "die"
      this.getChildren().forEach(function (node) {
        node.finalizeDeath();
      });
      this.root.identifierCache.notifyDied(this); // "kill" the computed prop and just store the last snapshot

      var snapshot = this.snapshot;
      this._snapshotUponDeath = snapshot;

      this._internalEventsClearAll();

      this.baseFinalizeDeath();
    }
  });
  Object.defineProperty(ObjectNode.prototype, "onSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (onChange) {
      this._addSnapshotReaction();

      return this._internalEventsRegister("snapshot"
      /* Snapshot */
      , onChange);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "emitSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (snapshot) {
      this._internalEventsEmit("snapshot"
      /* Snapshot */
      , snapshot);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "onPatch", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (handler) {
      return this._internalEventsRegister("patch"
      /* Patch */
      , handler);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "emitPatch", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (basePatch, source) {
      if (this._internalEventsHasSubscribers("patch"
      /* Patch */
      )) {
        var localizedPatch = extend({}, basePatch, {
          path: source.path.substr(this.path.length) + "/" + basePatch.path // calculate the relative path of the patch

        });

        var _a = __read(splitPatch(localizedPatch), 2),
            patch = _a[0],
            reversePatch = _a[1];

        this._internalEventsEmit("patch"
        /* Patch */
        , patch, reversePatch);
      }

      if (this.parent) this.parent.emitPatch(basePatch, source);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "hasDisposer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (disposer) {
      return this._internalEventsHas("dispose"
      /* Dispose */
      , disposer);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "addDisposer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (disposer) {
      if (!this.hasDisposer(disposer)) {
        this._internalEventsRegister("dispose"
        /* Dispose */
        , disposer, true);

        return;
      }

      throw fail$1("cannot add a disposer when it is already registered for execution");
    }
  });
  Object.defineProperty(ObjectNode.prototype, "removeDisposer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (disposer) {
      if (!this._internalEventsHas("dispose"
      /* Dispose */
      , disposer)) {
        throw fail$1("cannot remove a disposer which was never registered for execution");
      }

      this._internalEventsUnregister("dispose"
      /* Dispose */
      , disposer);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "removeMiddleware", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (middleware) {
      if (this.middlewares) {
        var index = this.middlewares.indexOf(middleware);

        if (index >= 0) {
          this.middlewares.splice(index, 1);
        }
      }
    }
  });
  Object.defineProperty(ObjectNode.prototype, "addMiddleWare", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (handler, includeHooks) {
      var _this = this;

      if (includeHooks === void 0) {
        includeHooks = true;
      }

      var middleware = {
        handler: handler,
        includeHooks: includeHooks
      };
      if (!this.middlewares) this.middlewares = [middleware];else this.middlewares.push(middleware);
      return function () {
        _this.removeMiddleware(middleware);
      };
    }
  });
  Object.defineProperty(ObjectNode.prototype, "applyPatchLocally", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (subpath, patch) {
      this.assertWritable({
        subpath: subpath
      });
      this.createObservableInstanceIfNeeded();
      this.type.applyPatchLocally(this, subpath, patch);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "_addSnapshotReaction", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var _this = this;

      if (!this._hasSnapshotReaction) {
        var snapshotDisposer = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["reaction"])(function () {
          return _this.snapshot;
        }, function (snapshot) {
          return _this.emitSnapshot(snapshot);
        }, snapshotReactionOptions);
        this.addDisposer(snapshotDisposer);
        this._hasSnapshotReaction = true;
      }
    }
  }); // we proxy the methods to avoid creating an EventHandlers instance when it is not needed

  Object.defineProperty(ObjectNode.prototype, "_internalEventsHasSubscribers", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (event) {
      return !!this._internalEvents && this._internalEvents.hasSubscribers(event);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "_internalEventsRegister", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (event, eventHandler, atTheBeginning) {
      if (atTheBeginning === void 0) {
        atTheBeginning = false;
      }

      if (!this._internalEvents) {
        this._internalEvents = new EventHandlers();
      }

      return this._internalEvents.register(event, eventHandler, atTheBeginning);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "_internalEventsHas", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (event, eventHandler) {
      return !!this._internalEvents && this._internalEvents.has(event, eventHandler);
    }
  });
  Object.defineProperty(ObjectNode.prototype, "_internalEventsUnregister", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (event, eventHandler) {
      if (this._internalEvents) {
        this._internalEvents.unregister(event, eventHandler);
      }
    }
  });
  Object.defineProperty(ObjectNode.prototype, "_internalEventsEmit", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (event) {
      var _a;

      var args = [];

      for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
      }

      if (this._internalEvents) {
        (_a = this._internalEvents).emit.apply(_a, __spread([event], args));
      }
    }
  });
  Object.defineProperty(ObjectNode.prototype, "_internalEventsClear", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (event) {
      if (this._internalEvents) {
        this._internalEvents.clear(event);
      }
    }
  });
  Object.defineProperty(ObjectNode.prototype, "_internalEventsClearAll", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      if (this._internalEvents) {
        this._internalEvents.clearAll();
      }
    }
  });
  return ObjectNode;
}(BaseNode);

ObjectNode.prototype.createObservableInstance = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["action"])(ObjectNode.prototype.createObservableInstance);
ObjectNode.prototype.detach = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["action"])(ObjectNode.prototype.detach);
ObjectNode.prototype.die = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["action"])(ObjectNode.prototype.die);

var _a;
/**
 * @internal
 * @hidden
 */


var TypeFlags;

(function (TypeFlags) {
  TypeFlags[TypeFlags["String"] = 1] = "String";
  TypeFlags[TypeFlags["Number"] = 2] = "Number";
  TypeFlags[TypeFlags["Boolean"] = 4] = "Boolean";
  TypeFlags[TypeFlags["Date"] = 8] = "Date";
  TypeFlags[TypeFlags["Literal"] = 16] = "Literal";
  TypeFlags[TypeFlags["Array"] = 32] = "Array";
  TypeFlags[TypeFlags["Map"] = 64] = "Map";
  TypeFlags[TypeFlags["Object"] = 128] = "Object";
  TypeFlags[TypeFlags["Frozen"] = 256] = "Frozen";
  TypeFlags[TypeFlags["Optional"] = 512] = "Optional";
  TypeFlags[TypeFlags["Reference"] = 1024] = "Reference";
  TypeFlags[TypeFlags["Identifier"] = 2048] = "Identifier";
  TypeFlags[TypeFlags["Late"] = 4096] = "Late";
  TypeFlags[TypeFlags["Refinement"] = 8192] = "Refinement";
  TypeFlags[TypeFlags["Union"] = 16384] = "Union";
  TypeFlags[TypeFlags["Null"] = 32768] = "Null";
  TypeFlags[TypeFlags["Undefined"] = 65536] = "Undefined";
  TypeFlags[TypeFlags["Integer"] = 131072] = "Integer";
  TypeFlags[TypeFlags["Custom"] = 262144] = "Custom";
  TypeFlags[TypeFlags["SnapshotProcessor"] = 524288] = "SnapshotProcessor";
})(TypeFlags || (TypeFlags = {}));
/**
 * @internal
 * @hidden
 */


var cannotDetermineSubtype = "cannotDetermine";
/** @hidden */

var $type = Symbol("$type");
/**
 * A base type produces a MST node (Node in the state tree)
 *
 * @internal
 * @hidden
 */

var BaseType =
/** @class */
function () {
  function BaseType(name) {
    Object.defineProperty(this, _a, {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    }); // these are just to make inner types avaialable to inherited classes

    Object.defineProperty(this, "C", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "S", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "T", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "N", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "isType", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.name = name;
  }

  Object.defineProperty(BaseType.prototype, "create", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (snapshot, environment) {
      typecheckInternal(this, snapshot);
      return this.instantiate(null, "", environment, snapshot).value;
    }
  });
  Object.defineProperty(BaseType.prototype, "getSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, applyPostProcess) {
      // istanbul ignore next
      throw fail$1("unimplemented method");
    }
  });
  Object.defineProperty(BaseType.prototype, "isAssignableFrom", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (type) {
      return type === this;
    }
  });
  Object.defineProperty(BaseType.prototype, "validate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      var node = getStateTreeNodeSafe(value);

      if (node) {
        var valueType = getType(value);
        return this.isAssignableFrom(valueType) ? typeCheckSuccess() : typeCheckFailure(context, value); // it is tempting to compare snapshots, but in that case we should always clone on assignments...
      }

      return this.isValidSnapshot(value, context);
    }
  });
  Object.defineProperty(BaseType.prototype, "is", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (thing) {
      return this.validate(thing, [{
        path: "",
        type: this
      }]).length === 0;
    }
  });
  Object.defineProperty(BaseType.prototype, "Type", {
    get: function () {
      // istanbul ignore next
      throw fail$1("Factory.Type should not be actually called. It is just a Type signature that can be used at compile time with Typescript, by using `typeof type.Type`");
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseType.prototype, "TypeWithoutSTN", {
    get: function () {
      // istanbul ignore next
      throw fail$1("Factory.TypeWithoutSTN should not be actually called. It is just a Type signature that can be used at compile time with Typescript, by using `typeof type.TypeWithoutSTN`");
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseType.prototype, "SnapshotType", {
    get: function () {
      // istanbul ignore next
      throw fail$1("Factory.SnapshotType should not be actually called. It is just a Type signature that can be used at compile time with Typescript, by using `typeof type.SnapshotType`");
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseType.prototype, "CreationType", {
    get: function () {
      // istanbul ignore next
      throw fail$1("Factory.CreationType should not be actually called. It is just a Type signature that can be used at compile time with Typescript, by using `typeof type.CreationType`");
    },
    enumerable: false,
    configurable: true
  });
  return BaseType;
}();

_a = $type;
BaseType.prototype.create = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["action"])(BaseType.prototype.create);
/**
 * A complex type produces a MST node (Node in the state tree)
 *
 * @internal
 * @hidden
 */

var ComplexType =
/** @class */
function (_super) {
  __extends(ComplexType, _super);

  function ComplexType(name) {
    var _this = _super.call(this, name) || this;

    Object.defineProperty(_this, "identifierAttribute", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    return _this;
  }

  Object.defineProperty(ComplexType.prototype, "create", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (snapshot, environment) {
      if (snapshot === void 0) {
        snapshot = this.getDefaultSnapshot();
      }

      return _super.prototype.create.call(this, snapshot, environment);
    }
  });
  Object.defineProperty(ComplexType.prototype, "getValue", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      node.createObservableInstanceIfNeeded();
      return node.storedValue;
    }
  });
  Object.defineProperty(ComplexType.prototype, "tryToReconcileNode", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (current, newValue) {
      if (current.isDetaching) return false;

      if (current.snapshot === newValue) {
        // newValue is the current snapshot of the node, noop
        return true;
      }

      if (isStateTreeNode(newValue) && getStateTreeNode(newValue) === current) {
        // the current node is the same as the new one
        return true;
      }

      if (current.type === this && isMutable(newValue) && !isStateTreeNode(newValue) && (!current.identifierAttribute || current.identifier === normalizeIdentifier(newValue[current.identifierAttribute]))) {
        // the newValue has no node, so can be treated like a snapshot
        // we can reconcile
        current.applySnapshot(newValue);
        return true;
      }

      return false;
    }
  });
  Object.defineProperty(ComplexType.prototype, "reconcile", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (current, newValue, parent, subpath) {
      var nodeReconciled = this.tryToReconcileNode(current, newValue);

      if (nodeReconciled) {
        current.setParent(parent, subpath);
        return current;
      } // current node cannot be recycled in any way


      current.die(); // noop if detaching
      // attempt to reuse the new one

      if (isStateTreeNode(newValue) && this.isAssignableFrom(getType(newValue))) {
        // newValue is a Node as well, move it here..
        var newNode = getStateTreeNode(newValue);
        newNode.setParent(parent, subpath);
        return newNode;
      } // nothing to do, we have to create a new node


      return this.instantiate(parent, subpath, undefined, newValue);
    }
  });
  Object.defineProperty(ComplexType.prototype, "getSubTypes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return null;
    }
  });
  return ComplexType;
}(BaseType);

ComplexType.prototype.create = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["action"])(ComplexType.prototype.create);
/**
 * @internal
 * @hidden
 */

var SimpleType =
/** @class */
function (_super) {
  __extends(SimpleType, _super);

  function SimpleType() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(SimpleType.prototype, "createNewInstance", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (snapshot) {
      return snapshot;
    }
  });
  Object.defineProperty(SimpleType.prototype, "getValue", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      // if we ever find a case where scalar nodes can be accessed without iterating through its parent
      // uncomment this to make sure the parent chain is created when this is accessed
      // if (node.parent) {
      //     node.parent.createObservableInstanceIfNeeded()
      // }
      return node.storedValue;
    }
  });
  Object.defineProperty(SimpleType.prototype, "getSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      return node.storedValue;
    }
  });
  Object.defineProperty(SimpleType.prototype, "reconcile", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (current, newValue, parent, subpath) {
      // reconcile only if type and value are still the same, and only if the node is not detaching
      if (!current.isDetaching && current.type === this && current.storedValue === newValue) {
        return current;
      }

      var res = this.instantiate(parent, subpath, undefined, newValue);
      current.die(); // noop if detaching

      return res;
    }
  });
  Object.defineProperty(SimpleType.prototype, "getSubTypes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return null;
    }
  });
  return SimpleType;
}(BaseType);
/**
 * Returns if a given value represents a type.
 *
 * @param value Value to check.
 * @returns `true` if the value is a type.
 */


function isType(value) {
  return typeof value === "object" && value && value.isType === true;
}
/**
 * @internal
 * @hidden
 */


function assertIsType(type, argNumber) {
  assertArg(type, isType, "mobx-state-tree type", argNumber);
}

var runningActions = new Map();
/**
 * Note: Consider migrating to `createActionTrackingMiddleware2`, it is easier to use.
 *
 * Convenience utility to create action based middleware that supports async processes more easily.
 * All hooks are called for both synchronous and asynchronous actions. Except that either `onSuccess` or `onFail` is called
 *
 * The create middleware tracks the process of an action (assuming it passes the `filter`).
 * `onResume` can return any value, which will be passed as second argument to any other hook. This makes it possible to keep state during a process.
 *
 * See the `atomic` middleware for an example
 *
 * @param hooks
 * @returns
 */

function createActionTrackingMiddleware(hooks) {
  return function actionTrackingMiddleware(call, next, abort) {
    switch (call.type) {
      case "action":
        {
          if (!hooks.filter || hooks.filter(call) === true) {
            var context = hooks.onStart(call);
            hooks.onResume(call, context);
            runningActions.set(call.id, {
              call: call,
              context: context,
              async: false
            });

            try {
              var res = next(call);
              hooks.onSuspend(call, context);

              if (runningActions.get(call.id).async === false) {
                runningActions.delete(call.id);
                hooks.onSuccess(call, context, res);
              }

              return res;
            } catch (e) {
              runningActions.delete(call.id);
              hooks.onFail(call, context, e);
              throw e;
            }
          } else {
            return next(call);
          }
        }

      case "flow_spawn":
        {
          var root = runningActions.get(call.rootId);
          root.async = true;
          return next(call);
        }

      case "flow_resume":
      case "flow_resume_error":
        {
          var root = runningActions.get(call.rootId);
          hooks.onResume(call, root.context);

          try {
            return next(call);
          } finally {
            hooks.onSuspend(call, root.context);
          }
        }

      case "flow_throw":
        {
          var root = runningActions.get(call.rootId);
          runningActions.delete(call.rootId);
          hooks.onFail(call, root.context, call.args[0]);
          return next(call);
        }

      case "flow_return":
        {
          var root = runningActions.get(call.rootId);
          runningActions.delete(call.rootId);
          hooks.onSuccess(call, root.context, call.args[0]);
          return next(call);
        }
    }
  };
}

var RunningAction =
/** @class */
function () {
  function RunningAction(hooks, call) {
    Object.defineProperty(this, "hooks", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: hooks
    });
    Object.defineProperty(this, "call", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: call
    });
    Object.defineProperty(this, "flowsPending", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "running", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    });

    if (hooks) {
      hooks.onStart(call);
    }
  }

  Object.defineProperty(RunningAction.prototype, "finish", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (error) {
      if (this.running) {
        this.running = false;

        if (this.hooks) {
          this.hooks.onFinish(this.call, error);
        }
      }
    }
  });
  Object.defineProperty(RunningAction.prototype, "incFlowsPending", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      this.flowsPending++;
    }
  });
  Object.defineProperty(RunningAction.prototype, "decFlowsPending", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      this.flowsPending--;
    }
  });
  Object.defineProperty(RunningAction.prototype, "hasFlowsPending", {
    get: function () {
      return this.flowsPending > 0;
    },
    enumerable: false,
    configurable: true
  });
  return RunningAction;
}();
/**
 * Convenience utility to create action based middleware that supports async processes more easily.
 * The flow is like this:
 * - for each action: if filter passes -> `onStart` -> (inner actions recursively) -> `onFinish`
 *
 * Example: if we had an action `a` that called inside an action `b1`, then `b2` the flow would be:
 * - `filter(a)`
 * - `onStart(a)`
 *   - `filter(b1)`
 *   - `onStart(b1)`
 *   - `onFinish(b1)`
 *   - `filter(b2)`
 *   - `onStart(b2)`
 *   - `onFinish(b2)`
 * - `onFinish(a)`
 *
 * The flow is the same no matter if the actions are sync or async.
 *
 * See the `atomic` middleware for an example
 *
 * @param hooks
 * @returns
 */


function createActionTrackingMiddleware2(middlewareHooks) {
  var runningActions = new WeakMap();
  return function actionTrackingMiddleware(call, next) {
    // find parentRunningAction
    var parentRunningAction = call.parentActionEvent ? runningActions.get(call.parentActionEvent) : undefined;

    if (call.type === "action") {
      var newCall = __assign(__assign({}, call), {
        // make a shallow copy of the parent action env
        env: parentRunningAction && parentRunningAction.call.env,
        parentCall: parentRunningAction && parentRunningAction.call
      });

      var passesFilter = !middlewareHooks.filter || middlewareHooks.filter(newCall);
      var hooks = passesFilter ? middlewareHooks : undefined;
      var runningAction = new RunningAction(hooks, newCall);
      runningActions.set(call, runningAction);
      var res = void 0;

      try {
        res = next(call);
      } catch (e) {
        runningAction.finish(e);
        throw e;
      }

      if (!runningAction.hasFlowsPending) {
        // sync action finished
        runningAction.finish();
      }

      return res;
    } else {
      if (!parentRunningAction) {
        return next(call);
      }

      switch (call.type) {
        case "flow_spawn":
          {
            parentRunningAction.incFlowsPending();
            return next(call);
          }

        case "flow_resume":
        case "flow_resume_error":
          {
            return next(call);
          }

        case "flow_throw":
          {
            var error = call.args[0];

            try {
              return next(call);
            } finally {
              parentRunningAction.decFlowsPending();

              if (!parentRunningAction.hasFlowsPending) {
                parentRunningAction.finish(error);
              }
            }
          }

        case "flow_return":
          {
            try {
              return next(call);
            } finally {
              parentRunningAction.decFlowsPending();

              if (!parentRunningAction.hasFlowsPending) {
                parentRunningAction.finish();
              }
            }
          }
      }
    }
  };
}

function serializeArgument(node, actionName, index, arg) {
  if (arg instanceof Date) return {
    $MST_DATE: arg.getTime()
  };
  if (isPrimitive(arg)) return arg; // We should not serialize MST nodes, even if we can, because we don't know if the receiving party can handle a raw snapshot instead of an
  // MST type instance. So if one wants to serialize a MST node that was pass in, either explitly pass: 1: an id, 2: a (relative) path, 3: a snapshot

  if (isStateTreeNode(arg)) return serializeTheUnserializable("[MSTNode: " + getType(arg).name + "]");
  if (typeof arg === "function") return serializeTheUnserializable("[function]");
  if (typeof arg === "object" && !isPlainObject(arg) && !isArray(arg)) return serializeTheUnserializable("[object " + (arg && arg.constructor && arg.constructor.name || "Complex Object") + "]");

  try {
    // Check if serializable, cycle free etc...
    // MWE: there must be a better way....
    JSON.stringify(arg); // or throws

    return arg;
  } catch (e) {
    return serializeTheUnserializable("" + e);
  }
}

function deserializeArgument(adm, value) {
  if (value && typeof value === "object" && "$MST_DATE" in value) return new Date(value["$MST_DATE"]);
  return value;
}

function serializeTheUnserializable(baseType) {
  return {
    $MST_UNSERIALIZABLE: true,
    type: baseType
  };
}
/**
 * Applies an action or a series of actions in a single MobX transaction.
 * Does not return any value
 * Takes an action description as produced by the `onAction` middleware.
 *
 * @param target
 * @param actions
 */


function applyAction(target, actions) {
  // check all arguments
  assertIsStateTreeNode(target, 1);
  assertArg(actions, function (a) {
    return typeof a === "object";
  }, "object or array", 2);
  Object(mobx__WEBPACK_IMPORTED_MODULE_0__["runInAction"])(function () {
    asArray(actions).forEach(function (action) {
      return baseApplyAction(target, action);
    });
  });
}

function baseApplyAction(target, action) {
  var resolvedTarget = tryResolve(target, action.path || "");
  if (!resolvedTarget) throw fail$1("Invalid action path: " + (action.path || ""));
  var node = getStateTreeNode(resolvedTarget); // Reserved functions

  if (action.name === "@APPLY_PATCHES") {
    return applyPatch.call(null, resolvedTarget, action.args[0]);
  }

  if (action.name === "@APPLY_SNAPSHOT") {
    return applySnapshot.call(null, resolvedTarget, action.args[0]);
  }

  if (!(typeof resolvedTarget[action.name] === "function")) throw fail$1("Action '" + action.name + "' does not exist in '" + node.path + "'");
  return resolvedTarget[action.name].apply(resolvedTarget, action.args ? action.args.map(function (v) {
    return deserializeArgument(node, v);
  }) : []);
}
/**
 * Small abstraction around `onAction` and `applyAction`, attaches an action listener to a tree and records all the actions emitted.
 * Returns an recorder object with the following signature:
 *
 * Example:
 * ```ts
 * export interface IActionRecorder {
 *      // the recorded actions
 *      actions: ISerializedActionCall[]
 *      // true if currently recording
 *      recording: boolean
 *      // stop recording actions
 *      stop(): void
 *      // resume recording actions
 *      resume(): void
 *      // apply all the recorded actions on the given object
 *      replay(target: IAnyStateTreeNode): void
 * }
 * ```
 *
 * The optional filter function allows to skip recording certain actions.
 *
 * @param subject
 * @returns
 */


function recordActions(subject, filter) {
  // check all arguments
  assertIsStateTreeNode(subject, 1);
  var actions = [];

  var listener = function (call) {
    var recordThis = filter ? filter(call, getRunningActionContext()) : true;

    if (recordThis) {
      actions.push(call);
    }
  };

  var disposer;
  var recorder = {
    actions: actions,

    get recording() {
      return !!disposer;
    },

    stop: function () {
      if (disposer) {
        disposer();
        disposer = undefined;
      }
    },
    resume: function () {
      if (disposer) return;
      disposer = onAction(subject, listener);
    },
    replay: function (target) {
      applyAction(target, actions);
    }
  };
  recorder.resume();
  return recorder;
}
/**
 * Registers a function that will be invoked for each action that is called on the provided model instance, or to any of its children.
 * See [actions](https://github.com/mobxjs/mobx-state-tree#actions) for more details. onAction events are emitted only for the outermost called action in the stack.
 * Action can also be intercepted by middleware using addMiddleware to change the function call before it will be run.
 *
 * Not all action arguments might be serializable. For unserializable arguments, a struct like `{ $MST_UNSERIALIZABLE: true, type: "someType" }` will be generated.
 * MST Nodes are considered non-serializable as well (they could be serialized as there snapshot, but it is uncertain whether an replaying party will be able to handle such a non-instantiated snapshot).
 * Rather, when using `onAction` middleware, one should consider in passing arguments which are 1: an id, 2: a (relative) path, or 3: a snapshot. Instead of a real MST node.
 *
 * Example:
 * ```ts
 * const Todo = types.model({
 *   task: types.string
 * })
 *
 * const TodoStore = types.model({
 *   todos: types.array(Todo)
 * }).actions(self => ({
 *   add(todo) {
 *     self.todos.push(todo);
 *   }
 * }))
 *
 * const s = TodoStore.create({ todos: [] })
 *
 * let disposer = onAction(s, (call) => {
 *   console.log(call);
 * })
 *
 * s.add({ task: "Grab a coffee" })
 * // Logs: { name: "add", path: "", args: [{ task: "Grab a coffee" }] }
 * ```
 *
 * @param target
 * @param listener
 * @param attachAfter (default false) fires the listener *after* the action has executed instead of before.
 * @returns
 */


function onAction(target, listener, attachAfter) {
  if (attachAfter === void 0) {
    attachAfter = false;
  } // check all arguments


  assertIsStateTreeNode(target, 1);

  if (devMode()) {
    if (!isRoot(target)) warnError("Warning: Attaching onAction listeners to non root nodes is dangerous: No events will be emitted for actions initiated higher up in the tree.");
    if (!isProtected(target)) warnError("Warning: Attaching onAction listeners to non protected nodes is dangerous: No events will be emitted for direct modifications without action.");
  }

  return addMiddleware(target, function handler(rawCall, next) {
    if (rawCall.type === "action" && rawCall.id === rawCall.rootId) {
      var sourceNode_1 = getStateTreeNode(rawCall.context);
      var info = {
        name: rawCall.name,
        path: getRelativePathBetweenNodes(getStateTreeNode(target), sourceNode_1),
        args: rawCall.args.map(function (arg, index) {
          return serializeArgument(sourceNode_1, rawCall.name, index, arg);
        })
      };

      if (attachAfter) {
        var res = next(rawCall);
        listener(info);
        return res;
      } else {
        listener(info);
        return next(rawCall);
      }
    } else {
      return next(rawCall);
    }
  });
}

var nextActionId = 1;
var currentActionContext;
/**
 * @internal
 * @hidden
 */

function getCurrentActionContext() {
  return currentActionContext;
}
/**
 * @internal
 * @hidden
 */


function getNextActionId() {
  return nextActionId++;
} // TODO: optimize away entire action context if there is no middleware in tree?

/**
 * @internal
 * @hidden
 */


function runWithActionContext(context, fn) {
  var node = getStateTreeNode(context.context);

  if (context.type === "action") {
    node.assertAlive({
      actionContext: context
    });
  }

  var baseIsRunningAction = node._isRunningAction;
  node._isRunningAction = true;
  var previousContext = currentActionContext;
  currentActionContext = context;

  try {
    return runMiddleWares(node, context, fn);
  } finally {
    currentActionContext = previousContext;
    node._isRunningAction = baseIsRunningAction;
  }
}
/**
 * @internal
 * @hidden
 */


function getParentActionContext(parentContext) {
  if (!parentContext) return undefined;
  if (parentContext.type === "action") return parentContext;
  return parentContext.parentActionEvent;
}
/**
 * @internal
 * @hidden
 */


function createActionInvoker(target, name, fn) {
  var res = function () {
    var id = getNextActionId();
    var parentContext = currentActionContext;
    var parentActionContext = getParentActionContext(parentContext);
    return runWithActionContext({
      type: "action",
      name: name,
      id: id,
      args: argsToArray(arguments),
      context: target,
      tree: getRoot(target),
      rootId: parentContext ? parentContext.rootId : id,
      parentId: parentContext ? parentContext.id : 0,
      allParentIds: parentContext ? __spread(parentContext.allParentIds, [parentContext.id]) : [],
      parentEvent: parentContext,
      parentActionEvent: parentActionContext
    }, fn);
  };

  res._isMSTAction = true;
  return res;
}
/**
 * Middleware can be used to intercept any action is invoked on the subtree where it is attached.
 * If a tree is protected (by default), this means that any mutation of the tree will pass through your middleware.
 *
 * For more details, see the [middleware docs](concepts/middleware.md)
 *
 * @param target Node to apply the middleware to.
 * @param middleware Middleware to apply.
 * @returns A callable function to dispose the middleware.
 */


function addMiddleware(target, handler, includeHooks) {
  if (includeHooks === void 0) {
    includeHooks = true;
  }

  var node = getStateTreeNode(target);

  if (devMode()) {
    if (!node.isProtectionEnabled) {
      warnError("It is recommended to protect the state tree before attaching action middleware, as otherwise it cannot be guaranteed that all changes are passed through middleware. See `protect`");
    }
  }

  return node.addMiddleWare(handler, includeHooks);
}
/**
 * Binds middleware to a specific action.
 *
 * Example:
 * ```ts
 * type.actions(self => {
 *   function takeA____() {
 *       self.toilet.donate()
 *       self.wipe()
 *       self.wipe()
 *       self.toilet.flush()
 *   }
 *   return {
 *     takeA____: decorate(atomic, takeA____)
 *   }
 * })
 * ```
 *
 * @param handler
 * @param fn
 * @param includeHooks
 * @returns The original function
 */


function decorate(handler, fn, includeHooks) {
  if (includeHooks === void 0) {
    includeHooks = true;
  }

  var middleware = {
    handler: handler,
    includeHooks: includeHooks
  };
  fn.$mst_middleware = fn.$mst_middleware || [];
  fn.$mst_middleware.push(middleware);
  return fn;
}

var CollectedMiddlewares =
/** @class */
function () {
  function CollectedMiddlewares(node, fn) {
    Object.defineProperty(this, "arrayIndex", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "inArrayIndex", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "middlewares", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    }); // we just push middleware arrays into an array of arrays to avoid making copies

    if (fn.$mst_middleware) {
      this.middlewares.push(fn.$mst_middleware);
    }

    var n = node; // Find all middlewares. Optimization: cache this?

    while (n) {
      if (n.middlewares) this.middlewares.push(n.middlewares);
      n = n.parent;
    }
  }

  Object.defineProperty(CollectedMiddlewares.prototype, "isEmpty", {
    get: function () {
      return this.middlewares.length <= 0;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(CollectedMiddlewares.prototype, "getNextMiddleware", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var array = this.middlewares[this.arrayIndex];
      if (!array) return undefined;
      var item = array[this.inArrayIndex++];

      if (!item) {
        this.arrayIndex++;
        this.inArrayIndex = 0;
        return this.getNextMiddleware();
      }

      return item;
    }
  });
  return CollectedMiddlewares;
}();

function runMiddleWares(node, baseCall, originalFn) {
  var middlewares = new CollectedMiddlewares(node, originalFn); // Short circuit

  if (middlewares.isEmpty) return Object(mobx__WEBPACK_IMPORTED_MODULE_0__["action"])(originalFn).apply(null, baseCall.args);
  var result = null;

  function runNextMiddleware(call) {
    var middleware = middlewares.getNextMiddleware();
    var handler = middleware && middleware.handler;

    if (!handler) {
      return Object(mobx__WEBPACK_IMPORTED_MODULE_0__["action"])(originalFn).apply(null, call.args);
    } // skip hooks if asked to


    if (!middleware.includeHooks && Hook[call.name]) {
      return runNextMiddleware(call);
    }

    var nextInvoked = false;

    function next(call2, callback) {
      nextInvoked = true; // the result can contain
      // - the non manipulated return value from an action
      // - the non manipulated abort value
      // - one of the above but manipulated through the callback function

      result = runNextMiddleware(call2);

      if (callback) {
        result = callback(result);
      }
    }

    var abortInvoked = false;

    function abort(value) {
      abortInvoked = true; // overwrite the result
      // can be manipulated through middlewares earlier in the queue using the callback fn

      result = value;
    }

    handler(call, next, abort);

    if (devMode()) {
      if (!nextInvoked && !abortInvoked) {
        var node2 = getStateTreeNode(call.tree);
        throw fail$1("Neither the next() nor the abort() callback within the middleware " + handler.name + " for the action: \"" + call.name + "\" on the node: " + node2.type.name + " was invoked.");
      } else if (nextInvoked && abortInvoked) {
        var node2 = getStateTreeNode(call.tree);
        throw fail$1("The next() and abort() callback within the middleware " + handler.name + " for the action: \"" + call.name + "\" on the node: " + node2.type.name + " were invoked.");
      }
    }

    return result;
  }

  return runNextMiddleware(baseCall);
}
/**
 * Returns the currently executing MST action context, or undefined if none.
 */


function getRunningActionContext() {
  var current = getCurrentActionContext();

  while (current && current.type !== "action") {
    current = current.parentActionEvent;
  }

  return current;
}

function _isActionContextThisOrChildOf(actionContext, sameOrParent, includeSame) {
  var parentId = typeof sameOrParent === "number" ? sameOrParent : sameOrParent.id;
  var current = includeSame ? actionContext : actionContext.parentActionEvent;

  while (current) {
    if (current.id === parentId) {
      return true;
    }

    current = current.parentActionEvent;
  }

  return false;
}
/**
 * Returns if the given action context is a parent of this action context.
 */


function isActionContextChildOf(actionContext, parent) {
  return _isActionContextThisOrChildOf(actionContext, parent, false);
}
/**
 * Returns if the given action context is this or a parent of this action context.
 */


function isActionContextThisOrChildOf(actionContext, parentOrThis) {
  return _isActionContextThisOrChildOf(actionContext, parentOrThis, true);
}

function safeStringify(value) {
  try {
    return JSON.stringify(value);
  } catch (e) {
    // istanbul ignore next
    return "<Unserializable: " + e + ">";
  }
}
/**
 * @internal
 * @hidden
 */


function prettyPrintValue(value) {
  return typeof value === "function" ? "<function" + (value.name ? " " + value.name : "") + ">" : isStateTreeNode(value) ? "<" + value + ">" : "`" + safeStringify(value) + "`";
}

function shortenPrintValue(valueInString) {
  return valueInString.length < 280 ? valueInString : valueInString.substring(0, 272) + "......" + valueInString.substring(valueInString.length - 8);
}

function toErrorString(error) {
  var value = error.value;
  var type = error.context[error.context.length - 1].type;
  var fullPath = error.context.map(function (_a) {
    var path = _a.path;
    return path;
  }).filter(function (path) {
    return path.length > 0;
  }).join("/");
  var pathPrefix = fullPath.length > 0 ? "at path \"/" + fullPath + "\" " : "";
  var currentTypename = isStateTreeNode(value) ? "value of type " + getStateTreeNode(value).type.name + ":" : isPrimitive(value) ? "value" : "snapshot";
  var isSnapshotCompatible = type && isStateTreeNode(value) && type.is(getStateTreeNode(value).snapshot);
  return "" + pathPrefix + currentTypename + " " + prettyPrintValue(value) + " is not assignable " + (type ? "to type: `" + type.name + "`" : "") + (error.message ? " (" + error.message + ")" : "") + (type ? isPrimitiveType(type) || isPrimitive(value) ? "." : ", expected an instance of `" + type.name + "` or a snapshot like `" + type.describe() + "` instead." + (isSnapshotCompatible ? " (Note that a snapshot of the provided value is compatible with the targeted type)" : "") : ".");
}
/**
 * @internal
 * @hidden
 */


function getContextForPath(context, path, type) {
  return context.concat([{
    path: path,
    type: type
  }]);
}
/**
 * @internal
 * @hidden
 */


function typeCheckSuccess() {
  return EMPTY_ARRAY;
}
/**
 * @internal
 * @hidden
 */


function typeCheckFailure(context, value, message) {
  return [{
    context: context,
    value: value,
    message: message
  }];
}
/**
 * @internal
 * @hidden
 */


function flattenTypeErrors(errors) {
  return errors.reduce(function (a, i) {
    return a.concat(i);
  }, []);
} // TODO; doublecheck: typecheck should only needed to be invoked from: type.create and array / map / value.property will change

/**
 * @internal
 * @hidden
 */


function typecheckInternal(type, value) {
  // runs typeChecking if it is in dev-mode or through a process.env.ENABLE_TYPE_CHECK flag
  if (isTypeCheckingEnabled()) {
    typecheck(type, value);
  }
}
/**
 * Run's the typechecker for the given type on the given value, which can be a snapshot or an instance.
 * Throws if the given value is not according the provided type specification.
 * Use this if you need typechecks even in a production build (by default all automatic runtime type checks will be skipped in production builds)
 *
 * @param type Type to check against.
 * @param value Value to be checked, either a snapshot or an instance.
 */


function typecheck(type, value) {
  var errors = type.validate(value, [{
    path: "",
    type: type
  }]);

  if (errors.length > 0) {
    throw fail$1(validationErrorsToString(type, value, errors));
  }
}

function validationErrorsToString(type, value, errors) {
  if (errors.length === 0) {
    return undefined;
  }

  return "Error while converting " + shortenPrintValue(prettyPrintValue(value)) + " to `" + type.name + "`:\n\n    " + errors.map(toErrorString).join("\n    ");
}

var identifierCacheId = 0;
/**
 * @internal
 * @hidden
 */

var IdentifierCache =
/** @class */
function () {
  function IdentifierCache() {
    Object.defineProperty(this, "cacheId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: identifierCacheId++
    }); // n.b. in cache all identifiers are normalized to strings

    Object.defineProperty(this, "cache", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: mobx__WEBPACK_IMPORTED_MODULE_0__["observable"].map()
    }); // last time the cache (array) for a given time changed
    // n.b. it is not really the time, but just an integer that gets increased after each modification to the array

    Object.defineProperty(this, "lastCacheModificationPerId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: mobx__WEBPACK_IMPORTED_MODULE_0__["observable"].map()
    });
  }

  Object.defineProperty(IdentifierCache.prototype, "updateLastCacheModificationPerId", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (identifier) {
      var lcm = this.lastCacheModificationPerId.get(identifier); // we start at 1 since 0 means no update since cache creation

      this.lastCacheModificationPerId.set(identifier, lcm === undefined ? 1 : lcm + 1);
    }
  });
  Object.defineProperty(IdentifierCache.prototype, "getLastCacheModificationPerId", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (identifier) {
      var modificationId = this.lastCacheModificationPerId.get(identifier) || 0;
      return this.cacheId + "-" + modificationId;
    }
  });
  Object.defineProperty(IdentifierCache.prototype, "addNodeToCache", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, lastCacheUpdate) {
      if (lastCacheUpdate === void 0) {
        lastCacheUpdate = true;
      }

      if (node.identifierAttribute) {
        var identifier = node.identifier;

        if (!this.cache.has(identifier)) {
          this.cache.set(identifier, mobx__WEBPACK_IMPORTED_MODULE_0__["observable"].array([], mobxShallow));
        }

        var set = this.cache.get(identifier);
        if (set.indexOf(node) !== -1) throw fail$1("Already registered");
        set.push(node);

        if (lastCacheUpdate) {
          this.updateLastCacheModificationPerId(identifier);
        }
      }
    }
  });
  Object.defineProperty(IdentifierCache.prototype, "mergeCache", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      var _this = this;

      Object(mobx__WEBPACK_IMPORTED_MODULE_0__["values"])(node.identifierCache.cache).forEach(function (nodes) {
        return nodes.forEach(function (child) {
          _this.addNodeToCache(child);
        });
      });
    }
  });
  Object.defineProperty(IdentifierCache.prototype, "notifyDied", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      if (node.identifierAttribute) {
        var id = node.identifier;
        var set = this.cache.get(id);

        if (set) {
          set.remove(node); // remove empty sets from cache

          if (!set.length) {
            this.cache.delete(id);
          }

          this.updateLastCacheModificationPerId(node.identifier);
        }
      }
    }
  });
  Object.defineProperty(IdentifierCache.prototype, "splitCache", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      var _this = this;

      var res = new IdentifierCache();
      var basePath = node.path;
      Object(mobx__WEBPACK_IMPORTED_MODULE_0__["entries"])(this.cache).forEach(function (_a) {
        var _b = __read(_a, 2),
            id = _b[0],
            nodes = _b[1];

        var modified = false;

        for (var i = nodes.length - 1; i >= 0; i--) {
          if (nodes[i].path.indexOf(basePath) === 0) {
            res.addNodeToCache(nodes[i], false); // no need to update lastUpdated since it is a whole new cache

            nodes.splice(i, 1);
            modified = true;
          }
        }

        if (modified) {
          _this.updateLastCacheModificationPerId(id);
        }
      });
      return res;
    }
  });
  Object.defineProperty(IdentifierCache.prototype, "has", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (type, identifier) {
      var set = this.cache.get(identifier);
      if (!set) return false;
      return set.some(function (candidate) {
        return type.isAssignableFrom(candidate.type);
      });
    }
  });
  Object.defineProperty(IdentifierCache.prototype, "resolve", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (type, identifier) {
      var set = this.cache.get(identifier);
      if (!set) return null;
      var matches = set.filter(function (candidate) {
        return type.isAssignableFrom(candidate.type);
      });

      switch (matches.length) {
        case 0:
          return null;

        case 1:
          return matches[0];

        default:
          throw fail$1("Cannot resolve a reference to type '" + type.name + "' with id: '" + identifier + "' unambigously, there are multiple candidates: " + matches.map(function (n) {
            return n.path;
          }).join(", "));
      }
    }
  });
  return IdentifierCache;
}();
/**
 * @internal
 * @hidden
 */


function createObjectNode(type, parent, subpath, environment, initialValue) {
  var existingNode = getStateTreeNodeSafe(initialValue);

  if (existingNode) {
    if (existingNode.parent) {
      // istanbul ignore next
      throw fail$1("Cannot add an object to a state tree if it is already part of the same or another state tree. Tried to assign an object to '" + (parent ? parent.path : "") + "/" + subpath + "', but it lives already at '" + existingNode.path + "'");
    }

    if (parent) {
      existingNode.setParent(parent, subpath);
    } // else it already has no parent since it is a pre-requisite


    return existingNode;
  } // not a node, a snapshot


  return new ObjectNode(type, parent, subpath, environment, initialValue);
}
/**
 * @internal
 * @hidden
 */


function createScalarNode(type, parent, subpath, environment, initialValue) {
  return new ScalarNode(type, parent, subpath, environment, initialValue);
}
/**
 * @internal
 * @hidden
 */


function isNode(value) {
  return value instanceof ScalarNode || value instanceof ObjectNode;
}
/**
 * @internal
 * @hidden
 */


var NodeLifeCycle;

(function (NodeLifeCycle) {
  NodeLifeCycle[NodeLifeCycle["INITIALIZING"] = 0] = "INITIALIZING";
  NodeLifeCycle[NodeLifeCycle["CREATED"] = 1] = "CREATED";
  NodeLifeCycle[NodeLifeCycle["FINALIZED"] = 2] = "FINALIZED";
  NodeLifeCycle[NodeLifeCycle["DETACHING"] = 3] = "DETACHING";
  NodeLifeCycle[NodeLifeCycle["DEAD"] = 4] = "DEAD"; // no coming back from this one
})(NodeLifeCycle || (NodeLifeCycle = {}));
/**
 * Returns true if the given value is a node in a state tree.
 * More precisely, that is, if the value is an instance of a
 * `types.model`, `types.array` or `types.map`.
 *
 * @param value
 * @returns true if the value is a state tree node.
 */


function isStateTreeNode(value) {
  return !!(value && value.$treenode);
}
/**
 * @internal
 * @hidden
 */


function assertIsStateTreeNode(value, argNumber) {
  assertArg(value, isStateTreeNode, "mobx-state-tree node", argNumber);
}
/**
 * @internal
 * @hidden
 */


function getStateTreeNode(value) {
  if (!isStateTreeNode(value)) {
    // istanbul ignore next
    throw fail$1("Value " + value + " is no MST Node");
  }

  return value.$treenode;
}
/**
 * @internal
 * @hidden
 */


function getStateTreeNodeSafe(value) {
  return value && value.$treenode || null;
}
/**
 * @internal
 * @hidden
 */


function toJSON() {
  return getStateTreeNode(this).snapshot;
}

var doubleDot = function (_) {
  return "..";
};
/**
 * @internal
 * @hidden
 */


function getRelativePathBetweenNodes(base, target) {
  // PRE condition target is (a child of) base!
  if (base.root !== target.root) {
    throw fail$1("Cannot calculate relative path: objects '" + base + "' and '" + target + "' are not part of the same object tree");
  }

  var baseParts = splitJsonPath(base.path);
  var targetParts = splitJsonPath(target.path);
  var common = 0;

  for (; common < baseParts.length; common++) {
    if (baseParts[common] !== targetParts[common]) break;
  } // TODO: assert that no targetParts paths are "..", "." or ""!


  return baseParts.slice(common).map(doubleDot).join("/") + joinJsonPath(targetParts.slice(common));
}
/**
 * @internal
 * @hidden
 */


function resolveNodeByPath(base, path, failIfResolveFails) {
  if (failIfResolveFails === void 0) {
    failIfResolveFails = true;
  }

  return resolveNodeByPathParts(base, splitJsonPath(path), failIfResolveFails);
}
/**
 * @internal
 * @hidden
 */


function resolveNodeByPathParts(base, pathParts, failIfResolveFails) {
  if (failIfResolveFails === void 0) {
    failIfResolveFails = true;
  }

  var current = base;

  for (var i = 0; i < pathParts.length; i++) {
    var part = pathParts[i];

    if (part === "..") {
      current = current.parent;
      if (current) continue; // not everything has a parent
    } else if (part === ".") {
      continue;
    } else if (current) {
      if (current instanceof ScalarNode) {
        // check if the value of a scalar resolves to a state tree node (e.g. references)
        // then we can continue resolving...
        try {
          var value = current.value;

          if (isStateTreeNode(value)) {
            current = getStateTreeNode(value); // fall through
          }
        } catch (e) {
          if (!failIfResolveFails) {
            return undefined;
          }

          throw e;
        }
      }

      if (current instanceof ObjectNode) {
        var subType = current.getChildType(part);

        if (subType) {
          current = current.getChildNode(part);
          if (current) continue;
        }
      }
    }

    if (failIfResolveFails) throw fail$1("Could not resolve '" + part + "' in path '" + (joinJsonPath(pathParts.slice(0, i)) || "/") + "' while resolving '" + joinJsonPath(pathParts) + "'");else return undefined;
  }

  return current;
}
/**
 * @internal
 * @hidden
 */


function convertChildNodesToArray(childNodes) {
  if (!childNodes) return EMPTY_ARRAY;
  var keys = Object.keys(childNodes);
  if (!keys.length) return EMPTY_ARRAY;
  var result = new Array(keys.length);
  keys.forEach(function (key, index) {
    result[index] = childNodes[key];
  });
  return result;
} // based on: https://github.com/mobxjs/mobx-utils/blob/master/src/async-action.ts

/*
    All contents of this file are deprecated.

    The term `process` has been replaced with `flow` to avoid conflicts with the
    global `process` object.

    Refer to `flow.ts` for any further changes to this implementation.
*/


var DEPRECATION_MESSAGE = "See https://github.com/mobxjs/mobx-state-tree/issues/399 for more information. " + "Note that the middleware event types starting with `process` now start with `flow`.";
/**
 * @hidden
 *
 * @deprecated has been renamed to `flow()`.
 * See https://github.com/mobxjs/mobx-state-tree/issues/399 for more information.
 * Note that the middleware event types starting with `process` now start with `flow`.
 *
 * @returns {Promise}
 */

function process$1(asyncAction) {
  deprecated("process", "`process()` has been renamed to `flow()`. " + DEPRECATION_MESSAGE);
  return flow(asyncAction);
}

var plainObjectString = Object.toString();
/**
 * @internal
 * @hidden
 */

var EMPTY_ARRAY = Object.freeze([]);
/**
 * @internal
 * @hidden
 */

var EMPTY_OBJECT = Object.freeze({});
/**
 * @internal
 * @hidden
 */

var mobxShallow = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["_getGlobalState"])().useProxies ? {
  deep: false
} : {
  deep: false,
  proxy: false
};
Object.freeze(mobxShallow);
/**
 * @internal
 * @hidden
 */

function fail$1(message) {
  if (message === void 0) {
    message = "Illegal state";
  }

  return new Error("[mobx-state-tree] " + message);
}
/**
 * @internal
 * @hidden
 */


function identity(_) {
  return _;
}
/**
 * pollyfill (for IE) suggested in MDN:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger
 * @internal
 * @hidden
 */


var isInteger = Number.isInteger || function (value) {
  return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
};
/**
 * @internal
 * @hidden
 */


function isArray(val) {
  return Array.isArray(val) || Object(mobx__WEBPACK_IMPORTED_MODULE_0__["isObservableArray"])(val);
}
/**
 * @internal
 * @hidden
 */


function asArray(val) {
  if (!val) return EMPTY_ARRAY;
  if (isArray(val)) return val;
  return [val];
}
/**
 * @internal
 * @hidden
 */


function extend(a) {
  var b = [];

  for (var _i = 1; _i < arguments.length; _i++) {
    b[_i - 1] = arguments[_i];
  }

  for (var i = 0; i < b.length; i++) {
    var current = b[i];

    for (var key in current) a[key] = current[key];
  }

  return a;
}
/**
 * @internal
 * @hidden
 */


function isPlainObject(value) {
  var _a;

  if (value === null || typeof value !== "object") return false;
  var proto = Object.getPrototypeOf(value);
  if (proto == null) return true;
  return ((_a = proto.constructor) === null || _a === void 0 ? void 0 : _a.toString()) === plainObjectString;
}
/**
 * @internal
 * @hidden
 */


function isMutable(value) {
  return value !== null && typeof value === "object" && !(value instanceof Date) && !(value instanceof RegExp);
}
/**
 * @internal
 * @hidden
 */


function isPrimitive(value, includeDate) {
  if (includeDate === void 0) {
    includeDate = true;
  }

  if (value === null || value === undefined) return true;
  if (typeof value === "string" || typeof value === "number" || typeof value === "boolean" || includeDate && value instanceof Date) return true;
  return false;
}
/**
 * @internal
 * @hidden
 * Freeze a value and return it (if not in production)
 */


function freeze(value) {
  if (!devMode()) return value;
  return isPrimitive(value) || Object(mobx__WEBPACK_IMPORTED_MODULE_0__["isObservableArray"])(value) ? value : Object.freeze(value);
}
/**
 * @internal
 * @hidden
 * Recursively freeze a value (if not in production)
 */


function deepFreeze(value) {
  if (!devMode()) return value;
  freeze(value);

  if (isPlainObject(value)) {
    Object.keys(value).forEach(function (propKey) {
      if (!isPrimitive(value[propKey]) && !Object.isFrozen(value[propKey])) {
        deepFreeze(value[propKey]);
      }
    });
  }

  return value;
}
/**
 * @internal
 * @hidden
 */


function isSerializable(value) {
  return typeof value !== "function";
}
/**
 * @internal
 * @hidden
 */


function addHiddenFinalProp(object, propName, value) {
  Object.defineProperty(object, propName, {
    enumerable: false,
    writable: false,
    configurable: true,
    value: value
  });
}
/**
 * @internal
 * @hidden
 */


function addHiddenWritableProp(object, propName, value) {
  Object.defineProperty(object, propName, {
    enumerable: false,
    writable: true,
    configurable: true,
    value: value
  });
}
/**
 * @internal
 * @hidden
 */


var EventHandler =
/** @class */
function () {
  function EventHandler() {
    Object.defineProperty(this, "handlers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
  }

  Object.defineProperty(EventHandler.prototype, "hasSubscribers", {
    get: function () {
      return this.handlers.length > 0;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(EventHandler.prototype, "register", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (fn, atTheBeginning) {
      var _this = this;

      if (atTheBeginning === void 0) {
        atTheBeginning = false;
      }

      if (atTheBeginning) {
        this.handlers.unshift(fn);
      } else {
        this.handlers.push(fn);
      }

      return function () {
        _this.unregister(fn);
      };
    }
  });
  Object.defineProperty(EventHandler.prototype, "has", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (fn) {
      return this.handlers.indexOf(fn) >= 0;
    }
  });
  Object.defineProperty(EventHandler.prototype, "unregister", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (fn) {
      var index = this.handlers.indexOf(fn);

      if (index >= 0) {
        this.handlers.splice(index, 1);
      }
    }
  });
  Object.defineProperty(EventHandler.prototype, "clear", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      this.handlers.length = 0;
    }
  });
  Object.defineProperty(EventHandler.prototype, "emit", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      } // make a copy just in case it changes


      var handlers = this.handlers.slice();
      handlers.forEach(function (f) {
        return f.apply(void 0, __spread(args));
      });
    }
  });
  return EventHandler;
}();
/**
 * @internal
 * @hidden
 */


var EventHandlers =
/** @class */
function () {
  function EventHandlers() {
    Object.defineProperty(this, "eventHandlers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
  }

  Object.defineProperty(EventHandlers.prototype, "hasSubscribers", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (event) {
      var handler = this.eventHandlers && this.eventHandlers[event];
      return !!handler && handler.hasSubscribers;
    }
  });
  Object.defineProperty(EventHandlers.prototype, "register", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (event, fn, atTheBeginning) {
      if (atTheBeginning === void 0) {
        atTheBeginning = false;
      }

      if (!this.eventHandlers) {
        this.eventHandlers = {};
      }

      var handler = this.eventHandlers[event];

      if (!handler) {
        handler = this.eventHandlers[event] = new EventHandler();
      }

      return handler.register(fn, atTheBeginning);
    }
  });
  Object.defineProperty(EventHandlers.prototype, "has", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (event, fn) {
      var handler = this.eventHandlers && this.eventHandlers[event];
      return !!handler && handler.has(fn);
    }
  });
  Object.defineProperty(EventHandlers.prototype, "unregister", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (event, fn) {
      var handler = this.eventHandlers && this.eventHandlers[event];

      if (handler) {
        handler.unregister(fn);
      }
    }
  });
  Object.defineProperty(EventHandlers.prototype, "clear", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (event) {
      if (this.eventHandlers) {
        delete this.eventHandlers[event];
      }
    }
  });
  Object.defineProperty(EventHandlers.prototype, "clearAll", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      this.eventHandlers = undefined;
    }
  });
  Object.defineProperty(EventHandlers.prototype, "emit", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (event) {
      var _a;

      var args = [];

      for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
      }

      var handler = this.eventHandlers && this.eventHandlers[event];

      if (handler) {
        (_a = handler).emit.apply(_a, __spread(args));
      }
    }
  });
  return EventHandlers;
}();
/**
 * @internal
 * @hidden
 */


function argsToArray(args) {
  var res = new Array(args.length);

  for (var i = 0; i < args.length; i++) res[i] = args[i];

  return res;
}
/**
 * @internal
 * @hidden
 */


function stringStartsWith(str, beginning) {
  return str.indexOf(beginning) === 0;
}
/**
 * @internal
 * @hidden
 */


var deprecated = function (id, message) {
  // skip if running production
  if (!devMode()) return; // warn if hasn't been warned before

  if (deprecated.ids && !deprecated.ids.hasOwnProperty(id)) {
    warnError("Deprecation warning: " + message);
  } // mark as warned to avoid duplicate warn message


  if (deprecated.ids) deprecated.ids[id] = true;
};

deprecated.ids = {};
/**
 * @internal
 * @hidden
 */

function warnError(msg) {
  console.warn(new Error("[mobx-state-tree] " + msg));
}
/**
 * @internal
 * @hidden
 */


function isTypeCheckingEnabled() {
  return devMode() || typeof process !== "undefined" && process.env && process.env.ENABLE_TYPE_CHECK === "true";
}
/**
 * @internal
 * @hidden
 */


function devMode() {
  return "development" !== "production";
}
/**
 * @internal
 * @hidden
 */


function assertArg(value, fn, typeName, argNumber) {
  if (devMode()) {
    if (!fn(value)) {
      // istanbul ignore next
      throw fail$1("expected " + typeName + " as argument " + asArray(argNumber).join(" or ") + ", got " + value + " instead");
    }
  }
}
/**
 * @internal
 * @hidden
 */


function assertIsFunction(value, argNumber) {
  assertArg(value, function (fn) {
    return typeof fn === "function";
  }, "function", argNumber);
}
/**
 * @internal
 * @hidden
 */


function assertIsNumber(value, argNumber, min, max) {
  assertArg(value, function (n) {
    return typeof n === "number";
  }, "number", argNumber);

  if (min !== undefined) {
    assertArg(value, function (n) {
      return n >= min;
    }, "number greater than " + min, argNumber);
  }

  if (max !== undefined) {
    assertArg(value, function (n) {
      return n <= max;
    }, "number lesser than " + max, argNumber);
  }
}
/**
 * @internal
 * @hidden
 */


function assertIsString(value, argNumber, canBeEmpty) {
  if (canBeEmpty === void 0) {
    canBeEmpty = true;
  }

  assertArg(value, function (s) {
    return typeof s === "string";
  }, "string", argNumber);

  if (!canBeEmpty) {
    assertArg(value, function (s) {
      return s !== "";
    }, "not empty string", argNumber);
  }
}
/**
 * @internal
 * @hidden
 */


function setImmediateWithFallback(fn) {
  if (typeof queueMicrotask === "function") {
    queueMicrotask(fn);
  } else if (typeof setImmediate === "function") {
    setImmediate(fn);
  } else {
    setTimeout(fn, 1);
  }
}
/**
 * See [asynchronous actions](concepts/async-actions.md).
 *
 * @returns The flow as a promise.
 */


function flow(generator) {
  return createFlowSpawner(generator.name, generator);
}
/**
 * @deprecated Not needed since TS3.6.
 * Used for TypeScript to make flows that return a promise return the actual promise result.
 *
 * @param val
 * @returns
 */


function castFlowReturn(val) {
  return val;
}
/**
 * @experimental
 * experimental api - might change on minor/patch releases
 *
 * Convert a promise-returning function to a generator-returning one.
 * This is intended to allow for usage of `yield*` in async actions to
 * retain the promise return type.
 *
 * Example:
 * ```ts
 * function getDataAsync(input: string): Promise<number> { ... }
 * const getDataGen = toGeneratorFunction(getDataAsync);
 *
 * const someModel.actions(self => ({
 *   someAction: flow(function*() {
 *     // value is typed as number
 *     const value = yield* getDataGen("input value");
 *     ...
 *   })
 * }))
 * ```
 */


function toGeneratorFunction(p) {
  return function () {
    var _i;

    var args = [];

    for (_i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , p.apply(void 0, __spread(args))];

        case 1:
          return [2
          /*return*/
          , _a.sent()];
      }
    });
  };
}
/**
 * @experimental
 * experimental api - might change on minor/patch releases
 *
 * Convert a promise to a generator yielding that promise
 * This is intended to allow for usage of `yield*` in async actions to
 * retain the promise return type.
 *
 * Example:
 * ```ts
 * function getDataAsync(input: string): Promise<number> { ... }
 *
 * const someModel.actions(self => ({
 *   someAction: flow(function*() {
 *     // value is typed as number
 *     const value = yield* toGenerator(getDataAsync("input value"));
 *     ...
 *   })
 * }))
 * ```
 */


function toGenerator(p) {
  return __generator(this, function (_a) {
    switch (_a.label) {
      case 0:
        return [4
        /*yield*/
        , p];

      case 1:
        return [2
        /*return*/
        , _a.sent()];
    }
  });
}
/**
 * @internal
 * @hidden
 */


function createFlowSpawner(name, generator) {
  var spawner = function flowSpawner() {
    // Implementation based on https://github.com/tj/co/blob/master/index.js
    var runId = getNextActionId();
    var parentContext = getCurrentActionContext();

    if (!parentContext) {
      throw fail$1("a mst flow must always have a parent context");
    }

    var parentActionContext = getParentActionContext(parentContext);

    if (!parentActionContext) {
      throw fail$1("a mst flow must always have a parent action context");
    }

    var contextBase = {
      name: name,
      id: runId,
      tree: parentContext.tree,
      context: parentContext.context,
      parentId: parentContext.id,
      allParentIds: __spread(parentContext.allParentIds, [parentContext.id]),
      rootId: parentContext.rootId,
      parentEvent: parentContext,
      parentActionEvent: parentActionContext
    };
    var args = arguments;

    function wrap(fn, type, arg) {
      fn.$mst_middleware = spawner.$mst_middleware; // pick up any middleware attached to the flow

      runWithActionContext(__assign(__assign({}, contextBase), {
        type: type,
        args: [arg]
      }), fn);
    }

    return new Promise(function (resolve, reject) {
      var gen;

      var init = function asyncActionInit() {
        gen = generator.apply(null, arguments);
        onFulfilled(undefined); // kick off the flow
      };

      init.$mst_middleware = spawner.$mst_middleware;
      runWithActionContext(__assign(__assign({}, contextBase), {
        type: "flow_spawn",
        args: argsToArray(args)
      }), init);

      function onFulfilled(res) {
        var ret;

        try {
          // prettier-ignore
          wrap(function (r) {
            ret = gen.next(r);
          }, "flow_resume", res);
        } catch (e) {
          // prettier-ignore
          setImmediateWithFallback(function () {
            wrap(function (r) {
              reject(e);
            }, "flow_throw", e);
          });
          return;
        }

        next(ret);
        return;
      }

      function onRejected(err) {
        var ret;

        try {
          // prettier-ignore
          wrap(function (r) {
            ret = gen.throw(r);
          }, "flow_resume_error", err); // or yieldError?
        } catch (e) {
          // prettier-ignore
          setImmediateWithFallback(function () {
            wrap(function (r) {
              reject(e);
            }, "flow_throw", e);
          });
          return;
        }

        next(ret);
      }

      function next(ret) {
        if (ret.done) {
          // prettier-ignore
          setImmediateWithFallback(function () {
            wrap(function (r) {
              resolve(r);
            }, "flow_return", ret.value);
          });
          return;
        } // TODO: support more type of values? See https://github.com/tj/co/blob/249bbdc72da24ae44076afd716349d2089b31c4c/index.js#L100


        if (!ret.value || typeof ret.value.then !== "function") {
          // istanbul ignore next
          throw fail$1("Only promises can be yielded to `async`, got: " + ret);
        }

        return ret.value.then(onFulfilled, onRejected);
      }
    });
  };

  return spawner;
}
/**
 * @internal
 * @hidden
 */


function splitPatch(patch) {
  if (!("oldValue" in patch)) throw fail$1("Patches without `oldValue` field cannot be inversed");
  return [stripPatch(patch), invertPatch(patch)];
}
/**
 * @internal
 * @hidden
 */


function stripPatch(patch) {
  // strips `oldvalue` information from the patch, so that it becomes a patch conform the json-patch spec
  // this removes the ability to undo the patch
  switch (patch.op) {
    case "add":
      return {
        op: "add",
        path: patch.path,
        value: patch.value
      };

    case "remove":
      return {
        op: "remove",
        path: patch.path
      };

    case "replace":
      return {
        op: "replace",
        path: patch.path,
        value: patch.value
      };
  }
}

function invertPatch(patch) {
  switch (patch.op) {
    case "add":
      return {
        op: "remove",
        path: patch.path
      };

    case "remove":
      return {
        op: "add",
        path: patch.path,
        value: patch.oldValue
      };

    case "replace":
      return {
        op: "replace",
        path: patch.path,
        value: patch.oldValue
      };
  }
}
/**
 * Simple simple check to check it is a number.
 */


function isNumber(x) {
  return typeof x === "number";
}
/**
 * Escape slashes and backslashes.
 *
 * http://tools.ietf.org/html/rfc6901
 */


function escapeJsonPath(path) {
  if (isNumber(path) === true) {
    return "" + path;
  }

  if (path.indexOf("/") === -1 && path.indexOf("~") === -1) return path;
  return path.replace(/~/g, "~0").replace(/\//g, "~1");
}
/**
 * Unescape slashes and backslashes.
 */


function unescapeJsonPath(path) {
  return path.replace(/~1/g, "/").replace(/~0/g, "~");
}
/**
 * Generates a json-path compliant json path from path parts.
 *
 * @param path
 * @returns
 */


function joinJsonPath(path) {
  // `/` refers to property with an empty name, while `` refers to root itself!
  if (path.length === 0) return "";

  var getPathStr = function (p) {
    return p.map(escapeJsonPath).join("/");
  };

  if (path[0] === "." || path[0] === "..") {
    // relative
    return getPathStr(path);
  } else {
    // absolute
    return "/" + getPathStr(path);
  }
}
/**
 * Splits and decodes a json path into several parts.
 *
 * @param path
 * @returns
 */


function splitJsonPath(path) {
  // `/` refers to property with an empty name, while `` refers to root itself!
  var parts = path.split("/").map(unescapeJsonPath);
  var valid = path === "" || path === "." || path === ".." || stringStartsWith(path, "/") || stringStartsWith(path, "./") || stringStartsWith(path, "../");

  if (!valid) {
    throw fail$1("a json path must be either rooted, empty or relative, but got '" + path + "'");
  } // '/a/b/c' -> ["a", "b", "c"]
  // '../../b/c' -> ["..", "..", "b", "c"]
  // '' -> []
  // '/' -> ['']
  // './a' -> [".", "a"]
  // /./a' -> [".", "a"] equivalent to './a'


  if (parts[0] === "") {
    parts.shift();
  }

  return parts;
}

var SnapshotProcessor =
/** @class */
function (_super) {
  __extends(SnapshotProcessor, _super);

  function SnapshotProcessor(_subtype, _processors, name) {
    var _this = _super.call(this, name || _subtype.name) || this;

    Object.defineProperty(_this, "_subtype", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _subtype
    });
    Object.defineProperty(_this, "_processors", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _processors
    });
    return _this;
  }

  Object.defineProperty(SnapshotProcessor.prototype, "flags", {
    get: function () {
      return this._subtype.flags | TypeFlags.SnapshotProcessor;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(SnapshotProcessor.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return "snapshotProcessor(" + this._subtype.describe() + ")";
    }
  });
  Object.defineProperty(SnapshotProcessor.prototype, "preProcessSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (sn) {
      if (this._processors.preProcessor) {
        return this._processors.preProcessor.call(null, sn);
      }

      return sn;
    }
  });
  Object.defineProperty(SnapshotProcessor.prototype, "postProcessSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (sn) {
      if (this._processors.postProcessor) {
        return this._processors.postProcessor.call(null, sn);
      }

      return sn;
    }
  });
  Object.defineProperty(SnapshotProcessor.prototype, "_fixNode", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      var _this = this; // the node has to use these methods rather than the original type ones


      proxyNodeTypeMethods(node.type, this, "create");
      var oldGetSnapshot = node.getSnapshot;

      node.getSnapshot = function () {
        return _this.postProcessSnapshot(oldGetSnapshot.call(node));
      };
    }
  });
  Object.defineProperty(SnapshotProcessor.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      var processedInitialValue = isStateTreeNode(initialValue) ? initialValue : this.preProcessSnapshot(initialValue);

      var node = this._subtype.instantiate(parent, subpath, environment, processedInitialValue);

      this._fixNode(node);

      return node;
    }
  });
  Object.defineProperty(SnapshotProcessor.prototype, "reconcile", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (current, newValue, parent, subpath) {
      var node = this._subtype.reconcile(current, isStateTreeNode(newValue) ? newValue : this.preProcessSnapshot(newValue), parent, subpath);

      if (node !== current) {
        this._fixNode(node);
      }

      return node;
    }
  });
  Object.defineProperty(SnapshotProcessor.prototype, "getSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, applyPostProcess) {
      if (applyPostProcess === void 0) {
        applyPostProcess = true;
      }

      var sn = this._subtype.getSnapshot(node);

      return applyPostProcess ? this.postProcessSnapshot(sn) : sn;
    }
  });
  Object.defineProperty(SnapshotProcessor.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      var processedSn = this.preProcessSnapshot(value);
      return this._subtype.validate(processedSn, context);
    }
  });
  Object.defineProperty(SnapshotProcessor.prototype, "getSubTypes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this._subtype;
    }
  });
  Object.defineProperty(SnapshotProcessor.prototype, "is", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (thing) {
      var value = isType(thing) ? this._subtype : isStateTreeNode(thing) ? getSnapshot(thing, false) : this.preProcessSnapshot(thing);
      return this._subtype.validate(value, [{
        path: "",
        type: this._subtype
      }]).length === 0;
    }
  });
  Object.defineProperty(SnapshotProcessor.prototype, "isAssignableFrom", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (type) {
      return this._subtype.isAssignableFrom(type);
    }
  });
  return SnapshotProcessor;
}(BaseType);

function proxyNodeTypeMethods(nodeType, snapshotProcessorType) {
  var e_1, _a;

  var methods = [];

  for (var _i = 2; _i < arguments.length; _i++) {
    methods[_i - 2] = arguments[_i];
  }

  try {
    for (var methods_1 = __values(methods), methods_1_1 = methods_1.next(); !methods_1_1.done; methods_1_1 = methods_1.next()) {
      var method = methods_1_1.value;
      nodeType[method] = snapshotProcessorType[method].bind(snapshotProcessorType);
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (methods_1_1 && !methods_1_1.done && (_a = methods_1.return)) _a.call(methods_1);
    } finally {
      if (e_1) throw e_1.error;
    }
  }
}
/**
 * `types.snapshotProcessor` - Runs a pre/post snapshot processor before/after serializing a given type.
 *
 * Example:
 * ```ts
 * const Todo1 = types.model({ text: types.string })
 * // in the backend the text type must be null when empty
 * interface BackendTodo {
 *     text: string | null
 * }
 * const Todo2 = types.snapshotProcessor(Todo1, {
 *     // from snapshot to instance
 *     preProcessor(sn: BackendTodo) {
 *         return {
 *             text: sn.text || "";
 *         }
 *     },
 *     // from instance to snapshot
 *     postProcessor(sn): BackendTodo {
 *         return {
 *             text: !sn.text ? null : sn.text
 *         }
 *     }
 * })
 * ```
 *
 * @param type Type to run the processors over.
 * @param processors Processors to run.
 * @param name Type name, or undefined to inherit the inner type one.
 * @returns
 */


function snapshotProcessor(type, processors, name) {
  assertIsType(type, 1);

  if (devMode()) {
    if (processors.postProcessor && typeof processors.postProcessor !== "function") {
      // istanbul ignore next
      throw fail("postSnapshotProcessor must be a function");
    }

    if (processors.preProcessor && typeof processors.preProcessor !== "function") {
      // istanbul ignore next
      throw fail("preSnapshotProcessor must be a function");
    }
  }

  return new SnapshotProcessor(type, processors, name);
}

var needsIdentifierError = "Map.put can only be used to store complex values that have an identifier type attribute";

function tryCollectModelTypes(type, modelTypes) {
  var e_1, _a;

  var subtypes = type.getSubTypes();

  if (subtypes === cannotDetermineSubtype) {
    return false;
  }

  if (subtypes) {
    var subtypesArray = asArray(subtypes);

    try {
      for (var subtypesArray_1 = __values(subtypesArray), subtypesArray_1_1 = subtypesArray_1.next(); !subtypesArray_1_1.done; subtypesArray_1_1 = subtypesArray_1.next()) {
        var subtype = subtypesArray_1_1.value;
        if (!tryCollectModelTypes(subtype, modelTypes)) return false;
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (subtypesArray_1_1 && !subtypesArray_1_1.done && (_a = subtypesArray_1.return)) _a.call(subtypesArray_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
  }

  if (type instanceof ModelType) {
    modelTypes.push(type);
  }

  return true;
}
/**
 * @internal
 * @hidden
 */


var MapIdentifierMode;

(function (MapIdentifierMode) {
  MapIdentifierMode[MapIdentifierMode["UNKNOWN"] = 0] = "UNKNOWN";
  MapIdentifierMode[MapIdentifierMode["YES"] = 1] = "YES";
  MapIdentifierMode[MapIdentifierMode["NO"] = 2] = "NO";
})(MapIdentifierMode || (MapIdentifierMode = {}));

var MSTMap =
/** @class */
function (_super) {
  __extends(MSTMap, _super);

  function MSTMap(initialData) {
    return _super.call(this, initialData, mobx__WEBPACK_IMPORTED_MODULE_0__["observable"].ref.enhancer) || this;
  }

  Object.defineProperty(MSTMap.prototype, "get", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (key) {
      // maybe this is over-enthousiastic? normalize numeric keys to strings
      return _super.prototype.get.call(this, "" + key);
    }
  });
  Object.defineProperty(MSTMap.prototype, "has", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (key) {
      return _super.prototype.has.call(this, "" + key);
    }
  });
  Object.defineProperty(MSTMap.prototype, "delete", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (key) {
      return _super.prototype.delete.call(this, "" + key);
    }
  });
  Object.defineProperty(MSTMap.prototype, "set", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (key, value) {
      return _super.prototype.set.call(this, "" + key, value);
    }
  });
  Object.defineProperty(MSTMap.prototype, "put", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value) {
      if (!value) throw fail$1("Map.put cannot be used to set empty values");

      if (isStateTreeNode(value)) {
        var node = getStateTreeNode(value);

        if (devMode()) {
          if (!node.identifierAttribute) {
            throw fail$1(needsIdentifierError);
          }
        }

        if (node.identifier === null) {
          throw fail$1(needsIdentifierError);
        }

        this.set(node.identifier, value);
        return value;
      } else if (!isMutable(value)) {
        throw fail$1("Map.put can only be used to store complex values");
      } else {
        var mapNode = getStateTreeNode(this);
        var mapType = mapNode.type;

        if (mapType.identifierMode !== MapIdentifierMode.YES) {
          throw fail$1(needsIdentifierError);
        }

        var idAttr = mapType.mapIdentifierAttribute;
        var id = value[idAttr];

        if (!isValidIdentifier(id)) {
          // try again but this time after creating a node for the value
          // since it might be an optional identifier
          var newNode = this.put(mapType.getChildType().create(value, mapNode.environment));
          return this.put(getSnapshot(newNode));
        }

        var key = normalizeIdentifier(id);
        this.set(key, value);
        return this.get(key);
      }
    }
  });
  return MSTMap;
}(mobx__WEBPACK_IMPORTED_MODULE_0__["ObservableMap"]);
/**
 * @internal
 * @hidden
 */


var MapType =
/** @class */
function (_super) {
  __extends(MapType, _super);

  function MapType(name, _subType, hookInitializers) {
    if (hookInitializers === void 0) {
      hookInitializers = [];
    }

    var _this = _super.call(this, name) || this;

    Object.defineProperty(_this, "_subType", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _subType
    });
    Object.defineProperty(_this, "identifierMode", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: MapIdentifierMode.UNKNOWN
    });
    Object.defineProperty(_this, "mapIdentifierAttribute", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: undefined
    });
    Object.defineProperty(_this, "flags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: TypeFlags.Map
    });
    Object.defineProperty(_this, "hookInitializers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });

    _this._determineIdentifierMode();

    _this.hookInitializers = hookInitializers;
    return _this;
  }

  Object.defineProperty(MapType.prototype, "hooks", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (hooks) {
      var hookInitializers = this.hookInitializers.length > 0 ? this.hookInitializers.concat(hooks) : [hooks];
      return new MapType(this.name, this._subType, hookInitializers);
    }
  });
  Object.defineProperty(MapType.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      this._determineIdentifierMode();

      return createObjectNode(this, parent, subpath, environment, initialValue);
    }
  });
  Object.defineProperty(MapType.prototype, "_determineIdentifierMode", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      if (this.identifierMode !== MapIdentifierMode.UNKNOWN) {
        return;
      }

      var modelTypes = [];

      if (tryCollectModelTypes(this._subType, modelTypes)) {
        var identifierAttribute_1 = undefined;
        modelTypes.forEach(function (type) {
          if (type.identifierAttribute) {
            if (identifierAttribute_1 && identifierAttribute_1 !== type.identifierAttribute) {
              throw fail$1("The objects in a map should all have the same identifier attribute, expected '" + identifierAttribute_1 + "', but child of type '" + type.name + "' declared attribute '" + type.identifierAttribute + "' as identifier");
            }

            identifierAttribute_1 = type.identifierAttribute;
          }
        });

        if (identifierAttribute_1) {
          this.identifierMode = MapIdentifierMode.YES;
          this.mapIdentifierAttribute = identifierAttribute_1;
        } else {
          this.identifierMode = MapIdentifierMode.NO;
        }
      }
    }
  });
  Object.defineProperty(MapType.prototype, "initializeChildNodes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (objNode, initialSnapshot) {
      if (initialSnapshot === void 0) {
        initialSnapshot = {};
      }

      var subType = objNode.type._subType;
      var result = {};
      Object.keys(initialSnapshot).forEach(function (name) {
        result[name] = subType.instantiate(objNode, name, undefined, initialSnapshot[name]);
      });
      return result;
    }
  });
  Object.defineProperty(MapType.prototype, "createNewInstance", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (childNodes) {
      return new MSTMap(childNodes);
    }
  });
  Object.defineProperty(MapType.prototype, "finalizeNewInstance", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, instance) {
      Object(mobx__WEBPACK_IMPORTED_MODULE_0__["_interceptReads"])(instance, node.unbox);

      var type = node.type;
      type.hookInitializers.forEach(function (initializer) {
        var hooks = initializer(instance);
        Object.keys(hooks).forEach(function (name) {
          var hook = hooks[name];
          var actionInvoker = createActionInvoker(instance, name, hook);
          (!devMode() ? addHiddenFinalProp : addHiddenWritableProp)(instance, name, actionInvoker);
        });
      });
      Object(mobx__WEBPACK_IMPORTED_MODULE_0__["intercept"])(instance, this.willChange);
      Object(mobx__WEBPACK_IMPORTED_MODULE_0__["observe"])(instance, this.didChange);
    }
  });
  Object.defineProperty(MapType.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return "Map<string, " + this._subType.describe() + ">";
    }
  });
  Object.defineProperty(MapType.prototype, "getChildren", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      // return (node.storedValue as ObservableMap<any>).values()
      return Object(mobx__WEBPACK_IMPORTED_MODULE_0__["values"])(node.storedValue);
    }
  });
  Object.defineProperty(MapType.prototype, "getChildNode", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, key) {
      var childNode = node.storedValue.get("" + key);
      if (!childNode) throw fail$1("Not a child " + key);
      return childNode;
    }
  });
  Object.defineProperty(MapType.prototype, "willChange", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (change) {
      var node = getStateTreeNode(change.object);
      var key = change.name;
      node.assertWritable({
        subpath: key
      });
      var mapType = node.type;
      var subType = mapType._subType;

      switch (change.type) {
        case "update":
          {
            var newValue = change.newValue;
            var oldValue = change.object.get(key);
            if (newValue === oldValue) return null;
            typecheckInternal(subType, newValue);
            change.newValue = subType.reconcile(node.getChildNode(key), change.newValue, node, key);
            mapType.processIdentifier(key, change.newValue);
          }
          break;

        case "add":
          {
            typecheckInternal(subType, change.newValue);
            change.newValue = subType.instantiate(node, key, undefined, change.newValue);
            mapType.processIdentifier(key, change.newValue);
          }
          break;
      }

      return change;
    }
  });
  Object.defineProperty(MapType.prototype, "processIdentifier", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (expected, node) {
      if (this.identifierMode === MapIdentifierMode.YES && node instanceof ObjectNode) {
        var identifier = node.identifier;
        if (identifier !== expected) throw fail$1("A map of objects containing an identifier should always store the object under their own identifier. Trying to store key '" + identifier + "', but expected: '" + expected + "'");
      }
    }
  });
  Object.defineProperty(MapType.prototype, "getSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      var res = {};
      node.getChildren().forEach(function (childNode) {
        res[childNode.subpath] = childNode.snapshot;
      });
      return res;
    }
  });
  Object.defineProperty(MapType.prototype, "processInitialSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (childNodes) {
      var processed = {};
      Object.keys(childNodes).forEach(function (key) {
        processed[key] = childNodes[key].getSnapshot();
      });
      return processed;
    }
  });
  Object.defineProperty(MapType.prototype, "didChange", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (change) {
      var node = getStateTreeNode(change.object);

      switch (change.type) {
        case "update":
          return void node.emitPatch({
            op: "replace",
            path: escapeJsonPath(change.name),
            value: change.newValue.snapshot,
            oldValue: change.oldValue ? change.oldValue.snapshot : undefined
          }, node);

        case "add":
          return void node.emitPatch({
            op: "add",
            path: escapeJsonPath(change.name),
            value: change.newValue.snapshot,
            oldValue: undefined
          }, node);

        case "delete":
          // a node got deleted, get the old snapshot and make the node die
          var oldSnapshot = change.oldValue.snapshot;
          change.oldValue.die(); // emit the patch

          return void node.emitPatch({
            op: "remove",
            path: escapeJsonPath(change.name),
            oldValue: oldSnapshot
          }, node);
      }
    }
  });
  Object.defineProperty(MapType.prototype, "applyPatchLocally", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, subpath, patch) {
      var target = node.storedValue;

      switch (patch.op) {
        case "add":
        case "replace":
          target.set(subpath, patch.value);
          break;

        case "remove":
          target.delete(subpath);
          break;
      }
    }
  });
  Object.defineProperty(MapType.prototype, "applySnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, snapshot) {
      typecheckInternal(this, snapshot);
      var target = node.storedValue;
      var currentKeys = {};
      Array.from(target.keys()).forEach(function (key) {
        currentKeys[key] = false;
      });

      if (snapshot) {
        // Don't use target.replace, as it will throw away all existing items first
        for (var key in snapshot) {
          target.set(key, snapshot[key]);
          currentKeys["" + key] = true;
        }
      }

      Object.keys(currentKeys).forEach(function (key) {
        if (currentKeys[key] === false) target.delete(key);
      });
    }
  });
  Object.defineProperty(MapType.prototype, "getChildType", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this._subType;
    }
  });
  Object.defineProperty(MapType.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      var _this = this;

      if (!isPlainObject(value)) {
        return typeCheckFailure(context, value, "Value is not a plain object");
      }

      return flattenTypeErrors(Object.keys(value).map(function (path) {
        return _this._subType.validate(value[path], getContextForPath(context, path, _this._subType));
      }));
    }
  });
  Object.defineProperty(MapType.prototype, "getDefaultSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return EMPTY_OBJECT;
    }
  });
  Object.defineProperty(MapType.prototype, "removeChild", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, subpath) {
      node.storedValue.delete(subpath);
    }
  });
  return MapType;
}(ComplexType);

MapType.prototype.applySnapshot = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["action"])(MapType.prototype.applySnapshot);
/**
 * `types.map` - Creates a key based collection type who's children are all of a uniform declared type.
 * If the type stored in a map has an identifier, it is mandatory to store the child under that identifier in the map.
 *
 * This type will always produce [observable maps](https://mobx.js.org/refguide/map.html)
 *
 * Example:
 * ```ts
 * const Todo = types.model({
 *   id: types.identifier,
 *   task: types.string
 * })
 *
 * const TodoStore = types.model({
 *   todos: types.map(Todo)
 * })
 *
 * const s = TodoStore.create({ todos: {} })
 * unprotect(s)
 * s.todos.set(17, { task: "Grab coffee", id: 17 })
 * s.todos.put({ task: "Grab cookie", id: 18 }) // put will infer key from the identifier
 * console.log(s.todos.get(17).task) // prints: "Grab coffee"
 * ```
 *
 * @param subtype
 * @returns
 */

function map(subtype) {
  return new MapType("map<string, " + subtype.name + ">", subtype);
}
/**
 * Returns if a given value represents a map type.
 *
 * @param type
 * @returns `true` if it is a map type.
 */


function isMapType(type) {
  return isType(type) && (type.flags & TypeFlags.Map) > 0;
}
/**
 * @internal
 * @hidden
 */


var ArrayType =
/** @class */
function (_super) {
  __extends(ArrayType, _super);

  function ArrayType(name, _subType, hookInitializers) {
    if (hookInitializers === void 0) {
      hookInitializers = [];
    }

    var _this = _super.call(this, name) || this;

    Object.defineProperty(_this, "_subType", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _subType
    });
    Object.defineProperty(_this, "flags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: TypeFlags.Array
    });
    Object.defineProperty(_this, "hookInitializers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    _this.hookInitializers = hookInitializers;
    return _this;
  }

  Object.defineProperty(ArrayType.prototype, "hooks", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (hooks) {
      var hookInitializers = this.hookInitializers.length > 0 ? this.hookInitializers.concat(hooks) : [hooks];
      return new ArrayType(this.name, this._subType, hookInitializers);
    }
  });
  Object.defineProperty(ArrayType.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      return createObjectNode(this, parent, subpath, environment, initialValue);
    }
  });
  Object.defineProperty(ArrayType.prototype, "initializeChildNodes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (objNode, snapshot) {
      if (snapshot === void 0) {
        snapshot = [];
      }

      var subType = objNode.type._subType;
      var result = {};
      snapshot.forEach(function (item, index) {
        var subpath = "" + index;
        result[subpath] = subType.instantiate(objNode, subpath, undefined, item);
      });
      return result;
    }
  });
  Object.defineProperty(ArrayType.prototype, "createNewInstance", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (childNodes) {
      return mobx__WEBPACK_IMPORTED_MODULE_0__["observable"].array(convertChildNodesToArray(childNodes), mobxShallow);
    }
  });
  Object.defineProperty(ArrayType.prototype, "finalizeNewInstance", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, instance) {
      Object(mobx__WEBPACK_IMPORTED_MODULE_0__["_getAdministration"])(instance).dehancer = node.unbox;
      var type = node.type;
      type.hookInitializers.forEach(function (initializer) {
        var hooks = initializer(instance);
        Object.keys(hooks).forEach(function (name) {
          var hook = hooks[name];
          var actionInvoker = createActionInvoker(instance, name, hook);
          (!devMode() ? addHiddenFinalProp : addHiddenWritableProp)(instance, name, actionInvoker);
        });
      });
      Object(mobx__WEBPACK_IMPORTED_MODULE_0__["intercept"])(instance, this.willChange);
      Object(mobx__WEBPACK_IMPORTED_MODULE_0__["observe"])(instance, this.didChange);
    }
  });
  Object.defineProperty(ArrayType.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this._subType.describe() + "[]";
    }
  });
  Object.defineProperty(ArrayType.prototype, "getChildren", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      return node.storedValue.slice();
    }
  });
  Object.defineProperty(ArrayType.prototype, "getChildNode", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, key) {
      var index = Number(key);
      if (index < node.storedValue.length) return node.storedValue[index];
      throw fail$1("Not a child: " + key);
    }
  });
  Object.defineProperty(ArrayType.prototype, "willChange", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (change) {
      var node = getStateTreeNode(change.object);
      node.assertWritable({
        subpath: "" + change.index
      });
      var subType = node.type._subType;
      var childNodes = node.getChildren();

      switch (change.type) {
        case "update":
          {
            if (change.newValue === change.object[change.index]) return null;
            var updatedNodes = reconcileArrayChildren(node, subType, [childNodes[change.index]], [change.newValue], [change.index]);

            if (!updatedNodes) {
              return null;
            }

            change.newValue = updatedNodes[0];
          }
          break;

        case "splice":
          {
            var index_1 = change.index,
                removedCount = change.removedCount,
                added = change.added;
            var addedNodes = reconcileArrayChildren(node, subType, childNodes.slice(index_1, index_1 + removedCount), added, added.map(function (_, i) {
              return index_1 + i;
            }));

            if (!addedNodes) {
              return null;
            }

            change.added = addedNodes; // update paths of remaining items

            for (var i = index_1 + removedCount; i < childNodes.length; i++) {
              childNodes[i].setParent(node, "" + (i + added.length - removedCount));
            }
          }
          break;
      }

      return change;
    }
  });
  Object.defineProperty(ArrayType.prototype, "getSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      return node.getChildren().map(function (childNode) {
        return childNode.snapshot;
      });
    }
  });
  Object.defineProperty(ArrayType.prototype, "processInitialSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (childNodes) {
      var processed = [];
      Object.keys(childNodes).forEach(function (key) {
        processed.push(childNodes[key].getSnapshot());
      });
      return processed;
    }
  });
  Object.defineProperty(ArrayType.prototype, "didChange", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (change) {
      var node = getStateTreeNode(change.object);

      switch (change.type) {
        case "update":
          return void node.emitPatch({
            op: "replace",
            path: "" + change.index,
            value: change.newValue.snapshot,
            oldValue: change.oldValue ? change.oldValue.snapshot : undefined
          }, node);

        case "splice":
          for (var i = change.removedCount - 1; i >= 0; i--) node.emitPatch({
            op: "remove",
            path: "" + (change.index + i),
            oldValue: change.removed[i].snapshot
          }, node);

          for (var i = 0; i < change.addedCount; i++) node.emitPatch({
            op: "add",
            path: "" + (change.index + i),
            value: node.getChildNode("" + (change.index + i)).snapshot,
            oldValue: undefined
          }, node);

          return;
      }
    }
  });
  Object.defineProperty(ArrayType.prototype, "applyPatchLocally", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, subpath, patch) {
      var target = node.storedValue;
      var index = subpath === "-" ? target.length : Number(subpath);

      switch (patch.op) {
        case "replace":
          target[index] = patch.value;
          break;

        case "add":
          target.splice(index, 0, patch.value);
          break;

        case "remove":
          target.splice(index, 1);
          break;
      }
    }
  });
  Object.defineProperty(ArrayType.prototype, "applySnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, snapshot) {
      typecheckInternal(this, snapshot);
      var target = node.storedValue;
      target.replace(snapshot);
    }
  });
  Object.defineProperty(ArrayType.prototype, "getChildType", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this._subType;
    }
  });
  Object.defineProperty(ArrayType.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      var _this = this;

      if (!isArray(value)) {
        return typeCheckFailure(context, value, "Value is not an array");
      }

      return flattenTypeErrors(value.map(function (item, index) {
        return _this._subType.validate(item, getContextForPath(context, "" + index, _this._subType));
      }));
    }
  });
  Object.defineProperty(ArrayType.prototype, "getDefaultSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return EMPTY_ARRAY;
    }
  });
  Object.defineProperty(ArrayType.prototype, "removeChild", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, subpath) {
      node.storedValue.splice(Number(subpath), 1);
    }
  });
  return ArrayType;
}(ComplexType);

ArrayType.prototype.applySnapshot = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["action"])(ArrayType.prototype.applySnapshot);
/**
 * `types.array` - Creates an index based collection type who's children are all of a uniform declared type.
 *
 * This type will always produce [observable arrays](https://mobx.js.org/refguide/array.html)
 *
 * Example:
 * ```ts
 * const Todo = types.model({
 *   task: types.string
 * })
 *
 * const TodoStore = types.model({
 *   todos: types.array(Todo)
 * })
 *
 * const s = TodoStore.create({ todos: [] })
 * unprotect(s) // needed to allow modifying outside of an action
 * s.todos.push({ task: "Grab coffee" })
 * console.log(s.todos[0]) // prints: "Grab coffee"
 * ```
 *
 * @param subtype
 * @returns
 */

function array(subtype) {
  assertIsType(subtype, 1);
  return new ArrayType(subtype.name + "[]", subtype);
}

function reconcileArrayChildren(parent, childType, oldNodes, newValues, newPaths) {
  var nothingChanged = true;

  for (var i = 0;; i++) {
    var hasNewNode = i <= newValues.length - 1;
    var oldNode = oldNodes[i];
    var newValue = hasNewNode ? newValues[i] : undefined;
    var newPath = "" + newPaths[i]; // for some reason, instead of newValue we got a node, fallback to the storedValue
    // TODO: https://github.com/mobxjs/mobx-state-tree/issues/340#issuecomment-325581681

    if (isNode(newValue)) newValue = newValue.storedValue;

    if (!oldNode && !hasNewNode) {
      // both are empty, end
      break;
    } else if (!hasNewNode) {
      // new one does not exists
      nothingChanged = false;
      oldNodes.splice(i, 1);

      if (oldNode instanceof ObjectNode) {
        // since it is going to be returned by pop/splice/shift better create it before killing it
        // so it doesn't end up in an undead state
        oldNode.createObservableInstanceIfNeeded();
      }

      oldNode.die();
      i--;
    } else if (!oldNode) {
      // there is no old node, create it
      // check if already belongs to the same parent. if so, avoid pushing item in. only swapping can occur.
      if (isStateTreeNode(newValue) && getStateTreeNode(newValue).parent === parent) {
        // this node is owned by this parent, but not in the reconcilable set, so it must be double
        throw fail$1("Cannot add an object to a state tree if it is already part of the same or another state tree. Tried to assign an object to '" + parent.path + "/" + newPath + "', but it lives already at '" + getStateTreeNode(newValue).path + "'");
      }

      nothingChanged = false;
      var newNode = valueAsNode(childType, parent, newPath, newValue);
      oldNodes.splice(i, 0, newNode);
    } else if (areSame(oldNode, newValue)) {
      // both are the same, reconcile
      oldNodes[i] = valueAsNode(childType, parent, newPath, newValue, oldNode);
    } else {
      // nothing to do, try to reorder
      var oldMatch = undefined; // find a possible candidate to reuse

      for (var j = i; j < oldNodes.length; j++) {
        if (areSame(oldNodes[j], newValue)) {
          oldMatch = oldNodes.splice(j, 1)[0];
          break;
        }
      }

      nothingChanged = false;
      var newNode = valueAsNode(childType, parent, newPath, newValue, oldMatch);
      oldNodes.splice(i, 0, newNode);
    }
  }

  return nothingChanged ? null : oldNodes;
}
/**
 * Convert a value to a node at given parent and subpath. Attempts to reuse old node if possible and given.
 */


function valueAsNode(childType, parent, subpath, newValue, oldNode) {
  // ensure the value is valid-ish
  typecheckInternal(childType, newValue);

  function getNewNode() {
    // the new value has a MST node
    if (isStateTreeNode(newValue)) {
      var childNode = getStateTreeNode(newValue);
      childNode.assertAlive(EMPTY_OBJECT); // the node lives here

      if (childNode.parent !== null && childNode.parent === parent) {
        childNode.setParent(parent, subpath);
        return childNode;
      }
    } // there is old node and new one is a value/snapshot


    if (oldNode) {
      return childType.reconcile(oldNode, newValue, parent, subpath);
    } // nothing to do, create from scratch


    return childType.instantiate(parent, subpath, undefined, newValue);
  }

  var newNode = getNewNode();

  if (oldNode && oldNode !== newNode) {
    if (oldNode instanceof ObjectNode) {
      // since it is going to be returned by pop/splice/shift better create it before killing it
      // so it doesn't end up in an undead state
      oldNode.createObservableInstanceIfNeeded();
    }

    oldNode.die();
  }

  return newNode;
}
/**
 * Check if a node holds a value.
 */


function areSame(oldNode, newValue) {
  // never consider dead old nodes for reconciliation
  if (!oldNode.isAlive) {
    return false;
  } // the new value has the same node


  if (isStateTreeNode(newValue)) {
    var newNode = getStateTreeNode(newValue);
    return newNode.isAlive && newNode === oldNode;
  } // the provided value is the snapshot of the old node


  if (oldNode.snapshot === newValue) {
    return true;
  } // new value is a snapshot with the correct identifier


  return oldNode instanceof ObjectNode && oldNode.identifier !== null && oldNode.identifierAttribute && isPlainObject(newValue) && oldNode.identifier === normalizeIdentifier(newValue[oldNode.identifierAttribute]) && oldNode.type.is(newValue);
}
/**
 * Returns if a given value represents an array type.
 *
 * @param type
 * @returns `true` if the type is an array type.
 */


function isArrayType(type) {
  return isType(type) && (type.flags & TypeFlags.Array) > 0;
}

var PRE_PROCESS_SNAPSHOT = "preProcessSnapshot";
var POST_PROCESS_SNAPSHOT = "postProcessSnapshot";

function objectTypeToString() {
  return getStateTreeNode(this).toString();
}

var defaultObjectOptions = {
  name: "AnonymousModel",
  properties: {},
  initializers: EMPTY_ARRAY
};

function toPropertiesObject(declaredProps) {
  // loop through properties and ensures that all items are types
  return Object.keys(declaredProps).reduce(function (props, key) {
    var _a, _b, _c; // warn if user intended a HOOK


    if (key in Hook) throw fail$1("Hook '" + key + "' was defined as property. Hooks should be defined as part of the actions"); // the user intended to use a view

    var descriptor = Object.getOwnPropertyDescriptor(props, key);

    if ("get" in descriptor) {
      throw fail$1("Getters are not supported as properties. Please use views instead");
    } // undefined and null are not valid


    var value = descriptor.value;

    if (value === null || value === undefined) {
      throw fail$1("The default value of an attribute cannot be null or undefined as the type cannot be inferred. Did you mean `types.maybe(someType)`?"); // its a primitive, convert to its type
    } else if (isPrimitive(value)) {
      return Object.assign({}, props, (_a = {}, _a[key] = optional(getPrimitiveFactoryFromValue(value), value), _a)); // map defaults to empty object automatically for models
    } else if (value instanceof MapType) {
      return Object.assign({}, props, (_b = {}, _b[key] = optional(value, {}), _b));
    } else if (value instanceof ArrayType) {
      return Object.assign({}, props, (_c = {}, _c[key] = optional(value, []), _c)); // its already a type
    } else if (isType(value)) {
      return props; // its a function, maybe the user wanted a view?
    } else if (devMode() && typeof value === "function") {
      throw fail$1("Invalid type definition for property '" + key + "', it looks like you passed a function. Did you forget to invoke it, or did you intend to declare a view / action?"); // no other complex values
    } else if (devMode() && typeof value === "object") {
      throw fail$1("Invalid type definition for property '" + key + "', it looks like you passed an object. Try passing another model type or a types.frozen."); // WTF did you pass in mate?
    } else {
      throw fail$1("Invalid type definition for property '" + key + "', cannot infer a type from a value like '" + value + "' (" + typeof value + ")");
    }
  }, declaredProps);
}
/**
 * @internal
 * @hidden
 */


var ModelType =
/** @class */
function (_super) {
  __extends(ModelType, _super);

  function ModelType(opts) {
    var _this = _super.call(this, opts.name || defaultObjectOptions.name) || this;

    Object.defineProperty(_this, "flags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: TypeFlags.Object
    });
    /*
     * The original object definition
     */

    Object.defineProperty(_this, "initializers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "properties", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "preProcessor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "postProcessor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "propertyNames", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "named", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: function (name) {
        return _this.cloneAndEnhance({
          name: name
        });
      }
    });
    Object.defineProperty(_this, "props", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: function (properties) {
        return _this.cloneAndEnhance({
          properties: properties
        });
      }
    });
    Object.defineProperty(_this, "preProcessSnapshot", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: function (preProcessor) {
        var currentPreprocessor = _this.preProcessor;
        if (!currentPreprocessor) return _this.cloneAndEnhance({
          preProcessor: preProcessor
        });else return _this.cloneAndEnhance({
          preProcessor: function (snapshot) {
            return currentPreprocessor(preProcessor(snapshot));
          }
        });
      }
    });
    Object.defineProperty(_this, "postProcessSnapshot", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: function (postProcessor) {
        var currentPostprocessor = _this.postProcessor;
        if (!currentPostprocessor) return _this.cloneAndEnhance({
          postProcessor: postProcessor
        });else return _this.cloneAndEnhance({
          postProcessor: function (snapshot) {
            return postProcessor(currentPostprocessor(snapshot));
          }
        });
      }
    });
    Object.assign(_this, defaultObjectOptions, opts); // ensures that any default value gets converted to its related type

    _this.properties = toPropertiesObject(_this.properties);
    freeze(_this.properties); // make sure nobody messes with it

    _this.propertyNames = Object.keys(_this.properties);
    _this.identifierAttribute = _this._getIdentifierAttribute();
    return _this;
  }

  Object.defineProperty(ModelType.prototype, "_getIdentifierAttribute", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var identifierAttribute = undefined;
      this.forAllProps(function (propName, propType) {
        if (propType.flags & TypeFlags.Identifier) {
          if (identifierAttribute) throw fail$1("Cannot define property '" + propName + "' as object identifier, property '" + identifierAttribute + "' is already defined as identifier property");
          identifierAttribute = propName;
        }
      });
      return identifierAttribute;
    }
  });
  Object.defineProperty(ModelType.prototype, "cloneAndEnhance", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (opts) {
      return new ModelType({
        name: opts.name || this.name,
        properties: Object.assign({}, this.properties, opts.properties),
        initializers: this.initializers.concat(opts.initializers || []),
        preProcessor: opts.preProcessor || this.preProcessor,
        postProcessor: opts.postProcessor || this.postProcessor
      });
    }
  });
  Object.defineProperty(ModelType.prototype, "actions", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (fn) {
      var _this = this;

      var actionInitializer = function (self) {
        _this.instantiateActions(self, fn(self));

        return self;
      };

      return this.cloneAndEnhance({
        initializers: [actionInitializer]
      });
    }
  });
  Object.defineProperty(ModelType.prototype, "instantiateActions", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (self, actions) {
      // check if return is correct
      if (!isPlainObject(actions)) throw fail$1("actions initializer should return a plain object containing actions"); // bind actions to the object created

      Object.keys(actions).forEach(function (name) {
        // warn if preprocessor was given
        if (name === PRE_PROCESS_SNAPSHOT) throw fail$1("Cannot define action '" + PRE_PROCESS_SNAPSHOT + "', it should be defined using 'type.preProcessSnapshot(fn)' instead"); // warn if postprocessor was given

        if (name === POST_PROCESS_SNAPSHOT) throw fail$1("Cannot define action '" + POST_PROCESS_SNAPSHOT + "', it should be defined using 'type.postProcessSnapshot(fn)' instead");
        var action2 = actions[name]; // apply hook composition

        var baseAction = self[name];

        if (name in Hook && baseAction) {
          var specializedAction_1 = action2;

          action2 = function () {
            baseAction.apply(null, arguments);
            specializedAction_1.apply(null, arguments);
          };
        } // the goal of this is to make sure actions using "this" can call themselves,
        // while still allowing the middlewares to register them


        var middlewares = action2.$mst_middleware; // make sure middlewares are not lost

        var boundAction = action2.bind(actions);
        boundAction.$mst_middleware = middlewares;
        var actionInvoker = createActionInvoker(self, name, boundAction);
        actions[name] = actionInvoker;
        (!devMode() ? addHiddenFinalProp : addHiddenWritableProp)(self, name, actionInvoker);
      });
    }
  });
  Object.defineProperty(ModelType.prototype, "volatile", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (fn) {
      var _this = this;

      if (typeof fn !== "function") {
        throw fail$1("You passed an " + typeof fn + " to volatile state as an argument, when function is expected");
      }

      var stateInitializer = function (self) {
        _this.instantiateVolatileState(self, fn(self));

        return self;
      };

      return this.cloneAndEnhance({
        initializers: [stateInitializer]
      });
    }
  });
  Object.defineProperty(ModelType.prototype, "instantiateVolatileState", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (self, state) {
      // check views return
      if (!isPlainObject(state)) throw fail$1("volatile state initializer should return a plain object containing state");
      Object(mobx__WEBPACK_IMPORTED_MODULE_0__["set"])(self, state);
    }
  });
  Object.defineProperty(ModelType.prototype, "extend", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (fn) {
      var _this = this;

      var initializer = function (self) {
        var _a = fn(self),
            actions = _a.actions,
            views = _a.views,
            state = _a.state,
            rest = __rest(_a, ["actions", "views", "state"]);

        for (var key in rest) throw fail$1("The `extend` function should return an object with a subset of the fields 'actions', 'views' and 'state'. Found invalid key '" + key + "'");

        if (state) _this.instantiateVolatileState(self, state);
        if (views) _this.instantiateViews(self, views);
        if (actions) _this.instantiateActions(self, actions);
        return self;
      };

      return this.cloneAndEnhance({
        initializers: [initializer]
      });
    }
  });
  Object.defineProperty(ModelType.prototype, "views", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (fn) {
      var _this = this;

      var viewInitializer = function (self) {
        _this.instantiateViews(self, fn(self));

        return self;
      };

      return this.cloneAndEnhance({
        initializers: [viewInitializer]
      });
    }
  });
  Object.defineProperty(ModelType.prototype, "instantiateViews", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (self, views) {
      // check views return
      if (!isPlainObject(views)) throw fail$1("views initializer should return a plain object containing views");
      Object.keys(views).forEach(function (key) {
        var _a; // is this a computed property?


        var descriptor = Object.getOwnPropertyDescriptor(views, key);

        if ("get" in descriptor) {
          if (Object(mobx__WEBPACK_IMPORTED_MODULE_0__["isComputedProp"])(self, key)) {
            var computedValue = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["_getAdministration"])(self, key); // TODO: mobx currently does not allow redefining computes yet, pending #1121
            // FIXME: this binds to the internals of mobx!


            computedValue.derivation = descriptor.get;
            computedValue.scope = self;
            if (descriptor.set) computedValue.setter = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["action"])(computedValue.name + "-setter", descriptor.set);
          } else {
            Object.defineProperty(self, key, descriptor);
            Object(mobx__WEBPACK_IMPORTED_MODULE_0__["makeObservable"])(self, (_a = {}, _a[key] = mobx__WEBPACK_IMPORTED_MODULE_0__["computed"], _a));
          }
        } else if (typeof descriptor.value === "function") {
          (!devMode() ? addHiddenFinalProp : addHiddenWritableProp)(self, key, descriptor.value);
        } else {
          throw fail$1("A view member should either be a function or getter based property");
        }
      });
    }
  });
  Object.defineProperty(ModelType.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      var value = isStateTreeNode(initialValue) ? initialValue : this.applySnapshotPreProcessor(initialValue);
      return createObjectNode(this, parent, subpath, environment, value); // Optimization: record all prop- view- and action names after first construction, and generate an optimal base class
      // that pre-reserves all these fields for fast object-member lookups
    }
  });
  Object.defineProperty(ModelType.prototype, "initializeChildNodes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (objNode, initialSnapshot) {
      if (initialSnapshot === void 0) {
        initialSnapshot = {};
      }

      var type = objNode.type;
      var result = {};
      type.forAllProps(function (name, childType) {
        result[name] = childType.instantiate(objNode, name, undefined, initialSnapshot[name]);
      });
      return result;
    }
  });
  Object.defineProperty(ModelType.prototype, "createNewInstance", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (childNodes) {
      return mobx__WEBPACK_IMPORTED_MODULE_0__["observable"].object(childNodes, EMPTY_OBJECT, mobxShallow);
    }
  });
  Object.defineProperty(ModelType.prototype, "finalizeNewInstance", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, instance) {
      addHiddenFinalProp(instance, "toString", objectTypeToString);
      this.forAllProps(function (name) {
        Object(mobx__WEBPACK_IMPORTED_MODULE_0__["_interceptReads"])(instance, name, node.unbox);
      });
      this.initializers.reduce(function (self, fn) {
        return fn(self);
      }, instance);
      Object(mobx__WEBPACK_IMPORTED_MODULE_0__["intercept"])(instance, this.willChange);
      Object(mobx__WEBPACK_IMPORTED_MODULE_0__["observe"])(instance, this.didChange);
    }
  });
  Object.defineProperty(ModelType.prototype, "willChange", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (chg) {
      // TODO: mobx typings don't seem to take into account that newValue can be set even when removing a prop
      var change = chg;
      var node = getStateTreeNode(change.object);
      var subpath = change.name;
      node.assertWritable({
        subpath: subpath
      });
      var childType = node.type.properties[subpath]; // only properties are typed, state are stored as-is references

      if (childType) {
        typecheckInternal(childType, change.newValue);
        change.newValue = childType.reconcile(node.getChildNode(subpath), change.newValue, node, subpath);
      }

      return change;
    }
  });
  Object.defineProperty(ModelType.prototype, "didChange", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (chg) {
      // TODO: mobx typings don't seem to take into account that newValue can be set even when removing a prop
      var change = chg;
      var childNode = getStateTreeNode(change.object);
      var childType = childNode.type.properties[change.name];

      if (!childType) {
        // don't emit patches for volatile state
        return;
      }

      var oldChildValue = change.oldValue ? change.oldValue.snapshot : undefined;
      childNode.emitPatch({
        op: "replace",
        path: escapeJsonPath(change.name),
        value: change.newValue.snapshot,
        oldValue: oldChildValue
      }, childNode);
    }
  });
  Object.defineProperty(ModelType.prototype, "getChildren", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      var _this = this;

      var res = [];
      this.forAllProps(function (name) {
        res.push(_this.getChildNode(node, name));
      });
      return res;
    }
  });
  Object.defineProperty(ModelType.prototype, "getChildNode", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, key) {
      if (!(key in this.properties)) throw fail$1("Not a value property: " + key);

      var adm = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["_getAdministration"])(node.storedValue, key);

      var childNode = adm.raw();
      if (!childNode) throw fail$1("Node not available for property " + key);
      return childNode;
    }
  });
  Object.defineProperty(ModelType.prototype, "getSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, applyPostProcess) {
      var _this = this;

      if (applyPostProcess === void 0) {
        applyPostProcess = true;
      }

      var res = {};
      this.forAllProps(function (name, type) {
        Object(mobx__WEBPACK_IMPORTED_MODULE_0__["getAtom"])(node.storedValue, name).reportObserved();
        res[name] = _this.getChildNode(node, name).snapshot;
      });

      if (applyPostProcess) {
        return this.applySnapshotPostProcessor(res);
      }

      return res;
    }
  });
  Object.defineProperty(ModelType.prototype, "processInitialSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (childNodes) {
      var processed = {};
      Object.keys(childNodes).forEach(function (key) {
        processed[key] = childNodes[key].getSnapshot();
      });
      return this.applySnapshotPostProcessor(processed);
    }
  });
  Object.defineProperty(ModelType.prototype, "applyPatchLocally", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, subpath, patch) {
      if (!(patch.op === "replace" || patch.op === "add")) {
        throw fail$1("object does not support operation " + patch.op);
      }

      node.storedValue[subpath] = patch.value;
    }
  });
  Object.defineProperty(ModelType.prototype, "applySnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, snapshot) {
      var preProcessedSnapshot = this.applySnapshotPreProcessor(snapshot);
      typecheckInternal(this, preProcessedSnapshot);
      this.forAllProps(function (name) {
        node.storedValue[name] = preProcessedSnapshot[name];
      });
    }
  });
  Object.defineProperty(ModelType.prototype, "applySnapshotPreProcessor", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (snapshot) {
      var processor = this.preProcessor;
      return processor ? processor.call(null, snapshot) : snapshot;
    }
  });
  Object.defineProperty(ModelType.prototype, "applySnapshotPostProcessor", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (snapshot) {
      var postProcessor = this.postProcessor;
      if (postProcessor) return postProcessor.call(null, snapshot);
      return snapshot;
    }
  });
  Object.defineProperty(ModelType.prototype, "getChildType", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (propertyName) {
      assertIsString(propertyName, 1);
      return this.properties[propertyName];
    }
  });
  Object.defineProperty(ModelType.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      var _this = this;

      var snapshot = this.applySnapshotPreProcessor(value);

      if (!isPlainObject(snapshot)) {
        return typeCheckFailure(context, snapshot, "Value is not a plain object");
      }

      return flattenTypeErrors(this.propertyNames.map(function (key) {
        return _this.properties[key].validate(snapshot[key], getContextForPath(context, key, _this.properties[key]));
      }));
    }
  });
  Object.defineProperty(ModelType.prototype, "forAllProps", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (fn) {
      var _this = this;

      this.propertyNames.forEach(function (key) {
        return fn(key, _this.properties[key]);
      });
    }
  });
  Object.defineProperty(ModelType.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var _this = this; // optimization: cache


      return "{ " + this.propertyNames.map(function (key) {
        return key + ": " + _this.properties[key].describe();
      }).join("; ") + " }";
    }
  });
  Object.defineProperty(ModelType.prototype, "getDefaultSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return EMPTY_OBJECT;
    }
  });
  Object.defineProperty(ModelType.prototype, "removeChild", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node, subpath) {
      node.storedValue[subpath] = undefined;
    }
  });
  return ModelType;
}(ComplexType);

ModelType.prototype.applySnapshot = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["action"])(ModelType.prototype.applySnapshot);
/**
 * `types.model` - Creates a new model type by providing a name, properties, volatile state and actions.
 *
 * See the [model type](/concepts/trees#creating-models) description or the [getting started](intro/getting-started.md#getting-started-1) tutorial.
 */

function model() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  var name = typeof args[0] === "string" ? args.shift() : "AnonymousModel";
  var properties = args.shift() || {};
  return new ModelType({
    name: name,
    properties: properties
  });
}
/**
 * `types.compose` - Composes a new model from one or more existing model types.
 * This method can be invoked in two forms:
 * Given 2 or more model types, the types are composed into a new Type.
 * Given first parameter as a string and 2 or more model types,
 * the types are composed into a new Type with the given name
 */


function compose() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  } // TODO: just join the base type names if no name is provided


  var hasTypename = typeof args[0] === "string";
  var typeName = hasTypename ? args[0] : "AnonymousModel";

  if (hasTypename) {
    args.shift();
  } // check all parameters


  if (devMode()) {
    args.forEach(function (type, i) {
      assertArg(type, isModelType, "mobx-state-tree model type", hasTypename ? i + 2 : i + 1);
    });
  }

  return args.reduce(function (prev, cur) {
    return prev.cloneAndEnhance({
      name: prev.name + "_" + cur.name,
      properties: cur.properties,
      initializers: cur.initializers,
      preProcessor: function (snapshot) {
        return cur.applySnapshotPreProcessor(prev.applySnapshotPreProcessor(snapshot));
      },
      postProcessor: function (snapshot) {
        return cur.applySnapshotPostProcessor(prev.applySnapshotPostProcessor(snapshot));
      }
    });
  }).named(typeName);
}
/**
 * Returns if a given value represents a model type.
 *
 * @param type
 * @returns
 */


function isModelType(type) {
  return isType(type) && (type.flags & TypeFlags.Object) > 0;
} // TODO: implement CoreType using types.custom ?

/**
 * @internal
 * @hidden
 */


var CoreType =
/** @class */
function (_super) {
  __extends(CoreType, _super);

  function CoreType(name, flags, checker, initializer) {
    if (initializer === void 0) {
      initializer = identity;
    }

    var _this = _super.call(this, name) || this;

    Object.defineProperty(_this, "flags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: flags
    });
    Object.defineProperty(_this, "checker", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: checker
    });
    Object.defineProperty(_this, "initializer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: initializer
    });
    _this.flags = flags;
    return _this;
  }

  Object.defineProperty(CoreType.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this.name;
    }
  });
  Object.defineProperty(CoreType.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      return createScalarNode(this, parent, subpath, environment, initialValue);
    }
  });
  Object.defineProperty(CoreType.prototype, "createNewInstance", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (snapshot) {
      return this.initializer(snapshot);
    }
  });
  Object.defineProperty(CoreType.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      if (isPrimitive(value) && this.checker(value)) {
        return typeCheckSuccess();
      }

      var typeName = this.name === "Date" ? "Date or a unix milliseconds timestamp" : this.name;
      return typeCheckFailure(context, value, "Value is not a " + typeName);
    }
  });
  return CoreType;
}(SimpleType);
/**
 * `types.string` - Creates a type that can only contain a string value.
 * This type is used for string values by default
 *
 * Example:
 * ```ts
 * const Person = types.model({
 *   firstName: types.string,
 *   lastName: "Doe"
 * })
 * ```
 */
// tslint:disable-next-line:variable-name


var string = new CoreType("string", TypeFlags.String, function (v) {
  return typeof v === "string";
});
/**
 * `types.number` - Creates a type that can only contain a numeric value.
 * This type is used for numeric values by default
 *
 * Example:
 * ```ts
 * const Vector = types.model({
 *   x: types.number,
 *   y: 1.5
 * })
 * ```
 */
// tslint:disable-next-line:variable-name

var number = new CoreType("number", TypeFlags.Number, function (v) {
  return typeof v === "number";
});
/**
 * `types.integer` - Creates a type that can only contain an integer value.
 * This type is used for integer values by default
 *
 * Example:
 * ```ts
 * const Size = types.model({
 *   width: types.integer,
 *   height: 10
 * })
 * ```
 */
// tslint:disable-next-line:variable-name

var integer = new CoreType("integer", TypeFlags.Integer, function (v) {
  return isInteger(v);
});
/**
 * `types.boolean` - Creates a type that can only contain a boolean value.
 * This type is used for boolean values by default
 *
 * Example:
 * ```ts
 * const Thing = types.model({
 *   isCool: types.boolean,
 *   isAwesome: false
 * })
 * ```
 */
// tslint:disable-next-line:variable-name

var boolean = new CoreType("boolean", TypeFlags.Boolean, function (v) {
  return typeof v === "boolean";
});
/**
 * `types.null` - The type of the value `null`
 */

var nullType = new CoreType("null", TypeFlags.Null, function (v) {
  return v === null;
});
/**
 * `types.undefined` - The type of the value `undefined`
 */

var undefinedType = new CoreType("undefined", TypeFlags.Undefined, function (v) {
  return v === undefined;
});

var _DatePrimitive = new CoreType("Date", TypeFlags.Date, function (v) {
  return typeof v === "number" || v instanceof Date;
}, function (v) {
  return v instanceof Date ? v : new Date(v);
});

_DatePrimitive.getSnapshot = function (node) {
  return node.storedValue.getTime();
};
/**
 * `types.Date` - Creates a type that can only contain a javascript Date value.
 *
 * Example:
 * ```ts
 * const LogLine = types.model({
 *   timestamp: types.Date,
 * })
 *
 * LogLine.create({ timestamp: new Date() })
 * ```
 */


var DatePrimitive = _DatePrimitive;
/**
 * @internal
 * @hidden
 */

function getPrimitiveFactoryFromValue(value) {
  switch (typeof value) {
    case "string":
      return string;

    case "number":
      return number;
    // In the future, isInteger(value) ? integer : number would be interesting, but would be too breaking for now

    case "boolean":
      return boolean;

    case "object":
      if (value instanceof Date) return DatePrimitive;
  }

  throw fail$1("Cannot determine primitive type from value " + value);
}
/**
 * Returns if a given value represents a primitive type.
 *
 * @param type
 * @returns
 */


function isPrimitiveType(type) {
  return isType(type) && (type.flags & (TypeFlags.String | TypeFlags.Number | TypeFlags.Integer | TypeFlags.Boolean | TypeFlags.Date)) > 0;
}
/**
 * @internal
 * @hidden
 */


var Literal =
/** @class */
function (_super) {
  __extends(Literal, _super);

  function Literal(value) {
    var _this = _super.call(this, JSON.stringify(value)) || this;

    Object.defineProperty(_this, "value", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "flags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: TypeFlags.Literal
    });
    _this.value = value;
    return _this;
  }

  Object.defineProperty(Literal.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      return createScalarNode(this, parent, subpath, environment, initialValue);
    }
  });
  Object.defineProperty(Literal.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return JSON.stringify(this.value);
    }
  });
  Object.defineProperty(Literal.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      if (isPrimitive(value) && value === this.value) {
        return typeCheckSuccess();
      }

      return typeCheckFailure(context, value, "Value is not a literal " + JSON.stringify(this.value));
    }
  });
  return Literal;
}(SimpleType);
/**
 * `types.literal` - The literal type will return a type that will match only the exact given type.
 * The given value must be a primitive, in order to be serialized to a snapshot correctly.
 * You can use literal to match exact strings for example the exact male or female string.
 *
 * Example:
 * ```ts
 * const Person = types.model({
 *     name: types.string,
 *     gender: types.union(types.literal('male'), types.literal('female'))
 * })
 * ```
 *
 * @param value The value to use in the strict equal check
 * @returns
 */


function literal(value) {
  // check that the given value is a primitive
  assertArg(value, isPrimitive, "primitive", 1);
  return new Literal(value);
}
/**
 * Returns if a given value represents a literal type.
 *
 * @param type
 * @returns
 */


function isLiteralType(type) {
  return isType(type) && (type.flags & TypeFlags.Literal) > 0;
}

var Refinement =
/** @class */
function (_super) {
  __extends(Refinement, _super);

  function Refinement(name, _subtype, _predicate, _message) {
    var _this = _super.call(this, name) || this;

    Object.defineProperty(_this, "_subtype", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _subtype
    });
    Object.defineProperty(_this, "_predicate", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _predicate
    });
    Object.defineProperty(_this, "_message", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _message
    });
    return _this;
  }

  Object.defineProperty(Refinement.prototype, "flags", {
    get: function () {
      return this._subtype.flags | TypeFlags.Refinement;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Refinement.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this.name;
    }
  });
  Object.defineProperty(Refinement.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      // create the child type
      return this._subtype.instantiate(parent, subpath, environment, initialValue);
    }
  });
  Object.defineProperty(Refinement.prototype, "isAssignableFrom", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (type) {
      return this._subtype.isAssignableFrom(type);
    }
  });
  Object.defineProperty(Refinement.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      var subtypeErrors = this._subtype.validate(value, context);

      if (subtypeErrors.length > 0) return subtypeErrors;
      var snapshot = isStateTreeNode(value) ? getStateTreeNode(value).snapshot : value;

      if (!this._predicate(snapshot)) {
        return typeCheckFailure(context, value, this._message(value));
      }

      return typeCheckSuccess();
    }
  });
  Object.defineProperty(Refinement.prototype, "reconcile", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (current, newValue, parent, subpath) {
      return this._subtype.reconcile(current, newValue, parent, subpath);
    }
  });
  Object.defineProperty(Refinement.prototype, "getSubTypes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this._subtype;
    }
  });
  return Refinement;
}(BaseType);
/**
 * `types.refinement` - Creates a type that is more specific than the base type, e.g. `types.refinement(types.string, value => value.length > 5)` to create a type of strings that can only be longer then 5.
 *
 * @param name
 * @param type
 * @param predicate
 * @returns
 */


function refinement() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  var name = typeof args[0] === "string" ? args.shift() : isType(args[0]) ? args[0].name : null;
  var type = args[0];
  var predicate = args[1];
  var message = args[2] ? args[2] : function (v) {
    return "Value does not respect the refinement predicate";
  }; // ensures all parameters are correct

  assertIsType(type, [1, 2]);
  assertIsString(name, 1);
  assertIsFunction(predicate, [2, 3]);
  assertIsFunction(message, [3, 4]);
  return new Refinement(name, type, predicate, message);
}
/**
 * Returns if a given value is a refinement type.
 *
 * @param type
 * @returns
 */


function isRefinementType(type) {
  return (type.flags & TypeFlags.Refinement) > 0;
}
/**
 * `types.enumeration` - Can be used to create an string based enumeration.
 * (note: this methods is just sugar for a union of string literals)
 *
 * Example:
 * ```ts
 * const TrafficLight = types.model({
 *   color: types.enumeration("Color", ["Red", "Orange", "Green"])
 * })
 * ```
 *
 * @param name descriptive name of the enumeration (optional)
 * @param options possible values this enumeration can have
 * @returns
 */


function enumeration(name, options) {
  var realOptions = typeof name === "string" ? options : name; // check all options

  if (devMode()) {
    realOptions.forEach(function (option, i) {
      assertIsString(option, i + 1);
    });
  }

  var type = union.apply(void 0, __spread(realOptions.map(function (option) {
    return literal("" + option);
  })));
  if (typeof name === "string") type.name = name;
  return type;
}
/**
 * @internal
 * @hidden
 */


var Union =
/** @class */
function (_super) {
  __extends(Union, _super);

  function Union(name, _types, options) {
    var _this = _super.call(this, name) || this;

    Object.defineProperty(_this, "_types", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _types
    });
    Object.defineProperty(_this, "_dispatcher", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_eager", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    });
    options = __assign({
      eager: true,
      dispatcher: undefined
    }, options);
    _this._dispatcher = options.dispatcher;
    if (!options.eager) _this._eager = false;
    return _this;
  }

  Object.defineProperty(Union.prototype, "flags", {
    get: function () {
      var result = TypeFlags.Union;

      this._types.forEach(function (type) {
        result |= type.flags;
      });

      return result;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Union.prototype, "isAssignableFrom", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (type) {
      return this._types.some(function (subType) {
        return subType.isAssignableFrom(type);
      });
    }
  });
  Object.defineProperty(Union.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return "(" + this._types.map(function (factory) {
        return factory.describe();
      }).join(" | ") + ")";
    }
  });
  Object.defineProperty(Union.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      var type = this.determineType(initialValue, undefined);
      if (!type) throw fail$1("No matching type for union " + this.describe()); // can happen in prod builds

      return type.instantiate(parent, subpath, environment, initialValue);
    }
  });
  Object.defineProperty(Union.prototype, "reconcile", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (current, newValue, parent, subpath) {
      var type = this.determineType(newValue, current.type);
      if (!type) throw fail$1("No matching type for union " + this.describe()); // can happen in prod builds

      return type.reconcile(current, newValue, parent, subpath);
    }
  });
  Object.defineProperty(Union.prototype, "determineType", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, reconcileCurrentType) {
      // try the dispatcher, if defined
      if (this._dispatcher) {
        return this._dispatcher(value);
      } // find the most accomodating type
      // if we are using reconciliation try the current node type first (fix for #1045)


      if (reconcileCurrentType) {
        if (reconcileCurrentType.is(value)) {
          return reconcileCurrentType;
        }

        return this._types.filter(function (t) {
          return t !== reconcileCurrentType;
        }).find(function (type) {
          return type.is(value);
        });
      } else {
        return this._types.find(function (type) {
          return type.is(value);
        });
      }
    }
  });
  Object.defineProperty(Union.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      if (this._dispatcher) {
        return this._dispatcher(value).validate(value, context);
      }

      var allErrors = [];
      var applicableTypes = 0;

      for (var i = 0; i < this._types.length; i++) {
        var type = this._types[i];
        var errors = type.validate(value, context);

        if (errors.length === 0) {
          if (this._eager) return typeCheckSuccess();else applicableTypes++;
        } else {
          allErrors.push(errors);
        }
      }

      if (applicableTypes === 1) return typeCheckSuccess();
      return typeCheckFailure(context, value, "No type is applicable for the union").concat(flattenTypeErrors(allErrors));
    }
  });
  Object.defineProperty(Union.prototype, "getSubTypes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this._types;
    }
  });
  return Union;
}(BaseType);
/**
 * `types.union` - Create a union of multiple types. If the correct type cannot be inferred unambiguously from a snapshot, provide a dispatcher function of the form `(snapshot) => Type`.
 *
 * @param optionsOrType
 * @param otherTypes
 * @returns
 */


function union(optionsOrType) {
  var otherTypes = [];

  for (var _i = 1; _i < arguments.length; _i++) {
    otherTypes[_i - 1] = arguments[_i];
  }

  var options = isType(optionsOrType) ? undefined : optionsOrType;
  var types = isType(optionsOrType) ? __spread([optionsOrType], otherTypes) : otherTypes;
  var name = "(" + types.map(function (type) {
    return type.name;
  }).join(" | ") + ")"; // check all options

  if (devMode()) {
    if (options) {
      assertArg(options, function (o) {
        return isPlainObject(o);
      }, "object { eager?: boolean, dispatcher?: Function }", 1);
    }

    types.forEach(function (type, i) {
      assertIsType(type, options ? i + 2 : i + 1);
    });
  }

  return new Union(name, types, options);
}
/**
 * Returns if a given value represents a union type.
 *
 * @param type
 * @returns
 */


function isUnionType(type) {
  return (type.flags & TypeFlags.Union) > 0;
}
/**
 * @hidden
 * @internal
 */


var OptionalValue =
/** @class */
function (_super) {
  __extends(OptionalValue, _super);

  function OptionalValue(_subtype, _defaultValue, optionalValues) {
    var _this = _super.call(this, _subtype.name) || this;

    Object.defineProperty(_this, "_subtype", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _subtype
    });
    Object.defineProperty(_this, "_defaultValue", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _defaultValue
    });
    Object.defineProperty(_this, "optionalValues", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: optionalValues
    });
    return _this;
  }

  Object.defineProperty(OptionalValue.prototype, "flags", {
    get: function () {
      return this._subtype.flags | TypeFlags.Optional;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(OptionalValue.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this._subtype.describe() + "?";
    }
  });
  Object.defineProperty(OptionalValue.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      if (this.optionalValues.indexOf(initialValue) >= 0) {
        var defaultInstanceOrSnapshot = this.getDefaultInstanceOrSnapshot();
        return this._subtype.instantiate(parent, subpath, environment, defaultInstanceOrSnapshot);
      }

      return this._subtype.instantiate(parent, subpath, environment, initialValue);
    }
  });
  Object.defineProperty(OptionalValue.prototype, "reconcile", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (current, newValue, parent, subpath) {
      return this._subtype.reconcile(current, this.optionalValues.indexOf(newValue) < 0 && this._subtype.is(newValue) ? newValue : this.getDefaultInstanceOrSnapshot(), parent, subpath);
    }
  });
  Object.defineProperty(OptionalValue.prototype, "getDefaultInstanceOrSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var defaultInstanceOrSnapshot = typeof this._defaultValue === "function" ? this._defaultValue() : this._defaultValue; // while static values are already snapshots and checked on types.optional
      // generator functions must always be rechecked just in case

      if (typeof this._defaultValue === "function") {
        typecheckInternal(this, defaultInstanceOrSnapshot);
      }

      return defaultInstanceOrSnapshot;
    }
  });
  Object.defineProperty(OptionalValue.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      // defaulted values can be skipped
      if (this.optionalValues.indexOf(value) >= 0) {
        return typeCheckSuccess();
      } // bounce validation to the sub-type


      return this._subtype.validate(value, context);
    }
  });
  Object.defineProperty(OptionalValue.prototype, "isAssignableFrom", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (type) {
      return this._subtype.isAssignableFrom(type);
    }
  });
  Object.defineProperty(OptionalValue.prototype, "getSubTypes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this._subtype;
    }
  });
  return OptionalValue;
}(BaseType);

function checkOptionalPreconditions(type, defaultValueOrFunction) {
  // make sure we never pass direct instances
  if (typeof defaultValueOrFunction !== "function" && isStateTreeNode(defaultValueOrFunction)) {
    throw fail$1("default value cannot be an instance, pass a snapshot or a function that creates an instance/snapshot instead");
  }

  assertIsType(type, 1);

  if (devMode()) {
    // we only check default values if they are passed directly
    // if they are generator functions they will be checked once they are generated
    // we don't check generator function results here to avoid generating a node just for type-checking purposes
    // which might generate side-effects
    if (typeof defaultValueOrFunction !== "function") {
      typecheckInternal(type, defaultValueOrFunction);
    }
  }
}
/**
 * `types.optional` - Can be used to create a property with a default value.
 *
 * Depending on the third argument (`optionalValues`) there are two ways of operation:
 * - If the argument is not provided, then if a value is not provided in the snapshot (`undefined` or missing),
 *   it will default to the provided `defaultValue`
 * - If the argument is provided, then if the value in the snapshot matches one of the optional values inside the array then it will
 *   default to the provided `defaultValue`. Additionally, if one of the optional values inside the array is `undefined` then a missing
 *   property is also valid.
 *
 *   Note that it is also possible to include values of the same type as the intended subtype as optional values,
 *   in this case the optional value will be transformed into the `defaultValue` (e.g. `types.optional(types.string, "unnamed", [undefined, ""])`
 *   will transform the snapshot values `undefined` (and therefore missing) and empty strings into the string `"unnamed"` when it gets
 *   instantiated).
 *
 * If `defaultValue` is a function, the function will be invoked for every new instance.
 * Applying a snapshot in which the optional value is one of the optional values (or `undefined`/_not_ present if none are provided) causes the
 * value to be reset.
 *
 * Example:
 * ```ts
 * const Todo = types.model({
 *   title: types.string,
 *   subtitle1: types.optional(types.string, "", [null]),
 *   subtitle2: types.optional(types.string, "", [null, undefined]),
 *   done: types.optional(types.boolean, false),
 *   created: types.optional(types.Date, () => new Date()),
 * })
 *
 * // if done is missing / undefined it will become false
 * // if created is missing / undefined it will get a freshly generated timestamp
 * // if subtitle1 is null it will default to "", but it cannot be missing or undefined
 * // if subtitle2 is null or undefined it will default to ""; since it can be undefined it can also be missing
 * const todo = Todo.create({ title: "Get coffee", subtitle1: null })
 * ```
 *
 * @param type
 * @param defaultValueOrFunction
 * @param optionalValues an optional array with zero or more primitive values (string, number, boolean, null or undefined)
 *                       that will be converted into the default. `[ undefined ]` is assumed when none is provided
 * @returns
 */


function optional(type, defaultValueOrFunction, optionalValues) {
  checkOptionalPreconditions(type, defaultValueOrFunction);
  return new OptionalValue(type, defaultValueOrFunction, optionalValues ? optionalValues : undefinedAsOptionalValues);
}

var undefinedAsOptionalValues = [undefined];
/**
 * Returns if a value represents an optional type.
 *
 * @template IT
 * @param type
 * @returns
 */

function isOptionalType(type) {
  return isType(type) && (type.flags & TypeFlags.Optional) > 0;
}

var optionalUndefinedType = optional(undefinedType, undefined);
var optionalNullType = optional(nullType, null);
/**
 * `types.maybe` - Maybe will make a type nullable, and also optional.
 * The value `undefined` will be used to represent nullability.
 *
 * @param type
 * @returns
 */

function maybe(type) {
  assertIsType(type, 1);
  return union(type, optionalUndefinedType);
}
/**
 * `types.maybeNull` - Maybe will make a type nullable, and also optional.
 * The value `null` will be used to represent no value.
 *
 * @param type
 * @returns
 */


function maybeNull(type) {
  assertIsType(type, 1);
  return union(type, optionalNullType);
}

var Late =
/** @class */
function (_super) {
  __extends(Late, _super);

  function Late(name, _definition) {
    var _this = _super.call(this, name) || this;

    Object.defineProperty(_this, "_definition", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _definition
    });
    Object.defineProperty(_this, "_subType", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    return _this;
  }

  Object.defineProperty(Late.prototype, "flags", {
    get: function () {
      return (this._subType ? this._subType.flags : 0) | TypeFlags.Late;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Late.prototype, "getSubType", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (mustSucceed) {
      if (!this._subType) {
        var t = undefined;

        try {
          t = this._definition();
        } catch (e) {
          if (e instanceof ReferenceError) // can happen in strict ES5 code when a definition is self refering
            t = undefined;else throw e;
        }

        if (mustSucceed && t === undefined) throw fail$1("Late type seems to be used too early, the definition (still) returns undefined");

        if (t) {
          if (devMode() && !isType(t)) throw fail$1("Failed to determine subtype, make sure types.late returns a type definition.");
          this._subType = t;
        }
      }

      return this._subType;
    }
  });
  Object.defineProperty(Late.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      return this.getSubType(true).instantiate(parent, subpath, environment, initialValue);
    }
  });
  Object.defineProperty(Late.prototype, "reconcile", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (current, newValue, parent, subpath) {
      return this.getSubType(true).reconcile(current, newValue, parent, subpath);
    }
  });
  Object.defineProperty(Late.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var t = this.getSubType(false);
      return t ? t.name : "<uknown late type>";
    }
  });
  Object.defineProperty(Late.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      var t = this.getSubType(false);

      if (!t) {
        // See #916; the variable the definition closure is pointing to wasn't defined yet, so can't be evaluted yet here
        return typeCheckSuccess();
      }

      return t.validate(value, context);
    }
  });
  Object.defineProperty(Late.prototype, "isAssignableFrom", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (type) {
      var t = this.getSubType(false);
      return t ? t.isAssignableFrom(type) : false;
    }
  });
  Object.defineProperty(Late.prototype, "getSubTypes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      var subtype = this.getSubType(false);
      return subtype ? subtype : cannotDetermineSubtype;
    }
  });
  return Late;
}(BaseType);
/**
 * `types.late` - Defines a type that gets implemented later. This is useful when you have to deal with circular dependencies.
 * Please notice that when defining circular dependencies TypeScript isn't smart enough to inference them.
 *
 * Example:
 * ```ts
 *   // TypeScript isn't smart enough to infer self referencing types.
 *  const Node = types.model({
 *       children: types.array(types.late((): IAnyModelType => Node)) // then typecast each array element to Instance<typeof Node>
 *  })
 * ```
 *
 * @param name The name to use for the type that will be returned.
 * @param type A function that returns the type that will be defined.
 * @returns
 */


function late(nameOrType, maybeType) {
  var name = typeof nameOrType === "string" ? nameOrType : "late(" + nameOrType.toString() + ")";
  var type = typeof nameOrType === "string" ? maybeType : nameOrType; // checks that the type is actually a late type

  if (devMode()) {
    if (!(typeof type === "function" && type.length === 0)) throw fail$1("Invalid late type, expected a function with zero arguments that returns a type, got: " + type);
  }

  return new Late(name, type);
}
/**
 * Returns if a given value represents a late type.
 *
 * @param type
 * @returns
 */


function isLateType(type) {
  return isType(type) && (type.flags & TypeFlags.Late) > 0;
}
/**
 * @internal
 * @hidden
 */


var Frozen =
/** @class */
function (_super) {
  __extends(Frozen, _super);

  function Frozen(subType) {
    var _this = _super.call(this, subType ? "frozen(" + subType.name + ")" : "frozen") || this;

    Object.defineProperty(_this, "subType", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: subType
    });
    Object.defineProperty(_this, "flags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: TypeFlags.Frozen
    });
    return _this;
  }

  Object.defineProperty(Frozen.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return "<any immutable value>";
    }
  });
  Object.defineProperty(Frozen.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, value) {
      // create the node
      return createScalarNode(this, parent, subpath, environment, deepFreeze(value));
    }
  });
  Object.defineProperty(Frozen.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      if (!isSerializable(value)) {
        return typeCheckFailure(context, value, "Value is not serializable and cannot be frozen");
      }

      if (this.subType) return this.subType.validate(value, context);
      return typeCheckSuccess();
    }
  });
  return Frozen;
}(SimpleType);

var untypedFrozenInstance = new Frozen();
/**
 * `types.frozen` - Frozen can be used to store any value that is serializable in itself (that is valid JSON).
 * Frozen values need to be immutable or treated as if immutable. They need be serializable as well.
 * Values stored in frozen will snapshotted as-is by MST, and internal changes will not be tracked.
 *
 * This is useful to store complex, but immutable values like vectors etc. It can form a powerful bridge to parts of your application that should be immutable, or that assume data to be immutable.
 *
 * Note: if you want to store free-form state that is mutable, or not serializeable, consider using volatile state instead.
 *
 * Frozen properties can be defined in three different ways
 * 1. `types.frozen(SubType)` - provide a valid MST type and frozen will check if the provided data conforms the snapshot for that type
 * 2. `types.frozen({ someDefaultValue: true})` - provide a primitive value, object or array, and MST will infer the type from that object, and also make it the default value for the field
 * 3. `types.frozen<TypeScriptType>()` - provide a typescript type, to help in strongly typing the field (design time only)
 *
 * Example:
 * ```ts
 * const GameCharacter = types.model({
 *   name: string,
 *   location: types.frozen({ x: 0, y: 0})
 * })
 *
 * const hero = GameCharacter.create({
 *   name: "Mario",
 *   location: { x: 7, y: 4 }
 * })
 *
 * hero.location = { x: 10, y: 2 } // OK
 * hero.location.x = 7 // Not ok!
 * ```
 *
 * ```ts
 * type Point = { x: number, y: number }
 *    const Mouse = types.model({
 *         loc: types.frozen<Point>()
 *    })
 * ```
 *
 * @param defaultValueOrType
 * @returns
 */

function frozen(arg) {
  if (arguments.length === 0) return untypedFrozenInstance;else if (isType(arg)) return new Frozen(arg);else return optional(untypedFrozenInstance, arg);
}
/**
 * Returns if a given value represents a frozen type.
 *
 * @param type
 * @returns
 */


function isFrozenType(type) {
  return isType(type) && (type.flags & TypeFlags.Frozen) > 0;
}

function getInvalidationCause(hook) {
  switch (hook) {
    case Hook.beforeDestroy:
      return "destroy";

    case Hook.beforeDetach:
      return "detach";

    default:
      return undefined;
  }
}

var StoredReference =
/** @class */
function () {
  function StoredReference(value, targetType) {
    Object.defineProperty(this, "targetType", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: targetType
    });
    Object.defineProperty(this, "identifier", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "node", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "resolvedReference", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });

    if (isValidIdentifier(value)) {
      this.identifier = value;
    } else if (isStateTreeNode(value)) {
      var targetNode = getStateTreeNode(value);
      if (!targetNode.identifierAttribute) throw fail$1("Can only store references with a defined identifier attribute.");
      var id = targetNode.unnormalizedIdentifier;

      if (id === null || id === undefined) {
        throw fail$1("Can only store references to tree nodes with a defined identifier.");
      }

      this.identifier = id;
    } else {
      throw fail$1("Can only store references to tree nodes or identifiers, got: '" + value + "'");
    }
  }

  Object.defineProperty(StoredReference.prototype, "updateResolvedReference", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      var normalizedId = normalizeIdentifier(this.identifier);
      var root = node.root;
      var lastCacheModification = root.identifierCache.getLastCacheModificationPerId(normalizedId);

      if (!this.resolvedReference || this.resolvedReference.lastCacheModification !== lastCacheModification) {
        var targetType = this.targetType; // reference was initialized with the identifier of the target

        var target = root.identifierCache.resolve(targetType, normalizedId);

        if (!target) {
          throw new InvalidReferenceError("[mobx-state-tree] Failed to resolve reference '" + this.identifier + "' to type '" + this.targetType.name + "' (from node: " + node.path + ")");
        }

        this.resolvedReference = {
          node: target,
          lastCacheModification: lastCacheModification
        };
      }
    }
  });
  Object.defineProperty(StoredReference.prototype, "resolvedValue", {
    get: function () {
      this.updateResolvedReference(this.node);
      return this.resolvedReference.node.value;
    },
    enumerable: false,
    configurable: true
  });
  return StoredReference;
}();
/**
 * @internal
 * @hidden
 */


var InvalidReferenceError =
/** @class */
function (_super) {
  __extends(InvalidReferenceError, _super);

  function InvalidReferenceError(m) {
    var _this = _super.call(this, m) || this;

    Object.setPrototypeOf(_this, InvalidReferenceError.prototype);
    return _this;
  }

  return InvalidReferenceError;
}(Error);
/**
 * @internal
 * @hidden
 */


var BaseReferenceType =
/** @class */
function (_super) {
  __extends(BaseReferenceType, _super);

  function BaseReferenceType(targetType, onInvalidated) {
    var _this = _super.call(this, "reference(" + targetType.name + ")") || this;

    Object.defineProperty(_this, "targetType", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: targetType
    });
    Object.defineProperty(_this, "onInvalidated", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: onInvalidated
    });
    Object.defineProperty(_this, "flags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: TypeFlags.Reference
    });
    return _this;
  }

  Object.defineProperty(BaseReferenceType.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this.name;
    }
  });
  Object.defineProperty(BaseReferenceType.prototype, "isAssignableFrom", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (type) {
      return this.targetType.isAssignableFrom(type);
    }
  });
  Object.defineProperty(BaseReferenceType.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      return isValidIdentifier(value) ? typeCheckSuccess() : typeCheckFailure(context, value, "Value is not a valid identifier, which is a string or a number");
    }
  });
  Object.defineProperty(BaseReferenceType.prototype, "fireInvalidated", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (cause, storedRefNode, referenceId, refTargetNode) {
      // to actually invalidate a reference we need an alive parent,
      // since it is a scalar value (immutable-ish) and we need to change it
      // from the parent
      var storedRefParentNode = storedRefNode.parent;

      if (!storedRefParentNode || !storedRefParentNode.isAlive) {
        return;
      }

      var storedRefParentValue = storedRefParentNode.storedValue;

      if (!storedRefParentValue) {
        return;
      }

      this.onInvalidated({
        cause: cause,
        parent: storedRefParentValue,
        invalidTarget: refTargetNode ? refTargetNode.storedValue : undefined,
        invalidId: referenceId,
        replaceRef: function (newRef) {
          applyPatch(storedRefNode.root.storedValue, {
            op: "replace",
            value: newRef,
            path: storedRefNode.path
          });
        },
        removeRef: function () {
          if (isModelType(storedRefParentNode.type)) {
            this.replaceRef(undefined);
          } else {
            applyPatch(storedRefNode.root.storedValue, {
              op: "remove",
              path: storedRefNode.path
            });
          }
        }
      });
    }
  });
  Object.defineProperty(BaseReferenceType.prototype, "addTargetNodeWatcher", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (storedRefNode, referenceId) {
      var _this = this; // this will make sure the target node becomes created


      var refTargetValue = this.getValue(storedRefNode);

      if (!refTargetValue) {
        return undefined;
      }

      var refTargetNode = getStateTreeNode(refTargetValue);

      var hookHandler = function (_, refTargetNodeHook) {
        var cause = getInvalidationCause(refTargetNodeHook);

        if (!cause) {
          return;
        }

        _this.fireInvalidated(cause, storedRefNode, referenceId, refTargetNode);
      };

      var refTargetDetachHookDisposer = refTargetNode.registerHook(Hook.beforeDetach, hookHandler);
      var refTargetDestroyHookDisposer = refTargetNode.registerHook(Hook.beforeDestroy, hookHandler);
      return function () {
        refTargetDetachHookDisposer();
        refTargetDestroyHookDisposer();
      };
    }
  });
  Object.defineProperty(BaseReferenceType.prototype, "watchTargetNodeForInvalidations", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (storedRefNode, identifier, customGetSet) {
      var _this = this;

      if (!this.onInvalidated) {
        return;
      }

      var onRefTargetDestroyedHookDisposer; // get rid of the watcher hook when the stored ref node is destroyed
      // detached is ignored since scalar nodes (where the reference resides) cannot be detached

      storedRefNode.registerHook(Hook.beforeDestroy, function () {
        if (onRefTargetDestroyedHookDisposer) {
          onRefTargetDestroyedHookDisposer();
        }
      });

      var startWatching = function (sync) {
        // re-create hook in case the stored ref gets reattached
        if (onRefTargetDestroyedHookDisposer) {
          onRefTargetDestroyedHookDisposer();
        } // make sure the target node is actually there and initialized


        var storedRefParentNode = storedRefNode.parent;
        var storedRefParentValue = storedRefParentNode && storedRefParentNode.storedValue;

        if (storedRefParentNode && storedRefParentNode.isAlive && storedRefParentValue) {
          var refTargetNodeExists = void 0;

          if (customGetSet) {
            refTargetNodeExists = !!customGetSet.get(identifier, storedRefParentValue);
          } else {
            refTargetNodeExists = storedRefNode.root.identifierCache.has(_this.targetType, normalizeIdentifier(identifier));
          }

          if (!refTargetNodeExists) {
            // we cannot change the reference in sync mode
            // since we are in the middle of a reconciliation/instantiation and the change would be overwritten
            // for those cases just let the wrong reference be assigned and fail upon usage
            // (like current references do)
            // this means that effectively this code will only run when it is created from a snapshot
            if (!sync) {
              _this.fireInvalidated("invalidSnapshotReference", storedRefNode, identifier, null);
            }
          } else {
            onRefTargetDestroyedHookDisposer = _this.addTargetNodeWatcher(storedRefNode, identifier);
          }
        }
      };

      if (storedRefNode.state === NodeLifeCycle.FINALIZED) {
        // already attached, so the whole tree is ready
        startWatching(true);
      } else {
        if (!storedRefNode.isRoot) {
          // start watching once the whole tree is ready
          storedRefNode.root.registerHook(Hook.afterCreationFinalization, function () {
            // make sure to attach it so it can start listening
            if (storedRefNode.parent) {
              storedRefNode.parent.createObservableInstanceIfNeeded();
            }
          });
        } // start watching once the node is attached somewhere / parent changes


        storedRefNode.registerHook(Hook.afterAttach, function () {
          startWatching(false);
        });
      }
    }
  });
  return BaseReferenceType;
}(SimpleType);
/**
 * @internal
 * @hidden
 */


var IdentifierReferenceType =
/** @class */
function (_super) {
  __extends(IdentifierReferenceType, _super);

  function IdentifierReferenceType(targetType, onInvalidated) {
    return _super.call(this, targetType, onInvalidated) || this;
  }

  Object.defineProperty(IdentifierReferenceType.prototype, "getValue", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (storedRefNode) {
      if (!storedRefNode.isAlive) return undefined;
      var storedRef = storedRefNode.storedValue;
      return storedRef.resolvedValue;
    }
  });
  Object.defineProperty(IdentifierReferenceType.prototype, "getSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (storedRefNode) {
      var ref = storedRefNode.storedValue;
      return ref.identifier;
    }
  });
  Object.defineProperty(IdentifierReferenceType.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      var identifier = isStateTreeNode(initialValue) ? getIdentifier(initialValue) : initialValue;
      var storedRef = new StoredReference(initialValue, this.targetType);
      var storedRefNode = createScalarNode(this, parent, subpath, environment, storedRef);
      storedRef.node = storedRefNode;
      this.watchTargetNodeForInvalidations(storedRefNode, identifier, undefined);
      return storedRefNode;
    }
  });
  Object.defineProperty(IdentifierReferenceType.prototype, "reconcile", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (current, newValue, parent, subpath) {
      if (!current.isDetaching && current.type === this) {
        var compareByValue = isStateTreeNode(newValue);
        var ref = current.storedValue;

        if (!compareByValue && ref.identifier === newValue || compareByValue && ref.resolvedValue === newValue) {
          current.setParent(parent, subpath);
          return current;
        }
      }

      var newNode = this.instantiate(parent, subpath, undefined, newValue);
      current.die(); // noop if detaching

      return newNode;
    }
  });
  return IdentifierReferenceType;
}(BaseReferenceType);
/**
 * @internal
 * @hidden
 */


var CustomReferenceType =
/** @class */
function (_super) {
  __extends(CustomReferenceType, _super);

  function CustomReferenceType(targetType, options, onInvalidated) {
    var _this = _super.call(this, targetType, onInvalidated) || this;

    Object.defineProperty(_this, "options", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: options
    });
    return _this;
  }

  Object.defineProperty(CustomReferenceType.prototype, "getValue", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (storedRefNode) {
      if (!storedRefNode.isAlive) return undefined;
      var referencedNode = this.options.get(storedRefNode.storedValue, storedRefNode.parent ? storedRefNode.parent.storedValue : null);
      return referencedNode;
    }
  });
  Object.defineProperty(CustomReferenceType.prototype, "getSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (storedRefNode) {
      return storedRefNode.storedValue;
    }
  });
  Object.defineProperty(CustomReferenceType.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, newValue) {
      var identifier = isStateTreeNode(newValue) ? this.options.set(newValue, parent ? parent.storedValue : null) : newValue;
      var storedRefNode = createScalarNode(this, parent, subpath, environment, identifier);
      this.watchTargetNodeForInvalidations(storedRefNode, identifier, this.options);
      return storedRefNode;
    }
  });
  Object.defineProperty(CustomReferenceType.prototype, "reconcile", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (current, newValue, parent, subpath) {
      var newIdentifier = isStateTreeNode(newValue) ? this.options.set(newValue, current ? current.storedValue : null) : newValue;

      if (!current.isDetaching && current.type === this && current.storedValue === newIdentifier) {
        current.setParent(parent, subpath);
        return current;
      }

      var newNode = this.instantiate(parent, subpath, undefined, newIdentifier);
      current.die(); // noop if detaching

      return newNode;
    }
  });
  return CustomReferenceType;
}(BaseReferenceType);
/**
 * `types.reference` - Creates a reference to another type, which should have defined an identifier.
 * See also the [reference and identifiers](https://github.com/mobxjs/mobx-state-tree#references-and-identifiers) section.
 */


function reference(subType, options) {
  assertIsType(subType, 1);

  if (devMode()) {
    if (arguments.length === 2 && typeof arguments[1] === "string") {
      // istanbul ignore next
      throw fail$1("References with base path are no longer supported. Please remove the base path.");
    }
  }

  var getSetOptions = options ? options : undefined;
  var onInvalidated = options ? options.onInvalidated : undefined;

  if (getSetOptions && (getSetOptions.get || getSetOptions.set)) {
    if (devMode()) {
      if (!getSetOptions.get || !getSetOptions.set) {
        throw fail$1("reference options must either contain both a 'get' and a 'set' method or none of them");
      }
    }

    return new CustomReferenceType(subType, {
      get: getSetOptions.get,
      set: getSetOptions.set
    }, onInvalidated);
  } else {
    return new IdentifierReferenceType(subType, onInvalidated);
  }
}
/**
 * Returns if a given value represents a reference type.
 *
 * @param type
 * @returns
 */


function isReferenceType(type) {
  return (type.flags & TypeFlags.Reference) > 0;
}
/**
 * `types.safeReference` - A safe reference is like a standard reference, except that it accepts the undefined value by default
 * and automatically sets itself to undefined (when the parent is a model) / removes itself from arrays and maps
 * when the reference it is pointing to gets detached/destroyed.
 *
 * The optional options parameter object accepts a parameter named `acceptsUndefined`, which is set to true by default, so it is suitable
 * for model properties.
 * When used inside collections (arrays/maps), it is recommended to set this option to false so it can't take undefined as value,
 * which is usually the desired in those cases.
 * Additionally, the optional options parameter object accepts a parameter named `onInvalidated`, which will be called when the reference target node that the reference is pointing to is about to be detached/destroyed
 *
 * Strictly speaking it is a `types.maybe(types.reference(X))` (when `acceptsUndefined` is set to true, the default) and
 * `types.reference(X)` (when `acceptsUndefined` is set to false), both of them with a customized `onInvalidated` option.
 *
 * @param subType
 * @param options
 * @returns
 */


function safeReference(subType, options) {
  var refType = reference(subType, __assign(__assign({}, options), {
    onInvalidated: function (ev) {
      if (options && options.onInvalidated) {
        options.onInvalidated(ev);
      }

      ev.removeRef();
    }
  }));

  if (options && options.acceptsUndefined === false) {
    return refType;
  } else {
    return maybe(refType);
  }
}

var BaseIdentifierType =
/** @class */
function (_super) {
  __extends(BaseIdentifierType, _super);

  function BaseIdentifierType(name, validType) {
    var _this = _super.call(this, name) || this;

    Object.defineProperty(_this, "validType", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: validType
    });
    Object.defineProperty(_this, "flags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: TypeFlags.Identifier
    });
    return _this;
  }

  Object.defineProperty(BaseIdentifierType.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      if (!parent || !(parent.type instanceof ModelType)) throw fail$1("Identifier types can only be instantiated as direct child of a model type");
      return createScalarNode(this, parent, subpath, environment, initialValue);
    }
  });
  Object.defineProperty(BaseIdentifierType.prototype, "reconcile", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (current, newValue, parent, subpath) {
      // we don't consider detaching here since identifier are scalar nodes, and scalar nodes cannot be detached
      if (current.storedValue !== newValue) throw fail$1("Tried to change identifier from '" + current.storedValue + "' to '" + newValue + "'. Changing identifiers is not allowed.");
      current.setParent(parent, subpath);
      return current;
    }
  });
  Object.defineProperty(BaseIdentifierType.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      if (typeof value !== this.validType) {
        return typeCheckFailure(context, value, "Value is not a valid " + this.describe() + ", expected a " + this.validType);
      }

      return typeCheckSuccess();
    }
  });
  return BaseIdentifierType;
}(SimpleType);
/**
 * @internal
 * @hidden
 */


var IdentifierType =
/** @class */
function (_super) {
  __extends(IdentifierType, _super);

  function IdentifierType() {
    var _this = _super.call(this, "identifier", "string") || this;

    Object.defineProperty(_this, "flags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: TypeFlags.Identifier
    });
    return _this;
  }

  Object.defineProperty(IdentifierType.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return "identifier";
    }
  });
  return IdentifierType;
}(BaseIdentifierType);
/**
 * @internal
 * @hidden
 */


var IdentifierNumberType =
/** @class */
function (_super) {
  __extends(IdentifierNumberType, _super);

  function IdentifierNumberType() {
    return _super.call(this, "identifierNumber", "number") || this;
  }

  Object.defineProperty(IdentifierNumberType.prototype, "getSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      return node.storedValue;
    }
  });
  Object.defineProperty(IdentifierNumberType.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return "identifierNumber";
    }
  });
  return IdentifierNumberType;
}(BaseIdentifierType);
/**
 * `types.identifier` - Identifiers are used to make references, lifecycle events and reconciling works.
 * Inside a state tree, for each type can exist only one instance for each given identifier.
 * For example there couldn't be 2 instances of user with id 1. If you need more, consider using references.
 * Identifier can be used only as type property of a model.
 * This type accepts as parameter the value type of the identifier field that can be either string or number.
 *
 * Example:
 * ```ts
 *  const Todo = types.model("Todo", {
 *      id: types.identifier,
 *      title: types.string
 *  })
 * ```
 *
 * @returns
 */


var identifier = new IdentifierType();
/**
 * `types.identifierNumber` - Similar to `types.identifier`. This one will serialize from / to a number when applying snapshots
 *
 * Example:
 * ```ts
 *  const Todo = types.model("Todo", {
 *      id: types.identifierNumber,
 *      title: types.string
 *  })
 * ```
 *
 * @returns
 */

var identifierNumber = new IdentifierNumberType();
/**
 * Returns if a given value represents an identifier type.
 *
 * @param type
 * @returns
 */

function isIdentifierType(type) {
  return isType(type) && (type.flags & TypeFlags.Identifier) > 0;
}
/**
 * @internal
 * @hidden
 */


function normalizeIdentifier(id) {
  return "" + id;
}
/**
 * @internal
 * @hidden
 */


function isValidIdentifier(id) {
  return typeof id === "string" || typeof id === "number";
}
/**
 * @internal
 * @hidden
 */


function assertIsValidIdentifier(id, argNumber) {
  assertArg(id, isValidIdentifier, "string or number (identifier)", argNumber);
}
/**
 * `types.custom` - Creates a custom type. Custom types can be used for arbitrary immutable values, that have a serializable representation. For example, to create your own Date representation, Decimal type etc.
 *
 * The signature of the options is:
 * ```ts
 * export interface CustomTypeOptions<S, T> {
 *     // Friendly name
 *     name: string
 *     // given a serialized value and environment, how to turn it into the target type
 *     fromSnapshot(snapshot: S, env: any): T
 *     // return the serialization of the current value
 *     toSnapshot(value: T): S
 *     // if true, this is a converted value, if false, it's a snapshot
 *     isTargetType(value: T | S): value is T
 *     // a non empty string is assumed to be a validation error
 *     getValidationMessage?(snapshot: S): string
 * }
 * ```
 *
 * Example:
 * ```ts
 * const DecimalPrimitive = types.custom<string, Decimal>({
 *     name: "Decimal",
 *     fromSnapshot(value: string) {
 *         return new Decimal(value)
 *     },
 *     toSnapshot(value: Decimal) {
 *         return value.toString()
 *     },
 *     isTargetType(value: string | Decimal): boolean {
 *         return value instanceof Decimal
 *     },
 *     getValidationMessage(value: string): string {
 *         if (/^-?\d+\.\d+$/.test(value)) return "" // OK
 *         return `'${value}' doesn't look like a valid decimal number`
 *     }
 * })
 *
 * const Wallet = types.model({
 *     balance: DecimalPrimitive
 * })
 * ```
 *
 * @param options
 * @returns
 */


function custom(options) {
  return new CustomType(options);
}
/**
 * @internal
 * @hidden
 */


var CustomType =
/** @class */
function (_super) {
  __extends(CustomType, _super);

  function CustomType(options) {
    var _this = _super.call(this, options.name) || this;

    Object.defineProperty(_this, "options", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: options
    });
    Object.defineProperty(_this, "flags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: TypeFlags.Custom
    });
    return _this;
  }

  Object.defineProperty(CustomType.prototype, "describe", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function () {
      return this.name;
    }
  });
  Object.defineProperty(CustomType.prototype, "isValidSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (value, context) {
      if (this.options.isTargetType(value)) return typeCheckSuccess();
      var typeError = this.options.getValidationMessage(value);

      if (typeError) {
        return typeCheckFailure(context, value, "Invalid value for type '" + this.name + "': " + typeError);
      }

      return typeCheckSuccess();
    }
  });
  Object.defineProperty(CustomType.prototype, "getSnapshot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (node) {
      return this.options.toSnapshot(node.storedValue);
    }
  });
  Object.defineProperty(CustomType.prototype, "instantiate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (parent, subpath, environment, initialValue) {
      var valueToStore = this.options.isTargetType(initialValue) ? initialValue : this.options.fromSnapshot(initialValue, parent && parent.root.environment);
      return createScalarNode(this, parent, subpath, environment, valueToStore);
    }
  });
  Object.defineProperty(CustomType.prototype, "reconcile", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function (current, value, parent, subpath) {
      var isSnapshot = !this.options.isTargetType(value); // in theory customs use scalar nodes which cannot be detached, but still...

      if (!current.isDetaching) {
        var unchanged = current.type === this && (isSnapshot ? value === current.snapshot : value === current.storedValue);

        if (unchanged) {
          current.setParent(parent, subpath);
          return current;
        }
      }

      var valueToStore = isSnapshot ? this.options.fromSnapshot(value, parent.root.environment) : value;
      var newNode = this.instantiate(parent, subpath, undefined, valueToStore);
      current.die(); // noop if detaching

      return newNode;
    }
  });
  return CustomType;
}(SimpleType); // we import the types to re-export them inside types.


var types = {
  enumeration: enumeration,
  model: model,
  compose: compose,
  custom: custom,
  reference: reference,
  safeReference: safeReference,
  union: union,
  optional: optional,
  literal: literal,
  maybe: maybe,
  maybeNull: maybeNull,
  refinement: refinement,
  string: string,
  boolean: boolean,
  number: number,
  integer: integer,
  Date: DatePrimitive,
  map: map,
  array: array,
  frozen: frozen,
  identifier: identifier,
  identifierNumber: identifierNumber,
  late: late,
  undefined: undefinedType,
  null: nullType,
  snapshotProcessor: snapshotProcessor
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js"), __webpack_require__(/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "./node_modules/mobx/dist/mobx.esm.js":
/*!********************************************!*\
  !*** ./node_modules/mobx/dist/mobx.esm.js ***!
  \********************************************/
/*! exports provided: $mobx, FlowCancellationError, ObservableMap, ObservableSet, Reaction, _allowStateChanges, _allowStateChangesInsideComputed, _allowStateReadsEnd, _allowStateReadsStart, _autoAction, _endAction, _getAdministration, _getGlobalState, _interceptReads, _isComputingDerivation, _resetGlobalState, _startAction, action, autorun, comparer, computed, configure, createAtom, entries, extendObservable, flow, flowResult, get, getAtom, getDebugName, getDependencyTree, getObserverTree, has, intercept, isAction, isBoxedObservable, isComputed, isComputedProp, isFlowCancellationError, isObservable, isObservableArray, isObservableMap, isObservableObject, isObservableProp, isObservableSet, keys, makeAutoObservable, makeObservable, observable, observe, onBecomeObserved, onBecomeUnobserved, onReactionError, override, reaction, remove, runInAction, set, spy, toJS, trace, transaction, untracked, values, when */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$mobx", function() { return $mobx; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlowCancellationError", function() { return FlowCancellationError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObservableMap", function() { return ObservableMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObservableSet", function() { return ObservableSet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Reaction", function() { return Reaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_allowStateChanges", function() { return allowStateChanges; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_allowStateChangesInsideComputed", function() { return runInAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_allowStateReadsEnd", function() { return allowStateReadsEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_allowStateReadsStart", function() { return allowStateReadsStart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_autoAction", function() { return autoAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_endAction", function() { return _endAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_getAdministration", function() { return getAdministration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_getGlobalState", function() { return getGlobalState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_interceptReads", function() { return interceptReads; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_isComputingDerivation", function() { return isComputingDerivation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_resetGlobalState", function() { return resetGlobalState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_startAction", function() { return _startAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "action", function() { return action; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "autorun", function() { return autorun; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comparer", function() { return comparer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computed", function() { return computed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "configure", function() { return configure; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createAtom", function() { return createAtom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "entries", function() { return entries; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extendObservable", function() { return extendObservable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flow", function() { return flow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flowResult", function() { return flowResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "get", function() { return get; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAtom", function() { return getAtom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDebugName", function() { return getDebugName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDependencyTree", function() { return getDependencyTree; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getObserverTree", function() { return getObserverTree; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "has", function() { return has; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intercept", function() { return intercept; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isAction", function() { return isAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isBoxedObservable", function() { return isObservableValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isComputed", function() { return isComputed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isComputedProp", function() { return isComputedProp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFlowCancellationError", function() { return isFlowCancellationError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservable", function() { return isObservable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservableArray", function() { return isObservableArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservableMap", function() { return isObservableMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservableObject", function() { return isObservableObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservableProp", function() { return isObservableProp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservableSet", function() { return isObservableSet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keys", function() { return keys; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeAutoObservable", function() { return makeAutoObservable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeObservable", function() { return makeObservable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "observable", function() { return observable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "observe", function() { return observe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onBecomeObserved", function() { return onBecomeObserved; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onBecomeUnobserved", function() { return onBecomeUnobserved; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onReactionError", function() { return onReactionError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "override", function() { return override; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reaction", function() { return reaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "remove", function() { return remove; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "runInAction", function() { return runInAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "spy", function() { return spy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toJS", function() { return toJS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trace", function() { return trace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transaction", function() { return transaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "untracked", function() { return untracked; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "values", function() { return values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "when", function() { return when; });
var niceErrors = {
  0: "Invalid value for configuration 'enforceActions', expected 'never', 'always' or 'observed'",
  1: function _(annotationType, key) {
    return "Cannot apply '" + annotationType + "' to '" + key.toString() + "': Field not found.";
  },
  5: "'keys()' can only be used on observable objects, arrays, sets and maps",
  6: "'values()' can only be used on observable objects, arrays, sets and maps",
  7: "'entries()' can only be used on observable objects, arrays and maps",
  8: "'set()' can only be used on observable objects, arrays and maps",
  9: "'remove()' can only be used on observable objects, arrays and maps",
  10: "'has()' can only be used on observable objects, arrays and maps",
  11: "'get()' can only be used on observable objects, arrays and maps",
  12: "Invalid annotation",
  13: "Dynamic observable objects cannot be frozen",
  14: "Intercept handlers should return nothing or a change object",
  15: "Observable arrays cannot be frozen",
  16: "Modification exception: the internal structure of an observable array was changed.",
  17: function _(index, length) {
    return "[mobx.array] Index out of bounds, " + index + " is larger than " + length;
  },
  18: "mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js",
  19: function _(other) {
    return "Cannot initialize from classes that inherit from Map: " + other.constructor.name;
  },
  20: function _(other) {
    return "Cannot initialize map from " + other;
  },
  21: function _(dataStructure) {
    return "Cannot convert to map from '" + dataStructure + "'";
  },
  22: "mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js",
  23: "It is not possible to get index atoms from arrays",
  24: function _(thing) {
    return "Cannot obtain administration from " + thing;
  },
  25: function _(property, name) {
    return "the entry '" + property + "' does not exist in the observable map '" + name + "'";
  },
  26: "please specify a property",
  27: function _(property, name) {
    return "no observable property '" + property.toString() + "' found on the observable object '" + name + "'";
  },
  28: function _(thing) {
    return "Cannot obtain atom from " + thing;
  },
  29: "Expecting some object",
  30: "invalid action stack. did you forget to finish an action?",
  31: "missing option for computed: get",
  32: function _(name, derivation) {
    return "Cycle detected in computation " + name + ": " + derivation;
  },
  33: function _(name) {
    return "The setter of computed value '" + name + "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?";
  },
  34: function _(name) {
    return "[ComputedValue '" + name + "'] It is not possible to assign a new value to a computed value.";
  },
  35: "There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`",
  36: "isolateGlobalState should be called before MobX is running any reactions",
  37: function _(method) {
    return "[mobx] `observableArray." + method + "()` mutates the array in-place, which is not allowed inside a derivation. Use `array.slice()." + method + "()` instead";
  }
};
var errors =  true ? niceErrors : undefined;

function die(error) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  if (true) {
    var e = typeof error === "string" ? error : errors[error];
    if (typeof e === "function") e = e.apply(null, args);
    throw new Error("[MobX] " + e);
  }

  throw new Error(typeof error === "number" ? "[MobX] minified error nr: " + error + (args.length ? " " + args.map(String).join(",") : "") + ". Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts" : "[MobX] " + error);
}

var mockGlobal = {};

function getGlobal() {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }

  if (typeof window !== "undefined") {
    return window;
  }

  if (typeof global !== "undefined") {
    return global;
  }

  if (typeof self !== "undefined") {
    return self;
  }

  return mockGlobal;
}

var assign = Object.assign;
var getDescriptor = Object.getOwnPropertyDescriptor;
var defineProperty = Object.defineProperty;
var objectPrototype = Object.prototype;
var EMPTY_ARRAY = [];
Object.freeze(EMPTY_ARRAY);
var EMPTY_OBJECT = {};
Object.freeze(EMPTY_OBJECT);
var hasProxy = typeof Proxy !== "undefined";
var plainObjectString = /*#__PURE__*/Object.toString();

function assertProxies() {
  if (!hasProxy) {
    die( true ? "`Proxy` objects are not available in the current environment. Please configure MobX to enable a fallback implementation.`" : undefined);
  }
}

function warnAboutProxyRequirement(msg) {
  if ( true && globalState.verifyProxies) {
    die("MobX is currently configured to be able to run in ES5 mode, but in ES5 MobX won't be able to " + msg);
  }
}

function getNextId() {
  return ++globalState.mobxGuid;
}
/**
 * Makes sure that the provided function is invoked at most once.
 */


function once(func) {
  var invoked = false;
  return function () {
    if (invoked) return;
    invoked = true;
    return func.apply(this, arguments);
  };
}

var noop = function noop() {};

function isFunction(fn) {
  return typeof fn === "function";
}

function isStringish(value) {
  var t = typeof value;

  switch (t) {
    case "string":
    case "symbol":
    case "number":
      return true;
  }

  return false;
}

function isObject(value) {
  return value !== null && typeof value === "object";
}

function isPlainObject(value) {
  var _proto$constructor;

  if (!isObject(value)) return false;
  var proto = Object.getPrototypeOf(value);
  if (proto == null) return true;
  return ((_proto$constructor = proto.constructor) == null ? void 0 : _proto$constructor.toString()) === plainObjectString;
} // https://stackoverflow.com/a/37865170


function isGenerator(obj) {
  var constructor = obj == null ? void 0 : obj.constructor;
  if (!constructor) return false;
  if ("GeneratorFunction" === constructor.name || "GeneratorFunction" === constructor.displayName) return true;
  return false;
}

function addHiddenProp(object, propName, value) {
  defineProperty(object, propName, {
    enumerable: false,
    writable: true,
    configurable: true,
    value: value
  });
}

function addHiddenFinalProp(object, propName, value) {
  defineProperty(object, propName, {
    enumerable: false,
    writable: false,
    configurable: true,
    value: value
  });
}

function createInstanceofPredicate(name, theClass) {
  var propName = "isMobX" + name;
  theClass.prototype[propName] = true;
  return function (x) {
    return isObject(x) && x[propName] === true;
  };
}

function isES6Map(thing) {
  return thing instanceof Map;
}

function isES6Set(thing) {
  return thing instanceof Set;
}

var hasGetOwnPropertySymbols = typeof Object.getOwnPropertySymbols !== "undefined";
/**
 * Returns the following: own enumerable keys and symbols.
 */

function getPlainObjectKeys(object) {
  var keys = Object.keys(object); // Not supported in IE, so there are not going to be symbol props anyway...

  if (!hasGetOwnPropertySymbols) return keys;
  var symbols = Object.getOwnPropertySymbols(object);
  if (!symbols.length) return keys;
  return [].concat(keys, symbols.filter(function (s) {
    return objectPrototype.propertyIsEnumerable.call(object, s);
  }));
} // From Immer utils
// Returns all own keys, including non-enumerable and symbolic


var ownKeys = typeof Reflect !== "undefined" && Reflect.ownKeys ? Reflect.ownKeys : hasGetOwnPropertySymbols ? function (obj) {
  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));
} :
/* istanbul ignore next */
Object.getOwnPropertyNames;

function stringifyKey(key) {
  if (typeof key === "string") return key;
  if (typeof key === "symbol") return key.toString();
  return new String(key).toString();
}

function toPrimitive(value) {
  return value === null ? null : typeof value === "object" ? "" + value : value;
}

function hasProp(target, prop) {
  return objectPrototype.hasOwnProperty.call(target, prop);
} // From Immer utils


var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(target) {
  // Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274
  var res = {}; // Note: without polyfill for ownKeys, symbols won't be picked up

  ownKeys(target).forEach(function (key) {
    res[key] = getDescriptor(target, key);
  });
  return res;
};

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  it = o[Symbol.iterator]();
  return it.next.bind(it);
}

var storedAnnotationsSymbol = /*#__PURE__*/Symbol("mobx-stored-annotations");
/**
 * Creates a function that acts as
 * - decorator
 * - annotation object
 */

function createDecoratorAnnotation(annotation) {
  function decorator(target, property) {
    storeAnnotation(target, property, annotation);
  }

  return Object.assign(decorator, annotation);
}
/**
 * Stores annotation to prototype,
 * so it can be inspected later by `makeObservable` called from constructor
 */


function storeAnnotation(prototype, key, annotation) {
  if (!hasProp(prototype, storedAnnotationsSymbol)) {
    addHiddenProp(prototype, storedAnnotationsSymbol, _extends({}, prototype[storedAnnotationsSymbol]));
  } // @override must override something


  if ( true && isOverride(annotation) && !hasProp(prototype[storedAnnotationsSymbol], key)) {
    var fieldName = prototype.constructor.name + ".prototype." + key.toString();
    die("'" + fieldName + "' is decorated with 'override', " + "but no such decorated member was found on prototype.");
  } // Cannot re-decorate


  assertNotDecorated(prototype, annotation, key); // Ignore override

  if (!isOverride(annotation)) {
    prototype[storedAnnotationsSymbol][key] = annotation;
  }
}

function assertNotDecorated(prototype, annotation, key) {
  if ( true && !isOverride(annotation) && hasProp(prototype[storedAnnotationsSymbol], key)) {
    var fieldName = prototype.constructor.name + ".prototype." + key.toString();
    var currentAnnotationType = prototype[storedAnnotationsSymbol][key].annotationType_;
    var requestedAnnotationType = annotation.annotationType_;
    die("Cannot apply '@" + requestedAnnotationType + "' to '" + fieldName + "':" + ("\nThe field is already decorated with '@" + currentAnnotationType + "'.") + "\nRe-decorating fields is not allowed." + "\nUse '@override' decorator for methods overriden by subclass.");
  }
}
/**
 * Collects annotations from prototypes and stores them on target (instance)
 */


function collectStoredAnnotations(target) {
  if (!hasProp(target, storedAnnotationsSymbol)) {
    if ( true && !target[storedAnnotationsSymbol]) {
      die("No annotations were passed to makeObservable, but no decorated members have been found either");
    } // We need a copy as we will remove annotation from the list once it's applied.


    addHiddenProp(target, storedAnnotationsSymbol, _extends({}, target[storedAnnotationsSymbol]));
  }

  return target[storedAnnotationsSymbol];
}

var $mobx = /*#__PURE__*/Symbol("mobx administration");

var Atom = /*#__PURE__*/function () {
  // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed

  /**
   * Create a new atom. For debugging purposes it is recommended to give it a name.
   * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.
   */
  function Atom(name_) {
    if (name_ === void 0) {
      name_ =  true ? "Atom@" + getNextId() : undefined;
    }

    this.name_ = void 0;
    this.isPendingUnobservation_ = false;
    this.isBeingObserved_ = false;
    this.observers_ = new Set();
    this.diffValue_ = 0;
    this.lastAccessedBy_ = 0;
    this.lowestObserverState_ = IDerivationState_.NOT_TRACKING_;
    this.onBOL = void 0;
    this.onBUOL = void 0;
    this.name_ = name_;
  } // onBecomeObservedListeners


  var _proto = Atom.prototype;

  _proto.onBO = function onBO() {
    if (this.onBOL) {
      this.onBOL.forEach(function (listener) {
        return listener();
      });
    }
  };

  _proto.onBUO = function onBUO() {
    if (this.onBUOL) {
      this.onBUOL.forEach(function (listener) {
        return listener();
      });
    }
  }
  /**
   * Invoke this method to notify mobx that your atom has been used somehow.
   * Returns true if there is currently a reactive context.
   */
  ;

  _proto.reportObserved = function reportObserved$1() {
    return reportObserved(this);
  }
  /**
   * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.
   */
  ;

  _proto.reportChanged = function reportChanged() {
    startBatch();
    propagateChanged(this);
    endBatch();
  };

  _proto.toString = function toString() {
    return this.name_;
  };

  return Atom;
}();

var isAtom = /*#__PURE__*/createInstanceofPredicate("Atom", Atom);

function createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
  if (onBecomeObservedHandler === void 0) {
    onBecomeObservedHandler = noop;
  }

  if (onBecomeUnobservedHandler === void 0) {
    onBecomeUnobservedHandler = noop;
  }

  var atom = new Atom(name); // default `noop` listener will not initialize the hook Set

  if (onBecomeObservedHandler !== noop) {
    onBecomeObserved(atom, onBecomeObservedHandler);
  }

  if (onBecomeUnobservedHandler !== noop) {
    onBecomeUnobserved(atom, onBecomeUnobservedHandler);
  }

  return atom;
}

function identityComparer(a, b) {
  return a === b;
}

function structuralComparer(a, b) {
  return deepEqual(a, b);
}

function shallowComparer(a, b) {
  return deepEqual(a, b, 1);
}

function defaultComparer(a, b) {
  return Object.is(a, b);
}

var comparer = {
  identity: identityComparer,
  structural: structuralComparer,
  "default": defaultComparer,
  shallow: shallowComparer
};

function deepEnhancer(v, _, name) {
  // it is an observable already, done
  if (isObservable(v)) return v; // something that can be converted and mutated?

  if (Array.isArray(v)) return observable.array(v, {
    name: name
  });
  if (isPlainObject(v)) return observable.object(v, undefined, {
    name: name
  });
  if (isES6Map(v)) return observable.map(v, {
    name: name
  });
  if (isES6Set(v)) return observable.set(v, {
    name: name
  });
  return v;
}

function shallowEnhancer(v, _, name) {
  if (v === undefined || v === null) return v;
  if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v)) return v;
  if (Array.isArray(v)) return observable.array(v, {
    name: name,
    deep: false
  });
  if (isPlainObject(v)) return observable.object(v, undefined, {
    name: name,
    deep: false
  });
  if (isES6Map(v)) return observable.map(v, {
    name: name,
    deep: false
  });
  if (isES6Set(v)) return observable.set(v, {
    name: name,
    deep: false
  });
  if (true) die("The shallow modifier / decorator can only used in combination with arrays, objects, maps and sets");
}

function referenceEnhancer(newValue) {
  // never turn into an observable
  return newValue;
}

function refStructEnhancer(v, oldValue) {
  if ( true && isObservable(v)) die("observable.struct should not be used with observable values");
  if (deepEqual(v, oldValue)) return oldValue;
  return v;
}

var OVERRIDE = "override";
var override = /*#__PURE__*/createDecoratorAnnotation({
  annotationType_: OVERRIDE,
  make_: make_,
  extend_: extend_
});

function isOverride(annotation) {
  return annotation.annotationType_ === OVERRIDE;
}

function make_(adm, key) {
  // Must not be plain object
  if ( true && adm.isPlainObject_) {
    die("Cannot apply '" + this.annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + this.annotationType_ + "' cannot be used on plain objects."));
  } // Must override something


  if ( true && !hasProp(adm.appliedAnnotations_, key)) {
    die("'" + adm.name_ + "." + key.toString() + "' is annotated with '" + this.annotationType_ + "', " + "but no such annotated member was found on prototype.");
  }
}

function extend_(adm, key, descriptor, proxyTrap) {
  die("'" + this.annotationType_ + "' can only be used with 'makeObservable'");
}

function createActionAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$1,
    extend_: extend_$1
  };
}

function make_$1(adm, key) {
  var _this$options_$bound, _this$options_, _adm$target_$storedAn;

  var annotated = false;
  var source = adm.target_;
  var bound = (_this$options_$bound = (_this$options_ = this.options_) == null ? void 0 : _this$options_.bound) != null ? _this$options_$bound : false;

  while (source && source !== objectPrototype) {
    var descriptor = getDescriptor(source, key);

    if (descriptor) {
      // Instance or bound
      // Keep first because the operation can be intercepted
      // and we don't want to end up with partially annotated proto chain
      if (source === adm.target_ || bound) {
        var actionDescriptor = createActionDescriptor(adm, this, key, descriptor);
        var definePropertyOutcome = adm.defineProperty_(key, actionDescriptor);

        if (!definePropertyOutcome) {
          // Intercepted
          return;
        }

        annotated = true; // Don't annotate protos if bound

        if (bound) {
          break;
        }
      } // Prototype


      if (source !== adm.target_) {
        if (isAction(descriptor.value)) {
          // A prototype could have been annotated already by other constructor,
          // rest of the proto chain must be annotated already
          annotated = true;
          break;
        }

        var _actionDescriptor = createActionDescriptor(adm, this, key, descriptor, false);

        defineProperty(source, key, _actionDescriptor);
        annotated = true;
      }
    }

    source = Object.getPrototypeOf(source);
  }

  if (annotated) {
    recordAnnotationApplied(adm, this, key);
  } else if (!((_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? void 0 : _adm$target_$storedAn[key])) {
    // Throw on missing key, except for decorators:
    // Decorator annotations are collected from whole prototype chain.
    // When called from super() some props may not exist yet.
    // However we don't have to worry about missing prop,
    // because the decorator must have been applied to something.
    die(1, this.annotationType_, adm.name_ + "." + key.toString());
  }
}

function extend_$1(adm, key, descriptor, proxyTrap) {
  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor);
  return adm.defineProperty_(key, actionDescriptor, proxyTrap);
}

function assertActionDescriptor(adm, _ref, key, _ref2) {
  var annotationType_ = _ref.annotationType_;
  var value = _ref2.value;

  if ( true && !isFunction(value)) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on properties with a function value."));
  }
}

function createActionDescriptor(adm, annotation, key, descriptor, // provides ability to disable safeDescriptors for prototypes
safeDescriptors) {
  var _annotation$options_, _annotation$options_$, _annotation$options_2, _annotation$options_$2, _annotation$options_3;

  if (safeDescriptors === void 0) {
    safeDescriptors = globalState.safeDescriptors;
  }

  assertActionDescriptor(adm, annotation, key, descriptor);
  var value = descriptor.value;

  if ((_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.bound) {
    var _adm$proxy_;

    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
  }

  return {
    value: createAction((_annotation$options_$ = (_annotation$options_2 = annotation.options_) == null ? void 0 : _annotation$options_2.name) != null ? _annotation$options_$ : key.toString(), value, (_annotation$options_$2 = (_annotation$options_3 = annotation.options_) == null ? void 0 : _annotation$options_3.autoAction) != null ? _annotation$options_$2 : false),
    // Non-configurable for classes
    // prevents accidental field redefinition in subclass
    configurable: safeDescriptors ? adm.isPlainObject_ : true,
    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058
    enumerable: false,
    // Non-obsevable, therefore non-writable
    // Also prevents rewriting in subclass constructor
    writable: safeDescriptors ? false : true
  };
}

function createFlowAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$2,
    extend_: extend_$2
  };
}

function make_$2(adm, key) {
  var _adm$target_$storedAn;

  var annotated = false;
  var source = adm.target_;

  while (source && source !== objectPrototype) {
    var descriptor = getDescriptor(source, key);

    if (descriptor) {
      if (source !== adm.target_) {
        // Prototype
        if (isFlow(descriptor.value)) {
          // A prototype could have been annotated already by other constructor,
          // rest of the proto chain must be annotated already
          annotated = true;
          break;
        }

        var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, false);
        defineProperty(source, key, flowDescriptor);
      } else {
        var _flowDescriptor = createFlowDescriptor(adm, this, key, descriptor);

        var definePropertyOutcome = adm.defineProperty_(key, _flowDescriptor);

        if (!definePropertyOutcome) {
          // Intercepted
          return;
        }
      }

      annotated = true;
    }

    source = Object.getPrototypeOf(source);
  }

  if (annotated) {
    recordAnnotationApplied(adm, this, key);
  } else if (!((_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? void 0 : _adm$target_$storedAn[key])) {
    // Throw on missing key, except for decorators:
    // Decorator annotations are collected from whole prototype chain.
    // When called from super() some props may not exist yet.
    // However we don't have to worry about missing prop,
    // because the decorator must have been applied to something.
    die(1, this.annotationType_, adm.name_ + "." + key.toString());
  }
}

function extend_$2(adm, key, descriptor, proxyTrap) {
  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor);
  return adm.defineProperty_(key, flowDescriptor, proxyTrap);
}

function assertFlowDescriptor(adm, _ref, key, _ref2) {
  var annotationType_ = _ref.annotationType_;
  var value = _ref2.value;

  if ( true && !isFunction(value)) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on properties with a generator function value."));
  }
}

function createFlowDescriptor(adm, annotation, key, descriptor, // provides ability to disable safeDescriptors for prototypes
safeDescriptors) {
  if (safeDescriptors === void 0) {
    safeDescriptors = globalState.safeDescriptors;
  }

  assertFlowDescriptor(adm, annotation, key, descriptor);
  return {
    value: flow(descriptor.value),
    // Non-configurable for classes
    // prevents accidental field redefinition in subclass
    configurable: safeDescriptors ? adm.isPlainObject_ : true,
    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058
    enumerable: false,
    // Non-obsevable, therefore non-writable
    // Also prevents rewriting in subclass constructor
    writable: safeDescriptors ? false : true
  };
}

function createComputedAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$3,
    extend_: extend_$3
  };
}

function make_$3(adm, key) {
  var _adm$target_$storedAn;

  var source = adm.target_;

  while (source && source !== objectPrototype) {
    var descriptor = getDescriptor(source, key);

    if (descriptor) {
      assertComputedDescriptor(adm, this, key, descriptor);
      var definePropertyOutcome = adm.defineComputedProperty_(key, _extends({}, this.options_, {
        get: descriptor.get,
        set: descriptor.set
      }));

      if (!definePropertyOutcome) {
        // Intercepted
        return;
      }

      recordAnnotationApplied(adm, this, key);
      return;
    }

    source = Object.getPrototypeOf(source);
  }

  if (!((_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? void 0 : _adm$target_$storedAn[key])) {
    // Throw on missing key, except for decorators:
    // Decorator annotations are collected from whole prototype chain.
    // When called from super() some props may not exist yet.
    // However we don't have to worry about missing prop,
    // because the decorator must have been applied to something.
    die(1, this.annotationType_, adm.name_ + "." + key.toString());
  }
}

function extend_$3(adm, key, descriptor, proxyTrap) {
  assertComputedDescriptor(adm, this, key, descriptor);
  return adm.defineComputedProperty_(key, _extends({}, this.options_, {
    get: descriptor.get,
    set: descriptor.set
  }), proxyTrap);
}

function assertComputedDescriptor(adm, _ref, key, _ref2) {
  var annotationType_ = _ref.annotationType_;
  var get = _ref2.get;

  if ( true && !get) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on getter(+setter) properties."));
  }
}

function createObservableAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$4,
    extend_: extend_$4
  };
}

function make_$4(adm, key) {
  var _adm$target_$storedAn;

  var source = adm.target_; // Copy props from proto as well, see test:
  // "decorate should work with Object.create"

  while (source && source !== objectPrototype) {
    var descriptor = getDescriptor(source, key);

    if (descriptor) {
      var _this$options_$enhanc, _this$options_;

      assertObservableDescriptor(adm, this, key, descriptor);
      var definePropertyOutcome = adm.defineObservableProperty_(key, descriptor.value, (_this$options_$enhanc = (_this$options_ = this.options_) == null ? void 0 : _this$options_.enhancer) != null ? _this$options_$enhanc : deepEnhancer);

      if (!definePropertyOutcome) {
        // Intercepted
        return;
      }

      recordAnnotationApplied(adm, this, key);
      return;
    }

    source = Object.getPrototypeOf(source);
  }

  if (!((_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? void 0 : _adm$target_$storedAn[key])) {
    // Throw on missing key, except for decorators:
    // Decorator annotations are collected from whole prototype chain.
    // When called from super() some props may not exist yet.
    // However we don't have to worry about missing prop,
    // because the decorator must have been applied to something.
    die(1, this.annotationType_, adm.name_ + "." + key.toString());
  }
}

function extend_$4(adm, key, descriptor, proxyTrap) {
  var _this$options_$enhanc2, _this$options_2;

  assertObservableDescriptor(adm, this, key, descriptor);
  return adm.defineObservableProperty_(key, descriptor.value, (_this$options_$enhanc2 = (_this$options_2 = this.options_) == null ? void 0 : _this$options_2.enhancer) != null ? _this$options_$enhanc2 : deepEnhancer, proxyTrap);
}

function assertObservableDescriptor(adm, _ref, key, descriptor) {
  var annotationType_ = _ref.annotationType_;

  if ( true && !("value" in descriptor)) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' cannot be used on getter/setter properties"));
  }
} // in the majority of cases


var defaultCreateObservableOptions = {
  deep: true,
  name: undefined,
  defaultDecorator: undefined,
  proxy: true
};
Object.freeze(defaultCreateObservableOptions);

function asCreateObservableOptions(thing) {
  return thing || defaultCreateObservableOptions;
}

var observableAnnotation = /*#__PURE__*/createObservableAnnotation("observable");
var observableRefAnnotation = /*#__PURE__*/createObservableAnnotation("observable.ref", {
  enhancer: referenceEnhancer
});
var observableShallowAnnotation = /*#__PURE__*/createObservableAnnotation("observable.shallow", {
  enhancer: shallowEnhancer
});
var observableStructAnnotation = /*#__PURE__*/createObservableAnnotation("observable.struct", {
  enhancer: refStructEnhancer
});
var observableDecoratorAnnotation = /*#__PURE__*/createDecoratorAnnotation(observableAnnotation);

function getEnhancerFromOptions(options) {
  return options.deep === true ? deepEnhancer : options.deep === false ? referenceEnhancer : getEnhancerFromAnnotation(options.defaultDecorator);
}

function getAnnotationFromOptions(options) {
  return options ? options.deep === true ? observableAnnotation : options.deep === false ? observableRefAnnotation : options.defaultDecorator : undefined;
}

function getEnhancerFromAnnotation(annotation) {
  var _annotation$options_$, _annotation$options_;

  return !annotation ? deepEnhancer : (_annotation$options_$ = (_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.enhancer) != null ? _annotation$options_$ : deepEnhancer;
}
/**
 * Turns an object, array or function into a reactive structure.
 * @param v the value which should become observable.
 */


function createObservable(v, arg2, arg3) {
  // @observable someProp;
  if (isStringish(arg2)) {
    storeAnnotation(v, arg2, observableAnnotation);
    return;
  } // already observable - ignore


  if (isObservable(v)) return v; // plain object

  if (isPlainObject(v)) return observable.object(v, arg2, arg3); // Array

  if (Array.isArray(v)) return observable.array(v, arg2); // Map

  if (isES6Map(v)) return observable.map(v, arg2); // Set

  if (isES6Set(v)) return observable.set(v, arg2); // other object - ignore

  if (typeof v === "object" && v !== null) return v; // anything else

  return observable.box(v, arg2);
}

Object.assign(createObservable, observableDecoratorAnnotation);
var observableFactories = {
  box: function box(value, options) {
    var o = asCreateObservableOptions(options);
    return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals);
  },
  array: function array(initialValues, options) {
    var o = asCreateObservableOptions(options);
    return (globalState.useProxies === false || o.proxy === false ? createLegacyArray : createObservableArray)(initialValues, getEnhancerFromOptions(o), o.name);
  },
  map: function map(initialValues, options) {
    var o = asCreateObservableOptions(options);
    return new ObservableMap(initialValues, getEnhancerFromOptions(o), o.name);
  },
  set: function set(initialValues, options) {
    var o = asCreateObservableOptions(options);
    return new ObservableSet(initialValues, getEnhancerFromOptions(o), o.name);
  },
  object: function object(props, decorators, options) {
    return extendObservable(globalState.useProxies === false || (options == null ? void 0 : options.proxy) === false ? asObservableObject({}, options) : asDynamicObservableObject({}, options), props, decorators);
  },
  ref: /*#__PURE__*/createDecoratorAnnotation(observableRefAnnotation),
  shallow: /*#__PURE__*/createDecoratorAnnotation(observableShallowAnnotation),
  deep: observableDecoratorAnnotation,
  struct: /*#__PURE__*/createDecoratorAnnotation(observableStructAnnotation)
}; // eslint-disable-next-line

var observable = /*#__PURE__*/assign(createObservable, observableFactories);
var COMPUTED = "computed";
var COMPUTED_STRUCT = "computed.struct";
var computedAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED);
var computedStructAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED_STRUCT, {
  equals: comparer.structural
});
/**
 * Decorator for class properties: @computed get value() { return expr; }.
 * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;
 */

var computed = function computed(arg1, arg2) {
  if (isStringish(arg2)) {
    // @computed
    return storeAnnotation(arg1, arg2, computedAnnotation);
  }

  if (isPlainObject(arg1)) {
    // @computed({ options })
    return createDecoratorAnnotation(createComputedAnnotation(COMPUTED, arg1));
  } // computed(expr, options?)


  if (true) {
    if (!isFunction(arg1)) die("First argument to `computed` should be an expression.");
    if (isFunction(arg2)) die("A setter as second argument is no longer supported, use `{ set: fn }` option instead");
  }

  var opts = isPlainObject(arg2) ? arg2 : {};
  opts.get = arg1;
  opts.name || (opts.name = arg1.name || "");
  /* for generated name */

  return new ComputedValue(opts);
};

Object.assign(computed, computedAnnotation);
computed.struct = /*#__PURE__*/createDecoratorAnnotation(computedStructAnnotation);

var _getDescriptor$config, _getDescriptor; // mobx versions


var currentActionId = 0;
var nextActionId = 1;
var isFunctionNameConfigurable = (_getDescriptor$config = (_getDescriptor = /*#__PURE__*/getDescriptor(function () {}, "name")) == null ? void 0 : _getDescriptor.configurable) != null ? _getDescriptor$config : false; // we can safely recycle this object

var tmpNameDescriptor = {
  value: "action",
  configurable: true,
  writable: false,
  enumerable: false
};

function createAction(actionName, fn, autoAction, ref) {
  if (autoAction === void 0) {
    autoAction = false;
  }

  if (true) {
    if (!isFunction(fn)) die("`action` can only be invoked on functions");
    if (typeof actionName !== "string" || !actionName) die("actions should have valid names, got: '" + actionName + "'");
  }

  function res() {
    return executeAction(actionName, autoAction, fn, ref || this, arguments);
  }

  res.isMobxAction = true;

  if (isFunctionNameConfigurable) {
    tmpNameDescriptor.value = actionName;
    Object.defineProperty(res, "name", tmpNameDescriptor);
  }

  return res;
}

function executeAction(actionName, canRunAsDerivation, fn, scope, args) {
  var runInfo = _startAction(actionName, canRunAsDerivation, scope, args);

  try {
    return fn.apply(scope, args);
  } catch (err) {
    runInfo.error_ = err;
    throw err;
  } finally {
    _endAction(runInfo);
  }
}

function _startAction(actionName, canRunAsDerivation, // true for autoAction
scope, args) {
  var notifySpy_ =  true && isSpyEnabled() && !!actionName;
  var startTime_ = 0;

  if ( true && notifySpy_) {
    startTime_ = Date.now();
    var flattenedArgs = args ? Array.from(args) : EMPTY_ARRAY;
    spyReportStart({
      type: ACTION,
      name: actionName,
      object: scope,
      arguments: flattenedArgs
    });
  }

  var prevDerivation_ = globalState.trackingDerivation;
  var runAsAction = !canRunAsDerivation || !prevDerivation_;
  startBatch();
  var prevAllowStateChanges_ = globalState.allowStateChanges; // by default preserve previous allow

  if (runAsAction) {
    untrackedStart();
    prevAllowStateChanges_ = allowStateChangesStart(true);
  }

  var prevAllowStateReads_ = allowStateReadsStart(true);
  var runInfo = {
    runAsAction_: runAsAction,
    prevDerivation_: prevDerivation_,
    prevAllowStateChanges_: prevAllowStateChanges_,
    prevAllowStateReads_: prevAllowStateReads_,
    notifySpy_: notifySpy_,
    startTime_: startTime_,
    actionId_: nextActionId++,
    parentActionId_: currentActionId
  };
  currentActionId = runInfo.actionId_;
  return runInfo;
}

function _endAction(runInfo) {
  if (currentActionId !== runInfo.actionId_) {
    die(30);
  }

  currentActionId = runInfo.parentActionId_;

  if (runInfo.error_ !== undefined) {
    globalState.suppressReactionErrors = true;
  }

  allowStateChangesEnd(runInfo.prevAllowStateChanges_);
  allowStateReadsEnd(runInfo.prevAllowStateReads_);
  endBatch();
  if (runInfo.runAsAction_) untrackedEnd(runInfo.prevDerivation_);

  if ( true && runInfo.notifySpy_) {
    spyReportEnd({
      time: Date.now() - runInfo.startTime_
    });
  }

  globalState.suppressReactionErrors = false;
}

function allowStateChanges(allowStateChanges, func) {
  var prev = allowStateChangesStart(allowStateChanges);

  try {
    return func();
  } finally {
    allowStateChangesEnd(prev);
  }
}

function allowStateChangesStart(allowStateChanges) {
  var prev = globalState.allowStateChanges;
  globalState.allowStateChanges = allowStateChanges;
  return prev;
}

function allowStateChangesEnd(prev) {
  globalState.allowStateChanges = prev;
}

var _Symbol$toPrimitive;

var CREATE = "create";
_Symbol$toPrimitive = Symbol.toPrimitive;

var ObservableValue = /*#__PURE__*/function (_Atom) {
  _inheritsLoose(ObservableValue, _Atom);

  function ObservableValue(value, enhancer, name_, notifySpy, equals) {
    var _this;

    if (name_ === void 0) {
      name_ =  true ? "ObservableValue@" + getNextId() : undefined;
    }

    if (notifySpy === void 0) {
      notifySpy = true;
    }

    if (equals === void 0) {
      equals = comparer["default"];
    }

    _this = _Atom.call(this, name_) || this;
    _this.enhancer = void 0;
    _this.name_ = void 0;
    _this.equals = void 0;
    _this.hasUnreportedChange_ = false;
    _this.interceptors_ = void 0;
    _this.changeListeners_ = void 0;
    _this.value_ = void 0;
    _this.dehancer = void 0;
    _this.enhancer = enhancer;
    _this.name_ = name_;
    _this.equals = equals;
    _this.value_ = enhancer(value, undefined, name_);

    if ( true && notifySpy && isSpyEnabled()) {
      // only notify spy if this is a stand-alone observable
      spyReport({
        type: CREATE,
        object: _assertThisInitialized(_this),
        observableKind: "value",
        debugObjectName: _this.name_,
        newValue: "" + _this.value_
      });
    }

    return _this;
  }

  var _proto = ObservableValue.prototype;

  _proto.dehanceValue = function dehanceValue(value) {
    if (this.dehancer !== undefined) return this.dehancer(value);
    return value;
  };

  _proto.set = function set(newValue) {
    var oldValue = this.value_;
    newValue = this.prepareNewValue_(newValue);

    if (newValue !== globalState.UNCHANGED) {
      var notifySpy = isSpyEnabled();

      if ( true && notifySpy) {
        spyReportStart({
          type: UPDATE,
          object: this,
          observableKind: "value",
          debugObjectName: this.name_,
          newValue: newValue,
          oldValue: oldValue
        });
      }

      this.setNewValue_(newValue);
      if ( true && notifySpy) spyReportEnd();
    }
  };

  _proto.prepareNewValue_ = function prepareNewValue_(newValue) {
    checkIfStateModificationsAreAllowed(this);

    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this,
        type: UPDATE,
        newValue: newValue
      });
      if (!change) return globalState.UNCHANGED;
      newValue = change.newValue;
    } // apply modifier


    newValue = this.enhancer(newValue, this.value_, this.name_);
    return this.equals(this.value_, newValue) ? globalState.UNCHANGED : newValue;
  };

  _proto.setNewValue_ = function setNewValue_(newValue) {
    var oldValue = this.value_;
    this.value_ = newValue;
    this.reportChanged();

    if (hasListeners(this)) {
      notifyListeners(this, {
        type: UPDATE,
        object: this,
        newValue: newValue,
        oldValue: oldValue
      });
    }
  };

  _proto.get = function get() {
    this.reportObserved();
    return this.dehanceValue(this.value_);
  };

  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };

  _proto.observe_ = function observe_(listener, fireImmediately) {
    if (fireImmediately) listener({
      observableKind: "value",
      debugObjectName: this.name_,
      object: this,
      type: UPDATE,
      newValue: this.value_,
      oldValue: undefined
    });
    return registerListener(this, listener);
  };

  _proto.raw = function raw() {
    // used by MST ot get undehanced value
    return this.value_;
  };

  _proto.toJSON = function toJSON() {
    return this.get();
  };

  _proto.toString = function toString() {
    return this.name_ + "[" + this.value_ + "]";
  };

  _proto.valueOf = function valueOf() {
    return toPrimitive(this.get());
  };

  _proto[_Symbol$toPrimitive] = function () {
    return this.valueOf();
  };

  return ObservableValue;
}(Atom);

var isObservableValue = /*#__PURE__*/createInstanceofPredicate("ObservableValue", ObservableValue);

var _Symbol$toPrimitive$1;
/**
 * A node in the state dependency root that observes other nodes, and can be observed itself.
 *
 * ComputedValue will remember the result of the computation for the duration of the batch, or
 * while being observed.
 *
 * During this time it will recompute only when one of its direct dependencies changed,
 * but only when it is being accessed with `ComputedValue.get()`.
 *
 * Implementation description:
 * 1. First time it's being accessed it will compute and remember result
 *    give back remembered result until 2. happens
 * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.
 * 3. When it's being accessed, recompute if any shallow dependency changed.
 *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.
 *    go to step 2. either way
 *
 * If at any point it's outside batch and it isn't observed: reset everything and go to 1.
 */


_Symbol$toPrimitive$1 = Symbol.toPrimitive;

var ComputedValue = /*#__PURE__*/function () {
  // nodes we are looking at. Our value depends on these nodes
  // during tracking it's an array with new observed observers
  // to check for cycles
  // N.B: unminified as it is used by MST

  /**
   * Create a new computed value based on a function expression.
   *
   * The `name` property is for debug purposes only.
   *
   * The `equals` property specifies the comparer function to use to determine if a newly produced
   * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`
   * compares based on identity comparison (===), and `structuralComparer` deeply compares the structure.
   * Structural comparison can be convenient if you always produce a new aggregated object and
   * don't want to notify observers if it is structurally the same.
   * This is useful for working with vectors, mouse coordinates etc.
   */
  function ComputedValue(options) {
    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
    this.observing_ = [];
    this.newObserving_ = null;
    this.isBeingObserved_ = false;
    this.isPendingUnobservation_ = false;
    this.observers_ = new Set();
    this.diffValue_ = 0;
    this.runId_ = 0;
    this.lastAccessedBy_ = 0;
    this.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
    this.unboundDepsCount_ = 0;
    this.value_ = new CaughtException(null);
    this.name_ = void 0;
    this.triggeredBy_ = void 0;
    this.isComputing_ = false;
    this.isRunningSetter_ = false;
    this.derivation = void 0;
    this.setter_ = void 0;
    this.isTracing_ = TraceMode.NONE;
    this.scope_ = void 0;
    this.equals_ = void 0;
    this.requiresReaction_ = void 0;
    this.keepAlive_ = void 0;
    this.onBOL = void 0;
    this.onBUOL = void 0;
    if (!options.get) die(31);
    this.derivation = options.get;
    this.name_ = options.name || ( true ? "ComputedValue@" + getNextId() : undefined);

    if (options.set) {
      this.setter_ = createAction( true ? this.name_ + "-setter" : undefined, options.set);
    }

    this.equals_ = options.equals || (options.compareStructural || options.struct ? comparer.structural : comparer["default"]);
    this.scope_ = options.context;
    this.requiresReaction_ = !!options.requiresReaction;
    this.keepAlive_ = !!options.keepAlive;
  }

  var _proto = ComputedValue.prototype;

  _proto.onBecomeStale_ = function onBecomeStale_() {
    propagateMaybeChanged(this);
  };

  _proto.onBO = function onBO() {
    if (this.onBOL) {
      this.onBOL.forEach(function (listener) {
        return listener();
      });
    }
  };

  _proto.onBUO = function onBUO() {
    if (this.onBUOL) {
      this.onBUOL.forEach(function (listener) {
        return listener();
      });
    }
  }
  /**
   * Returns the current value of this computed value.
   * Will evaluate its computation first if needed.
   */
  ;

  _proto.get = function get() {
    if (this.isComputing_) die(32, this.name_, this.derivation);

    if (globalState.inBatch === 0 && // !globalState.trackingDerivatpion &&
    this.observers_.size === 0 && !this.keepAlive_) {
      if (shouldCompute(this)) {
        this.warnAboutUntrackedRead_();
        startBatch(); // See perf test 'computed memoization'

        this.value_ = this.computeValue_(false);
        endBatch();
      }
    } else {
      reportObserved(this);

      if (shouldCompute(this)) {
        var prevTrackingContext = globalState.trackingContext;
        if (this.keepAlive_ && !prevTrackingContext) globalState.trackingContext = this;
        if (this.trackAndCompute()) propagateChangeConfirmed(this);
        globalState.trackingContext = prevTrackingContext;
      }
    }

    var result = this.value_;
    if (isCaughtException(result)) throw result.cause;
    return result;
  };

  _proto.set = function set(value) {
    if (this.setter_) {
      if (this.isRunningSetter_) die(33, this.name_);
      this.isRunningSetter_ = true;

      try {
        this.setter_.call(this.scope_, value);
      } finally {
        this.isRunningSetter_ = false;
      }
    } else die(34, this.name_);
  };

  _proto.trackAndCompute = function trackAndCompute() {
    // N.B: unminified as it is used by MST
    var oldValue = this.value_;
    var wasSuspended =
    /* see #1208 */
    this.dependenciesState_ === IDerivationState_.NOT_TRACKING_;
    var newValue = this.computeValue_(true);

    if ( true && isSpyEnabled()) {
      spyReport({
        observableKind: "computed",
        debugObjectName: this.name_,
        object: this.scope_,
        type: "update",
        oldValue: this.value_,
        newValue: newValue
      });
    }

    var changed = wasSuspended || isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals_(oldValue, newValue);

    if (changed) {
      this.value_ = newValue;
    }

    return changed;
  };

  _proto.computeValue_ = function computeValue_(track) {
    this.isComputing_ = true; // don't allow state changes during computation

    var prev = allowStateChangesStart(false);
    var res;

    if (track) {
      res = trackDerivedFunction(this, this.derivation, this.scope_);
    } else {
      if (globalState.disableErrorBoundaries === true) {
        res = this.derivation.call(this.scope_);
      } else {
        try {
          res = this.derivation.call(this.scope_);
        } catch (e) {
          res = new CaughtException(e);
        }
      }
    }

    allowStateChangesEnd(prev);
    this.isComputing_ = false;
    return res;
  };

  _proto.suspend_ = function suspend_() {
    if (!this.keepAlive_) {
      clearObserving(this);
      this.value_ = undefined; // don't hold on to computed value!
    }
  };

  _proto.observe_ = function observe_(listener, fireImmediately) {
    var _this = this;

    var firstTime = true;
    var prevValue = undefined;
    return autorun(function () {
      // TODO: why is this in a different place than the spyReport() function? in all other observables it's called in the same place
      var newValue = _this.get();

      if (!firstTime || fireImmediately) {
        var prevU = untrackedStart();
        listener({
          observableKind: "computed",
          debugObjectName: _this.name_,
          type: UPDATE,
          object: _this,
          newValue: newValue,
          oldValue: prevValue
        });
        untrackedEnd(prevU);
      }

      firstTime = false;
      prevValue = newValue;
    });
  };

  _proto.warnAboutUntrackedRead_ = function warnAboutUntrackedRead_() {
    if (false) {}

    if (this.requiresReaction_ === true) {
      die("[mobx] Computed value " + this.name_ + " is read outside a reactive context");
    }

    if (this.isTracing_ !== TraceMode.NONE) {
      console.log("[mobx.trace] '" + this.name_ + "' is being read outside a reactive context. Doing a full recompute");
    }

    if (globalState.computedRequiresReaction) {
      console.warn("[mobx] Computed value " + this.name_ + " is being read outside a reactive context. Doing a full recompute");
    }
  };

  _proto.toString = function toString() {
    return this.name_ + "[" + this.derivation.toString() + "]";
  };

  _proto.valueOf = function valueOf() {
    return toPrimitive(this.get());
  };

  _proto[_Symbol$toPrimitive$1] = function () {
    return this.valueOf();
  };

  return ComputedValue;
}();

var isComputedValue = /*#__PURE__*/createInstanceofPredicate("ComputedValue", ComputedValue);
var IDerivationState_;

(function (IDerivationState_) {
  // before being run or (outside batch and not being observed)
  // at this point derivation is not holding any data about dependency tree
  IDerivationState_[IDerivationState_["NOT_TRACKING_"] = -1] = "NOT_TRACKING_"; // no shallow dependency changed since last computation
  // won't recalculate derivation
  // this is what makes mobx fast

  IDerivationState_[IDerivationState_["UP_TO_DATE_"] = 0] = "UP_TO_DATE_"; // some deep dependency changed, but don't know if shallow dependency changed
  // will require to check first if UP_TO_DATE or POSSIBLY_STALE
  // currently only ComputedValue will propagate POSSIBLY_STALE
  //
  // having this state is second big optimization:
  // don't have to recompute on every dependency change, but only when it's needed

  IDerivationState_[IDerivationState_["POSSIBLY_STALE_"] = 1] = "POSSIBLY_STALE_"; // A shallow dependency has changed since last computation and the derivation
  // will need to recompute when it's needed next.

  IDerivationState_[IDerivationState_["STALE_"] = 2] = "STALE_";
})(IDerivationState_ || (IDerivationState_ = {}));

var TraceMode;

(function (TraceMode) {
  TraceMode[TraceMode["NONE"] = 0] = "NONE";
  TraceMode[TraceMode["LOG"] = 1] = "LOG";
  TraceMode[TraceMode["BREAK"] = 2] = "BREAK";
})(TraceMode || (TraceMode = {}));

var CaughtException = function CaughtException(cause) {
  this.cause = void 0;
  this.cause = cause; // Empty
};

function isCaughtException(e) {
  return e instanceof CaughtException;
}
/**
 * Finds out whether any dependency of the derivation has actually changed.
 * If dependenciesState is 1 then it will recalculate dependencies,
 * if any dependency changed it will propagate it by changing dependenciesState to 2.
 *
 * By iterating over the dependencies in the same order that they were reported and
 * stopping on the first change, all the recalculations are only called for ComputedValues
 * that will be tracked by derivation. That is because we assume that if the first x
 * dependencies of the derivation doesn't change then the derivation should run the same way
 * up until accessing x-th dependency.
 */


function shouldCompute(derivation) {
  switch (derivation.dependenciesState_) {
    case IDerivationState_.UP_TO_DATE_:
      return false;

    case IDerivationState_.NOT_TRACKING_:
    case IDerivationState_.STALE_:
      return true;

    case IDerivationState_.POSSIBLY_STALE_:
      {
        // state propagation can occur outside of action/reactive context #2195
        var prevAllowStateReads = allowStateReadsStart(true);
        var prevUntracked = untrackedStart(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.

        var obs = derivation.observing_,
            l = obs.length;

        for (var i = 0; i < l; i++) {
          var obj = obs[i];

          if (isComputedValue(obj)) {
            if (globalState.disableErrorBoundaries) {
              obj.get();
            } else {
              try {
                obj.get();
              } catch (e) {
                // we are not interested in the value *or* exception at this moment, but if there is one, notify all
                untrackedEnd(prevUntracked);
                allowStateReadsEnd(prevAllowStateReads);
                return true;
              }
            } // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.
            // and `derivation` is an observer of `obj`
            // invariantShouldCompute(derivation)


            if (derivation.dependenciesState_ === IDerivationState_.STALE_) {
              untrackedEnd(prevUntracked);
              allowStateReadsEnd(prevAllowStateReads);
              return true;
            }
          }
        }

        changeDependenciesStateTo0(derivation);
        untrackedEnd(prevUntracked);
        allowStateReadsEnd(prevAllowStateReads);
        return false;
      }
  }
}

function isComputingDerivation() {
  return globalState.trackingDerivation !== null; // filter out actions inside computations
}

function checkIfStateModificationsAreAllowed(atom) {
  if (false) {}

  var hasObservers = atom.observers_.size > 0; // Should not be possible to change observed state outside strict mode, except during initialization, see #563

  if (!globalState.allowStateChanges && (hasObservers || globalState.enforceActions === "always")) console.warn("[MobX] " + (globalState.enforceActions ? "Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed. Tried to modify: " : "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, a computed value or the render function of a React component? You can wrap side effects in 'runInAction' (or decorate functions with 'action') if needed. Tried to modify: ") + atom.name_);
}

function checkIfStateReadsAreAllowed(observable) {
  if ( true && !globalState.allowStateReads && globalState.observableRequiresReaction) {
    console.warn("[mobx] Observable " + observable.name_ + " being read outside a reactive context");
  }
}
/**
 * Executes the provided function `f` and tracks which observables are being accessed.
 * The tracking information is stored on the `derivation` object and the derivation is registered
 * as observer of any of the accessed observables.
 */


function trackDerivedFunction(derivation, f, context) {
  var prevAllowStateReads = allowStateReadsStart(true); // pre allocate array allocation + room for variation in deps
  // array will be trimmed by bindDependencies

  changeDependenciesStateTo0(derivation);
  derivation.newObserving_ = new Array(derivation.observing_.length + 100);
  derivation.unboundDepsCount_ = 0;
  derivation.runId_ = ++globalState.runId;
  var prevTracking = globalState.trackingDerivation;
  globalState.trackingDerivation = derivation;
  globalState.inBatch++;
  var result;

  if (globalState.disableErrorBoundaries === true) {
    result = f.call(context);
  } else {
    try {
      result = f.call(context);
    } catch (e) {
      result = new CaughtException(e);
    }
  }

  globalState.inBatch--;
  globalState.trackingDerivation = prevTracking;
  bindDependencies(derivation);
  warnAboutDerivationWithoutDependencies(derivation);
  allowStateReadsEnd(prevAllowStateReads);
  return result;
}

function warnAboutDerivationWithoutDependencies(derivation) {
  if (false) {}
  if (derivation.observing_.length !== 0) return;

  if (globalState.reactionRequiresObservable || derivation.requiresObservable_) {
    console.warn("[mobx] Derivation " + derivation.name_ + " is created/updated without reading any observable value");
  }
}
/**
 * diffs newObserving with observing.
 * update observing to be newObserving with unique observables
 * notify observers that become observed/unobserved
 */


function bindDependencies(derivation) {
  // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1");
  var prevObserving = derivation.observing_;
  var observing = derivation.observing_ = derivation.newObserving_;
  var lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_; // Go through all new observables and check diffValue: (this list can contain duplicates):
  //   0: first occurrence, change to 1 and keep it
  //   1: extra occurrence, drop it

  var i0 = 0,
      l = derivation.unboundDepsCount_;

  for (var i = 0; i < l; i++) {
    var dep = observing[i];

    if (dep.diffValue_ === 0) {
      dep.diffValue_ = 1;
      if (i0 !== i) observing[i0] = dep;
      i0++;
    } // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,
    // not hitting the condition


    if (dep.dependenciesState_ > lowestNewObservingDerivationState) {
      lowestNewObservingDerivationState = dep.dependenciesState_;
    }
  }

  observing.length = i0;
  derivation.newObserving_ = null; // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)
  // Go through all old observables and check diffValue: (it is unique after last bindDependencies)
  //   0: it's not in new observables, unobserve it
  //   1: it keeps being observed, don't want to notify it. change to 0

  l = prevObserving.length;

  while (l--) {
    var _dep = prevObserving[l];

    if (_dep.diffValue_ === 0) {
      removeObserver(_dep, derivation);
    }

    _dep.diffValue_ = 0;
  } // Go through all new observables and check diffValue: (now it should be unique)
  //   0: it was set to 0 in last loop. don't need to do anything.
  //   1: it wasn't observed, let's observe it. set back to 0


  while (i0--) {
    var _dep2 = observing[i0];

    if (_dep2.diffValue_ === 1) {
      _dep2.diffValue_ = 0;
      addObserver(_dep2, derivation);
    }
  } // Some new observed derivations may become stale during this derivation computation
  // so they have had no chance to propagate staleness (#916)


  if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {
    derivation.dependenciesState_ = lowestNewObservingDerivationState;
    derivation.onBecomeStale_();
  }
}

function clearObserving(derivation) {
  // invariant(globalState.inBatch > 0, "INTERNAL ERROR clearObserving should be called only inside batch");
  var obs = derivation.observing_;
  derivation.observing_ = [];
  var i = obs.length;

  while (i--) {
    removeObserver(obs[i], derivation);
  }

  derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
}

function untracked(action) {
  var prev = untrackedStart();

  try {
    return action();
  } finally {
    untrackedEnd(prev);
  }
}

function untrackedStart() {
  var prev = globalState.trackingDerivation;
  globalState.trackingDerivation = null;
  return prev;
}

function untrackedEnd(prev) {
  globalState.trackingDerivation = prev;
}

function allowStateReadsStart(allowStateReads) {
  var prev = globalState.allowStateReads;
  globalState.allowStateReads = allowStateReads;
  return prev;
}

function allowStateReadsEnd(prev) {
  globalState.allowStateReads = prev;
}
/**
 * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0
 *
 */


function changeDependenciesStateTo0(derivation) {
  if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_) return;
  derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_;
  var obs = derivation.observing_;
  var i = obs.length;

  while (i--) {
    obs[i].lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
  }
}
/**
 * These values will persist if global state is reset
 */


var persistentKeys = ["mobxGuid", "spyListeners", "enforceActions", "computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "allowStateReads", "disableErrorBoundaries", "runId", "UNCHANGED", "useProxies"];

var MobXGlobals = function MobXGlobals() {
  this.version = 6;
  this.UNCHANGED = {};
  this.trackingDerivation = null;
  this.trackingContext = null;
  this.runId = 0;
  this.mobxGuid = 0;
  this.inBatch = 0;
  this.pendingUnobservations = [];
  this.pendingReactions = [];
  this.isRunningReactions = false;
  this.allowStateChanges = false;
  this.allowStateReads = true;
  this.enforceActions = true;
  this.spyListeners = [];
  this.globalReactionErrorHandlers = [];
  this.computedRequiresReaction = false;
  this.reactionRequiresObservable = false;
  this.observableRequiresReaction = false;
  this.disableErrorBoundaries = false;
  this.suppressReactionErrors = false;
  this.useProxies = true;
  this.verifyProxies = false;
  this.safeDescriptors = true;
};

var canMergeGlobalState = true;
var isolateCalled = false;

var globalState = /*#__PURE__*/function () {
  var global = /*#__PURE__*/getGlobal();
  if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals) canMergeGlobalState = false;
  if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals().version) canMergeGlobalState = false;

  if (!canMergeGlobalState) {
    setTimeout(function () {
      if (!isolateCalled) {
        die(35);
      }
    }, 1);
    return new MobXGlobals();
  } else if (global.__mobxGlobals) {
    global.__mobxInstanceCount += 1;
    if (!global.__mobxGlobals.UNCHANGED) global.__mobxGlobals.UNCHANGED = {}; // make merge backward compatible

    return global.__mobxGlobals;
  } else {
    global.__mobxInstanceCount = 1;
    return global.__mobxGlobals = /*#__PURE__*/new MobXGlobals();
  }
}();

function isolateGlobalState() {
  if (globalState.pendingReactions.length || globalState.inBatch || globalState.isRunningReactions) die(36);
  isolateCalled = true;

  if (canMergeGlobalState) {
    var global = getGlobal();
    if (--global.__mobxInstanceCount === 0) global.__mobxGlobals = undefined;
    globalState = new MobXGlobals();
  }
}

function getGlobalState() {
  return globalState;
}
/**
 * For testing purposes only; this will break the internal state of existing observables,
 * but can be used to get back at a stable state after throwing errors
 */


function resetGlobalState() {
  var defaultGlobals = new MobXGlobals();

  for (var key in defaultGlobals) {
    if (persistentKeys.indexOf(key) === -1) globalState[key] = defaultGlobals[key];
  }

  globalState.allowStateChanges = !globalState.enforceActions;
}

function hasObservers(observable) {
  return observable.observers_ && observable.observers_.size > 0;
}

function getObservers(observable) {
  return observable.observers_;
} // function invariantObservers(observable: IObservable) {
//     const list = observable.observers
//     const map = observable.observersIndexes
//     const l = list.length
//     for (let i = 0; i < l; i++) {
//         const id = list[i].__mapid
//         if (i) {
//             invariant(map[id] === i, "INTERNAL ERROR maps derivation.__mapid to index in list") // for performance
//         } else {
//             invariant(!(id in map), "INTERNAL ERROR observer on index 0 shouldn't be held in map.") // for performance
//         }
//     }
//     invariant(
//         list.length === 0 || Object.keys(map).length === list.length - 1,
//         "INTERNAL ERROR there is no junk in map"
//     )
// }


function addObserver(observable, node) {
  // invariant(node.dependenciesState !== -1, "INTERNAL ERROR, can add only dependenciesState !== -1");
  // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR add already added node");
  // invariantObservers(observable);
  observable.observers_.add(node);
  if (observable.lowestObserverState_ > node.dependenciesState_) observable.lowestObserverState_ = node.dependenciesState_; // invariantObservers(observable);
  // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR didn't add node");
}

function removeObserver(observable, node) {
  // invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");
  // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR remove already removed node");
  // invariantObservers(observable);
  observable.observers_["delete"](node);

  if (observable.observers_.size === 0) {
    // deleting last observer
    queueForUnobservation(observable);
  } // invariantObservers(observable);
  // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR remove already removed node2");

}

function queueForUnobservation(observable) {
  if (observable.isPendingUnobservation_ === false) {
    // invariant(observable._observers.length === 0, "INTERNAL ERROR, should only queue for unobservation unobserved observables");
    observable.isPendingUnobservation_ = true;
    globalState.pendingUnobservations.push(observable);
  }
}
/**
 * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.
 * During a batch `onBecomeUnobserved` will be called at most once per observable.
 * Avoids unnecessary recalculations.
 */


function startBatch() {
  globalState.inBatch++;
}

function endBatch() {
  if (--globalState.inBatch === 0) {
    runReactions(); // the batch is actually about to finish, all unobserving should happen here.

    var list = globalState.pendingUnobservations;

    for (var i = 0; i < list.length; i++) {
      var observable = list[i];
      observable.isPendingUnobservation_ = false;

      if (observable.observers_.size === 0) {
        if (observable.isBeingObserved_) {
          // if this observable had reactive observers, trigger the hooks
          observable.isBeingObserved_ = false;
          observable.onBUO();
        }

        if (observable instanceof ComputedValue) {
          // computed values are automatically teared down when the last observer leaves
          // this process happens recursively, this computed might be the last observabe of another, etc..
          observable.suspend_();
        }
      }
    }

    globalState.pendingUnobservations = [];
  }
}

function reportObserved(observable) {
  checkIfStateReadsAreAllowed(observable);
  var derivation = globalState.trackingDerivation;

  if (derivation !== null) {
    /**
     * Simple optimization, give each derivation run an unique id (runId)
     * Check if last time this observable was accessed the same runId is used
     * if this is the case, the relation is already known
     */
    if (derivation.runId_ !== observable.lastAccessedBy_) {
      observable.lastAccessedBy_ = derivation.runId_; // Tried storing newObserving, or observing, or both as Set, but performance didn't come close...

      derivation.newObserving_[derivation.unboundDepsCount_++] = observable;

      if (!observable.isBeingObserved_ && globalState.trackingContext) {
        observable.isBeingObserved_ = true;
        observable.onBO();
      }
    }

    return true;
  } else if (observable.observers_.size === 0 && globalState.inBatch > 0) {
    queueForUnobservation(observable);
  }

  return false;
} // function invariantLOS(observable: IObservable, msg: string) {
//     // it's expensive so better not run it in produciton. but temporarily helpful for testing
//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)
//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`
//     throw new Error(
//         "lowestObserverState is wrong for " +
//             msg +
//             " because " +
//             min +
//             " < " +
//             observable.lowestObserverState
//     )
// }

/**
 * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly
 * It will propagate changes to observers from previous run
 * It's hard or maybe impossible (with reasonable perf) to get it right with current approach
 * Hopefully self reruning autoruns aren't a feature people should depend on
 * Also most basic use cases should be ok
 */
// Called by Atom when its value changes


function propagateChanged(observable) {
  // invariantLOS(observable, "changed start");
  if (observable.lowestObserverState_ === IDerivationState_.STALE_) return;
  observable.lowestObserverState_ = IDerivationState_.STALE_; // Ideally we use for..of here, but the downcompiled version is really slow...

  observable.observers_.forEach(function (d) {
    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
      if ( true && d.isTracing_ !== TraceMode.NONE) {
        logTraceInfo(d, observable);
      }

      d.onBecomeStale_();
    }

    d.dependenciesState_ = IDerivationState_.STALE_;
  }); // invariantLOS(observable, "changed end");
} // Called by ComputedValue when it recalculate and its value changed


function propagateChangeConfirmed(observable) {
  // invariantLOS(observable, "confirmed start");
  if (observable.lowestObserverState_ === IDerivationState_.STALE_) return;
  observable.lowestObserverState_ = IDerivationState_.STALE_;
  observable.observers_.forEach(function (d) {
    if (d.dependenciesState_ === IDerivationState_.POSSIBLY_STALE_) d.dependenciesState_ = IDerivationState_.STALE_;else if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_ // this happens during computing of `d`, just keep lowestObserverState up to date.
    ) observable.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
  }); // invariantLOS(observable, "confirmed end");
} // Used by computed when its dependency changed, but we don't wan't to immediately recompute.


function propagateMaybeChanged(observable) {
  // invariantLOS(observable, "maybe start");
  if (observable.lowestObserverState_ !== IDerivationState_.UP_TO_DATE_) return;
  observable.lowestObserverState_ = IDerivationState_.POSSIBLY_STALE_;
  observable.observers_.forEach(function (d) {
    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
      d.dependenciesState_ = IDerivationState_.POSSIBLY_STALE_;

      if ( true && d.isTracing_ !== TraceMode.NONE) {
        logTraceInfo(d, observable);
      }

      d.onBecomeStale_();
    }
  }); // invariantLOS(observable, "maybe end");
}

function logTraceInfo(derivation, observable) {
  console.log("[mobx.trace] '" + derivation.name_ + "' is invalidated due to a change in: '" + observable.name_ + "'");

  if (derivation.isTracing_ === TraceMode.BREAK) {
    var lines = [];
    printDepTree(getDependencyTree(derivation), lines, 1); // prettier-ignore

    new Function("debugger;\n/*\nTracing '" + derivation.name_ + "'\n\nYou are entering this break point because derivation '" + derivation.name_ + "' is being traced and '" + observable.name_ + "' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n" + (derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\//g, "/") : "") + "\n\nThe dependencies for this derivation are:\n\n" + lines.join("\n") + "\n*/\n    ")();
  }
}

function printDepTree(tree, lines, depth) {
  if (lines.length >= 1000) {
    lines.push("(and many more)");
    return;
  }

  lines.push("" + new Array(depth).join("\t") + tree.name); // MWE: not the fastest, but the easiest way :)

  if (tree.dependencies) tree.dependencies.forEach(function (child) {
    return printDepTree(child, lines, depth + 1);
  });
}

var Reaction = /*#__PURE__*/function () {
  // nodes we are looking at. Our value depends on these nodes
  function Reaction(name_, onInvalidate_, errorHandler_, requiresObservable_) {
    if (name_ === void 0) {
      name_ =  true ? "Reaction@" + getNextId() : undefined;
    }

    if (requiresObservable_ === void 0) {
      requiresObservable_ = false;
    }

    this.name_ = void 0;
    this.onInvalidate_ = void 0;
    this.errorHandler_ = void 0;
    this.requiresObservable_ = void 0;
    this.observing_ = [];
    this.newObserving_ = [];
    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
    this.diffValue_ = 0;
    this.runId_ = 0;
    this.unboundDepsCount_ = 0;
    this.isDisposed_ = false;
    this.isScheduled_ = false;
    this.isTrackPending_ = false;
    this.isRunning_ = false;
    this.isTracing_ = TraceMode.NONE;
    this.name_ = name_;
    this.onInvalidate_ = onInvalidate_;
    this.errorHandler_ = errorHandler_;
    this.requiresObservable_ = requiresObservable_;
  }

  var _proto = Reaction.prototype;

  _proto.onBecomeStale_ = function onBecomeStale_() {
    this.schedule_();
  };

  _proto.schedule_ = function schedule_() {
    if (!this.isScheduled_) {
      this.isScheduled_ = true;
      globalState.pendingReactions.push(this);
      runReactions();
    }
  };

  _proto.isScheduled = function isScheduled() {
    return this.isScheduled_;
  }
  /**
   * internal, use schedule() if you intend to kick off a reaction
   */
  ;

  _proto.runReaction_ = function runReaction_() {
    if (!this.isDisposed_) {
      startBatch();
      this.isScheduled_ = false;
      var prev = globalState.trackingContext;
      globalState.trackingContext = this;

      if (shouldCompute(this)) {
        this.isTrackPending_ = true;

        try {
          this.onInvalidate_();

          if ( true && this.isTrackPending_ && isSpyEnabled()) {
            // onInvalidate didn't trigger track right away..
            spyReport({
              name: this.name_,
              type: "scheduled-reaction"
            });
          }
        } catch (e) {
          this.reportExceptionInDerivation_(e);
        }
      }

      globalState.trackingContext = prev;
      endBatch();
    }
  };

  _proto.track = function track(fn) {
    if (this.isDisposed_) {
      return; // console.warn("Reaction already disposed") // Note: Not a warning / error in mobx 4 either
    }

    startBatch();
    var notify = isSpyEnabled();
    var startTime;

    if ( true && notify) {
      startTime = Date.now();
      spyReportStart({
        name: this.name_,
        type: "reaction"
      });
    }

    this.isRunning_ = true;
    var prevReaction = globalState.trackingContext; // reactions could create reactions...

    globalState.trackingContext = this;
    var result = trackDerivedFunction(this, fn, undefined);
    globalState.trackingContext = prevReaction;
    this.isRunning_ = false;
    this.isTrackPending_ = false;

    if (this.isDisposed_) {
      // disposed during last run. Clean up everything that was bound after the dispose call.
      clearObserving(this);
    }

    if (isCaughtException(result)) this.reportExceptionInDerivation_(result.cause);

    if ( true && notify) {
      spyReportEnd({
        time: Date.now() - startTime
      });
    }

    endBatch();
  };

  _proto.reportExceptionInDerivation_ = function reportExceptionInDerivation_(error) {
    var _this = this;

    if (this.errorHandler_) {
      this.errorHandler_(error, this);
      return;
    }

    if (globalState.disableErrorBoundaries) throw error;
    var message =  true ? "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" + this + "'" : undefined;

    if (!globalState.suppressReactionErrors) {
      console.error(message, error);
      /** If debugging brought you here, please, read the above message :-). Tnx! */
    } else if (true) console.warn("[mobx] (error in reaction '" + this.name_ + "' suppressed, fix error of causing action below)"); // prettier-ignore


    if ( true && isSpyEnabled()) {
      spyReport({
        type: "error",
        name: this.name_,
        message: message,
        error: "" + error
      });
    }

    globalState.globalReactionErrorHandlers.forEach(function (f) {
      return f(error, _this);
    });
  };

  _proto.dispose = function dispose() {
    if (!this.isDisposed_) {
      this.isDisposed_ = true;

      if (!this.isRunning_) {
        // if disposed while running, clean up later. Maybe not optimal, but rare case
        startBatch();
        clearObserving(this);
        endBatch();
      }
    }
  };

  _proto.getDisposer_ = function getDisposer_() {
    var r = this.dispose.bind(this);
    r[$mobx] = this;
    return r;
  };

  _proto.toString = function toString() {
    return "Reaction[" + this.name_ + "]";
  };

  _proto.trace = function trace$1(enterBreakPoint) {
    if (enterBreakPoint === void 0) {
      enterBreakPoint = false;
    }

    trace(this, enterBreakPoint);
  };

  return Reaction;
}();

function onReactionError(handler) {
  globalState.globalReactionErrorHandlers.push(handler);
  return function () {
    var idx = globalState.globalReactionErrorHandlers.indexOf(handler);
    if (idx >= 0) globalState.globalReactionErrorHandlers.splice(idx, 1);
  };
}
/**
 * Magic number alert!
 * Defines within how many times a reaction is allowed to re-trigger itself
 * until it is assumed that this is gonna be a never ending loop...
 */


var MAX_REACTION_ITERATIONS = 100;

var reactionScheduler = function reactionScheduler(f) {
  return f();
};

function runReactions() {
  // Trampolining, if runReactions are already running, new reactions will be picked up
  if (globalState.inBatch > 0 || globalState.isRunningReactions) return;
  reactionScheduler(runReactionsHelper);
}

function runReactionsHelper() {
  globalState.isRunningReactions = true;
  var allReactions = globalState.pendingReactions;
  var iterations = 0; // While running reactions, new reactions might be triggered.
  // Hence we work with two variables and check whether
  // we converge to no remaining reactions after a while.

  while (allReactions.length > 0) {
    if (++iterations === MAX_REACTION_ITERATIONS) {
      console.error( true ? "Reaction doesn't converge to a stable state after " + MAX_REACTION_ITERATIONS + " iterations." + (" Probably there is a cycle in the reactive function: " + allReactions[0]) : undefined);
      allReactions.splice(0); // clear reactions
    }

    var remainingReactions = allReactions.splice(0);

    for (var i = 0, l = remainingReactions.length; i < l; i++) {
      remainingReactions[i].runReaction_();
    }
  }

  globalState.isRunningReactions = false;
}

var isReaction = /*#__PURE__*/createInstanceofPredicate("Reaction", Reaction);

function setReactionScheduler(fn) {
  var baseScheduler = reactionScheduler;

  reactionScheduler = function reactionScheduler(f) {
    return fn(function () {
      return baseScheduler(f);
    });
  };
}

function isSpyEnabled() {
  return  true && !!globalState.spyListeners.length;
}

function spyReport(event) {
  if (false) {} // dead code elimination can do the rest

  if (!globalState.spyListeners.length) return;
  var listeners = globalState.spyListeners;

  for (var i = 0, l = listeners.length; i < l; i++) {
    listeners[i](event);
  }
}

function spyReportStart(event) {
  if (false) {}

  var change = _extends({}, event, {
    spyReportStart: true
  });

  spyReport(change);
}

var END_EVENT = {
  type: "report-end",
  spyReportEnd: true
};

function spyReportEnd(change) {
  if (false) {}
  if (change) spyReport(_extends({}, change, {
    type: "report-end",
    spyReportEnd: true
  }));else spyReport(END_EVENT);
}

function spy(listener) {
  if (false) {} else {
    globalState.spyListeners.push(listener);
    return once(function () {
      globalState.spyListeners = globalState.spyListeners.filter(function (l) {
        return l !== listener;
      });
    });
  }
}

var ACTION = "action";
var ACTION_BOUND = "action.bound";
var AUTOACTION = "autoAction";
var AUTOACTION_BOUND = "autoAction.bound";
var DEFAULT_ACTION_NAME = "<unnamed action>";
var actionAnnotation = /*#__PURE__*/createActionAnnotation(ACTION);
var actionBoundAnnotation = /*#__PURE__*/createActionAnnotation(ACTION_BOUND, {
  bound: true
});
var autoActionAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION, {
  autoAction: true
});
var autoActionBoundAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION_BOUND, {
  autoAction: true,
  bound: true
});

function createActionFactory(autoAction) {
  var res = function action(arg1, arg2) {
    // action(fn() {})
    if (isFunction(arg1)) return createAction(arg1.name || DEFAULT_ACTION_NAME, arg1, autoAction); // action("name", fn() {})

    if (isFunction(arg2)) return createAction(arg1, arg2, autoAction); // @action

    if (isStringish(arg2)) {
      return storeAnnotation(arg1, arg2, autoAction ? autoActionAnnotation : actionAnnotation);
    } // action("name") & @action("name")


    if (isStringish(arg1)) {
      return createDecoratorAnnotation(createActionAnnotation(autoAction ? AUTOACTION : ACTION, {
        name: arg1,
        autoAction: autoAction
      }));
    }

    if (true) die("Invalid arguments for `action`");
  };

  return res;
}

var action = /*#__PURE__*/createActionFactory(false);
Object.assign(action, actionAnnotation);
var autoAction = /*#__PURE__*/createActionFactory(true);
Object.assign(autoAction, autoActionAnnotation);
action.bound = /*#__PURE__*/createDecoratorAnnotation(actionBoundAnnotation);
autoAction.bound = /*#__PURE__*/createDecoratorAnnotation(autoActionBoundAnnotation);

function runInAction(fn) {
  return executeAction(fn.name || DEFAULT_ACTION_NAME, false, fn, this, undefined);
}

function isAction(thing) {
  return isFunction(thing) && thing.isMobxAction === true;
}
/**
 * Creates a named reactive view and keeps it alive, so that the view is always
 * updated if one of the dependencies changes, even when the view is not further used by something else.
 * @param view The reactive view
 * @returns disposer function, which can be used to stop the view from being updated in the future.
 */


function autorun(view, opts) {
  var _opts$name, _opts;

  if (opts === void 0) {
    opts = EMPTY_OBJECT;
  }

  if (true) {
    if (!isFunction(view)) die("Autorun expects a function as first argument");
    if (isAction(view)) die("Autorun does not accept actions since actions are untrackable");
  }

  var name = (_opts$name = (_opts = opts) == null ? void 0 : _opts.name) != null ? _opts$name :  true ? view.name || "Autorun@" + getNextId() : undefined;
  var runSync = !opts.scheduler && !opts.delay;
  var reaction;

  if (runSync) {
    // normal autorun
    reaction = new Reaction(name, function () {
      this.track(reactionRunner);
    }, opts.onError, opts.requiresObservable);
  } else {
    var scheduler = createSchedulerFromOptions(opts); // debounced autorun

    var isScheduled = false;
    reaction = new Reaction(name, function () {
      if (!isScheduled) {
        isScheduled = true;
        scheduler(function () {
          isScheduled = false;
          if (!reaction.isDisposed_) reaction.track(reactionRunner);
        });
      }
    }, opts.onError, opts.requiresObservable);
  }

  function reactionRunner() {
    view(reaction);
  }

  reaction.schedule_();
  return reaction.getDisposer_();
}

var run = function run(f) {
  return f();
};

function createSchedulerFromOptions(opts) {
  return opts.scheduler ? opts.scheduler : opts.delay ? function (f) {
    return setTimeout(f, opts.delay);
  } : run;
}

function reaction(expression, effect, opts) {
  var _opts$name2;

  if (opts === void 0) {
    opts = EMPTY_OBJECT;
  }

  if (true) {
    if (!isFunction(expression) || !isFunction(effect)) die("First and second argument to reaction should be functions");
    if (!isPlainObject(opts)) die("Third argument of reactions should be an object");
  }

  var name = (_opts$name2 = opts.name) != null ? _opts$name2 :  true ? "Reaction@" + getNextId() : undefined;
  var effectAction = action(name, opts.onError ? wrapErrorHandler(opts.onError, effect) : effect);
  var runSync = !opts.scheduler && !opts.delay;
  var scheduler = createSchedulerFromOptions(opts);
  var firstTime = true;
  var isScheduled = false;
  var value;
  var oldValue = undefined; // only an issue with fireImmediately

  var equals = opts.compareStructural ? comparer.structural : opts.equals || comparer["default"];
  var r = new Reaction(name, function () {
    if (firstTime || runSync) {
      reactionRunner();
    } else if (!isScheduled) {
      isScheduled = true;
      scheduler(reactionRunner);
    }
  }, opts.onError, opts.requiresObservable);

  function reactionRunner() {
    isScheduled = false;
    if (r.isDisposed_) return;
    var changed = false;
    r.track(function () {
      var nextValue = allowStateChanges(false, function () {
        return expression(r);
      });
      changed = firstTime || !equals(value, nextValue);
      oldValue = value;
      value = nextValue;
    });
    if (firstTime && opts.fireImmediately) effectAction(value, oldValue, r);else if (!firstTime && changed) effectAction(value, oldValue, r);
    firstTime = false;
  }

  r.schedule_();
  return r.getDisposer_();
}

function wrapErrorHandler(errorHandler, baseFn) {
  return function () {
    try {
      return baseFn.apply(this, arguments);
    } catch (e) {
      errorHandler.call(this, e);
    }
  };
}

var ON_BECOME_OBSERVED = "onBO";
var ON_BECOME_UNOBSERVED = "onBUO";

function onBecomeObserved(thing, arg2, arg3) {
  return interceptHook(ON_BECOME_OBSERVED, thing, arg2, arg3);
}

function onBecomeUnobserved(thing, arg2, arg3) {
  return interceptHook(ON_BECOME_UNOBSERVED, thing, arg2, arg3);
}

function interceptHook(hook, thing, arg2, arg3) {
  var atom = typeof arg3 === "function" ? getAtom(thing, arg2) : getAtom(thing);
  var cb = isFunction(arg3) ? arg3 : arg2;
  var listenersKey = hook + "L";

  if (atom[listenersKey]) {
    atom[listenersKey].add(cb);
  } else {
    atom[listenersKey] = new Set([cb]);
  }

  return function () {
    var hookListeners = atom[listenersKey];

    if (hookListeners) {
      hookListeners["delete"](cb);

      if (hookListeners.size === 0) {
        delete atom[listenersKey];
      }
    }
  };
}

var NEVER = "never";
var ALWAYS = "always";
var OBSERVED = "observed"; // const IF_AVAILABLE = "ifavailable"

function configure(options) {
  if (options.isolateGlobalState === true) {
    isolateGlobalState();
  }

  var useProxies = options.useProxies,
      enforceActions = options.enforceActions;

  if (useProxies !== undefined) {
    globalState.useProxies = useProxies === ALWAYS ? true : useProxies === NEVER ? false : typeof Proxy !== "undefined";
  }

  if (useProxies === "ifavailable") globalState.verifyProxies = true;

  if (enforceActions !== undefined) {
    var ea = enforceActions === ALWAYS ? ALWAYS : enforceActions === OBSERVED;
    globalState.enforceActions = ea;
    globalState.allowStateChanges = ea === true || ea === ALWAYS ? false : true;
  }

  ["computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "disableErrorBoundaries", "safeDescriptors"].forEach(function (key) {
    if (key in options) globalState[key] = !!options[key];
  });
  globalState.allowStateReads = !globalState.observableRequiresReaction;

  if ( true && globalState.disableErrorBoundaries === true) {
    console.warn("WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled.");
  }

  if (options.reactionScheduler) {
    setReactionScheduler(options.reactionScheduler);
  }
}

function extendObservable(target, properties, annotations, options) {
  if (true) {
    if (arguments.length > 4) die("'extendObservable' expected 2-4 arguments");
    if (typeof target !== "object") die("'extendObservable' expects an object as first argument");
    if (isObservableMap(target)) die("'extendObservable' should not be used on maps, use map.merge instead");
    if (!isPlainObject(properties)) die("'extendObservabe' only accepts plain objects as second argument");
    if (isObservable(properties) || isObservable(annotations)) die("Extending an object with another observable (object) is not supported");
  } // Pull descriptors first, so we don't have to deal with props added by administration ($mobx)


  var descriptors = getOwnPropertyDescriptors(properties);
  var adm = asObservableObject(target, options)[$mobx];
  startBatch();

  try {
    ownKeys(descriptors).forEach(function (key) {
      adm.extend_(key, descriptors[key], // must pass "undefined" for { key: undefined }
      !annotations ? true : key in annotations ? annotations[key] : true);
    });
  } finally {
    endBatch();
  }

  return target;
}

function getDependencyTree(thing, property) {
  return nodeToDependencyTree(getAtom(thing, property));
}

function nodeToDependencyTree(node) {
  var result = {
    name: node.name_
  };
  if (node.observing_ && node.observing_.length > 0) result.dependencies = unique(node.observing_).map(nodeToDependencyTree);
  return result;
}

function getObserverTree(thing, property) {
  return nodeToObserverTree(getAtom(thing, property));
}

function nodeToObserverTree(node) {
  var result = {
    name: node.name_
  };
  if (hasObservers(node)) result.observers = Array.from(getObservers(node)).map(nodeToObserverTree);
  return result;
}

function unique(list) {
  return Array.from(new Set(list));
}

var generatorId = 0;

function FlowCancellationError() {
  this.message = "FLOW_CANCELLED";
}

FlowCancellationError.prototype = /*#__PURE__*/Object.create(Error.prototype);

function isFlowCancellationError(error) {
  return error instanceof FlowCancellationError;
}

var flowAnnotation = /*#__PURE__*/createFlowAnnotation("flow");
var flow = /*#__PURE__*/Object.assign(function flow(arg1, arg2) {
  // @flow
  if (isStringish(arg2)) {
    return storeAnnotation(arg1, arg2, flowAnnotation);
  } // flow(fn)


  if ( true && arguments.length !== 1) die("Flow expects single argument with generator function");
  var generator = arg1;
  var name = generator.name || "<unnamed flow>"; // Implementation based on https://github.com/tj/co/blob/master/index.js

  var res = function res() {
    var ctx = this;
    var args = arguments;
    var runId = ++generatorId;
    var gen = action(name + " - runid: " + runId + " - init", generator).apply(ctx, args);
    var rejector;
    var pendingPromise = undefined;
    var promise = new Promise(function (resolve, reject) {
      var stepId = 0;
      rejector = reject;

      function onFulfilled(res) {
        pendingPromise = undefined;
        var ret;

        try {
          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen.next).call(gen, res);
        } catch (e) {
          return reject(e);
        }

        next(ret);
      }

      function onRejected(err) {
        pendingPromise = undefined;
        var ret;

        try {
          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen["throw"]).call(gen, err);
        } catch (e) {
          return reject(e);
        }

        next(ret);
      }

      function next(ret) {
        if (isFunction(ret == null ? void 0 : ret.then)) {
          // an async iterator
          ret.then(next, reject);
          return;
        }

        if (ret.done) return resolve(ret.value);
        pendingPromise = Promise.resolve(ret.value);
        return pendingPromise.then(onFulfilled, onRejected);
      }

      onFulfilled(undefined); // kick off the process
    });
    promise.cancel = action(name + " - runid: " + runId + " - cancel", function () {
      try {
        if (pendingPromise) cancelPromise(pendingPromise); // Finally block can return (or yield) stuff..

        var _res = gen["return"](undefined); // eat anything that promise would do, it's cancelled!


        var yieldedPromise = Promise.resolve(_res.value);
        yieldedPromise.then(noop, noop);
        cancelPromise(yieldedPromise); // maybe it can be cancelled :)
        // reject our original promise

        rejector(new FlowCancellationError());
      } catch (e) {
        rejector(e); // there could be a throwing finally block
      }
    });
    return promise;
  };

  res.isMobXFlow = true;
  return res;
}, flowAnnotation);

function cancelPromise(promise) {
  if (isFunction(promise.cancel)) promise.cancel();
}

function flowResult(result) {
  return result; // just tricking TypeScript :)
}

function isFlow(fn) {
  return (fn == null ? void 0 : fn.isMobXFlow) === true;
}

function interceptReads(thing, propOrHandler, handler) {
  var target;

  if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {
    target = getAdministration(thing);
  } else if (isObservableObject(thing)) {
    if ( true && !isStringish(propOrHandler)) return die("InterceptReads can only be used with a specific property, not with an object in general");
    target = getAdministration(thing, propOrHandler);
  } else if (true) {
    return die("Expected observable map, object or array as first array");
  }

  if ( true && target.dehancer !== undefined) return die("An intercept reader was already established");
  target.dehancer = typeof propOrHandler === "function" ? propOrHandler : handler;
  return function () {
    target.dehancer = undefined;
  };
}

function intercept(thing, propOrHandler, handler) {
  if (isFunction(handler)) return interceptProperty(thing, propOrHandler, handler);else return interceptInterceptable(thing, propOrHandler);
}

function interceptInterceptable(thing, handler) {
  return getAdministration(thing).intercept_(handler);
}

function interceptProperty(thing, property, handler) {
  return getAdministration(thing, property).intercept_(handler);
}

function _isComputed(value, property) {
  if (property !== undefined) {
    if (isObservableObject(value) === false) return false;
    if (!value[$mobx].values_.has(property)) return false;
    var atom = getAtom(value, property);
    return isComputedValue(atom);
  }

  return isComputedValue(value);
}

function isComputed(value) {
  if ( true && arguments.length > 1) return die("isComputed expects only 1 argument. Use isComputedProp to inspect the observability of a property");
  return _isComputed(value);
}

function isComputedProp(value, propName) {
  if ( true && !isStringish(propName)) return die("isComputed expected a property name as second argument");
  return _isComputed(value, propName);
}

function _isObservable(value, property) {
  if (!value) return false;

  if (property !== undefined) {
    if ( true && (isObservableMap(value) || isObservableArray(value))) return die("isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.");

    if (isObservableObject(value)) {
      return value[$mobx].values_.has(property);
    }

    return false;
  } // For first check, see #701


  return isObservableObject(value) || !!value[$mobx] || isAtom(value) || isReaction(value) || isComputedValue(value);
}

function isObservable(value) {
  if ( true && arguments.length !== 1) die("isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property");
  return _isObservable(value);
}

function isObservableProp(value, propName) {
  if ( true && !isStringish(propName)) return die("expected a property name as second argument");
  return _isObservable(value, propName);
}

function keys(obj) {
  if (isObservableObject(obj)) {
    return obj[$mobx].keys_();
  }

  if (isObservableMap(obj) || isObservableSet(obj)) {
    return Array.from(obj.keys());
  }

  if (isObservableArray(obj)) {
    return obj.map(function (_, index) {
      return index;
    });
  }

  die(5);
}

function values(obj) {
  if (isObservableObject(obj)) {
    return keys(obj).map(function (key) {
      return obj[key];
    });
  }

  if (isObservableMap(obj)) {
    return keys(obj).map(function (key) {
      return obj.get(key);
    });
  }

  if (isObservableSet(obj)) {
    return Array.from(obj.values());
  }

  if (isObservableArray(obj)) {
    return obj.slice();
  }

  die(6);
}

function entries(obj) {
  if (isObservableObject(obj)) {
    return keys(obj).map(function (key) {
      return [key, obj[key]];
    });
  }

  if (isObservableMap(obj)) {
    return keys(obj).map(function (key) {
      return [key, obj.get(key)];
    });
  }

  if (isObservableSet(obj)) {
    return Array.from(obj.entries());
  }

  if (isObservableArray(obj)) {
    return obj.map(function (key, index) {
      return [index, key];
    });
  }

  die(7);
}

function set(obj, key, value) {
  if (arguments.length === 2 && !isObservableSet(obj)) {
    startBatch();
    var _values = key;

    try {
      for (var _key in _values) {
        set(obj, _key, _values[_key]);
      }
    } finally {
      endBatch();
    }

    return;
  }

  if (isObservableObject(obj)) {
    obj[$mobx].set_(key, value);
  } else if (isObservableMap(obj)) {
    obj.set(key, value);
  } else if (isObservableSet(obj)) {
    obj.add(key);
  } else if (isObservableArray(obj)) {
    if (typeof key !== "number") key = parseInt(key, 10);
    if (key < 0) die("Invalid index: '" + key + "'");
    startBatch();
    if (key >= obj.length) obj.length = key + 1;
    obj[key] = value;
    endBatch();
  } else die(8);
}

function remove(obj, key) {
  if (isObservableObject(obj)) {
    obj[$mobx].delete_(key);
  } else if (isObservableMap(obj)) {
    obj["delete"](key);
  } else if (isObservableSet(obj)) {
    obj["delete"](key);
  } else if (isObservableArray(obj)) {
    if (typeof key !== "number") key = parseInt(key, 10);
    obj.splice(key, 1);
  } else {
    die(9);
  }
}

function has(obj, key) {
  if (isObservableObject(obj)) {
    return obj[$mobx].has_(key);
  } else if (isObservableMap(obj)) {
    return obj.has(key);
  } else if (isObservableSet(obj)) {
    return obj.has(key);
  } else if (isObservableArray(obj)) {
    return key >= 0 && key < obj.length;
  }

  die(10);
}

function get(obj, key) {
  if (!has(obj, key)) return undefined;

  if (isObservableObject(obj)) {
    return obj[$mobx].get_(key);
  } else if (isObservableMap(obj)) {
    return obj.get(key);
  } else if (isObservableArray(obj)) {
    return obj[key];
  }

  die(11);
}

function observe(thing, propOrCb, cbOrFire, fireImmediately) {
  if (isFunction(cbOrFire)) return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);else return observeObservable(thing, propOrCb, cbOrFire);
}

function observeObservable(thing, listener, fireImmediately) {
  return getAdministration(thing).observe_(listener, fireImmediately);
}

function observeObservableProperty(thing, property, listener, fireImmediately) {
  return getAdministration(thing, property).observe_(listener, fireImmediately);
}

function cache(map, key, value) {
  map.set(key, value);
  return value;
}

function toJSHelper(source, __alreadySeen) {
  if (source == null || typeof source !== "object" || source instanceof Date || !isObservable(source)) return source;
  if (isObservableValue(source)) return toJSHelper(source.get(), __alreadySeen);

  if (__alreadySeen.has(source)) {
    return __alreadySeen.get(source);
  }

  if (isObservableArray(source)) {
    var res = cache(__alreadySeen, source, new Array(source.length));
    source.forEach(function (value, idx) {
      res[idx] = toJSHelper(value, __alreadySeen);
    });
    return res;
  }

  if (isObservableSet(source)) {
    var _res = cache(__alreadySeen, source, new Set());

    source.forEach(function (value) {
      _res.add(toJSHelper(value, __alreadySeen));
    });
    return _res;
  }

  if (isObservableMap(source)) {
    var _res2 = cache(__alreadySeen, source, new Map());

    source.forEach(function (value, key) {
      _res2.set(key, toJSHelper(value, __alreadySeen));
    });
    return _res2;
  } else {
    // must be observable object
    keys(source); // make sure keys are observed

    var _res3 = cache(__alreadySeen, source, {});

    getPlainObjectKeys(source).forEach(function (key) {
      _res3[key] = toJSHelper(source[key], __alreadySeen);
    });
    return _res3;
  }
}
/**
 * Basically, a deep clone, so that no reactive property will exist anymore.
 */


function toJS(source, options) {
  if ( true && options) die("toJS no longer supports options");
  return toJSHelper(source, new Map());
}

function trace() {
  if (false) {}
  var enterBreakPoint = false;

  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (typeof args[args.length - 1] === "boolean") enterBreakPoint = args.pop();
  var derivation = getAtomFromArgs(args);

  if (!derivation) {
    return die("'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");
  }

  if (derivation.isTracing_ === TraceMode.NONE) {
    console.log("[mobx.trace] '" + derivation.name_ + "' tracing enabled");
  }

  derivation.isTracing_ = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;
}

function getAtomFromArgs(args) {
  switch (args.length) {
    case 0:
      return globalState.trackingDerivation;

    case 1:
      return getAtom(args[0]);

    case 2:
      return getAtom(args[0], args[1]);
  }
}
/**
 * During a transaction no views are updated until the end of the transaction.
 * The transaction will be run synchronously nonetheless.
 *
 * @param action a function that updates some reactive state
 * @returns any value that was returned by the 'action' parameter.
 */


function transaction(action, thisArg) {
  if (thisArg === void 0) {
    thisArg = undefined;
  }

  startBatch();

  try {
    return action.apply(thisArg);
  } finally {
    endBatch();
  }
}

function when(predicate, arg1, arg2) {
  if (arguments.length === 1 || arg1 && typeof arg1 === "object") return whenPromise(predicate, arg1);
  return _when(predicate, arg1, arg2 || {});
}

function _when(predicate, effect, opts) {
  var timeoutHandle;

  if (typeof opts.timeout === "number") {
    timeoutHandle = setTimeout(function () {
      if (!disposer[$mobx].isDisposed_) {
        disposer();
        var error = new Error("WHEN_TIMEOUT");
        if (opts.onError) opts.onError(error);else throw error;
      }
    }, opts.timeout);
  }

  opts.name =  true ? opts.name || "When@" + getNextId() : undefined;
  var effectAction = createAction( true ? opts.name + "-effect" : undefined, effect); // eslint-disable-next-line

  var disposer = autorun(function (r) {
    // predicate should not change state
    var cond = allowStateChanges(false, predicate);

    if (cond) {
      r.dispose();
      if (timeoutHandle) clearTimeout(timeoutHandle);
      effectAction();
    }
  }, opts);
  return disposer;
}

function whenPromise(predicate, opts) {
  if ( true && opts && opts.onError) return die("the options 'onError' and 'promise' cannot be combined");
  var cancel;
  var res = new Promise(function (resolve, reject) {
    var disposer = _when(predicate, resolve, _extends({}, opts, {
      onError: reject
    }));

    cancel = function cancel() {
      disposer();
      reject("WHEN_CANCELLED");
    };
  });
  res.cancel = cancel;
  return res;
}

function getAdm(target) {
  return target[$mobx];
} // Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,
// and skip either the internal values map, or the base object with its property descriptors!


var objectProxyTraps = {
  has: function has(target, name) {
    if ( true && globalState.trackingDerivation) warnAboutProxyRequirement("detect new properties using the 'in' operator. Use 'has' from 'mobx' instead.");
    return getAdm(target).has_(name);
  },
  get: function get(target, name) {
    return getAdm(target).get_(name);
  },
  set: function set(target, name, value) {
    var _getAdm$set_;

    if (!isStringish(name)) return false;

    if ( true && !getAdm(target).values_.has(name)) {
      warnAboutProxyRequirement("add a new observable property through direct assignment. Use 'set' from 'mobx' instead.");
    } // null (intercepted) -> true (success)


    return (_getAdm$set_ = getAdm(target).set_(name, value, true)) != null ? _getAdm$set_ : true;
  },
  deleteProperty: function deleteProperty(target, name) {
    var _getAdm$delete_;

    if (true) {
      warnAboutProxyRequirement("delete properties from an observable object. Use 'remove' from 'mobx' instead.");
    }

    if (!isStringish(name)) return false; // null (intercepted) -> true (success)

    return (_getAdm$delete_ = getAdm(target).delete_(name, true)) != null ? _getAdm$delete_ : true;
  },
  defineProperty: function defineProperty(target, name, descriptor) {
    var _getAdm$definePropert;

    if (true) {
      warnAboutProxyRequirement("define property on an observable object. Use 'defineProperty' from 'mobx' instead.");
    } // null (intercepted) -> true (success)


    return (_getAdm$definePropert = getAdm(target).defineProperty_(name, descriptor)) != null ? _getAdm$definePropert : true;
  },
  ownKeys: function ownKeys(target) {
    if ( true && globalState.trackingDerivation) warnAboutProxyRequirement("iterate keys to detect added / removed properties. Use `keys` from 'mobx' instead.");
    return getAdm(target).ownKeys_();
  },
  preventExtensions: function preventExtensions(target) {
    die(13);
  }
};

function asDynamicObservableObject(target, options) {
  var _target$$mobx, _target$$mobx$proxy_;

  assertProxies();
  target = asObservableObject(target, options);
  return (_target$$mobx$proxy_ = (_target$$mobx = target[$mobx]).proxy_) != null ? _target$$mobx$proxy_ : _target$$mobx.proxy_ = new Proxy(target, objectProxyTraps);
}

function hasInterceptors(interceptable) {
  return interceptable.interceptors_ !== undefined && interceptable.interceptors_.length > 0;
}

function registerInterceptor(interceptable, handler) {
  var interceptors = interceptable.interceptors_ || (interceptable.interceptors_ = []);
  interceptors.push(handler);
  return once(function () {
    var idx = interceptors.indexOf(handler);
    if (idx !== -1) interceptors.splice(idx, 1);
  });
}

function interceptChange(interceptable, change) {
  var prevU = untrackedStart();

  try {
    // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950
    var interceptors = [].concat(interceptable.interceptors_ || []);

    for (var i = 0, l = interceptors.length; i < l; i++) {
      change = interceptors[i](change);
      if (change && !change.type) die(14);
      if (!change) break;
    }

    return change;
  } finally {
    untrackedEnd(prevU);
  }
}

function hasListeners(listenable) {
  return listenable.changeListeners_ !== undefined && listenable.changeListeners_.length > 0;
}

function registerListener(listenable, handler) {
  var listeners = listenable.changeListeners_ || (listenable.changeListeners_ = []);
  listeners.push(handler);
  return once(function () {
    var idx = listeners.indexOf(handler);
    if (idx !== -1) listeners.splice(idx, 1);
  });
}

function notifyListeners(listenable, change) {
  var prevU = untrackedStart();
  var listeners = listenable.changeListeners_;
  if (!listeners) return;
  listeners = listeners.slice();

  for (var i = 0, l = listeners.length; i < l; i++) {
    listeners[i](change);
  }

  untrackedEnd(prevU);
}

function makeObservable(target, annotations, options) {
  var adm = asObservableObject(target, options)[$mobx];
  startBatch();

  try {
    var _annotations; // Default to decorators


    (_annotations = annotations) != null ? _annotations : annotations = collectStoredAnnotations(target); // Annotate

    ownKeys(annotations).forEach(function (key) {
      return adm.make_(key, annotations[key]);
    });
  } finally {
    endBatch();
  }

  return target;
}

function makeAutoObservable(target, overrides, options) {
  if (true) {
    if (!isPlainObject(target) && !isPlainObject(Object.getPrototypeOf(target))) die("'makeAutoObservable' can only be used for classes that don't have a superclass");
    if (isObservableObject(target)) die("makeAutoObservable can only be used on objects not already made observable");
  } // Optimization (avoids visiting protos)
  // assumes that annotation.make_/.extend_ works the same for plain objects


  if (isPlainObject(target)) {
    return extendObservable(target, target, overrides, options);
  }

  var adm = asObservableObject(target, options)[$mobx];
  startBatch();

  try {
    // Use cached inferred annotations if available (only in classes)
    if (target[inferredAnnotationsSymbol]) {
      target[inferredAnnotationsSymbol].forEach(function (value, key) {
        return adm.make_(key, value);
      });
    } else {
      var _ignoreKeys;

      var ignoreKeys = (_ignoreKeys = {}, _ignoreKeys[$mobx] = 1, _ignoreKeys[inferredAnnotationsSymbol] = 1, _ignoreKeys.constructor = 1, _ignoreKeys);

      var make = function make(key) {
        if (ignoreKeys[key]) return;
        ignoreKeys[key] = 1;
        adm.make_(key, // must pass "undefined" for { key: undefined }
        !overrides ? true : key in overrides ? overrides[key] : true);
      };

      var current = target;

      while (current && current !== objectPrototype) {
        ownKeys(current).forEach(make);
        current = Object.getPrototypeOf(current);
      }
    }
  } finally {
    endBatch();
  }

  return target;
}

var SPLICE = "splice";
var UPDATE = "update";
var MAX_SPLICE_SIZE = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859

var arrayTraps = {
  get: function get(target, name) {
    var adm = target[$mobx];
    if (name === $mobx) return adm;
    if (name === "length") return adm.getArrayLength_();

    if (typeof name === "string" && !isNaN(name)) {
      return adm.get_(parseInt(name));
    }

    if (hasProp(arrayExtensions, name)) {
      return arrayExtensions[name];
    }

    return target[name];
  },
  set: function set(target, name, value) {
    var adm = target[$mobx];

    if (name === "length") {
      adm.setArrayLength_(value);
    }

    if (typeof name === "symbol" || isNaN(name)) {
      target[name] = value;
    } else {
      // numeric string
      adm.set_(parseInt(name), value);
    }

    return true;
  },
  preventExtensions: function preventExtensions() {
    die(15);
  }
};

var ObservableArrayAdministration = /*#__PURE__*/function () {
  // this is the prop that gets proxied, so can't replace it!
  function ObservableArrayAdministration(name, enhancer, owned_, legacyMode_) {
    if (name === void 0) {
      name =  true ? "ObservableArray@" + getNextId() : undefined;
    }

    this.owned_ = void 0;
    this.legacyMode_ = void 0;
    this.atom_ = void 0;
    this.values_ = [];
    this.interceptors_ = void 0;
    this.changeListeners_ = void 0;
    this.enhancer_ = void 0;
    this.dehancer = void 0;
    this.proxy_ = void 0;
    this.lastKnownLength_ = 0;
    this.owned_ = owned_;
    this.legacyMode_ = legacyMode_;
    this.atom_ = new Atom(name);

    this.enhancer_ = function (newV, oldV) {
      return enhancer(newV, oldV,  true ? name + "[..]" : undefined);
    };
  }

  var _proto = ObservableArrayAdministration.prototype;

  _proto.dehanceValue_ = function dehanceValue_(value) {
    if (this.dehancer !== undefined) return this.dehancer(value);
    return value;
  };

  _proto.dehanceValues_ = function dehanceValues_(values) {
    if (this.dehancer !== undefined && values.length > 0) return values.map(this.dehancer);
    return values;
  };

  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };

  _proto.observe_ = function observe_(listener, fireImmediately) {
    if (fireImmediately === void 0) {
      fireImmediately = false;
    }

    if (fireImmediately) {
      listener({
        observableKind: "array",
        object: this.proxy_,
        debugObjectName: this.atom_.name_,
        type: "splice",
        index: 0,
        added: this.values_.slice(),
        addedCount: this.values_.length,
        removed: [],
        removedCount: 0
      });
    }

    return registerListener(this, listener);
  };

  _proto.getArrayLength_ = function getArrayLength_() {
    this.atom_.reportObserved();
    return this.values_.length;
  };

  _proto.setArrayLength_ = function setArrayLength_(newLength) {
    if (typeof newLength !== "number" || newLength < 0) die("Out of range: " + newLength);
    var currentLength = this.values_.length;
    if (newLength === currentLength) return;else if (newLength > currentLength) {
      var newItems = new Array(newLength - currentLength);

      for (var i = 0; i < newLength - currentLength; i++) {
        newItems[i] = undefined;
      } // No Array.fill everywhere...


      this.spliceWithArray_(currentLength, 0, newItems);
    } else this.spliceWithArray_(newLength, currentLength - newLength);
  };

  _proto.updateArrayLength_ = function updateArrayLength_(oldLength, delta) {
    if (oldLength !== this.lastKnownLength_) die(16);
    this.lastKnownLength_ += delta;
    if (this.legacyMode_ && delta > 0) reserveArrayBuffer(oldLength + delta + 1);
  };

  _proto.spliceWithArray_ = function spliceWithArray_(index, deleteCount, newItems) {
    var _this = this;

    checkIfStateModificationsAreAllowed(this.atom_);
    var length = this.values_.length;
    if (index === undefined) index = 0;else if (index > length) index = length;else if (index < 0) index = Math.max(0, length + index);
    if (arguments.length === 1) deleteCount = length - index;else if (deleteCount === undefined || deleteCount === null) deleteCount = 0;else deleteCount = Math.max(0, Math.min(deleteCount, length - index));
    if (newItems === undefined) newItems = EMPTY_ARRAY;

    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this.proxy_,
        type: SPLICE,
        index: index,
        removedCount: deleteCount,
        added: newItems
      });
      if (!change) return EMPTY_ARRAY;
      deleteCount = change.removedCount;
      newItems = change.added;
    }

    newItems = newItems.length === 0 ? newItems : newItems.map(function (v) {
      return _this.enhancer_(v, undefined);
    });

    if (this.legacyMode_ || "development" !== "production") {
      var lengthDelta = newItems.length - deleteCount;
      this.updateArrayLength_(length, lengthDelta); // checks if internal array wasn't modified
    }

    var res = this.spliceItemsIntoValues_(index, deleteCount, newItems);
    if (deleteCount !== 0 || newItems.length !== 0) this.notifyArraySplice_(index, newItems, res);
    return this.dehanceValues_(res);
  };

  _proto.spliceItemsIntoValues_ = function spliceItemsIntoValues_(index, deleteCount, newItems) {
    if (newItems.length < MAX_SPLICE_SIZE) {
      var _this$values_;

      return (_this$values_ = this.values_).splice.apply(_this$values_, [index, deleteCount].concat(newItems));
    } else {
      var res = this.values_.slice(index, index + deleteCount);
      var oldItems = this.values_.slice(index + deleteCount);
      this.values_.length = index + newItems.length - deleteCount;

      for (var i = 0; i < newItems.length; i++) {
        this.values_[index + i] = newItems[i];
      }

      for (var _i = 0; _i < oldItems.length; _i++) {
        this.values_[index + newItems.length + _i] = oldItems[_i];
      }

      return res;
    }
  };

  _proto.notifyArrayChildUpdate_ = function notifyArrayChildUpdate_(index, newValue, oldValue) {
    var notifySpy = !this.owned_ && isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      observableKind: "array",
      object: this.proxy_,
      type: UPDATE,
      debugObjectName: this.atom_.name_,
      index: index,
      newValue: newValue,
      oldValue: oldValue
    } : null; // The reason why this is on right hand side here (and not above), is this way the uglifier will drop it, but it won't
    // cause any runtime overhead in development mode without NODE_ENV set, unless spying is enabled

    if ( true && notifySpy) spyReportStart(change);
    this.atom_.reportChanged();
    if (notify) notifyListeners(this, change);
    if ( true && notifySpy) spyReportEnd();
  };

  _proto.notifyArraySplice_ = function notifyArraySplice_(index, added, removed) {
    var notifySpy = !this.owned_ && isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      observableKind: "array",
      object: this.proxy_,
      debugObjectName: this.atom_.name_,
      type: SPLICE,
      index: index,
      removed: removed,
      added: added,
      removedCount: removed.length,
      addedCount: added.length
    } : null;
    if ( true && notifySpy) spyReportStart(change);
    this.atom_.reportChanged(); // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe

    if (notify) notifyListeners(this, change);
    if ( true && notifySpy) spyReportEnd();
  };

  _proto.get_ = function get_(index) {
    if (index < this.values_.length) {
      this.atom_.reportObserved();
      return this.dehanceValue_(this.values_[index]);
    }

    console.warn( true ? "[mobx] Out of bounds read: " + index : undefined);
  };

  _proto.set_ = function set_(index, newValue) {
    var values = this.values_;

    if (index < values.length) {
      // update at index in range
      checkIfStateModificationsAreAllowed(this.atom_);
      var oldValue = values[index];

      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          type: UPDATE,
          object: this.proxy_,
          index: index,
          newValue: newValue
        });
        if (!change) return;
        newValue = change.newValue;
      }

      newValue = this.enhancer_(newValue, oldValue);
      var changed = newValue !== oldValue;

      if (changed) {
        values[index] = newValue;
        this.notifyArrayChildUpdate_(index, newValue, oldValue);
      }
    } else if (index === values.length) {
      // add a new item
      this.spliceWithArray_(index, 0, [newValue]);
    } else {
      // out of bounds
      die(17, index, values.length);
    }
  };

  return ObservableArrayAdministration;
}();

function createObservableArray(initialValues, enhancer, name, owned) {
  if (name === void 0) {
    name =  true ? "ObservableArray@" + getNextId() : undefined;
  }

  if (owned === void 0) {
    owned = false;
  }

  assertProxies();
  var adm = new ObservableArrayAdministration(name, enhancer, owned, false);
  addHiddenFinalProp(adm.values_, $mobx, adm);
  var proxy = new Proxy(adm.values_, arrayTraps);
  adm.proxy_ = proxy;

  if (initialValues && initialValues.length) {
    var prev = allowStateChangesStart(true);
    adm.spliceWithArray_(0, 0, initialValues);
    allowStateChangesEnd(prev);
  }

  return proxy;
} // eslint-disable-next-line


var arrayExtensions = {
  clear: function clear() {
    return this.splice(0);
  },
  replace: function replace(newItems) {
    var adm = this[$mobx];
    return adm.spliceWithArray_(0, adm.values_.length, newItems);
  },
  // Used by JSON.stringify
  toJSON: function toJSON() {
    return this.slice();
  },

  /*
   * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)
   * since these functions alter the inner structure of the array, the have side effects.
   * Because the have side effects, they should not be used in computed function,
   * and for that reason the do not call dependencyState.notifyObserved
   */
  splice: function splice(index, deleteCount) {
    for (var _len = arguments.length, newItems = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      newItems[_key - 2] = arguments[_key];
    }

    var adm = this[$mobx];

    switch (arguments.length) {
      case 0:
        return [];

      case 1:
        return adm.spliceWithArray_(index);

      case 2:
        return adm.spliceWithArray_(index, deleteCount);
    }

    return adm.spliceWithArray_(index, deleteCount, newItems);
  },
  spliceWithArray: function spliceWithArray(index, deleteCount, newItems) {
    return this[$mobx].spliceWithArray_(index, deleteCount, newItems);
  },
  push: function push() {
    var adm = this[$mobx];

    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      items[_key2] = arguments[_key2];
    }

    adm.spliceWithArray_(adm.values_.length, 0, items);
    return adm.values_.length;
  },
  pop: function pop() {
    return this.splice(Math.max(this[$mobx].values_.length - 1, 0), 1)[0];
  },
  shift: function shift() {
    return this.splice(0, 1)[0];
  },
  unshift: function unshift() {
    var adm = this[$mobx];

    for (var _len3 = arguments.length, items = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      items[_key3] = arguments[_key3];
    }

    adm.spliceWithArray_(0, 0, items);
    return adm.values_.length;
  },
  reverse: function reverse() {
    // reverse by default mutates in place before returning the result
    // which makes it both a 'derivation' and a 'mutation'.
    if (globalState.trackingDerivation) {
      die(37, "reverse");
    }

    this.replace(this.slice().reverse());
    return this;
  },
  sort: function sort() {
    // sort by default mutates in place before returning the result
    // which goes against all good practices. Let's not change the array in place!
    if (globalState.trackingDerivation) {
      die(37, "sort");
    }

    var copy = this.slice();
    copy.sort.apply(copy, arguments);
    this.replace(copy);
    return this;
  },
  remove: function remove(value) {
    var adm = this[$mobx];
    var idx = adm.dehanceValues_(adm.values_).indexOf(value);

    if (idx > -1) {
      this.splice(idx, 1);
      return true;
    }

    return false;
  }
};
/**
 * Wrap function from prototype
 * Without this, everything works as well, but this works
 * faster as everything works on unproxied values
 */

addArrayExtension("concat", simpleFunc);
addArrayExtension("flat", simpleFunc);
addArrayExtension("includes", simpleFunc);
addArrayExtension("indexOf", simpleFunc);
addArrayExtension("join", simpleFunc);
addArrayExtension("lastIndexOf", simpleFunc);
addArrayExtension("slice", simpleFunc);
addArrayExtension("toString", simpleFunc);
addArrayExtension("toLocaleString", simpleFunc); // map

addArrayExtension("every", mapLikeFunc);
addArrayExtension("filter", mapLikeFunc);
addArrayExtension("find", mapLikeFunc);
addArrayExtension("findIndex", mapLikeFunc);
addArrayExtension("flatMap", mapLikeFunc);
addArrayExtension("forEach", mapLikeFunc);
addArrayExtension("map", mapLikeFunc);
addArrayExtension("some", mapLikeFunc); // reduce

addArrayExtension("reduce", reduceLikeFunc);
addArrayExtension("reduceRight", reduceLikeFunc);

function addArrayExtension(funcName, funcFactory) {
  if (typeof Array.prototype[funcName] === "function") {
    arrayExtensions[funcName] = funcFactory(funcName);
  }
} // Report and delegate to dehanced array


function simpleFunc(funcName) {
  return function () {
    var adm = this[$mobx];
    adm.atom_.reportObserved();
    var dehancedValues = adm.dehanceValues_(adm.values_);
    return dehancedValues[funcName].apply(dehancedValues, arguments);
  };
} // Make sure callbacks recieve correct array arg #2326


function mapLikeFunc(funcName) {
  return function (callback, thisArg) {
    var _this2 = this;

    var adm = this[$mobx];
    adm.atom_.reportObserved();
    var dehancedValues = adm.dehanceValues_(adm.values_);
    return dehancedValues[funcName](function (element, index) {
      return callback.call(thisArg, element, index, _this2);
    });
  };
} // Make sure callbacks recieve correct array arg #2326


function reduceLikeFunc(funcName) {
  return function () {
    var _this3 = this;

    var adm = this[$mobx];
    adm.atom_.reportObserved();
    var dehancedValues = adm.dehanceValues_(adm.values_); // #2432 - reduce behavior depends on arguments.length

    var callback = arguments[0];

    arguments[0] = function (accumulator, currentValue, index) {
      return callback(accumulator, currentValue, index, _this3);
    };

    return dehancedValues[funcName].apply(dehancedValues, arguments);
  };
}

var isObservableArrayAdministration = /*#__PURE__*/createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);

function isObservableArray(thing) {
  return isObject(thing) && isObservableArrayAdministration(thing[$mobx]);
}

var _Symbol$iterator, _Symbol$toStringTag;

var ObservableMapMarker = {};
var ADD = "add";
var DELETE = "delete"; // just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54
// But: https://github.com/mobxjs/mobx/issues/1556

_Symbol$iterator = Symbol.iterator;
_Symbol$toStringTag = Symbol.toStringTag;

var ObservableMap = /*#__PURE__*/function () {
  // hasMap, not hashMap >-).
  function ObservableMap(initialData, enhancer_, name_) {
    if (enhancer_ === void 0) {
      enhancer_ = deepEnhancer;
    }

    if (name_ === void 0) {
      name_ =  true ? "ObservableMap@" + getNextId() : undefined;
    }

    this.enhancer_ = void 0;
    this.name_ = void 0;
    this[$mobx] = ObservableMapMarker;
    this.data_ = void 0;
    this.hasMap_ = void 0;
    this.keysAtom_ = void 0;
    this.interceptors_ = void 0;
    this.changeListeners_ = void 0;
    this.dehancer = void 0;
    this.enhancer_ = enhancer_;
    this.name_ = name_;

    if (!isFunction(Map)) {
      die(18);
    }

    this.keysAtom_ = createAtom( true ? this.name_ + ".keys()" : undefined);
    this.data_ = new Map();
    this.hasMap_ = new Map();
    this.merge(initialData);
  }

  var _proto = ObservableMap.prototype;

  _proto.has_ = function has_(key) {
    return this.data_.has(key);
  };

  _proto.has = function has(key) {
    var _this = this;

    if (!globalState.trackingDerivation) return this.has_(key);
    var entry = this.hasMap_.get(key);

    if (!entry) {
      var newEntry = entry = new ObservableValue(this.has_(key), referenceEnhancer,  true ? this.name_ + "." + stringifyKey(key) + "?" : undefined, false);
      this.hasMap_.set(key, newEntry);
      onBecomeUnobserved(newEntry, function () {
        return _this.hasMap_["delete"](key);
      });
    }

    return entry.get();
  };

  _proto.set = function set(key, value) {
    var hasKey = this.has_(key);

    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: hasKey ? UPDATE : ADD,
        object: this,
        newValue: value,
        name: key
      });
      if (!change) return this;
      value = change.newValue;
    }

    if (hasKey) {
      this.updateValue_(key, value);
    } else {
      this.addValue_(key, value);
    }

    return this;
  };

  _proto["delete"] = function _delete(key) {
    var _this2 = this;

    checkIfStateModificationsAreAllowed(this.keysAtom_);

    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: DELETE,
        object: this,
        name: key
      });
      if (!change) return false;
    }

    if (this.has_(key)) {
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);

      var _change = notify || notifySpy ? {
        observableKind: "map",
        debugObjectName: this.name_,
        type: DELETE,
        object: this,
        oldValue: this.data_.get(key).value_,
        name: key
      } : null;

      if ( true && notifySpy) spyReportStart(_change);
      transaction(function () {
        _this2.keysAtom_.reportChanged();

        _this2.updateHasMapEntry_(key, false);

        var observable = _this2.data_.get(key);

        observable.setNewValue_(undefined);

        _this2.data_["delete"](key);
      });
      if (notify) notifyListeners(this, _change);
      if ( true && notifySpy) spyReportEnd();
      return true;
    }

    return false;
  };

  _proto.updateHasMapEntry_ = function updateHasMapEntry_(key, value) {
    var entry = this.hasMap_.get(key);

    if (entry) {
      entry.setNewValue_(value);
    }
  };

  _proto.updateValue_ = function updateValue_(key, newValue) {
    var observable = this.data_.get(key);
    newValue = observable.prepareNewValue_(newValue);

    if (newValue !== globalState.UNCHANGED) {
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);
      var change = notify || notifySpy ? {
        observableKind: "map",
        debugObjectName: this.name_,
        type: UPDATE,
        object: this,
        oldValue: observable.value_,
        name: key,
        newValue: newValue
      } : null;
      if ( true && notifySpy) spyReportStart(change);
      observable.setNewValue_(newValue);
      if (notify) notifyListeners(this, change);
      if ( true && notifySpy) spyReportEnd();
    }
  };

  _proto.addValue_ = function addValue_(key, newValue) {
    var _this3 = this;

    checkIfStateModificationsAreAllowed(this.keysAtom_);
    transaction(function () {
      var observable = new ObservableValue(newValue, _this3.enhancer_,  true ? _this3.name_ + "." + stringifyKey(key) : undefined, false);

      _this3.data_.set(key, observable);

      newValue = observable.value_; // value might have been changed

      _this3.updateHasMapEntry_(key, true);

      _this3.keysAtom_.reportChanged();
    });
    var notifySpy = isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      observableKind: "map",
      debugObjectName: this.name_,
      type: ADD,
      object: this,
      name: key,
      newValue: newValue
    } : null;
    if ( true && notifySpy) spyReportStart(change);
    if (notify) notifyListeners(this, change);
    if ( true && notifySpy) spyReportEnd();
  };

  _proto.get = function get(key) {
    if (this.has(key)) return this.dehanceValue_(this.data_.get(key).get());
    return this.dehanceValue_(undefined);
  };

  _proto.dehanceValue_ = function dehanceValue_(value) {
    if (this.dehancer !== undefined) {
      return this.dehancer(value);
    }

    return value;
  };

  _proto.keys = function keys() {
    this.keysAtom_.reportObserved();
    return this.data_.keys();
  };

  _proto.values = function values() {
    var self = this;
    var keys = this.keys();
    return makeIterable({
      next: function next() {
        var _keys$next = keys.next(),
            done = _keys$next.done,
            value = _keys$next.value;

        return {
          done: done,
          value: done ? undefined : self.get(value)
        };
      }
    });
  };

  _proto.entries = function entries() {
    var self = this;
    var keys = this.keys();
    return makeIterable({
      next: function next() {
        var _keys$next2 = keys.next(),
            done = _keys$next2.done,
            value = _keys$next2.value;

        return {
          done: done,
          value: done ? undefined : [value, self.get(value)]
        };
      }
    });
  };

  _proto[_Symbol$iterator] = function () {
    return this.entries();
  };

  _proto.forEach = function forEach(callback, thisArg) {
    for (var _iterator = _createForOfIteratorHelperLoose(this), _step; !(_step = _iterator()).done;) {
      var _step$value = _step.value,
          key = _step$value[0],
          value = _step$value[1];
      callback.call(thisArg, value, key, this);
    }
  }
  /** Merge another object into this object, returns this. */
  ;

  _proto.merge = function merge(other) {
    var _this4 = this;

    if (isObservableMap(other)) {
      other = new Map(other);
    }

    transaction(function () {
      if (isPlainObject(other)) getPlainObjectKeys(other).forEach(function (key) {
        return _this4.set(key, other[key]);
      });else if (Array.isArray(other)) other.forEach(function (_ref) {
        var key = _ref[0],
            value = _ref[1];
        return _this4.set(key, value);
      });else if (isES6Map(other)) {
        if (other.constructor !== Map) die(19, other);
        other.forEach(function (value, key) {
          return _this4.set(key, value);
        });
      } else if (other !== null && other !== undefined) die(20, other);
    });
    return this;
  };

  _proto.clear = function clear() {
    var _this5 = this;

    transaction(function () {
      untracked(function () {
        for (var _iterator2 = _createForOfIteratorHelperLoose(_this5.keys()), _step2; !(_step2 = _iterator2()).done;) {
          var key = _step2.value;

          _this5["delete"](key);
        }
      });
    });
  };

  _proto.replace = function replace(values) {
    var _this6 = this; // Implementation requirements:
    // - respect ordering of replacement map
    // - allow interceptors to run and potentially prevent individual operations
    // - don't recreate observables that already exist in original map (so we don't destroy existing subscriptions)
    // - don't _keysAtom.reportChanged if the keys of resulting map are indentical (order matters!)
    // - note that result map may differ from replacement map due to the interceptors


    transaction(function () {
      // Convert to map so we can do quick key lookups
      var replacementMap = convertToMap(values);
      var orderedData = new Map(); // Used for optimization

      var keysReportChangedCalled = false; // Delete keys that don't exist in replacement map
      // if the key deletion is prevented by interceptor
      // add entry at the beginning of the result map

      for (var _iterator3 = _createForOfIteratorHelperLoose(_this6.data_.keys()), _step3; !(_step3 = _iterator3()).done;) {
        var key = _step3.value; // Concurrently iterating/deleting keys
        // iterator should handle this correctly

        if (!replacementMap.has(key)) {
          var deleted = _this6["delete"](key); // Was the key removed?


          if (deleted) {
            // _keysAtom.reportChanged() was already called
            keysReportChangedCalled = true;
          } else {
            // Delete prevented by interceptor
            var value = _this6.data_.get(key);

            orderedData.set(key, value);
          }
        }
      } // Merge entries


      for (var _iterator4 = _createForOfIteratorHelperLoose(replacementMap.entries()), _step4; !(_step4 = _iterator4()).done;) {
        var _step4$value = _step4.value,
            _key = _step4$value[0],
            _value = _step4$value[1]; // We will want to know whether a new key is added

        var keyExisted = _this6.data_.has(_key); // Add or update value


        _this6.set(_key, _value); // The addition could have been prevent by interceptor


        if (_this6.data_.has(_key)) {
          // The update could have been prevented by interceptor
          // and also we want to preserve existing values
          // so use value from _data map (instead of replacement map)
          var _value2 = _this6.data_.get(_key);

          orderedData.set(_key, _value2); // Was a new key added?

          if (!keyExisted) {
            // _keysAtom.reportChanged() was already called
            keysReportChangedCalled = true;
          }
        }
      } // Check for possible key order change


      if (!keysReportChangedCalled) {
        if (_this6.data_.size !== orderedData.size) {
          // If size differs, keys are definitely modified
          _this6.keysAtom_.reportChanged();
        } else {
          var iter1 = _this6.data_.keys();

          var iter2 = orderedData.keys();
          var next1 = iter1.next();
          var next2 = iter2.next();

          while (!next1.done) {
            if (next1.value !== next2.value) {
              _this6.keysAtom_.reportChanged();

              break;
            }

            next1 = iter1.next();
            next2 = iter2.next();
          }
        }
      } // Use correctly ordered map


      _this6.data_ = orderedData;
    });
    return this;
  };

  _proto.toString = function toString() {
    return "[object ObservableMap]";
  };

  _proto.toJSON = function toJSON() {
    return Array.from(this);
  };
  /**
   * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
   * for callback details
   */


  _proto.observe_ = function observe_(listener, fireImmediately) {
    if ( true && fireImmediately === true) die("`observe` doesn't support fireImmediately=true in combination with maps.");
    return registerListener(this, listener);
  };

  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };

  _createClass(ObservableMap, [{
    key: "size",
    get: function get() {
      this.keysAtom_.reportObserved();
      return this.data_.size;
    }
  }, {
    key: _Symbol$toStringTag,
    get: function get() {
      return "Map";
    }
  }]);

  return ObservableMap;
}(); // eslint-disable-next-line


var isObservableMap = /*#__PURE__*/createInstanceofPredicate("ObservableMap", ObservableMap);

function convertToMap(dataStructure) {
  if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {
    return dataStructure;
  } else if (Array.isArray(dataStructure)) {
    return new Map(dataStructure);
  } else if (isPlainObject(dataStructure)) {
    var map = new Map();

    for (var key in dataStructure) {
      map.set(key, dataStructure[key]);
    }

    return map;
  } else {
    return die(21, dataStructure);
  }
}

var _Symbol$iterator$1, _Symbol$toStringTag$1;

var ObservableSetMarker = {};
_Symbol$iterator$1 = Symbol.iterator;
_Symbol$toStringTag$1 = Symbol.toStringTag;

var ObservableSet = /*#__PURE__*/function () {
  function ObservableSet(initialData, enhancer, name_) {
    if (enhancer === void 0) {
      enhancer = deepEnhancer;
    }

    if (name_ === void 0) {
      name_ =  true ? "ObservableSet@" + getNextId() : undefined;
    }

    this.name_ = void 0;
    this[$mobx] = ObservableSetMarker;
    this.data_ = new Set();
    this.atom_ = void 0;
    this.changeListeners_ = void 0;
    this.interceptors_ = void 0;
    this.dehancer = void 0;
    this.enhancer_ = void 0;
    this.name_ = name_;

    if (!isFunction(Set)) {
      die(22);
    }

    this.atom_ = createAtom(this.name_);

    this.enhancer_ = function (newV, oldV) {
      return enhancer(newV, oldV, name_);
    };

    if (initialData) {
      this.replace(initialData);
    }
  }

  var _proto = ObservableSet.prototype;

  _proto.dehanceValue_ = function dehanceValue_(value) {
    if (this.dehancer !== undefined) {
      return this.dehancer(value);
    }

    return value;
  };

  _proto.clear = function clear() {
    var _this = this;

    transaction(function () {
      untracked(function () {
        for (var _iterator = _createForOfIteratorHelperLoose(_this.data_.values()), _step; !(_step = _iterator()).done;) {
          var value = _step.value;

          _this["delete"](value);
        }
      });
    });
  };

  _proto.forEach = function forEach(callbackFn, thisArg) {
    for (var _iterator2 = _createForOfIteratorHelperLoose(this), _step2; !(_step2 = _iterator2()).done;) {
      var value = _step2.value;
      callbackFn.call(thisArg, value, value, this);
    }
  };

  _proto.add = function add(value) {
    var _this2 = this;

    checkIfStateModificationsAreAllowed(this.atom_);

    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: ADD,
        object: this,
        newValue: value
      });
      if (!change) return this; // ideally, value = change.value would be done here, so that values can be
      // changed by interceptor. Same applies for other Set and Map api's.
    }

    if (!this.has(value)) {
      transaction(function () {
        _this2.data_.add(_this2.enhancer_(value, undefined));

        _this2.atom_.reportChanged();
      });
      var notifySpy =  true && isSpyEnabled();
      var notify = hasListeners(this);

      var _change = notify || notifySpy ? {
        observableKind: "set",
        debugObjectName: this.name_,
        type: ADD,
        object: this,
        newValue: value
      } : null;

      if (notifySpy && "development" !== "production") spyReportStart(_change);
      if (notify) notifyListeners(this, _change);
      if (notifySpy && "development" !== "production") spyReportEnd();
    }

    return this;
  };

  _proto["delete"] = function _delete(value) {
    var _this3 = this;

    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: DELETE,
        object: this,
        oldValue: value
      });
      if (!change) return false;
    }

    if (this.has(value)) {
      var notifySpy =  true && isSpyEnabled();
      var notify = hasListeners(this);

      var _change2 = notify || notifySpy ? {
        observableKind: "set",
        debugObjectName: this.name_,
        type: DELETE,
        object: this,
        oldValue: value
      } : null;

      if (notifySpy && "development" !== "production") spyReportStart(_change2);
      transaction(function () {
        _this3.atom_.reportChanged();

        _this3.data_["delete"](value);
      });
      if (notify) notifyListeners(this, _change2);
      if (notifySpy && "development" !== "production") spyReportEnd();
      return true;
    }

    return false;
  };

  _proto.has = function has(value) {
    this.atom_.reportObserved();
    return this.data_.has(this.dehanceValue_(value));
  };

  _proto.entries = function entries() {
    var nextIndex = 0;
    var keys = Array.from(this.keys());
    var values = Array.from(this.values());
    return makeIterable({
      next: function next() {
        var index = nextIndex;
        nextIndex += 1;
        return index < values.length ? {
          value: [keys[index], values[index]],
          done: false
        } : {
          done: true
        };
      }
    });
  };

  _proto.keys = function keys() {
    return this.values();
  };

  _proto.values = function values() {
    this.atom_.reportObserved();
    var self = this;
    var nextIndex = 0;
    var observableValues = Array.from(this.data_.values());
    return makeIterable({
      next: function next() {
        return nextIndex < observableValues.length ? {
          value: self.dehanceValue_(observableValues[nextIndex++]),
          done: false
        } : {
          done: true
        };
      }
    });
  };

  _proto.replace = function replace(other) {
    var _this4 = this;

    if (isObservableSet(other)) {
      other = new Set(other);
    }

    transaction(function () {
      if (Array.isArray(other)) {
        _this4.clear();

        other.forEach(function (value) {
          return _this4.add(value);
        });
      } else if (isES6Set(other)) {
        _this4.clear();

        other.forEach(function (value) {
          return _this4.add(value);
        });
      } else if (other !== null && other !== undefined) {
        die("Cannot initialize set from " + other);
      }
    });
    return this;
  };

  _proto.observe_ = function observe_(listener, fireImmediately) {
    // ... 'fireImmediately' could also be true?
    if ( true && fireImmediately === true) die("`observe` doesn't support fireImmediately=true in combination with sets.");
    return registerListener(this, listener);
  };

  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };

  _proto.toJSON = function toJSON() {
    return Array.from(this);
  };

  _proto.toString = function toString() {
    return "[object ObservableSet]";
  };

  _proto[_Symbol$iterator$1] = function () {
    return this.values();
  };

  _createClass(ObservableSet, [{
    key: "size",
    get: function get() {
      this.atom_.reportObserved();
      return this.data_.size;
    }
  }, {
    key: _Symbol$toStringTag$1,
    get: function get() {
      return "Set";
    }
  }]);

  return ObservableSet;
}(); // eslint-disable-next-line


var isObservableSet = /*#__PURE__*/createInstanceofPredicate("ObservableSet", ObservableSet);
var inferredAnnotationsSymbol = /*#__PURE__*/Symbol("mobx-inferred-annotations");
var descriptorCache = /*#__PURE__*/Object.create(null);
var REMOVE = "remove";

var ObservableObjectAdministration = /*#__PURE__*/function () {
  function ObservableObjectAdministration(target_, values_, name_, // Used anytime annotation is not explicitely provided
  defaultAnnotation_, // Bind automatically inferred actions?
  autoBind_) {
    if (values_ === void 0) {
      values_ = new Map();
    }

    if (defaultAnnotation_ === void 0) {
      defaultAnnotation_ = observable;
    }

    if (autoBind_ === void 0) {
      autoBind_ = false;
    }

    this.target_ = void 0;
    this.values_ = void 0;
    this.name_ = void 0;
    this.defaultAnnotation_ = void 0;
    this.autoBind_ = void 0;
    this.keysAtom_ = void 0;
    this.changeListeners_ = void 0;
    this.interceptors_ = void 0;
    this.proxy_ = void 0;
    this.isPlainObject_ = void 0;
    this.appliedAnnotations_ = void 0;
    this.pendingKeys_ = void 0;
    this.target_ = target_;
    this.values_ = values_;
    this.name_ = name_;
    this.defaultAnnotation_ = defaultAnnotation_;
    this.autoBind_ = autoBind_;
    this.keysAtom_ = new Atom( true ? this.name_ + ".keys" : undefined); // Optimization: we use this frequently

    this.isPlainObject_ = isPlainObject(this.target_);

    if ( true && !isAnnotation(this.defaultAnnotation_)) {
      die("defaultAnnotation must be valid annotation");
    }

    if ( true && typeof this.autoBind_ !== "boolean") {
      die("autoBind must be boolean");
    }

    if (true) {
      // Prepare structure for tracking which fields were already annotated
      this.appliedAnnotations_ = {};
    }
  }

  var _proto = ObservableObjectAdministration.prototype;

  _proto.getObservablePropValue_ = function getObservablePropValue_(key) {
    return this.values_.get(key).get();
  };

  _proto.setObservablePropValue_ = function setObservablePropValue_(key, newValue) {
    var observable = this.values_.get(key);

    if (observable instanceof ComputedValue) {
      observable.set(newValue);
      return true;
    } // intercept


    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: UPDATE,
        object: this.proxy_ || this.target_,
        name: key,
        newValue: newValue
      });
      if (!change) return null;
      newValue = change.newValue;
    }

    newValue = observable.prepareNewValue_(newValue); // notify spy & observers

    if (newValue !== globalState.UNCHANGED) {
      var notify = hasListeners(this);
      var notifySpy =  true && isSpyEnabled();

      var _change = notify || notifySpy ? {
        type: UPDATE,
        observableKind: "object",
        debugObjectName: this.name_,
        object: this.proxy_ || this.target_,
        oldValue: observable.value_,
        name: key,
        newValue: newValue
      } : null;

      if ( true && notifySpy) spyReportStart(_change);
      observable.setNewValue_(newValue);
      if (notify) notifyListeners(this, _change);
      if ( true && notifySpy) spyReportEnd();
    }

    return true;
  };

  _proto.get_ = function get_(key) {
    if (globalState.trackingDerivation && !hasProp(this.target_, key)) {
      // Key doesn't exist yet, subscribe for it in case it's added later
      this.has_(key);
    }

    return this.target_[key];
  }
  /**
   * @param {PropertyKey} key
   * @param {any} value
   * @param {Annotation|boolean} annotation true - infer from descriptor, false - copy as is
   * @param {boolean} proxyTrap whether it's called from proxy trap
   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
   */
  ;

  _proto.set_ = function set_(key, value, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    } // Don't use .has(key) - we care about own


    if (hasProp(this.target_, key)) {
      // Existing prop
      if (this.values_.has(key)) {
        // Observable (can be intercepted)
        return this.setObservablePropValue_(key, value);
      } else if (proxyTrap) {
        // Non-observable - proxy
        return Reflect.set(this.target_, key, value);
      } else {
        // Non-observable
        this.target_[key] = value;
        return true;
      }
    } else {
      // New prop
      return this.extend_(key, {
        value: value,
        enumerable: true,
        writable: true,
        configurable: true
      }, this.defaultAnnotation_, proxyTrap);
    }
  } // Trap for "in"
  ;

  _proto.has_ = function has_(key) {
    if (!globalState.trackingDerivation) {
      // Skip key subscription outside derivation
      return key in this.target_;
    }

    this.pendingKeys_ || (this.pendingKeys_ = new Map());
    var entry = this.pendingKeys_.get(key);

    if (!entry) {
      entry = new ObservableValue(key in this.target_, referenceEnhancer,  true ? this.name_ + "." + stringifyKey(key) + "?" : undefined, false);
      this.pendingKeys_.set(key, entry);
    }

    return entry.get();
  }
  /**
   * @param {PropertyKey} key
   * @param {Annotation|boolean} annotation true - infer from object or it's prototype, false - ignore
   */
  ;

  _proto.make_ = function make_(key, annotation) {
    if (annotation === true) {
      annotation = this.inferAnnotation_(key);
    }

    if (annotation === false) {
      return;
    }

    assertAnnotable(this, annotation, key);
    annotation.make_(this, key);
  }
  /**
   * @param {PropertyKey} key
   * @param {PropertyDescriptor} descriptor
   * @param {Annotation|boolean} annotation true - infer from descriptor, false - copy as is
   * @param {boolean} proxyTrap whether it's called from proxy trap
   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
   */
  ;

  _proto.extend_ = function extend_(key, descriptor, annotation, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }

    if (annotation === true) {
      annotation = inferAnnotationFromDescriptor(descriptor, this.defaultAnnotation_, this.autoBind_);
    }

    if (annotation === false) {
      return this.defineProperty_(key, descriptor, proxyTrap);
    }

    assertAnnotable(this, annotation, key);
    var outcome = annotation.extend_(this, key, descriptor, proxyTrap);

    if (outcome) {
      recordAnnotationApplied(this, annotation, key);
    }

    return outcome;
  };

  _proto.inferAnnotation_ = function inferAnnotation_(key) {
    var _this$target_$inferre; // Inherited is fine - annotation cannot differ in subclass


    var annotation = (_this$target_$inferre = this.target_[inferredAnnotationsSymbol]) == null ? void 0 : _this$target_$inferre.get(key);
    if (annotation) return annotation;
    var current = this.target_;

    while (current && current !== objectPrototype) {
      var descriptor = getDescriptor(current, key);

      if (descriptor) {
        annotation = inferAnnotationFromDescriptor(descriptor, this.defaultAnnotation_, this.autoBind_);
        break;
      }

      current = Object.getPrototypeOf(current);
    } // Not found (false means ignore)


    if (annotation === undefined) {
      die(1, "true", key);
    } // Cache the annotation.
    // Note we can do this only because annotation and field can't change.


    if (!this.isPlainObject_) {
      // We could also place it on furthest proto, shoudn't matter
      var closestProto = Object.getPrototypeOf(this.target_);

      if (!hasProp(closestProto, inferredAnnotationsSymbol)) {
        addHiddenProp(closestProto, inferredAnnotationsSymbol, new Map());
      }

      closestProto[inferredAnnotationsSymbol].set(key, annotation);
    }

    return annotation;
  }
  /**
   * @param {PropertyKey} key
   * @param {PropertyDescriptor} descriptor
   * @param {boolean} proxyTrap whether it's called from proxy trap
   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
   */
  ;

  _proto.defineProperty_ = function defineProperty_(key, descriptor, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }

    try {
      startBatch(); // Delete

      var deleteOutcome = this.delete_(key);

      if (!deleteOutcome) {
        // Failure or intercepted
        return deleteOutcome;
      } // ADD interceptor


      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: ADD,
          newValue: descriptor.value
        });
        if (!change) return null;
        var newValue = change.newValue;

        if (descriptor.value !== newValue) {
          descriptor = _extends({}, descriptor, {
            value: newValue
          });
        }
      } // Define


      if (proxyTrap) {
        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
          return false;
        }
      } else {
        defineProperty(this.target_, key, descriptor);
      } // Notify


      this.notifyPropertyAddition_(key, descriptor.value);
    } finally {
      endBatch();
    }

    return true;
  } // If original descriptor becomes relevant, move this to annotation directly
  ;

  _proto.defineObservableProperty_ = function defineObservableProperty_(key, value, enhancer, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }

    try {
      startBatch(); // Delete

      var deleteOutcome = this.delete_(key);

      if (!deleteOutcome) {
        // Failure or intercepted
        return deleteOutcome;
      } // ADD interceptor


      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: ADD,
          newValue: value
        });
        if (!change) return null;
        value = change.newValue;
      }

      var cachedDescriptor = getCachedObservablePropDescriptor(key);
      var descriptor = {
        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
        enumerable: true,
        get: cachedDescriptor.get,
        set: cachedDescriptor.set
      }; // Define

      if (proxyTrap) {
        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
          return false;
        }
      } else {
        defineProperty(this.target_, key, descriptor);
      }

      var _observable = new ObservableValue(value, enhancer,  true ? this.name_ + "." + key.toString() : undefined, false);

      this.values_.set(key, _observable); // Notify (value possibly changed by ObservableValue)

      this.notifyPropertyAddition_(key, _observable.value_);
    } finally {
      endBatch();
    }

    return true;
  } // If original descriptor becomes relevant, move this to annotation directly
  ;

  _proto.defineComputedProperty_ = function defineComputedProperty_(key, options, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }

    try {
      startBatch(); // Delete

      var deleteOutcome = this.delete_(key);

      if (!deleteOutcome) {
        // Failure or intercepted
        return deleteOutcome;
      } // ADD interceptor


      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: ADD,
          newValue: undefined
        });
        if (!change) return null;
      }

      options.name || (options.name =  true ? this.name_ + "." + key.toString() : undefined);
      options.context = this.proxy_ || this.target_;
      var cachedDescriptor = getCachedObservablePropDescriptor(key);
      var descriptor = {
        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
        enumerable: false,
        get: cachedDescriptor.get,
        set: cachedDescriptor.set
      }; // Define

      if (proxyTrap) {
        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
          return false;
        }
      } else {
        defineProperty(this.target_, key, descriptor);
      }

      this.values_.set(key, new ComputedValue(options)); // Notify

      this.notifyPropertyAddition_(key, undefined);
    } finally {
      endBatch();
    }

    return true;
  }
  /**
   * @param {PropertyKey} key
   * @param {PropertyDescriptor} descriptor
   * @param {boolean} proxyTrap whether it's called from proxy trap
   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
   */
  ;

  _proto.delete_ = function delete_(key, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    } // No such prop


    if (!hasProp(this.target_, key)) {
      return true;
    } // Intercept


    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this.proxy_ || this.target_,
        name: key,
        type: REMOVE
      }); // Cancelled

      if (!change) return null;
    } // Delete


    try {
      var _this$pendingKeys_, _this$pendingKeys_$ge;

      startBatch();
      var notify = hasListeners(this);
      var notifySpy =  true && isSpyEnabled();

      var _observable2 = this.values_.get(key); // Value needed for spies/listeners


      var value = undefined; // Optimization: don't pull the value unless we will need it

      if (!_observable2 && (notify || notifySpy)) {
        var _getDescriptor;

        value = (_getDescriptor = getDescriptor(this.target_, key)) == null ? void 0 : _getDescriptor.value;
      } // delete prop (do first, may fail)


      if (proxyTrap) {
        if (!Reflect.deleteProperty(this.target_, key)) {
          return false;
        }
      } else {
        delete this.target_[key];
      } // Allow re-annotating this field


      if (true) {
        delete this.appliedAnnotations_[key];
      } // Clear observable


      if (_observable2) {
        this.values_["delete"](key); // for computed, value is undefined

        if (_observable2 instanceof ObservableValue) {
          value = _observable2.value_;
        } // Notify: autorun(() => obj[key]), see #1796


        propagateChanged(_observable2);
      } // Notify "keys/entries/values" observers


      this.keysAtom_.reportChanged(); // Notify "has" observers
      // "in" as it may still exist in proto

      (_this$pendingKeys_ = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_$ge = _this$pendingKeys_.get(key)) == null ? void 0 : _this$pendingKeys_$ge.set(key in this.target_); // Notify spies/listeners

      if (notify || notifySpy) {
        var _change2 = {
          type: REMOVE,
          observableKind: "object",
          object: this.proxy_ || this.target_,
          debugObjectName: this.name_,
          oldValue: value,
          name: key
        };
        if ( true && notifySpy) spyReportStart(_change2);
        if (notify) notifyListeners(this, _change2);
        if ( true && notifySpy) spyReportEnd();
      }
    } finally {
      endBatch();
    }

    return true;
  }
  /**
   * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
   * for callback details
   */
  ;

  _proto.observe_ = function observe_(callback, fireImmediately) {
    if ( true && fireImmediately === true) die("`observe` doesn't support the fire immediately property for observable objects.");
    return registerListener(this, callback);
  };

  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };

  _proto.notifyPropertyAddition_ = function notifyPropertyAddition_(key, value) {
    var _this$pendingKeys_2, _this$pendingKeys_2$g;

    var notify = hasListeners(this);
    var notifySpy =  true && isSpyEnabled();

    if (notify || notifySpy) {
      var change = notify || notifySpy ? {
        type: ADD,
        observableKind: "object",
        debugObjectName: this.name_,
        object: this.proxy_ || this.target_,
        name: key,
        newValue: value
      } : null;
      if ( true && notifySpy) spyReportStart(change);
      if (notify) notifyListeners(this, change);
      if ( true && notifySpy) spyReportEnd();
    }

    (_this$pendingKeys_2 = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_2$g = _this$pendingKeys_2.get(key)) == null ? void 0 : _this$pendingKeys_2$g.set(true); // Notify "keys/entries/values" observers

    this.keysAtom_.reportChanged();
  };

  _proto.ownKeys_ = function ownKeys_() {
    this.keysAtom_.reportObserved();
    return ownKeys(this.target_);
  };

  _proto.keys_ = function keys_() {
    // Returns enumerable && own, but unfortunately keysAtom will report on ANY key change.
    // There is no way to distinguish between Object.keys(object) and Reflect.ownKeys(object) - both are handled by ownKeys trap.
    // We can either over-report in Object.keys(object) or under-report in Reflect.ownKeys(object)
    // We choose to over-report in Object.keys(object), because:
    // - typically it's used with simple data objects
    // - when symbolic/non-enumerable keys are relevant Reflect.ownKeys works as expected
    this.keysAtom_.reportObserved();
    return Object.keys(this.target_);
  };

  return ObservableObjectAdministration;
}();

function asObservableObject(target, options) {
  var _options$name;

  if ( true && options && isObservableObject(target)) {
    die("Options can't be provided for already observable objects.");
  }

  if (hasProp(target, $mobx)) {
    if ( true && !(getAdministration(target) instanceof ObservableObjectAdministration)) {
      die("Cannot convert '" + getDebugName(target) + "' into observable object:" + "\nThe target is already observable of different type." + "\nExtending builtins is not supported.");
    }

    return target;
  }

  if ( true && !Object.isExtensible(target)) die("Cannot make the designated object observable; it is not extensible");
  var name = (_options$name = options == null ? void 0 : options.name) != null ? _options$name :  true ? (isPlainObject(target) ? "ObservableObject" : target.constructor.name) + "@" + getNextId() : undefined;
  var adm = new ObservableObjectAdministration(target, new Map(), String(name), getAnnotationFromOptions(options), options == null ? void 0 : options.autoBind);
  addHiddenProp(target, $mobx, adm);
  return target;
}

var isObservableObjectAdministration = /*#__PURE__*/createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);

function getCachedObservablePropDescriptor(key) {
  return descriptorCache[key] || (descriptorCache[key] = {
    get: function get() {
      return this[$mobx].getObservablePropValue_(key);
    },
    set: function set(value) {
      return this[$mobx].setObservablePropValue_(key, value);
    }
  });
}

function isObservableObject(thing) {
  if (isObject(thing)) {
    return isObservableObjectAdministration(thing[$mobx]);
  }

  return false;
}

function recordAnnotationApplied(adm, annotation, key) {
  var _adm$target_$storedAn;

  if (true) {
    adm.appliedAnnotations_[key] = annotation;
  } // Remove applied decorator annotation so we don't try to apply it again in subclass constructor


  (_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? true : delete _adm$target_$storedAn[key];
}

function assertAnnotable(adm, annotation, key) {
  // Valid annotation
  if ( true && !isAnnotation(annotation)) {
    die("Cannot annotate '" + adm.name_ + "." + key.toString() + "': Invalid annotation.");
  }
  /*
  // Configurable, not sealed, not frozen
  // Possibly not needed, just a little better error then the one thrown by engine.
  // Cases where this would be useful the most (subclass field initializer) are not interceptable by this.
  if (__DEV__) {
      const configurable = getDescriptor(adm.target_, key)?.configurable
      const frozen = Object.isFrozen(adm.target_)
      const sealed = Object.isSealed(adm.target_)
      if (!configurable || frozen || sealed) {
          const fieldName = `${adm.name_}.${key.toString()}`
          const requestedAnnotationType = annotation.annotationType_
          let error = `Cannot apply '${requestedAnnotationType}' to '${fieldName}':`
          if (frozen) {
              error += `\nObject is frozen.`
          }
          if (sealed) {
              error += `\nObject is sealed.`
          }
          if (!configurable) {
              error += `\nproperty is not configurable.`
              // Mention only if caused by us to avoid confusion
              if (hasProp(adm.appliedAnnotations!, key)) {
                  error += `\nTo prevent accidental re-definition of a field by a subclass, `
                  error += `all annotated fields of non-plain objects (classes) are not configurable.`
              }
          }
          die(error)
      }
  }
  */
  // Not annotated


  if ( true && !isOverride(annotation) && hasProp(adm.appliedAnnotations_, key)) {
    var fieldName = adm.name_ + "." + key.toString();
    var currentAnnotationType = adm.appliedAnnotations_[key].annotationType_;
    var requestedAnnotationType = annotation.annotationType_;
    die("Cannot apply '" + requestedAnnotationType + "' to '" + fieldName + "':" + ("\nThe field is already annotated with '" + currentAnnotationType + "'.") + "\nRe-annotating fields is not allowed." + "\nUse 'override' annotation for methods overriden by subclass.");
  }
}
/**
 * This array buffer contains two lists of properties, so that all arrays
 * can recycle their property definitions, which significantly improves performance of creating
 * properties on the fly.
 */


var OBSERVABLE_ARRAY_BUFFER_SIZE = 0; // Typescript workaround to make sure ObservableArray extends Array

var StubArray = function StubArray() {};

function inherit(ctor, proto) {
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(ctor.prototype, proto);
  } else if (ctor.prototype.__proto__ !== undefined) {
    ctor.prototype.__proto__ = proto;
  } else {
    ctor.prototype = proto;
  }
}

inherit(StubArray, Array.prototype); // Weex proto freeze protection was here,
// but it is unclear why the hack is need as MobX never changed the prototype
// anyway, so removed it in V6

var LegacyObservableArray = /*#__PURE__*/function (_StubArray) {
  _inheritsLoose(LegacyObservableArray, _StubArray);

  function LegacyObservableArray(initialValues, enhancer, name, owned) {
    var _this;

    if (name === void 0) {
      name =  true ? "ObservableArray@" + getNextId() : undefined;
    }

    if (owned === void 0) {
      owned = false;
    }

    _this = _StubArray.call(this) || this;
    var adm = new ObservableArrayAdministration(name, enhancer, owned, true);
    adm.proxy_ = _assertThisInitialized(_this);
    addHiddenFinalProp(_assertThisInitialized(_this), $mobx, adm);

    if (initialValues && initialValues.length) {
      var prev = allowStateChangesStart(true); // @ts-ignore

      _this.spliceWithArray(0, 0, initialValues);

      allowStateChangesEnd(prev);
    }

    return _this;
  }

  var _proto = LegacyObservableArray.prototype;

  _proto.concat = function concat() {
    this[$mobx].atom_.reportObserved();

    for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {
      arrays[_key] = arguments[_key];
    }

    return Array.prototype.concat.apply(this.slice(), //@ts-ignore
    arrays.map(function (a) {
      return isObservableArray(a) ? a.slice() : a;
    }));
  };

  _proto[Symbol.iterator] = function () {
    var self = this;
    var nextIndex = 0;
    return makeIterable({
      next: function next() {
        // @ts-ignore
        return nextIndex < self.length ? {
          value: self[nextIndex++],
          done: false
        } : {
          done: true,
          value: undefined
        };
      }
    });
  };

  _createClass(LegacyObservableArray, [{
    key: "length",
    get: function get() {
      return this[$mobx].getArrayLength_();
    },
    set: function set(newLength) {
      this[$mobx].setArrayLength_(newLength);
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return "Array";
    }
  }]);

  return LegacyObservableArray;
}(StubArray);

Object.entries(arrayExtensions).forEach(function (_ref) {
  var prop = _ref[0],
      fn = _ref[1];
  if (prop !== "concat") addHiddenProp(LegacyObservableArray.prototype, prop, fn);
});

function createArrayEntryDescriptor(index) {
  return {
    enumerable: false,
    configurable: true,
    get: function get() {
      return this[$mobx].get_(index);
    },
    set: function set(value) {
      this[$mobx].set_(index, value);
    }
  };
}

function createArrayBufferItem(index) {
  defineProperty(LegacyObservableArray.prototype, "" + index, createArrayEntryDescriptor(index));
}

function reserveArrayBuffer(max) {
  if (max > OBSERVABLE_ARRAY_BUFFER_SIZE) {
    for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max + 100; index++) {
      createArrayBufferItem(index);
    }

    OBSERVABLE_ARRAY_BUFFER_SIZE = max;
  }
}

reserveArrayBuffer(1000);

function createLegacyArray(initialValues, enhancer, name) {
  return new LegacyObservableArray(initialValues, enhancer, name);
}

function getAtom(thing, property) {
  if (typeof thing === "object" && thing !== null) {
    if (isObservableArray(thing)) {
      if (property !== undefined) die(23);
      return thing[$mobx].atom_;
    }

    if (isObservableSet(thing)) {
      return thing[$mobx];
    }

    if (isObservableMap(thing)) {
      if (property === undefined) return thing.keysAtom_;
      var observable = thing.data_.get(property) || thing.hasMap_.get(property);
      if (!observable) die(25, property, getDebugName(thing));
      return observable;
    }

    if (isObservableObject(thing)) {
      if (!property) return die(26);

      var _observable = thing[$mobx].values_.get(property);

      if (!_observable) die(27, property, getDebugName(thing));
      return _observable;
    }

    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
      return thing;
    }
  } else if (isFunction(thing)) {
    if (isReaction(thing[$mobx])) {
      // disposer function
      return thing[$mobx];
    }
  }

  die(28);
}

function getAdministration(thing, property) {
  if (!thing) die(29);
  if (property !== undefined) return getAdministration(getAtom(thing, property));
  if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) return thing;
  if (isObservableMap(thing) || isObservableSet(thing)) return thing;
  if (thing[$mobx]) return thing[$mobx];
  die(24, thing);
}

function getDebugName(thing, property) {
  var named;

  if (property !== undefined) {
    named = getAtom(thing, property);
  } else if (isAction(thing)) {
    return thing.name;
  } else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing)) {
    named = getAdministration(thing);
  } else {
    // valid for arrays as well
    named = getAtom(thing);
  }

  return named.name_;
}

var toString = objectPrototype.toString;

function deepEqual(a, b, depth) {
  if (depth === void 0) {
    depth = -1;
  }

  return eq(a, b, depth);
} // Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289
// Internal recursive comparison function for `isEqual`.


function eq(a, b, depth, aStack, bStack) {
  // Identical objects are equal. `0 === -0`, but they aren't identical.
  // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
  if (a === b) return a !== 0 || 1 / a === 1 / b; // `null` or `undefined` only equal to itself (strict comparison).

  if (a == null || b == null) return false; // `NaN`s are equivalent, but non-reflexive.

  if (a !== a) return b !== b; // Exhaust primitive checks

  var type = typeof a;
  if (!isFunction(type) && type !== "object" && typeof b != "object") return false; // Compare `[[Class]]` names.

  var className = toString.call(a);
  if (className !== toString.call(b)) return false;

  switch (className) {
    // Strings, numbers, regular expressions, dates, and booleans are compared by value.
    case "[object RegExp]": // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')

    case "[object String]":
      // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
      // equivalent to `new String("5")`.
      return "" + a === "" + b;

    case "[object Number]":
      // `NaN`s are equivalent, but non-reflexive.
      // Object(NaN) is equivalent to NaN.
      if (+a !== +a) return +b !== +b; // An `egal` comparison is performed for other numeric values.

      return +a === 0 ? 1 / +a === 1 / b : +a === +b;

    case "[object Date]":
    case "[object Boolean]":
      // Coerce dates and booleans to numeric primitive values. Dates are compared by their
      // millisecond representations. Note that invalid dates with millisecond representations
      // of `NaN` are not equivalent.
      return +a === +b;

    case "[object Symbol]":
      return typeof Symbol !== "undefined" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b);

    case "[object Map]":
    case "[object Set]":
      // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.
      // Hide this extra level by increasing the depth.
      if (depth >= 0) {
        depth++;
      }

      break;
  } // Unwrap any wrapped objects.


  a = unwrap(a);
  b = unwrap(b);
  var areArrays = className === "[object Array]";

  if (!areArrays) {
    if (typeof a != "object" || typeof b != "object") return false; // Objects with different constructors are not equivalent, but `Object`s or `Array`s
    // from different frames are.

    var aCtor = a.constructor,
        bCtor = b.constructor;

    if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor && isFunction(bCtor) && bCtor instanceof bCtor) && "constructor" in a && "constructor" in b) {
      return false;
    }
  }

  if (depth === 0) {
    return false;
  } else if (depth < 0) {
    depth = -1;
  } // Assume equality for cyclic structures. The algorithm for detecting cyclic
  // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
  // Initializing stack of traversed objects.
  // It's done here since we only need them for objects and arrays comparison.


  aStack = aStack || [];
  bStack = bStack || [];
  var length = aStack.length;

  while (length--) {
    // Linear search. Performance is inversely proportional to the number of
    // unique nested structures.
    if (aStack[length] === a) return bStack[length] === b;
  } // Add the first object to the stack of traversed objects.


  aStack.push(a);
  bStack.push(b); // Recursively compare objects and arrays.

  if (areArrays) {
    // Compare array lengths to determine if a deep comparison is necessary.
    length = a.length;
    if (length !== b.length) return false; // Deep compare the contents, ignoring non-numeric properties.

    while (length--) {
      if (!eq(a[length], b[length], depth - 1, aStack, bStack)) return false;
    }
  } else {
    // Deep compare objects.
    var keys = Object.keys(a);
    var key;
    length = keys.length; // Ensure that both objects contain the same number of properties before comparing deep equality.

    if (Object.keys(b).length !== length) return false;

    while (length--) {
      // Deep compare each member
      key = keys[length];
      if (!(hasProp(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack))) return false;
    }
  } // Remove the first object from the stack of traversed objects.


  aStack.pop();
  bStack.pop();
  return true;
}

function unwrap(a) {
  if (isObservableArray(a)) return a.slice();
  if (isES6Map(a) || isObservableMap(a)) return Array.from(a.entries());
  if (isES6Set(a) || isObservableSet(a)) return Array.from(a.entries());
  return a;
}

function makeIterable(iterator) {
  iterator[Symbol.iterator] = getSelf;
  return iterator;
}

function getSelf() {
  return this;
}
/**
 * Infers the best fitting annotation from property descriptor or false if the field shoudn't be annotated
 * - getter(+setter) -> computed
 * - setter w/o getter -> false (ignore)
 * - flow -> false (ignore)
 * - generator -> flow
 * - action -> false (ignore)
 * - function -> action (optionally bound)
 * - other -> defaultAnnotation
 */


function inferAnnotationFromDescriptor(desc, defaultAnnotation, autoBind) {
  if (desc.get) return computed;
  if (desc.set) return false; // ignore lone setter
  // If already wrapped in action/flow, don't do that another time, but assume it is already set up properly.

  return isFunction(desc.value) ? isGenerator(desc.value) ? isFlow(desc.value) ? false : flow : isAction(desc.value) ? false : autoBind ? autoAction.bound : autoAction : defaultAnnotation;
}

function isAnnotation(thing) {
  return (// Can be function
    thing instanceof Object && typeof thing.annotationType_ === "string" && isFunction(thing.make_) && isFunction(thing.extend_)
  );
}
/**
 * (c) Michel Weststrate 2015 - 2020
 * MIT Licensed
 *
 * Welcome to the mobx sources! To get an global overview of how MobX internally works,
 * this is a good place to start:
 * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74
 *
 * Source folders:
 * ===============
 *
 * - api/     Most of the public static methods exposed by the module can be found here.
 * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.
 * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.
 * - utils/   Utility stuff.
 *
 */


["Symbol", "Map", "Set", "Symbol"].forEach(function (m) {
  var g = getGlobal();

  if (typeof g[m] === "undefined") {
    die("MobX requires global '" + m + "' to be available or polyfilled");
  }
});

if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") {
  // See: https://github.com/andykog/mobx-devtools/
  __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({
    spy: spy,
    extras: {
      getDebugName: getDebugName
    },
    $mobx: $mobx
  });
}


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/mst-middlewares/dist/mst-middlewares.module.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mst-middlewares/dist/mst-middlewares.module.js ***!
  \*********************************************************************/
/*! exports provided: TimeTraveller, UndoManager, actionLogger, asReduxStore, atomic, connectReduxDevtools, simpleActionLogger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimeTraveller", function() { return TimeTraveller; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UndoManager", function() { return UndoManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "actionLogger", function() { return actionLogger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asReduxStore", function() { return asReduxStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "atomic", function() { return atomic; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "connectReduxDevtools", function() { return connectReduxDevtools; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "simpleActionLogger", function() { return simpleActionLogger; });
/* harmony import */ var mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx-state-tree */ "./node_modules/mobx-state-tree/dist/mobx-state-tree.module.js");

var atomic = Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["createActionTrackingMiddleware2"])({
  filter: function (call) {
    // only call the methods above for actions that were not being recorded,
    // but do not call them for child acions (which inherit a copy of the env)
    if (call.env) {
      // already recording
      return false;
    }

    return true;
  },
  onStart: function (call) {
    var recorder = Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["recordPatches"])(call.tree, function (_patch, _inversePatch, actionContext) {
      // only record patches that were generated by this action or children of this action
      return !!actionContext && Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["isActionContextThisOrChildOf"])(actionContext, call.id);
    });
    recorder.resume();
    call.env = {
      recorder: recorder
    };
  },
  onFinish: function (call, error) {
    var recorder = call.env.recorder;
    call.env = undefined;
    recorder.stop();

    if (error !== undefined) {
      recorder.undo();
    }
  }
});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
      m = s && o[s],
      i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
}

function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

  return ar;
}
/**
 * Creates a tiny proxy around a MST tree that conforms to the redux store api.
 * This makes it possible to use MST inside a redux application.
 *
 * See the [redux-todomvc example](https://github.com/mobxjs/mobx-state-tree/blob/e9e804c8c43e1edde4aabbd52675544e2b3a905b/examples/redux-todomvc/src/index.js#L20) for more details.
 *
 * @export
 * @param {*} model
 * @param {...MiddleWare[]} middlewares
 * @returns {IReduxStore}
 */


var asReduxStore = function (model) {
  var middlewares = [];

  for (var _i = 1; _i < arguments.length; _i++) {
    middlewares[_i - 1] = arguments[_i];
  }

  if (!Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["isStateTreeNode"])(model)) throw new Error("Expected model object");
  var store = {
    getState: function () {
      return Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["getSnapshot"])(model);
    },
    dispatch: function (action) {
      runMiddleWare(action, runners.slice(), function (newAction) {
        return Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["applyAction"])(model, reduxActionToAction(newAction));
      });
    },
    subscribe: function (listener) {
      return Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["onSnapshot"])(model, listener);
    }
  };
  var runners = middlewares.map(function (mw) {
    return mw(store);
  });
  return store;
};

function reduxActionToAction(action) {
  var actionArgs = Object.assign({}, action);
  delete actionArgs.type;
  return {
    name: action.type,
    args: [actionArgs]
  };
}

function runMiddleWare(action, runners, next) {
  function n(retVal) {
    var f = runners.shift();
    if (f) f(n)(retVal);else next(retVal);
  }

  n(action);
}

function getActionContextNameAndTypePath(actionContext, logArgsNearName) {
  var name = actionContext.name;
  var targetTypePath = actionContext.targetTypePath;

  if (logArgsNearName) {
    var args = actionContext.callArgs.map(function (a) {
      return JSON.stringify(a);
    }).join(", ");

    if (args.length > 64) {
      args = args.slice(0, 64) + "...";
    }

    name += "(" + args + ")";
  }

  if (actionContext.runningAsync) {
    name += " (" + (actionContext.step !== undefined ? actionContext.step : "?") + ")";
  }

  if (actionContext.errored) {
    name += " -error thrown-";
  }

  if (actionContext.parent) {
    var ret = getActionContextNameAndTypePath(actionContext.parent, logArgsNearName);

    if (ret) {
      name = ret.name + " >>> " + name;
      targetTypePath = ret.targetTypePath + " >>> " + targetTypePath;
    }
  }

  return {
    name: name,
    targetTypePath: targetTypePath
  };
}

function getTypeName(node) {
  return Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["getType"])(node).name || "(UnnamedType)";
}

function getTargetTypePath(node) {
  var current = node;
  var names = [];

  while (current) {
    names.unshift(getTypeName(current));
    current = Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["hasParent"])(current) ? Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["getParent"])(current) : undefined;
  }

  return names;
}
/**
 * Connects a MST tree to the Redux devtools.
 * See this [example](https://github.com/mobxjs/mobx-state-tree/blob/e9e804c8c43e1edde4aabbd52675544e2b3a905b/examples/redux-todomvc/src/index.js#L21)
 * for a setup example.
 *
 * @export
 * @param {*} remoteDevDep
 * @param {IAnyStateTreeNode} model
 * @param {{
 *         logIdempotentActionSteps?: boolean
 *         logChildActions?: boolean
 *         logArgsNearName?: boolean
 *     }} [options]
 */


function connectReduxDevtools(remoteDevDep, model, options) {
  var opts = __assign({
    logIdempotentActionSteps: true,
    logChildActions: false,
    logArgsNearName: true
  }, options);

  var handlingMonitorAction = 0; // Connect to the monitor

  var remotedev = remoteDevDep.connectViaExtension({
    name: Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["getType"])(model).name
  }); // Subscribe to change state (if need more than just logging)

  remotedev.subscribe(function (message) {
    if (message.type === "DISPATCH") {
      handleMonitorActions(remotedev, model, message);
    }
  });
  var initialState = Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["getSnapshot"])(model);
  remotedev.init(initialState);
  var actionContexts = new Map();
  var changesMadeSetter = undefined;

  if (!opts.logIdempotentActionSteps) {
    Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["onPatch"])(model, function () {
      if (!handlingMonitorAction && changesMadeSetter) {
        changesMadeSetter();
      }
    });
  }

  Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["addMiddleware"])(model, actionMiddleware, false);

  function actionMiddleware(call, next) {
    if (handlingMonitorAction) {
      next(call);
      return;
    }

    var context; // find the context of the parent action (if any)

    for (var i = call.allParentIds.length - 1; i >= 0; i--) {
      var parentId = call.allParentIds[i];
      var foundContext = actionContexts.get(parentId);

      if (foundContext) {
        context = foundContext;
        break;
      }
    } // if it is an action we need to create a new action context
    // and also if there's no context (e.g. the middleware was connected in the middle of an action with a flow)


    if (call.type === "action" || !context) {
      var targetTypePath = getTargetTypePath(call.context).join("/");
      var parentContext = context;
      var path = call.context ? "root" + Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["getPath"])(call.context) : "*unknown*";
      context = {
        // use a space rather than a dot so that the redux devtools move the actions to the next line if there's not enough space
        name: "[" + path + "] " + (call.name || "*unknownAction*"),
        targetTypePath: targetTypePath,
        id: call.id,
        runningAsync: false,
        errored: false,
        errorReported: false,
        step: call.type === "action" ? 0 : undefined,
        callArgs: [],
        changesMadeSetter: undefined
      };

      if (call.type === "action") {
        if (call.args) {
          context.callArgs = __spread(call.args);
        } // subaction, assign the parent action context


        if (call.parentId) {
          context.parent = parentContext;
        }

        actionContexts.set(call.id, context);
      }
    }

    var changesMade = false;

    context.changesMadeSetter = function () {
      changesMade = true;
    };

    var oldChangesMadeSetter = changesMadeSetter;
    changesMadeSetter = context.changesMadeSetter; // capture any errors and rethrow them later (after it is logged)

    var errorThrown;

    try {
      next(call);
    } catch (e) {
      errorThrown = e;
      context.errored = true;
    }

    changesMadeSetter = oldChangesMadeSetter;
    context.changesMadeSetter = undefined;
    var changedTheModel = opts.logIdempotentActionSteps ? true : changesMade;

    switch (call.type) {
      case "flow_spawn":
      case "flow_resume":
      case "flow_resume_error":
        // not errored since the promise error might be caught
        // when this events come we can be sure that this action is being run async, as well as its parent actions
        context.runningAsync = true;
        var parent = context.parent;

        while (parent) {
          parent.runningAsync = true;
          parent = parent.parent;
        }

        break;

      case "flow_throw":
        context.errored = true;
        break;
    } // only log if:
    // - it is a sync (never run async code) action
    // - a flow_resume
    // - a flow_throw that wasn't reported as an error before
    // we don't include other kinds since flow_spawn never contain state changes and flow_resume_error might be caught by and handled the parent


    var syncAction = call.type === "action" && !context.runningAsync;
    var log = syncAction || call.type === "flow_resume" || call.type === "flow_throw" && !context.errorReported; // do not log child actions if asked not to, but only for sync actions

    if (!opts.logChildActions && context.parent && !context.runningAsync) {
      log = false; // give the child action changes to the parent action

      if (changesMade && context.parent.changesMadeSetter) {
        context.parent.changesMadeSetter();
      }
    }

    if (log) {
      var logStep = function (logContext) {
        var sn = Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["getSnapshot"])(model);
        var names = getActionContextNameAndTypePath(logContext, opts.logArgsNearName);
        var copy = {
          type: names.name,
          targetTypePath: names.targetTypePath,
          args: logContext.callArgs
        };
        remotedev.send(copy, sn); // we do it over the original context, not the log context, since the original context might throw but the original context might not

        if (context.errored) {
          context.errorReported = true;
        } // increase the step for logging purposes, as well as any parent steps (since child steps count as a parent step)


        if (context.step !== undefined) {
          context.step++;
        }

        var parent = context.parent;

        while (parent) {
          if (parent.step !== undefined) {
            parent.step++;
          }

          parent = parent.parent;
        }
      }; // if it is an async subaction we need to log it since it made a change, but we will log it as if it were the root


      var logAsRoot = context.parent && !opts.logChildActions;

      if (changedTheModel) {
        var logContext = context;

        if (logAsRoot) {
          while (logContext.parent) {
            logContext = logContext.parent;
          }
        }

        logStep(logContext);
      } else if (!logAsRoot && context.errored && !context.errorReported) {
        logStep(context);
      }
    } // once the action is totally finished remove it from the context list to avoid mem leaks


    if (call.type === "flow_return" || call.type === "flow_throw" || !context.runningAsync) {
      actionContexts.delete(context.id);
    } // rethrow previously captured excepton if needed


    if (errorThrown) {
      throw errorThrown;
    }
  }

  function handleMonitorActions(remotedev2, model2, message) {
    try {
      handlingMonitorAction++;

      switch (message.payload.type) {
        case "RESET":
          Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["applySnapshot"])(model2, initialState);
          return remotedev2.init(initialState);

        case "COMMIT":
          return remotedev2.init(Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["getSnapshot"])(model2));

        case "ROLLBACK":
          return remotedev2.init(remoteDevDep.extractState(message));

        case "JUMP_TO_STATE":
        case "JUMP_TO_ACTION":
          Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["applySnapshot"])(model2, remoteDevDep.extractState(message));
          return;

        case "IMPORT_STATE":
          var nextLiftedState = message.payload.nextLiftedState;
          var computedStates = nextLiftedState.computedStates;
          Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["applySnapshot"])(model2, computedStates[computedStates.length - 1].state);
          remotedev2.send(null, nextLiftedState);
          return;

        default:
      }
    } finally {
      handlingMonitorAction--;
    }
  }
}

function simpleActionLogger(call, next) {
  if (call.type === "action" && call.parentId === 0) console.log("[MST] " + Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["getPath"])(call.context) + "/" + call.name);
  return next(call);
}

function actionLogger(call, next) {
  var skip = call.type === "action" && call.parentId !== 0 || call.type === "flow_resume" || call.type === "flow_resume_error";
  if (!skip) console.log("[MST] #" + call.rootId + " " + call.type + " - " + Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["getPath"])(call.context) + "/" + call.name);
  next(call);
}

var TimeTraveller = mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].model("TimeTraveller", {
  history: mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].array(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].frozen()),
  undoIdx: -1,
  targetPath: ""
}).views(function (self) {
  return {
    get canUndo() {
      return self.undoIdx > 0;
    },

    get canRedo() {
      return self.undoIdx < self.history.length - 1;
    }

  };
}).actions(function (self) {
  var targetStore;
  var snapshotDisposer;
  var skipNextUndoState = false;
  return {
    addUndoState: function (todos) {
      if (skipNextUndoState) {
        // skip recording if this state was caused by undo / redo
        skipNextUndoState = false;
        return;
      }

      self.history.splice(self.undoIdx + 1);
      self.history.push(todos);
      self.undoIdx = self.history.length - 1;
    },
    afterCreate: function () {
      var _this = this;

      targetStore = self.targetPath ? Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["resolvePath"])(self, self.targetPath) : Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["getEnv"])(self).targetStore;
      if (!targetStore) throw new Error("Failed to find target store for TimeTraveller. Please provide `targetPath` property, or a `targetStore` in the environment"); // TODO: check if targetStore doesn't contain self
      // if (contains(targetStore, self)) throw new Error("TimeTraveller shouldn't be recording itself. Please specify a sibling as taret, not some parent")
      // start listening to changes

      snapshotDisposer = Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["onSnapshot"])(targetStore, function (snapshot) {
        return _this.addUndoState(snapshot);
      }); // record an initial state if no known

      if (self.history.length === 0) {
        this.addUndoState(Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["getSnapshot"])(targetStore));
      }
    },
    beforeDestroy: function () {
      snapshotDisposer();
    },
    undo: function () {
      self.undoIdx--;
      skipNextUndoState = true;
      Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["applySnapshot"])(targetStore, self.history[self.undoIdx]);
    },
    redo: function () {
      self.undoIdx++;
      skipNextUndoState = true;
      Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["applySnapshot"])(targetStore, self.history[self.undoIdx]);
    }
  };
});
var Entry = mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].model("UndoManagerEntry", {
  patches: mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].frozen(),
  inversePatches: mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].frozen()
});
var UndoManager = mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].model("UndoManager", {
  history: mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].array(Entry),
  undoIdx: 0
}).views(function (self) {
  return {
    get undoLevels() {
      return self.undoIdx;
    },

    get redoLevels() {
      return self.history.length - self.undoIdx;
    },

    get canUndo() {
      return this.undoLevels > 0;
    },

    get canRedo() {
      return this.redoLevels > 0;
    }

  };
}).actions(function (self) {
  var targetStore;
  var recordingDisabled = 0;
  var groupRecorders = [];
  var undoRedoMiddleware = Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["createActionTrackingMiddleware2"])({
    filter: function (call) {
      if (call.env) {
        // already recording
        return false;
      }

      if (call.context === self) {
        // also skip actions over self
        return false;
      }

      return true;
    },
    onStart: function (call) {
      var recorder = Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["recordPatches"])(call.tree, function (_patch, _inversePatch, actionContext) {
        if (recordingDisabled) {
          return false;
        } // only record patches that were generated by this action or children of this action


        return !!actionContext && Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["isActionContextThisOrChildOf"])(actionContext, call.id);
      });
      recorder.resume();
      call.env = {
        recorder: recorder
      };
    },
    onFinish: function (call, error) {
      var recorder = call.env.recorder;
      call.env = undefined;
      recorder.stop();

      if (error === undefined) {
        if (groupRecorders.length > 0) {
          var groupRecorder = groupRecorders[groupRecorders.length - 1];
          groupRecorder.patches = groupRecorder.patches.concat(recorder.patches);
          groupRecorder.inversePatches = groupRecorder.inversePatches.concat(recorder.inversePatches);
        } else {
          self.addUndoState(recorder);
        }
      } else {
        recorder.undo();
      }
    }
  });

  var skipRecording = function (fn) {
    recordingDisabled++;

    try {
      return fn();
    } finally {
      recordingDisabled--;
    }
  };

  return {
    addUndoState: function (recorder) {
      this.withoutUndo(function () {
        if (recorder.patches.length === 0) {
          // skip recording if patches is empty
          return;
        }

        self.history.splice(self.undoIdx);
        self.history.push({
          patches: recorder.patches,
          inversePatches: recorder.inversePatches
        });
        var maxLength = Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["getEnv"])(self).maxHistoryLength || Infinity;
        self.history.splice(0, self.history.length - maxLength);
        self.undoIdx = self.history.length;
      });
    },
    afterCreate: function () {
      var selfRoot = Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["getRoot"])(self);
      targetStore = Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["getEnv"])(self).targetStore || selfRoot;

      if (targetStore === self) {
        throw new Error("UndoManager should be created as part of a tree, or with `targetStore` in it's environment");
      }

      Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["addDisposer"])(self, Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["addMiddleware"])(targetStore, undoRedoMiddleware, false));
    },
    undo: Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["decorate"])(atomic, function () {
      skipRecording(function () {
        if (!self.canUndo) {
          throw new Error("undo not possible, nothing to undo");
        }

        Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["applyPatch"])(Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["getRoot"])(targetStore), // n.b: reverse patches back to forth
        self.history[self.undoIdx - 1].inversePatches.slice().reverse());
        self.undoIdx--;
      });
    }),
    redo: Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["decorate"])(atomic, function () {
      skipRecording(function () {
        if (!self.canRedo) {
          throw new Error("redo not possible, nothing to redo");
        }

        Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["applyPatch"])(Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["getRoot"])(targetStore), self.history[self.undoIdx].patches);
        self.undoIdx++;
      });
    }),
    withoutUndo: function (fn) {
      return skipRecording(fn);
    },
    withoutUndoFlow: function (generatorFn) {
      return Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["flow"])(function __withoutUndoFlow__() {
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              recordingDisabled++;
              _a.label = 1;

            case 1:
              _a.trys.push([1,, 3, 4]);

              return [5
              /*yield**/
              , __values(generatorFn())];

            case 2:
              return [2
              /*return*/
              , _a.sent()];

            case 3:
              recordingDisabled--;
              return [7
              /*endfinally*/
              ];

            case 4:
              return [2
              /*return*/
              ];
          }
        });
      });
    },
    startGroup: function (fn) {
      if (groupRecorders.length >= 1) {
        throw new Error("a previous startGroup is still running, did you forget to call stopGroup?");
      }

      groupRecorders.push({
        patches: [],
        inversePatches: []
      });
      return fn();
    },
    stopGroup: function () {
      var groupRecorder = groupRecorders.pop();

      if (!groupRecorder) {
        throw new Error("each call to stopGroup requires a previous call to startGroup, did you forget to call startGroup?");
      }

      this.addUndoState(groupRecorder);
    },
    clear: Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["decorate"])(atomic, function () {
      skipRecording(function () {
        self.history.clear();
        self.undoIdx = 0;
      });
    }),
    clearUndo: Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["decorate"])(atomic, function () {
      skipRecording(function () {
        self.history.splice(0, self.undoLevels);
        self.undoIdx = 0;
      });
    }),
    clearRedo: Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["decorate"])(atomic, function () {
      skipRecording(function () {
        self.history.splice(self.undoIdx, self.redoLevels);
      });
    })
  };
});


/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

/***/ }),

/***/ "./node_modules/querystring-es3/decode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/decode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
 // If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function (qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);
  var maxKeys = 1000;

  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length; // maxKeys <= 0 means that we should not limit keys count

  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr,
        vstr,
        k,
        v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

/***/ }),

/***/ "./node_modules/querystring-es3/encode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/encode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


var stringifyPrimitive = function (v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function (obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';

  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function (k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;

      if (isArray(obj[k])) {
        return map(obj[k], function (v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);
  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map(xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];

  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }

  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }

  return res;
};

/***/ }),

/***/ "./node_modules/querystring-es3/index.js":
/*!***********************************************!*\
  !*** ./node_modules/querystring-es3/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(/*! ./decode */ "./node_modules/querystring-es3/decode.js");
exports.encode = exports.stringify = __webpack_require__(/*! ./encode */ "./node_modules/querystring-es3/encode.js");

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var runtime = function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.

  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.

    generator._invoke = makeInvokeMethod(innerFn, self, context);
    return generator;
  }

  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.

  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.


  var IteratorPrototype = {};

  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      prototype[method] = function (arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
    // do is to check its .name property.
    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  exports.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;

      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }

    genFun.prototype = Object.create(Gp);
    return genFun;
  }; // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.


  exports.awrap = function (arg) {
    return {
      __await: arg
    };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;

        if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function (unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function (error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = // If enqueue has been called before, then we want to wait until
      // all previous Promises have been resolved before calling invoke,
      // so that results are always delivered in the correct order. If
      // enqueue has not been called before, then it is important to
      // call invoke immediately, without waiting on a callback to fire,
      // so that the async generator function has the opportunity to do
      // any necessary setup in a predictable way. This predictability
      // is why the Promise constructor synchronously invokes its
      // executor callback, and why async functions synchronously
      // execute code before the first await. Since we implement simple
      // async functions in terms of async generators, it is especially
      // important to get this right, even though it requires care.
      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
      // invocations of the iterator.
      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    } // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).


    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };

  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.

  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
    : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;
    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        } // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;

        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);

          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;
        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);
        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;
        var record = tryCatch(innerFn, self, context);

        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };
        } else if (record.type === "throw") {
          state = GenStateCompleted; // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.

          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  } // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.


  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (!info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

      context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.

      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }
    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    } // The delegate iterator is finished, so forget it and continue with
    // the outer generator.


    context.delegate = null;
    return ContinueSentinel;
  } // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.


  defineIteratorMethods(Gp);
  Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.

  Gp[iteratorSymbol] = function () {
    return this;
  };

  Gp.toString = function () {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{
      tryLoc: "root"
    }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    keys.reverse(); // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.

    return function next() {
      while (keys.length) {
        var key = keys.pop();

        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      } // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.


      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];

      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;
          return next;
        };

        return next.next = next;
      }
    } // Return an iterator with no values.


    return {
      next: doneResult
    };
  }

  exports.values = values;

  function doneResult() {
    return {
      value: undefined,
      done: true
    };
  }

  Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      this.prev = 0;
      this.next = 0; // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.

      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;
      this.method = "next";
      this.arg = undefined;
      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },
    stop: function () {
      this.done = true;
      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;

      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;

      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },
    complete: function (record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },
    "catch": function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      } // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.


      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  }; // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.

  return exports;
}( // If this script is executing as a CommonJS module, use module.exports
// as the regeneratorRuntime namespace. Otherwise create a new empty
// object. Either way, the resulting object will be used to initialize
// the regeneratorRuntime variable at the top of this file.
 true ? module.exports : undefined);

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}

/***/ }),

/***/ "./node_modules/remotedev/lib/constants.js":
/*!*************************************************!*\
  !*** ./node_modules/remotedev/lib/constants.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var defaultSocketOptions = exports.defaultSocketOptions = {
  secure: true,
  hostname: 'remotedev.io',
  port: 443,
  autoReconnect: true,
  autoReconnectOptions: {
    randomness: 60000
  }
};

/***/ }),

/***/ "./node_modules/remotedev/lib/devTools.js":
/*!************************************************!*\
  !*** ./node_modules/remotedev/lib/devTools.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.send = undefined;
exports.extractState = extractState;
exports.generateId = generateId;
exports.start = start;
exports.connect = connect;
exports.connectViaExtension = connectViaExtension;

var _jsan = __webpack_require__(/*! jsan */ "./node_modules/jsan/index.js");

var _socketclusterClient = __webpack_require__(/*! socketcluster-client */ "./node_modules/socketcluster-client/index.js");

var _socketclusterClient2 = _interopRequireDefault(_socketclusterClient);

var _rnHostDetect = __webpack_require__(/*! rn-host-detect */ "./node_modules/rn-host-detect/index.js");

var _rnHostDetect2 = _interopRequireDefault(_rnHostDetect);

var _constants = __webpack_require__(/*! ./constants */ "./node_modules/remotedev/lib/constants.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var socket = undefined;
var channel = undefined;
var listeners = {};

function extractState(message) {
  if (!message || !message.state) return undefined;
  if (typeof message.state === 'string') return (0, _jsan.parse)(message.state);
  return message.state;
}

function generateId() {
  return Math.random().toString(36).substr(2);
}

function handleMessages(message) {
  if (!message.payload) message.payload = message.action;
  Object.keys(listeners).forEach(function (id) {
    if (message.instanceId && id !== message.instanceId) return;
    if (typeof listeners[id] === 'function') listeners[id](message);else listeners[id].forEach(function (fn) {
      fn(message);
    });
  });
}

function watch() {
  if (channel) return;
  socket.emit('login', 'master', function (err, channelName) {
    if (err) {
      console.log(err);
      return;
    }

    channel = socket.subscribe(channelName);
    channel.watch(handleMessages);
    socket.on(channelName, handleMessages);
  });
}

function connectToServer(options) {
  if (socket) return;
  var socketOptions = undefined;

  if (options.port) {
    socketOptions = {
      port: options.port,
      hostname: (0, _rnHostDetect2.default)(options.hostname || 'localhost'),
      secure: !!options.secure
    };
  } else socketOptions = _constants.defaultSocketOptions;

  socket = _socketclusterClient2.default.create(socketOptions);
  watch();
}

function start(options) {
  if (options) {
    if (options.port && !options.hostname) {
      options.hostname = 'localhost';
    }
  }

  connectToServer(options);
}

function transformAction(action, config) {
  if (action.action) return action;
  var liftedAction = {
    timestamp: Date.now()
  };

  if (action) {
    if (config.getActionType) liftedAction.action = config.getActionType(action);else {
      if (typeof action === 'string') liftedAction.action = {
        type: action
      };else if (!action.type) liftedAction.action = {
        type: 'update'
      };else liftedAction.action = action;
    }
  } else {
    liftedAction.action = {
      type: action
    };
  }

  return liftedAction;
}

function _send(action, state, options, type, instanceId) {
  start(options);
  setTimeout(function () {
    var message = {
      payload: state ? (0, _jsan.stringify)(state) : '',
      action: type === 'ACTION' ? (0, _jsan.stringify)(transformAction(action, options)) : action,
      type: type || 'ACTION',
      id: socket.id,
      instanceId: instanceId,
      name: options.name
    };
    socket.emit(socket.id ? 'log' : 'log-noid', message);
  }, 0);
}

exports.send = _send;

function connect() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var id = generateId(options.instanceId);
  start(options);
  return {
    init: function init(state, action) {
      _send(action || {}, state, options, 'INIT', id);
    },
    subscribe: function subscribe(listener) {
      if (!listener) return undefined;
      if (!listeners[id]) listeners[id] = [];
      listeners[id].push(listener);
      return function unsubscribe() {
        var index = listeners[id].indexOf(listener);
        listeners[id].splice(index, 1);
      };
    },
    unsubscribe: function unsubscribe() {
      delete listeners[id];
    },
    send: function send(action, payload) {
      if (action) {
        _send(action, payload, options, 'ACTION', id);
      } else {
        _send(undefined, payload, options, 'STATE', id);
      }
    },
    error: function error(payload) {
      socket.emit({
        type: 'ERROR',
        payload: payload,
        id: socket.id,
        instanceId: id
      });
    }
  };
}

function connectViaExtension(options) {
  if (options && options.remote || typeof window === 'undefined' || !window.__REDUX_DEVTOOLS_EXTENSION__) {
    return connect(options);
  }

  return window.__REDUX_DEVTOOLS_EXTENSION__.connect(options);
}

exports.default = {
  connect: connect,
  connectViaExtension: connectViaExtension,
  send: _send,
  extractState: extractState,
  generateId: generateId
};

/***/ }),

/***/ "./node_modules/remotedev/lib/index.js":
/*!*********************************************!*\
  !*** ./node_modules/remotedev/lib/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(/*! ./devTools */ "./node_modules/remotedev/lib/devTools.js");

/***/ }),

/***/ "./node_modules/rn-host-detect/index.js":
/*!**********************************************!*\
  !*** ./node_modules/rn-host-detect/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * It only for Debug Remotely mode for Android
 * When __DEV__ === false, we can't use window.require('NativeModules')
 */

function getByRemoteConfig(hostname) {
  var remoteModuleConfig = typeof window !== 'undefined' && window.__fbBatchedBridgeConfig && window.__fbBatchedBridgeConfig.remoteModuleConfig;
  if (!Array.isArray(remoteModuleConfig) || hostname !== 'localhost' && hostname !== '127.0.0.1') return {
    hostname: hostname,
    passed: false
  };
  var result = hostname;
  var passed = false;
  remoteModuleConfig.some(function (config) {
    if (!config) return false;
    var name = config[0];
    var content = config[1];

    if ((name === 'AndroidConstants' || name === 'PlatformConstants') && content && content.ServerHost) {
      result = content.ServerHost.split(':')[0];
      passed = true;
      return true;
    }

    if (name === 'SourceCode' && content && content.scriptURL) {
      result = content.scriptURL.replace(/https?:\/\//, '').split(':')[0];
      passed = true;
      return true;
    }

    return false;
  });
  return {
    hostname: result,
    passed: passed
  };
}

function getByRNRequirePolyfill(hostname) {
  var originalWarn = console.warn;
  var NativeModules;
  var Constants;
  var SourceCode;

  if (typeof window === 'undefined' || !window.__DEV__ || typeof window.require !== 'function' || // RN >= 0.56
  // TODO: Get NativeModules for RN >= 0.56
  window.require.name === 'metroRequire') {
    return hostname;
  }

  console.warn = function () {
    if (arguments[0] && typeof arguments[0].indexOf == 'function' && arguments[0].indexOf("Requiring module 'NativeModules' by name") > -1) return;
    return originalWarn.apply(console, arguments);
  };

  try {
    NativeModules = window.require('NativeModules');
  } catch (e) {}

  console.warn = originalWarn;
  if (!NativeModules) return hostname;
  Constants = NativeModules.PlatformConstants || NativeModules.AndroidConstants;
  SourceCode = NativeModules.SourceCode;

  if (Constants && Constants.ServerHost) {
    return Constants.ServerHost.split(':')[0];
  } else if (SourceCode && SourceCode.scriptURL) {
    return SourceCode.scriptURL.replace(/https?:\/\//, '').split(':')[0];
  }

  return hostname;
}
/*
 * Get React Native server IP if hostname is `localhost`
 * On Android emulator, the IP of host is `10.0.2.2` (Genymotion: 10.0.3.2)
 */


module.exports = function (hostname) {
  // Check if it in React Native environment
  if (typeof __fbBatchedBridgeConfig !== 'object' || hostname !== 'localhost' && hostname !== '127.0.0.1') {
    return hostname;
  }

  var result = getByRemoteConfig(hostname); // Leave if get hostname by remote config successful

  if (result.passed) {
    return result.hostname;
  } // Otherwise, use RN's require polyfill


  return getByRNRequirePolyfill(hostname);
};

/***/ }),

/***/ "./node_modules/sc-channel/index.js":
/*!******************************************!*\
  !*** ./node_modules/sc-channel/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Emitter = __webpack_require__(/*! component-emitter */ "./node_modules/sc-channel/node_modules/component-emitter/index.js");

var SCChannel = function (name, client, options) {
  var self = this;
  Emitter.call(this);
  this.PENDING = 'pending';
  this.SUBSCRIBED = 'subscribed';
  this.UNSUBSCRIBED = 'unsubscribed';
  this.name = name;
  this.state = this.UNSUBSCRIBED;
  this.client = client;
  this.options = options || {};
  this.setOptions(this.options);
};

SCChannel.prototype = Object.create(Emitter.prototype);

SCChannel.prototype.setOptions = function (options) {
  if (!options) {
    options = {};
  }

  this.waitForAuth = options.waitForAuth || false;
  this.batch = options.batch || false;

  if (options.data !== undefined) {
    this.data = options.data;
  }
};

SCChannel.prototype.getState = function () {
  return this.state;
};

SCChannel.prototype.subscribe = function (options) {
  this.client.subscribe(this.name, options);
};

SCChannel.prototype.unsubscribe = function () {
  this.client.unsubscribe(this.name);
};

SCChannel.prototype.isSubscribed = function (includePending) {
  return this.client.isSubscribed(this.name, includePending);
};

SCChannel.prototype.publish = function (data, callback) {
  this.client.publish(this.name, data, callback);
};

SCChannel.prototype.watch = function (handler) {
  this.client.watch(this.name, handler);
};

SCChannel.prototype.unwatch = function (handler) {
  this.client.unwatch(this.name, handler);
};

SCChannel.prototype.watchers = function () {
  return this.client.watchers(this.name);
};

SCChannel.prototype.destroy = function () {
  this.client.destroyChannel(this.name);
};

module.exports.SCChannel = SCChannel;

/***/ }),

/***/ "./node_modules/sc-channel/node_modules/component-emitter/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/sc-channel/node_modules/component-emitter/index.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Expose `Emitter`.
 */
if (true) {
  module.exports = Emitter;
}
/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */


function Emitter(obj) {
  if (obj) return mixin(obj);
}

;
/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }

  return obj;
}
/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */


Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
  return this;
};
/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */


Emitter.prototype.once = function (event, fn) {
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};
/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */


Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
  this._callbacks = this._callbacks || {}; // all

  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  } // specific event


  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this; // remove all handlers

  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  } // remove specific handler


  var cb;

  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];

    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }

  return this;
};
/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */


Emitter.prototype.emit = function (event) {
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1),
      callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);

    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};
/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */


Emitter.prototype.listeners = function (event) {
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};
/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */


Emitter.prototype.hasListeners = function (event) {
  return !!this.listeners(event).length;
};

/***/ }),

/***/ "./node_modules/sc-errors/decycle.js":
/*!*******************************************!*\
  !*** ./node_modules/sc-errors/decycle.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Based on https://github.com/dscape/cycle/blob/master/cycle.js
module.exports = function decycle(object) {
  // Make a deep copy of an object or array, assuring that there is at most
  // one instance of each object or array in the resulting structure. The
  // duplicate references (which might be forming cycles) are replaced with
  // an object of the form
  //      {$ref: PATH}
  // where the PATH is a JSONPath string that locates the first occurance.
  // So,
  //      var a = [];
  //      a[0] = a;
  //      return JSON.stringify(JSON.decycle(a));
  // produces the string '[{"$ref":"$"}]'.
  // JSONPath is used to locate the unique object. $ indicates the top level of
  // the object or array. [NUMBER] or [STRING] indicates a child member or
  // property.
  var objects = [],
      // Keep a reference to each unique object or array
  paths = []; // Keep the path to each unique object or array

  return function derez(value, path) {
    // The derez recurses through the object, producing the deep copy.
    var i, // The loop counter
    name, // Property name
    nu; // The new object or array
    // typeof null === 'object', so go on if this value is really an object but not
    // one of the weird builtin objects.

    if (typeof value === 'object' && value !== null && !(value instanceof Boolean) && !(value instanceof Date) && !(value instanceof Number) && !(value instanceof RegExp) && !(value instanceof String)) {
      // If the value is an object or array, look to see if we have already
      // encountered it. If so, return a $ref/path object. This is a hard way,
      // linear search that will get slower as the number of unique objects grows.
      for (i = 0; i < objects.length; i += 1) {
        if (objects[i] === value) {
          return {
            $ref: paths[i]
          };
        }
      } // Otherwise, accumulate the unique value and its path.


      objects.push(value);
      paths.push(path); // If it is an array, replicate the array.

      if (Object.prototype.toString.apply(value) === '[object Array]') {
        nu = [];

        for (i = 0; i < value.length; i += 1) {
          nu[i] = derez(value[i], path + '[' + i + ']');
        }
      } else {
        // If it is an object, replicate the object.
        nu = {};

        for (name in value) {
          if (Object.prototype.hasOwnProperty.call(value, name)) {
            nu[name] = derez(value[name], path + '[' + JSON.stringify(name) + ']');
          }
        }
      }

      return nu;
    }

    return value;
  }(object, '$');
};

/***/ }),

/***/ "./node_modules/sc-errors/index.js":
/*!*****************************************!*\
  !*** ./node_modules/sc-errors/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var decycle = __webpack_require__(/*! ./decycle */ "./node_modules/sc-errors/decycle.js");

var isStrict = function () {
  return !this;
}();

function AuthTokenExpiredError(message, expiry) {
  this.name = 'AuthTokenExpiredError';
  this.message = message;
  this.expiry = expiry;

  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = new Error().stack;
  }
}

AuthTokenExpiredError.prototype = Object.create(Error.prototype);

function AuthTokenInvalidError(message) {
  this.name = 'AuthTokenInvalidError';
  this.message = message;

  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = new Error().stack;
  }
}

AuthTokenInvalidError.prototype = Object.create(Error.prototype);

function AuthTokenNotBeforeError(message, date) {
  this.name = 'AuthTokenNotBeforeError';
  this.message = message;
  this.date = date;

  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = new Error().stack;
  }
}

AuthTokenNotBeforeError.prototype = Object.create(Error.prototype); // For any other auth token error.

function AuthTokenError(message) {
  this.name = 'AuthTokenError';
  this.message = message;

  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = new Error().stack;
  }
}

AuthTokenError.prototype = Object.create(Error.prototype);

function SilentMiddlewareBlockedError(message, type) {
  this.name = 'SilentMiddlewareBlockedError';
  this.message = message;
  this.type = type;

  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = new Error().stack;
  }
}

SilentMiddlewareBlockedError.prototype = Object.create(Error.prototype);

function InvalidActionError(message) {
  this.name = 'InvalidActionError';
  this.message = message;

  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = new Error().stack;
  }
}

InvalidActionError.prototype = Object.create(Error.prototype);

function InvalidArgumentsError(message) {
  this.name = 'InvalidArgumentsError';
  this.message = message;

  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = new Error().stack;
  }
}

InvalidArgumentsError.prototype = Object.create(Error.prototype);

function InvalidOptionsError(message) {
  this.name = 'InvalidOptionsError';
  this.message = message;

  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = new Error().stack;
  }
}

InvalidOptionsError.prototype = Object.create(Error.prototype);

function InvalidMessageError(message) {
  this.name = 'InvalidMessageError';
  this.message = message;

  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = new Error().stack;
  }
}

InvalidMessageError.prototype = Object.create(Error.prototype);

function SocketProtocolError(message, code) {
  this.name = 'SocketProtocolError';
  this.message = message;
  this.code = code;

  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = new Error().stack;
  }
}

SocketProtocolError.prototype = Object.create(Error.prototype);

function ServerProtocolError(message) {
  this.name = 'ServerProtocolError';
  this.message = message;

  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = new Error().stack;
  }
}

ServerProtocolError.prototype = Object.create(Error.prototype);

function HTTPServerError(message) {
  this.name = 'HTTPServerError';
  this.message = message;

  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = new Error().stack;
  }
}

HTTPServerError.prototype = Object.create(Error.prototype);

function ResourceLimitError(message) {
  this.name = 'ResourceLimitError';
  this.message = message;

  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = new Error().stack;
  }
}

ResourceLimitError.prototype = Object.create(Error.prototype);

function TimeoutError(message) {
  this.name = 'TimeoutError';
  this.message = message;

  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = new Error().stack;
  }
}

TimeoutError.prototype = Object.create(Error.prototype);

function BadConnectionError(message, type) {
  this.name = 'BadConnectionError';
  this.message = message;
  this.type = type;

  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = new Error().stack;
  }
}

BadConnectionError.prototype = Object.create(Error.prototype);

function BrokerError(message) {
  this.name = 'BrokerError';
  this.message = message;

  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = new Error().stack;
  }
}

BrokerError.prototype = Object.create(Error.prototype);

function ProcessExitError(message, code) {
  this.name = 'ProcessExitError';
  this.message = message;
  this.code = code;

  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = new Error().stack;
  }
}

ProcessExitError.prototype = Object.create(Error.prototype);

function UnknownError(message) {
  this.name = 'UnknownError';
  this.message = message;

  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = new Error().stack;
  }
}

UnknownError.prototype = Object.create(Error.prototype); // Expose all error types.

module.exports = {
  AuthTokenExpiredError: AuthTokenExpiredError,
  AuthTokenInvalidError: AuthTokenInvalidError,
  AuthTokenNotBeforeError: AuthTokenNotBeforeError,
  AuthTokenError: AuthTokenError,
  SilentMiddlewareBlockedError: SilentMiddlewareBlockedError,
  InvalidActionError: InvalidActionError,
  InvalidArgumentsError: InvalidArgumentsError,
  InvalidOptionsError: InvalidOptionsError,
  InvalidMessageError: InvalidMessageError,
  SocketProtocolError: SocketProtocolError,
  ServerProtocolError: ServerProtocolError,
  HTTPServerError: HTTPServerError,
  ResourceLimitError: ResourceLimitError,
  TimeoutError: TimeoutError,
  BadConnectionError: BadConnectionError,
  BrokerError: BrokerError,
  ProcessExitError: ProcessExitError,
  UnknownError: UnknownError
};
module.exports.socketProtocolErrorStatuses = {
  1001: 'Socket was disconnected',
  1002: 'A WebSocket protocol error was encountered',
  1003: 'Server terminated socket because it received invalid data',
  1005: 'Socket closed without status code',
  1006: 'Socket hung up',
  1007: 'Message format was incorrect',
  1008: 'Encountered a policy violation',
  1009: 'Message was too big to process',
  1010: 'Client ended the connection because the server did not comply with extension requirements',
  1011: 'Server encountered an unexpected fatal condition',
  4000: 'Server ping timed out',
  4001: 'Client pong timed out',
  4002: 'Server failed to sign auth token',
  4003: 'Failed to complete handshake',
  4004: 'Client failed to save auth token',
  4005: 'Did not receive #handshake from client before timeout',
  4006: 'Failed to bind socket to message broker',
  4007: 'Client connection establishment timed out',
  4008: 'Server rejected handshake from client'
};
module.exports.socketProtocolIgnoreStatuses = {
  1000: 'Socket closed normally',
  1001: 'Socket hung up'
}; // Properties related to error domains cannot be serialized.

var unserializableErrorProperties = {
  domain: 1,
  domainEmitter: 1,
  domainThrown: 1
}; // Convert an error into a JSON-compatible type which can later be hydrated
// back to its *original* form.

module.exports.dehydrateError = function dehydrateError(error, includeStackTrace) {
  var dehydratedError;

  if (error && typeof error === 'object') {
    dehydratedError = {
      message: error.message
    };

    if (includeStackTrace) {
      dehydratedError.stack = error.stack;
    }

    for (var i in error) {
      if (!unserializableErrorProperties[i]) {
        dehydratedError[i] = error[i];
      }
    }
  } else if (typeof error === 'function') {
    dehydratedError = '[function ' + (error.name || 'anonymous') + ']';
  } else {
    dehydratedError = error;
  }

  return decycle(dehydratedError);
}; // Convert a dehydrated error back to its *original* form.


module.exports.hydrateError = function hydrateError(error) {
  var hydratedError = null;

  if (error != null) {
    if (typeof error === 'object') {
      hydratedError = new Error(error.message);

      for (var i in error) {
        if (error.hasOwnProperty(i)) {
          hydratedError[i] = error[i];
        }
      }
    } else {
      hydratedError = error;
    }
  }

  return hydratedError;
};

module.exports.decycle = decycle;

/***/ }),

/***/ "./node_modules/sc-formatter/index.js":
/*!********************************************!*\
  !*** ./node_modules/sc-formatter/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var validJSONStartRegex = /^[ \n\r\t]*[{\[]/;

var arrayBufferToBase64 = function (arraybuffer) {
  var bytes = new Uint8Array(arraybuffer);
  var len = bytes.length;
  var base64 = '';

  for (var i = 0; i < len; i += 3) {
    base64 += base64Chars[bytes[i] >> 2];
    base64 += base64Chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
    base64 += base64Chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
    base64 += base64Chars[bytes[i + 2] & 63];
  }

  if (len % 3 === 2) {
    base64 = base64.substring(0, base64.length - 1) + '=';
  } else if (len % 3 === 1) {
    base64 = base64.substring(0, base64.length - 2) + '==';
  }

  return base64;
};

var binaryToBase64Replacer = function (key, value) {
  if (global.ArrayBuffer && value instanceof global.ArrayBuffer) {
    return {
      base64: true,
      data: arrayBufferToBase64(value)
    };
  } else if (global.Buffer) {
    if (value instanceof global.Buffer) {
      return {
        base64: true,
        data: value.toString('base64')
      };
    } // Some versions of Node.js convert Buffers to Objects before they are passed to
    // the replacer function - Because of this, we need to rehydrate Buffers
    // before we can convert them to base64 strings.


    if (value && value.type === 'Buffer' && Array.isArray(value.data)) {
      var rehydratedBuffer;

      if (global.Buffer.from) {
        rehydratedBuffer = global.Buffer.from(value.data);
      } else {
        rehydratedBuffer = new global.Buffer(value.data);
      }

      return {
        base64: true,
        data: rehydratedBuffer.toString('base64')
      };
    }
  }

  return value;
}; // Decode the data which was transmitted over the wire to a JavaScript Object in a format which SC understands.
// See encode function below for more details.


module.exports.decode = function (input) {
  if (input == null) {
    return null;
  } // Leave ping or pong message as is


  if (input === '#1' || input === '#2') {
    return input;
  }

  var message = input.toString(); // Performance optimization to detect invalid JSON packet sooner.

  if (!validJSONStartRegex.test(message)) {
    return message;
  }

  try {
    return JSON.parse(message);
  } catch (err) {}

  return message;
}; // Encode a raw JavaScript object (which is in the SC protocol format) into a format for
// transfering it over the wire. In this case, we just convert it into a simple JSON string.
// If you want to create your own custom codec, you can encode the object into any format
// (e.g. binary ArrayBuffer or string with any kind of compression) so long as your decode
// function is able to rehydrate that object back into its original JavaScript Object format
// (which adheres to the SC protocol).
// See https://github.com/SocketCluster/socketcluster/blob/master/socketcluster-protocol.md
// for details about the SC protocol.


module.exports.encode = function (object) {
  // Leave ping or pong message as is
  if (object === '#1' || object === '#2') {
    return object;
  }

  return JSON.stringify(object, binaryToBase64Replacer);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
  "use strict";

  if (global.setImmediate) {
    return;
  }

  var nextHandle = 1; // Spec says greater than zero

  var tasksByHandle = {};
  var currentlyRunningATask = false;
  var doc = global.document;
  var registerImmediate;

  function setImmediate(callback) {
    // Callback can either be a function or a string
    if (typeof callback !== "function") {
      callback = new Function("" + callback);
    } // Copy function arguments


    var args = new Array(arguments.length - 1);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i + 1];
    } // Store and register the task


    var task = {
      callback: callback,
      args: args
    };
    tasksByHandle[nextHandle] = task;
    registerImmediate(nextHandle);
    return nextHandle++;
  }

  function clearImmediate(handle) {
    delete tasksByHandle[handle];
  }

  function run(task) {
    var callback = task.callback;
    var args = task.args;

    switch (args.length) {
      case 0:
        callback();
        break;

      case 1:
        callback(args[0]);
        break;

      case 2:
        callback(args[0], args[1]);
        break;

      case 3:
        callback(args[0], args[1], args[2]);
        break;

      default:
        callback.apply(undefined, args);
        break;
    }
  }

  function runIfPresent(handle) {
    // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
    // So if we're currently running a task, we'll need to delay this invocation.
    if (currentlyRunningATask) {
      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
      // "too much recursion" error.
      setTimeout(runIfPresent, 0, handle);
    } else {
      var task = tasksByHandle[handle];

      if (task) {
        currentlyRunningATask = true;

        try {
          run(task);
        } finally {
          clearImmediate(handle);
          currentlyRunningATask = false;
        }
      }
    }
  }

  function installNextTickImplementation() {
    registerImmediate = function (handle) {
      process.nextTick(function () {
        runIfPresent(handle);
      });
    };
  }

  function canUsePostMessage() {
    // The test against `importScripts` prevents this implementation from being installed inside a web worker,
    // where `global.postMessage` means something completely different and can't be used for this purpose.
    if (global.postMessage && !global.importScripts) {
      var postMessageIsAsynchronous = true;
      var oldOnMessage = global.onmessage;

      global.onmessage = function () {
        postMessageIsAsynchronous = false;
      };

      global.postMessage("", "*");
      global.onmessage = oldOnMessage;
      return postMessageIsAsynchronous;
    }
  }

  function installPostMessageImplementation() {
    // Installs an event handler on `global` for the `message` event: see
    // * https://developer.mozilla.org/en/DOM/window.postMessage
    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
    var messagePrefix = "setImmediate$" + Math.random() + "$";

    var onGlobalMessage = function (event) {
      if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
        runIfPresent(+event.data.slice(messagePrefix.length));
      }
    };

    if (global.addEventListener) {
      global.addEventListener("message", onGlobalMessage, false);
    } else {
      global.attachEvent("onmessage", onGlobalMessage);
    }

    registerImmediate = function (handle) {
      global.postMessage(messagePrefix + handle, "*");
    };
  }

  function installMessageChannelImplementation() {
    var channel = new MessageChannel();

    channel.port1.onmessage = function (event) {
      var handle = event.data;
      runIfPresent(handle);
    };

    registerImmediate = function (handle) {
      channel.port2.postMessage(handle);
    };
  }

  function installReadyStateChangeImplementation() {
    var html = doc.documentElement;

    registerImmediate = function (handle) {
      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
      var script = doc.createElement("script");

      script.onreadystatechange = function () {
        runIfPresent(handle);
        script.onreadystatechange = null;
        html.removeChild(script);
        script = null;
      };

      html.appendChild(script);
    };
  }

  function installSetTimeoutImplementation() {
    registerImmediate = function (handle) {
      setTimeout(runIfPresent, 0, handle);
    };
  } // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.


  var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
  attachTo = attachTo && attachTo.setTimeout ? attachTo : global; // Don't get fooled by e.g. browserify environments.

  if ({}.toString.call(global.process) === "[object process]") {
    // For Node.js before 0.9
    installNextTickImplementation();
  } else if (canUsePostMessage()) {
    // For non-IE10 modern browsers
    installPostMessageImplementation();
  } else if (global.MessageChannel) {
    // For web workers, where supported
    installMessageChannelImplementation();
  } else if (doc && "onreadystatechange" in doc.createElement("script")) {
    // For IE 6–8
    installReadyStateChangeImplementation();
  } else {
    // For older browsers
    installSetTimeoutImplementation();
  }

  attachTo.setImmediate = setImmediate;
  attachTo.clearImmediate = clearImmediate;
})(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/socketcluster-client/index.js":
/*!****************************************************!*\
  !*** ./node_modules/socketcluster-client/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var SCClientSocket = __webpack_require__(/*! ./lib/scclientsocket */ "./node_modules/socketcluster-client/lib/scclientsocket.js");

var factory = __webpack_require__(/*! ./lib/factory */ "./node_modules/socketcluster-client/lib/factory.js");

module.exports.factory = factory;
module.exports.SCClientSocket = SCClientSocket;
module.exports.Emitter = __webpack_require__(/*! component-emitter */ "./node_modules/socketcluster-client/node_modules/component-emitter/index.js");

module.exports.create = function (options) {
  return factory.create(options);
};

module.exports.connect = module.exports.create;

module.exports.destroy = function (socket) {
  return factory.destroy(socket);
};

module.exports.clients = factory.clients;
module.exports.version = '13.0.1';

/***/ }),

/***/ "./node_modules/socketcluster-client/lib/auth.js":
/*!*******************************************************!*\
  !*** ./node_modules/socketcluster-client/lib/auth.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var AuthEngine = function () {
  this._internalStorage = {};
  this.isLocalStorageEnabled = this._checkLocalStorageEnabled();
};

AuthEngine.prototype._checkLocalStorageEnabled = function () {
  var err;

  try {
    // Some browsers will throw an error here if localStorage is disabled.
    global.localStorage; // Safari, in Private Browsing Mode, looks like it supports localStorage but all calls to setItem
    // throw QuotaExceededError. We're going to detect this and avoid hard to debug edge cases.

    global.localStorage.setItem('__scLocalStorageTest', 1);
    global.localStorage.removeItem('__scLocalStorageTest');
  } catch (e) {
    err = e;
  }

  return !err;
};

AuthEngine.prototype.saveToken = function (name, token, options, callback) {
  if (this.isLocalStorageEnabled && global.localStorage) {
    global.localStorage.setItem(name, token);
  } else {
    this._internalStorage[name] = token;
  }

  callback && callback(null, token);
};

AuthEngine.prototype.removeToken = function (name, callback) {
  var token;
  this.loadToken(name, function (err, authToken) {
    token = authToken;
  });

  if (this.isLocalStorageEnabled && global.localStorage) {
    global.localStorage.removeItem(name);
  } else {
    delete this._internalStorage[name];
  }

  callback && callback(null, token);
};

AuthEngine.prototype.loadToken = function (name, callback) {
  var token;

  if (this.isLocalStorageEnabled && global.localStorage) {
    token = global.localStorage.getItem(name);
  } else {
    token = this._internalStorage[name] || null;
  }

  callback(null, token);
};

module.exports.AuthEngine = AuthEngine;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/socketcluster-client/lib/factory.js":
/*!**********************************************************!*\
  !*** ./node_modules/socketcluster-client/lib/factory.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var SCClientSocket = __webpack_require__(/*! ./scclientsocket */ "./node_modules/socketcluster-client/lib/scclientsocket.js");

var scErrors = __webpack_require__(/*! sc-errors */ "./node_modules/sc-errors/index.js");

var uuid = __webpack_require__(/*! uuid */ "./node_modules/socketcluster-client/node_modules/uuid/index.js");

var InvalidArgumentsError = scErrors.InvalidArgumentsError;
var _clients = {};

function getMultiplexId(options) {
  var protocolPrefix = options.secure ? 'https://' : 'http://';
  var queryString = '';

  if (options.query) {
    if (typeof options.query == 'string') {
      queryString = options.query;
    } else {
      var queryArray = [];
      var queryMap = options.query;

      for (var key in queryMap) {
        if (queryMap.hasOwnProperty(key)) {
          queryArray.push(key + '=' + queryMap[key]);
        }
      }

      if (queryArray.length) {
        queryString = '?' + queryArray.join('&');
      }
    }
  }

  var host;

  if (options.host) {
    host = options.host;
  } else {
    host = options.hostname + ':' + options.port;
  }

  return protocolPrefix + host + options.path + queryString;
}

function isUrlSecure() {
  return global.location && location.protocol == 'https:';
}

function getPort(options, isSecureDefault) {
  var isSecure = options.secure == null ? isSecureDefault : options.secure;
  return options.port || (global.location && location.port ? location.port : isSecure ? 443 : 80);
}

function create(options) {
  var self = this;
  options = options || {};

  if (options.host && !options.host.match(/[^:]+:\d{2,5}/)) {
    throw new InvalidArgumentsError('The host option should include both' + ' the hostname and the port number in the format "hostname:port"');
  }

  if (options.host && options.hostname) {
    throw new InvalidArgumentsError('The host option should already include' + ' the hostname and the port number in the format "hostname:port"' + ' - Because of this, you should never use host and hostname options together');
  }

  if (options.host && options.port) {
    throw new InvalidArgumentsError('The host option should already include' + ' the hostname and the port number in the format "hostname:port"' + ' - Because of this, you should never use host and port options together');
  }

  var isSecureDefault = isUrlSecure();
  var opts = {
    port: getPort(options, isSecureDefault),
    hostname: global.location && location.hostname || 'localhost',
    path: '/socketcluster/',
    secure: isSecureDefault,
    autoConnect: true,
    autoReconnect: true,
    autoSubscribeOnConnect: true,
    connectTimeout: 20000,
    ackTimeout: 10000,
    timestampRequests: false,
    timestampParam: 't',
    authEngine: null,
    authTokenName: 'socketCluster.authToken',
    binaryType: 'arraybuffer',
    multiplex: true,
    pubSubBatchDuration: null,
    cloneData: false
  };

  for (var i in options) {
    if (options.hasOwnProperty(i)) {
      opts[i] = options[i];
    }
  }

  opts.clientMap = _clients;

  if (opts.multiplex === false) {
    opts.clientId = uuid.v4();
    var socket = new SCClientSocket(opts);
    _clients[opts.clientId] = socket;
    return socket;
  }

  opts.clientId = getMultiplexId(opts);

  if (_clients[opts.clientId]) {
    if (opts.autoConnect) {
      _clients[opts.clientId].connect();
    }
  } else {
    _clients[opts.clientId] = new SCClientSocket(opts);
  }

  return _clients[opts.clientId];
}

function destroy(socket) {
  socket.destroy();
}

module.exports = {
  create: create,
  destroy: destroy,
  clients: _clients
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/socketcluster-client/lib/response.js":
/*!***********************************************************!*\
  !*** ./node_modules/socketcluster-client/lib/response.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var scErrors = __webpack_require__(/*! sc-errors */ "./node_modules/sc-errors/index.js");

var InvalidActionError = scErrors.InvalidActionError;

var Response = function (socket, id) {
  this.socket = socket;
  this.id = id;
  this.sent = false;
};

Response.prototype._respond = function (responseData) {
  if (this.sent) {
    throw new InvalidActionError('Response ' + this.id + ' has already been sent');
  } else {
    this.sent = true;
    this.socket.send(this.socket.encode(responseData));
  }
};

Response.prototype.end = function (data) {
  if (this.id) {
    var responseData = {
      rid: this.id
    };

    if (data !== undefined) {
      responseData.data = data;
    }

    this._respond(responseData);
  }
};

Response.prototype.error = function (error, data) {
  if (this.id) {
    var err = scErrors.dehydrateError(error);
    var responseData = {
      rid: this.id,
      error: err
    };

    if (data !== undefined) {
      responseData.data = data;
    }

    this._respond(responseData);
  }
};

Response.prototype.callback = function (error, data) {
  if (error) {
    this.error(error, data);
  } else {
    this.end(data);
  }
};

module.exports.Response = Response;

/***/ }),

/***/ "./node_modules/socketcluster-client/lib/scclientsocket.js":
/*!*****************************************************************!*\
  !*** ./node_modules/socketcluster-client/lib/scclientsocket.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, Buffer) {var Emitter = __webpack_require__(/*! component-emitter */ "./node_modules/socketcluster-client/node_modules/component-emitter/index.js");

var SCChannel = __webpack_require__(/*! sc-channel */ "./node_modules/sc-channel/index.js").SCChannel;

var Response = __webpack_require__(/*! ./response */ "./node_modules/socketcluster-client/lib/response.js").Response;

var AuthEngine = __webpack_require__(/*! ./auth */ "./node_modules/socketcluster-client/lib/auth.js").AuthEngine;

var formatter = __webpack_require__(/*! sc-formatter */ "./node_modules/sc-formatter/index.js");

var SCTransport = __webpack_require__(/*! ./sctransport */ "./node_modules/socketcluster-client/lib/sctransport.js").SCTransport;

var querystring = __webpack_require__(/*! querystring */ "./node_modules/querystring-es3/index.js");

var LinkedList = __webpack_require__(/*! linked-list */ "./node_modules/linked-list/index.js");

var base64 = __webpack_require__(/*! base-64 */ "./node_modules/base-64/base64.js");

var clone = __webpack_require__(/*! clone */ "./node_modules/clone/clone.js");

var scErrors = __webpack_require__(/*! sc-errors */ "./node_modules/sc-errors/index.js");

var InvalidArgumentsError = scErrors.InvalidArgumentsError;
var InvalidMessageError = scErrors.InvalidMessageError;
var InvalidActionError = scErrors.InvalidActionError;
var SocketProtocolError = scErrors.SocketProtocolError;
var TimeoutError = scErrors.TimeoutError;
var BadConnectionError = scErrors.BadConnectionError;
var isBrowser = typeof window != 'undefined';

var SCClientSocket = function (opts) {
  var self = this;
  Emitter.call(this);
  this.id = null;
  this.state = this.CLOSED;
  this.authState = this.UNAUTHENTICATED;
  this.signedAuthToken = null;
  this.authToken = null;
  this.pendingReconnect = false;
  this.pendingReconnectTimeout = null;
  this.preparingPendingSubscriptions = false;
  this.clientId = opts.clientId;
  this.connectTimeout = opts.connectTimeout;
  this.ackTimeout = opts.ackTimeout;
  this.channelPrefix = opts.channelPrefix || null;
  this.disconnectOnUnload = opts.disconnectOnUnload == null ? true : opts.disconnectOnUnload;
  this.authTokenName = opts.authTokenName; // pingTimeout will be ackTimeout at the start, but it will
  // be updated with values provided by the 'connect' event

  this.pingTimeout = this.ackTimeout;
  this.pingTimeoutDisabled = !!opts.pingTimeoutDisabled;
  this.active = true;
  this._clientMap = opts.clientMap || {};
  var maxTimeout = Math.pow(2, 31) - 1;

  var verifyDuration = function (propertyName) {
    if (self[propertyName] > maxTimeout) {
      throw new InvalidArgumentsError('The ' + propertyName + ' value provided exceeded the maximum amount allowed');
    }
  };

  verifyDuration('connectTimeout');
  verifyDuration('ackTimeout');
  this._localEvents = {
    'connect': 1,
    'connectAbort': 1,
    'close': 1,
    'disconnect': 1,
    'message': 1,
    'error': 1,
    'raw': 1,
    'kickOut': 1,
    'subscribe': 1,
    'unsubscribe': 1,
    'subscribeStateChange': 1,
    'authStateChange': 1,
    'authenticate': 1,
    'deauthenticate': 1,
    'removeAuthToken': 1,
    'subscribeRequest': 1
  };
  this.connectAttempts = 0;
  this._emitBuffer = new LinkedList();
  this.channels = {};
  this.options = opts;
  this._cid = 1;

  this.options.callIdGenerator = function () {
    return self._cid++;
  };

  if (this.options.autoReconnect) {
    if (this.options.autoReconnectOptions == null) {
      this.options.autoReconnectOptions = {};
    } // Add properties to the this.options.autoReconnectOptions object.
    // We assign the reference to a reconnectOptions variable to avoid repetition.


    var reconnectOptions = this.options.autoReconnectOptions;

    if (reconnectOptions.initialDelay == null) {
      reconnectOptions.initialDelay = 10000;
    }

    if (reconnectOptions.randomness == null) {
      reconnectOptions.randomness = 10000;
    }

    if (reconnectOptions.multiplier == null) {
      reconnectOptions.multiplier = 1.5;
    }

    if (reconnectOptions.maxDelay == null) {
      reconnectOptions.maxDelay = 60000;
    }
  }

  if (this.options.subscriptionRetryOptions == null) {
    this.options.subscriptionRetryOptions = {};
  }

  if (this.options.authEngine) {
    this.auth = this.options.authEngine;
  } else {
    this.auth = new AuthEngine();
  }

  if (this.options.codecEngine) {
    this.codec = this.options.codecEngine;
  } else {
    // Default codec engine
    this.codec = formatter;
  }

  this.options.path = this.options.path.replace(/\/$/, '') + '/';
  this.options.query = opts.query || {};

  if (typeof this.options.query == 'string') {
    this.options.query = querystring.parse(this.options.query);
  }

  this._channelEmitter = new Emitter();

  this._unloadHandler = function () {
    self.disconnect();
  };

  if (isBrowser && this.disconnectOnUnload && global.addEventListener) {
    global.addEventListener('beforeunload', this._unloadHandler, false);
  }

  this._clientMap[this.clientId] = this;

  if (this.options.autoConnect) {
    this.connect();
  }
};

SCClientSocket.prototype = Object.create(Emitter.prototype);
SCClientSocket.CONNECTING = SCClientSocket.prototype.CONNECTING = SCTransport.prototype.CONNECTING;
SCClientSocket.OPEN = SCClientSocket.prototype.OPEN = SCTransport.prototype.OPEN;
SCClientSocket.CLOSED = SCClientSocket.prototype.CLOSED = SCTransport.prototype.CLOSED;
SCClientSocket.AUTHENTICATED = SCClientSocket.prototype.AUTHENTICATED = 'authenticated';
SCClientSocket.UNAUTHENTICATED = SCClientSocket.prototype.UNAUTHENTICATED = 'unauthenticated';
SCClientSocket.PENDING = SCClientSocket.prototype.PENDING = 'pending';
SCClientSocket.ignoreStatuses = scErrors.socketProtocolIgnoreStatuses;
SCClientSocket.errorStatuses = scErrors.socketProtocolErrorStatuses;
SCClientSocket.prototype._privateEventHandlerMap = {
  '#publish': function (data) {
    var undecoratedChannelName = this._undecorateChannelName(data.channel);

    var isSubscribed = this.isSubscribed(undecoratedChannelName, true);

    if (isSubscribed) {
      this._channelEmitter.emit(undecoratedChannelName, data.data);
    }
  },
  '#kickOut': function (data) {
    var undecoratedChannelName = this._undecorateChannelName(data.channel);

    var channel = this.channels[undecoratedChannelName];

    if (channel) {
      Emitter.prototype.emit.call(this, 'kickOut', data.message, undecoratedChannelName);
      channel.emit('kickOut', data.message, undecoratedChannelName);

      this._triggerChannelUnsubscribe(channel);
    }
  },
  '#setAuthToken': function (data, response) {
    var self = this;

    if (data) {
      var triggerAuthenticate = function (err) {
        if (err) {
          // This is a non-fatal error, we don't want to close the connection
          // because of this but we do want to notify the server and throw an error
          // on the client.
          response.error(err);

          self._onSCError(err);
        } else {
          self._changeToAuthenticatedState(data.token);

          response.end();
        }
      };

      this.auth.saveToken(this.authTokenName, data.token, {}, triggerAuthenticate);
    } else {
      response.error(new InvalidMessageError('No token data provided by #setAuthToken event'));
    }
  },
  '#removeAuthToken': function (data, response) {
    var self = this;
    this.auth.removeToken(this.authTokenName, function (err, oldToken) {
      if (err) {
        // Non-fatal error - Do not close the connection
        response.error(err);

        self._onSCError(err);
      } else {
        Emitter.prototype.emit.call(self, 'removeAuthToken', oldToken);

        self._changeToUnauthenticatedStateAndClearTokens();

        response.end();
      }
    });
  },
  '#disconnect': function (data) {
    this.transport.close(data.code, data.data);
  }
};

SCClientSocket.prototype.getState = function () {
  return this.state;
};

SCClientSocket.prototype.getBytesReceived = function () {
  return this.transport.getBytesReceived();
};

SCClientSocket.prototype.deauthenticate = function (callback) {
  var self = this;
  this.auth.removeToken(this.authTokenName, function (err, oldToken) {
    if (err) {
      // Non-fatal error - Do not close the connection
      self._onSCError(err);
    } else {
      Emitter.prototype.emit.call(self, 'removeAuthToken', oldToken);

      if (self.state != self.CLOSED) {
        self.emit('#removeAuthToken');
      }

      self._changeToUnauthenticatedStateAndClearTokens();
    }

    callback && callback(err);
  });
};

SCClientSocket.prototype.connect = SCClientSocket.prototype.open = function () {
  var self = this;

  if (!this.active) {
    var error = new InvalidActionError('Cannot connect a destroyed client');

    this._onSCError(error);

    return;
  }

  if (this.state == this.CLOSED) {
    this.pendingReconnect = false;
    this.pendingReconnectTimeout = null;
    clearTimeout(this._reconnectTimeoutRef);
    this.state = this.CONNECTING;
    Emitter.prototype.emit.call(this, 'connecting');

    if (this.transport) {
      this.transport.off();
    }

    this.transport = new SCTransport(this.auth, this.codec, this.options);
    this.transport.on('open', function (status) {
      self.state = self.OPEN;

      self._onSCOpen(status);
    });
    this.transport.on('error', function (err) {
      self._onSCError(err);
    });
    this.transport.on('close', function (code, data) {
      self.state = self.CLOSED;

      self._onSCClose(code, data);
    });
    this.transport.on('openAbort', function (code, data) {
      self.state = self.CLOSED;

      self._onSCClose(code, data, true);
    });
    this.transport.on('event', function (event, data, res) {
      self._onSCEvent(event, data, res);
    });
  }
};

SCClientSocket.prototype.reconnect = function (code, data) {
  this.disconnect(code, data);
  this.connect();
};

SCClientSocket.prototype.disconnect = function (code, data) {
  code = code || 1000;

  if (typeof code != 'number') {
    throw new InvalidArgumentsError('If specified, the code argument must be a number');
  }

  if (this.state == this.OPEN || this.state == this.CONNECTING) {
    this.transport.close(code, data);
  } else {
    this.pendingReconnect = false;
    this.pendingReconnectTimeout = null;
    clearTimeout(this._reconnectTimeoutRef);
  }
};

SCClientSocket.prototype.destroy = function (code, data) {
  if (isBrowser && global.removeEventListener) {
    global.removeEventListener('beforeunload', this._unloadHandler, false);
  }

  this.active = false;
  this.disconnect(code, data);
  delete this._clientMap[this.clientId];
};

SCClientSocket.prototype._changeToUnauthenticatedStateAndClearTokens = function () {
  if (this.authState != this.UNAUTHENTICATED) {
    var oldState = this.authState;
    var oldSignedToken = this.signedAuthToken;
    this.authState = this.UNAUTHENTICATED;
    this.signedAuthToken = null;
    this.authToken = null;
    var stateChangeData = {
      oldState: oldState,
      newState: this.authState
    };
    Emitter.prototype.emit.call(this, 'authStateChange', stateChangeData);
    Emitter.prototype.emit.call(this, 'deauthenticate', oldSignedToken);
  }
};

SCClientSocket.prototype._changeToAuthenticatedState = function (signedAuthToken) {
  this.signedAuthToken = signedAuthToken;
  this.authToken = this._extractAuthTokenData(signedAuthToken);

  if (this.authState != this.AUTHENTICATED) {
    var oldState = this.authState;
    this.authState = this.AUTHENTICATED;
    var stateChangeData = {
      oldState: oldState,
      newState: this.authState,
      signedAuthToken: signedAuthToken,
      authToken: this.authToken
    };

    if (!this.preparingPendingSubscriptions) {
      this.processPendingSubscriptions();
    }

    Emitter.prototype.emit.call(this, 'authStateChange', stateChangeData);
  }

  Emitter.prototype.emit.call(this, 'authenticate', signedAuthToken);
};

SCClientSocket.prototype.decodeBase64 = function (encodedString) {
  var decodedString;

  if (typeof Buffer == 'undefined') {
    if (global.atob) {
      decodedString = global.atob(encodedString);
    } else {
      decodedString = base64.decode(encodedString);
    }
  } else {
    var buffer = new Buffer(encodedString, 'base64');
    decodedString = buffer.toString('utf8');
  }

  return decodedString;
};

SCClientSocket.prototype.encodeBase64 = function (decodedString) {
  var encodedString;

  if (typeof Buffer == 'undefined') {
    if (global.btoa) {
      encodedString = global.btoa(decodedString);
    } else {
      encodedString = base64.encode(decodedString);
    }
  } else {
    var buffer = new Buffer(decodedString, 'utf8');
    encodedString = buffer.toString('base64');
  }

  return encodedString;
};

SCClientSocket.prototype._extractAuthTokenData = function (signedAuthToken) {
  var tokenParts = (signedAuthToken || '').split('.');
  var encodedTokenData = tokenParts[1];

  if (encodedTokenData != null) {
    var tokenData = encodedTokenData;

    try {
      tokenData = this.decodeBase64(tokenData);
      return JSON.parse(tokenData);
    } catch (e) {
      return tokenData;
    }
  }

  return null;
};

SCClientSocket.prototype.getAuthToken = function () {
  return this.authToken;
};

SCClientSocket.prototype.getSignedAuthToken = function () {
  return this.signedAuthToken;
}; // Perform client-initiated authentication by providing an encrypted token string.


SCClientSocket.prototype.authenticate = function (signedAuthToken, callback) {
  var self = this;
  this.emit('#authenticate', signedAuthToken, function (err, authStatus) {
    if (authStatus && authStatus.isAuthenticated != null) {
      // If authStatus is correctly formatted (has an isAuthenticated property),
      // then we will rehydrate the authError.
      if (authStatus.authError) {
        authStatus.authError = scErrors.hydrateError(authStatus.authError);
      }
    } else {
      // Some errors like BadConnectionError and TimeoutError will not pass a valid
      // authStatus object to the current function, so we need to create it ourselves.
      authStatus = {
        isAuthenticated: self.authState,
        authError: null
      };
    }

    if (err) {
      if (err.name != 'BadConnectionError' && err.name != 'TimeoutError') {
        // In case of a bad/closed connection or a timeout, we maintain the last
        // known auth state since those errors don't mean that the token is invalid.
        self._changeToUnauthenticatedStateAndClearTokens();
      }

      callback && callback(err, authStatus);
    } else {
      self.auth.saveToken(self.authTokenName, signedAuthToken, {}, function (err) {
        if (err) {
          self._onSCError(err);
        }

        if (authStatus.isAuthenticated) {
          self._changeToAuthenticatedState(signedAuthToken);
        } else {
          self._changeToUnauthenticatedStateAndClearTokens();
        }

        callback && callback(err, authStatus);
      });
    }
  });
};

SCClientSocket.prototype._tryReconnect = function (initialDelay) {
  var self = this;
  var exponent = this.connectAttempts++;
  var reconnectOptions = this.options.autoReconnectOptions;
  var timeout;

  if (initialDelay == null || exponent > 0) {
    var initialTimeout = Math.round(reconnectOptions.initialDelay + (reconnectOptions.randomness || 0) * Math.random());
    timeout = Math.round(initialTimeout * Math.pow(reconnectOptions.multiplier, exponent));
  } else {
    timeout = initialDelay;
  }

  if (timeout > reconnectOptions.maxDelay) {
    timeout = reconnectOptions.maxDelay;
  }

  clearTimeout(this._reconnectTimeoutRef);
  this.pendingReconnect = true;
  this.pendingReconnectTimeout = timeout;
  this._reconnectTimeoutRef = setTimeout(function () {
    self.connect();
  }, timeout);
};

SCClientSocket.prototype._onSCOpen = function (status) {
  var self = this;
  this.preparingPendingSubscriptions = true;

  if (status) {
    this.id = status.id;
    this.pingTimeout = status.pingTimeout;
    this.transport.pingTimeout = this.pingTimeout;

    if (status.isAuthenticated) {
      this._changeToAuthenticatedState(status.authToken);
    } else {
      this._changeToUnauthenticatedStateAndClearTokens();
    }
  } else {
    // This can happen if auth.loadToken (in sctransport.js) fails with
    // an error - This means that the signedAuthToken cannot be loaded by
    // the auth engine and therefore, we need to unauthenticate the client.
    this._changeToUnauthenticatedStateAndClearTokens();
  }

  this.connectAttempts = 0;

  if (this.options.autoSubscribeOnConnect) {
    this.processPendingSubscriptions();
  } // If the user invokes the callback while in autoSubscribeOnConnect mode, it
  // won't break anything.


  Emitter.prototype.emit.call(this, 'connect', status, function () {
    self.processPendingSubscriptions();
  });

  if (this.state == this.OPEN) {
    this._flushEmitBuffer();
  }
};

SCClientSocket.prototype._onSCError = function (err) {
  var self = this; // Throw error in different stack frame so that error handling
  // cannot interfere with a reconnect action.

  setTimeout(function () {
    if (self.listeners('error').length < 1) {
      throw err;
    } else {
      Emitter.prototype.emit.call(self, 'error', err);
    }
  }, 0);
};

SCClientSocket.prototype._suspendSubscriptions = function () {
  var channel, newState;

  for (var channelName in this.channels) {
    if (this.channels.hasOwnProperty(channelName)) {
      channel = this.channels[channelName];

      if (channel.state == channel.SUBSCRIBED || channel.state == channel.PENDING) {
        newState = channel.PENDING;
      } else {
        newState = channel.UNSUBSCRIBED;
      }

      this._triggerChannelUnsubscribe(channel, newState);
    }
  }
};

SCClientSocket.prototype._abortAllPendingEventsDueToBadConnection = function (failureType) {
  var currentNode = this._emitBuffer.head;
  var nextNode;

  while (currentNode) {
    nextNode = currentNode.next;
    var eventObject = currentNode.data;
    clearTimeout(eventObject.timeout);
    delete eventObject.timeout;
    currentNode.detach();
    currentNode = nextNode;
    var callback = eventObject.callback;

    if (callback) {
      delete eventObject.callback;
      var errorMessage = "Event '" + eventObject.event + "' was aborted due to a bad connection";
      var error = new BadConnectionError(errorMessage, failureType);
      callback.call(eventObject, error, eventObject);
    } // Cleanup any pending response callback in the transport layer too.


    if (eventObject.cid) {
      this.transport.cancelPendingResponse(eventObject.cid);
    }
  }
};

SCClientSocket.prototype._onSCClose = function (code, data, openAbort) {
  var self = this;
  this.id = null;

  if (this.transport) {
    this.transport.off();
  }

  this.pendingReconnect = false;
  this.pendingReconnectTimeout = null;
  clearTimeout(this._reconnectTimeoutRef);

  this._suspendSubscriptions();

  this._abortAllPendingEventsDueToBadConnection(openAbort ? 'connectAbort' : 'disconnect'); // Try to reconnect
  // on server ping timeout (4000)
  // or on client pong timeout (4001)
  // or on close without status (1005)
  // or on handshake failure (4003)
  // or on handshake rejection (4008)
  // or on socket hung up (1006)


  if (this.options.autoReconnect) {
    if (code == 4000 || code == 4001 || code == 1005) {
      // If there is a ping or pong timeout or socket closes without
      // status, don't wait before trying to reconnect - These could happen
      // if the client wakes up after a period of inactivity and in this case we
      // want to re-establish the connection as soon as possible.
      this._tryReconnect(0); // Codes 4500 and above will be treated as permanent disconnects.
      // Socket will not try to auto-reconnect.

    } else if (code != 1000 && code < 4500) {
      this._tryReconnect();
    }
  }

  if (openAbort) {
    Emitter.prototype.emit.call(self, 'connectAbort', code, data);
  } else {
    Emitter.prototype.emit.call(self, 'disconnect', code, data);
  }

  Emitter.prototype.emit.call(self, 'close', code, data);

  if (!SCClientSocket.ignoreStatuses[code]) {
    var closeMessage;

    if (data) {
      closeMessage = 'Socket connection closed with status code ' + code + ' and reason: ' + data;
    } else {
      closeMessage = 'Socket connection closed with status code ' + code;
    }

    var err = new SocketProtocolError(SCClientSocket.errorStatuses[code] || closeMessage, code);

    this._onSCError(err);
  }
};

SCClientSocket.prototype._onSCEvent = function (event, data, res) {
  var handler = this._privateEventHandlerMap[event];

  if (handler) {
    handler.call(this, data, res);
  } else {
    Emitter.prototype.emit.call(this, event, data, function () {
      res && res.callback.apply(res, arguments);
    });
  }
};

SCClientSocket.prototype.decode = function (message) {
  return this.transport.decode(message);
};

SCClientSocket.prototype.encode = function (object) {
  return this.transport.encode(object);
};

SCClientSocket.prototype._flushEmitBuffer = function () {
  var currentNode = this._emitBuffer.head;
  var nextNode;

  while (currentNode) {
    nextNode = currentNode.next;
    var eventObject = currentNode.data;
    currentNode.detach();
    this.transport.emitObject(eventObject);
    currentNode = nextNode;
  }
};

SCClientSocket.prototype._handleEventAckTimeout = function (eventObject, eventNode) {
  if (eventNode) {
    eventNode.detach();
  }

  delete eventObject.timeout;
  var callback = eventObject.callback;

  if (callback) {
    delete eventObject.callback;
    var error = new TimeoutError("Event response for '" + eventObject.event + "' timed out");
    callback.call(eventObject, error, eventObject);
  } // Cleanup any pending response callback in the transport layer too.


  if (eventObject.cid) {
    this.transport.cancelPendingResponse(eventObject.cid);
  }
};

SCClientSocket.prototype._emit = function (event, data, callback) {
  var self = this;

  if (this.state == this.CLOSED) {
    this.connect();
  }

  var eventObject = {
    event: event,
    callback: callback
  };
  var eventNode = new LinkedList.Item();

  if (this.options.cloneData) {
    eventObject.data = clone(data);
  } else {
    eventObject.data = data;
  }

  eventNode.data = eventObject;
  eventObject.timeout = setTimeout(function () {
    self._handleEventAckTimeout(eventObject, eventNode);
  }, this.ackTimeout);

  this._emitBuffer.append(eventNode);

  if (this.state == this.OPEN) {
    this._flushEmitBuffer();
  }
};

SCClientSocket.prototype.send = function (data) {
  this.transport.send(data);
};

SCClientSocket.prototype.emit = function (event, data, callback) {
  if (this._localEvents[event] == null) {
    this._emit(event, data, callback);
  } else if (event == 'error') {
    Emitter.prototype.emit.call(this, event, data);
  } else {
    var error = new InvalidActionError('The "' + event + '" event is reserved and cannot be emitted on a client socket');

    this._onSCError(error);
  }
};

SCClientSocket.prototype.publish = function (channelName, data, callback) {
  var pubData = {
    channel: this._decorateChannelName(channelName),
    data: data
  };
  this.emit('#publish', pubData, callback);
};

SCClientSocket.prototype._triggerChannelSubscribe = function (channel, subscriptionOptions) {
  var channelName = channel.name;

  if (channel.state != channel.SUBSCRIBED) {
    var oldState = channel.state;
    channel.state = channel.SUBSCRIBED;
    var stateChangeData = {
      channel: channelName,
      oldState: oldState,
      newState: channel.state,
      subscriptionOptions: subscriptionOptions
    };
    channel.emit('subscribeStateChange', stateChangeData);
    channel.emit('subscribe', channelName, subscriptionOptions);
    Emitter.prototype.emit.call(this, 'subscribeStateChange', stateChangeData);
    Emitter.prototype.emit.call(this, 'subscribe', channelName, subscriptionOptions);
  }
};

SCClientSocket.prototype._triggerChannelSubscribeFail = function (err, channel, subscriptionOptions) {
  var channelName = channel.name;
  var meetsAuthRequirements = !channel.waitForAuth || this.authState == this.AUTHENTICATED;

  if (channel.state != channel.UNSUBSCRIBED && meetsAuthRequirements) {
    channel.state = channel.UNSUBSCRIBED;
    channel.emit('subscribeFail', err, channelName, subscriptionOptions);
    Emitter.prototype.emit.call(this, 'subscribeFail', err, channelName, subscriptionOptions);
  }
}; // Cancel any pending subscribe callback


SCClientSocket.prototype._cancelPendingSubscribeCallback = function (channel) {
  if (channel._pendingSubscriptionCid != null) {
    this.transport.cancelPendingResponse(channel._pendingSubscriptionCid);
    delete channel._pendingSubscriptionCid;
  }
};

SCClientSocket.prototype._decorateChannelName = function (channelName) {
  if (this.channelPrefix) {
    channelName = this.channelPrefix + channelName;
  }

  return channelName;
};

SCClientSocket.prototype._undecorateChannelName = function (decoratedChannelName) {
  if (this.channelPrefix && decoratedChannelName.indexOf(this.channelPrefix) == 0) {
    return decoratedChannelName.replace(this.channelPrefix, '');
  }

  return decoratedChannelName;
};

SCClientSocket.prototype._trySubscribe = function (channel) {
  var self = this;
  var meetsAuthRequirements = !channel.waitForAuth || this.authState == this.AUTHENTICATED; // We can only ever have one pending subscribe action at any given time on a channel

  if (this.state == this.OPEN && !this.preparingPendingSubscriptions && channel._pendingSubscriptionCid == null && meetsAuthRequirements) {
    var options = {
      noTimeout: true
    };
    var subscriptionOptions = {
      channel: this._decorateChannelName(channel.name)
    };

    if (channel.waitForAuth) {
      options.waitForAuth = true;
      subscriptionOptions.waitForAuth = options.waitForAuth;
    }

    if (channel.data) {
      subscriptionOptions.data = channel.data;
    }

    if (channel.batch) {
      options.batch = true;
      subscriptionOptions.batch = true;
    }

    channel._pendingSubscriptionCid = this.transport.emit('#subscribe', subscriptionOptions, options, function (err) {
      delete channel._pendingSubscriptionCid;

      if (err) {
        self._triggerChannelSubscribeFail(err, channel, subscriptionOptions);
      } else {
        self._triggerChannelSubscribe(channel, subscriptionOptions);
      }
    });
    Emitter.prototype.emit.call(this, 'subscribeRequest', channel.name, subscriptionOptions);
  }
};

SCClientSocket.prototype.subscribe = function (channelName, options) {
  var channel = this.channels[channelName];

  if (!channel) {
    channel = new SCChannel(channelName, this, options);
    this.channels[channelName] = channel;
  } else if (options) {
    channel.setOptions(options);
  }

  if (channel.state == channel.UNSUBSCRIBED) {
    channel.state = channel.PENDING;

    this._trySubscribe(channel);
  }

  return channel;
};

SCClientSocket.prototype._triggerChannelUnsubscribe = function (channel, newState) {
  var channelName = channel.name;
  var oldState = channel.state;

  if (newState) {
    channel.state = newState;
  } else {
    channel.state = channel.UNSUBSCRIBED;
  }

  this._cancelPendingSubscribeCallback(channel);

  if (oldState == channel.SUBSCRIBED) {
    var stateChangeData = {
      channel: channelName,
      oldState: oldState,
      newState: channel.state
    };
    channel.emit('subscribeStateChange', stateChangeData);
    channel.emit('unsubscribe', channelName);
    Emitter.prototype.emit.call(this, 'subscribeStateChange', stateChangeData);
    Emitter.prototype.emit.call(this, 'unsubscribe', channelName);
  }
};

SCClientSocket.prototype._tryUnsubscribe = function (channel) {
  var self = this;

  if (this.state == this.OPEN) {
    var options = {
      noTimeout: true
    };

    if (channel.batch) {
      options.batch = true;
    } // If there is a pending subscribe action, cancel the callback


    this._cancelPendingSubscribeCallback(channel); // This operation cannot fail because the TCP protocol guarantees delivery
    // so long as the connection remains open. If the connection closes,
    // the server will automatically unsubscribe the client and thus complete
    // the operation on the server side.


    var decoratedChannelName = this._decorateChannelName(channel.name);

    this.transport.emit('#unsubscribe', decoratedChannelName, options);
  }
};

SCClientSocket.prototype.unsubscribe = function (channelName) {
  var channel = this.channels[channelName];

  if (channel) {
    if (channel.state != channel.UNSUBSCRIBED) {
      this._triggerChannelUnsubscribe(channel);

      this._tryUnsubscribe(channel);
    }
  }
};

SCClientSocket.prototype.channel = function (channelName, options) {
  var currentChannel = this.channels[channelName];

  if (!currentChannel) {
    currentChannel = new SCChannel(channelName, this, options);
    this.channels[channelName] = currentChannel;
  }

  return currentChannel;
};

SCClientSocket.prototype.destroyChannel = function (channelName) {
  var channel = this.channels[channelName];

  if (channel) {
    channel.unwatch();
    channel.unsubscribe();
    delete this.channels[channelName];
  }
};

SCClientSocket.prototype.subscriptions = function (includePending) {
  var subs = [];
  var channel, includeChannel;

  for (var channelName in this.channels) {
    if (this.channels.hasOwnProperty(channelName)) {
      channel = this.channels[channelName];

      if (includePending) {
        includeChannel = channel && (channel.state == channel.SUBSCRIBED || channel.state == channel.PENDING);
      } else {
        includeChannel = channel && channel.state == channel.SUBSCRIBED;
      }

      if (includeChannel) {
        subs.push(channelName);
      }
    }
  }

  return subs;
};

SCClientSocket.prototype.isSubscribed = function (channelName, includePending) {
  var channel = this.channels[channelName];

  if (includePending) {
    return !!channel && (channel.state == channel.SUBSCRIBED || channel.state == channel.PENDING);
  }

  return !!channel && channel.state == channel.SUBSCRIBED;
};

SCClientSocket.prototype.processPendingSubscriptions = function () {
  var self = this;
  this.preparingPendingSubscriptions = false;
  var pendingChannels = [];

  for (var i in this.channels) {
    if (this.channels.hasOwnProperty(i)) {
      var channel = this.channels[i];

      if (channel.state == channel.PENDING) {
        pendingChannels.push(channel);
      }
    }
  }

  pendingChannels.sort(function (a, b) {
    var ap = a.priority || 0;
    var bp = b.priority || 0;

    if (ap > bp) {
      return -1;
    }

    if (ap < bp) {
      return 1;
    }

    return 0;
  });
  pendingChannels.forEach(function (channel) {
    self._trySubscribe(channel);
  });
};

SCClientSocket.prototype.watch = function (channelName, handler) {
  if (typeof handler != 'function') {
    throw new InvalidArgumentsError('No handler function was provided');
  }

  this._channelEmitter.on(channelName, handler);
};

SCClientSocket.prototype.unwatch = function (channelName, handler) {
  if (handler) {
    this._channelEmitter.removeListener(channelName, handler);
  } else {
    this._channelEmitter.removeAllListeners(channelName);
  }
};

SCClientSocket.prototype.watchers = function (channelName) {
  return this._channelEmitter.listeners(channelName);
};

module.exports = SCClientSocket;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/socketcluster-client/lib/sctransport.js":
/*!**************************************************************!*\
  !*** ./node_modules/socketcluster-client/lib/sctransport.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var Emitter = __webpack_require__(/*! component-emitter */ "./node_modules/socketcluster-client/node_modules/component-emitter/index.js");

var Response = __webpack_require__(/*! ./response */ "./node_modules/socketcluster-client/lib/response.js").Response;

var querystring = __webpack_require__(/*! querystring */ "./node_modules/querystring-es3/index.js");

var WebSocket;
var createWebSocket;

if (global.WebSocket) {
  WebSocket = global.WebSocket;

  createWebSocket = function (uri, options) {
    return new WebSocket(uri);
  };
} else {
  WebSocket = __webpack_require__(/*! ws */ "./node_modules/socketcluster-client/lib/ws-browser.js");

  createWebSocket = function (uri, options) {
    return new WebSocket(uri, null, options);
  };
}

var scErrors = __webpack_require__(/*! sc-errors */ "./node_modules/sc-errors/index.js");

var TimeoutError = scErrors.TimeoutError;
var BadConnectionError = scErrors.BadConnectionError;

var SCTransport = function (authEngine, codecEngine, options) {
  var self = this;
  this.state = this.CLOSED;
  this.auth = authEngine;
  this.codec = codecEngine;
  this.options = options;
  this.connectTimeout = options.connectTimeout;
  this.pingTimeout = options.ackTimeout;
  this.pingTimeoutDisabled = !!options.pingTimeoutDisabled;
  this.callIdGenerator = options.callIdGenerator;
  this.authTokenName = options.authTokenName;
  this._pingTimeoutTicker = null;
  this._callbackMap = {};
  this._batchSendList = []; // Open the connection.

  this.state = this.CONNECTING;
  var uri = this.uri();
  var wsSocket = createWebSocket(uri, this.options);
  wsSocket.binaryType = this.options.binaryType;
  this.socket = wsSocket;

  wsSocket.onopen = function () {
    self._onOpen();
  };

  wsSocket.onclose = function (event) {
    var code;

    if (event.code == null) {
      // This is to handle an edge case in React Native whereby
      // event.code is undefined when the mobile device is locked.
      // TODO: This is not perfect since this condition could also apply to
      // an abnormal close (no close control frame) which would be a 1006.
      code = 1005;
    } else {
      code = event.code;
    }

    self._onClose(code, event.reason);
  };

  wsSocket.onmessage = function (message, flags) {
    self._onMessage(message.data);
  };

  wsSocket.onerror = function (error) {
    // The onclose event will be called automatically after the onerror event
    // if the socket is connected - Otherwise, if it's in the middle of
    // connecting, we want to close it manually with a 1006 - This is necessary
    // to prevent inconsistent behavior when running the client in Node.js
    // vs in a browser.
    if (self.state === self.CONNECTING) {
      self._onClose(1006);
    }
  };

  this._connectTimeoutRef = setTimeout(function () {
    self._onClose(4007);

    self.socket.close(4007);
  }, this.connectTimeout);
};

SCTransport.prototype = Object.create(Emitter.prototype);
SCTransport.CONNECTING = SCTransport.prototype.CONNECTING = 'connecting';
SCTransport.OPEN = SCTransport.prototype.OPEN = 'open';
SCTransport.CLOSED = SCTransport.prototype.CLOSED = 'closed';

SCTransport.prototype.uri = function () {
  var query = this.options.query || {};
  var schema = this.options.secure ? 'wss' : 'ws';

  if (this.options.timestampRequests) {
    query[this.options.timestampParam] = new Date().getTime();
  }

  query = querystring.encode(query);

  if (query.length) {
    query = '?' + query;
  }

  var host;

  if (this.options.host) {
    host = this.options.host;
  } else {
    var port = '';

    if (this.options.port && (schema == 'wss' && this.options.port != 443 || schema == 'ws' && this.options.port != 80)) {
      port = ':' + this.options.port;
    }

    host = this.options.hostname + port;
  }

  return schema + '://' + host + this.options.path + query;
};

SCTransport.prototype._onOpen = function () {
  var self = this;
  clearTimeout(this._connectTimeoutRef);

  this._resetPingTimeout();

  this._handshake(function (err, status) {
    if (err) {
      var statusCode;

      if (status && status.code) {
        statusCode = status.code;
      } else {
        statusCode = 4003;
      }

      self._onError(err);

      self._onClose(statusCode, err.toString());

      self.socket.close(statusCode);
    } else {
      self.state = self.OPEN;
      Emitter.prototype.emit.call(self, 'open', status);

      self._resetPingTimeout();
    }
  });
};

SCTransport.prototype._handshake = function (callback) {
  var self = this;
  this.auth.loadToken(this.authTokenName, function (err, token) {
    if (err) {
      callback(err);
    } else {
      // Don't wait for this.state to be 'open'.
      // The underlying WebSocket (this.socket) is already open.
      var options = {
        force: true
      };
      self.emit('#handshake', {
        authToken: token
      }, options, function (err, status) {
        if (status) {
          // Add the token which was used as part of authentication attempt
          // to the status object.
          status.authToken = token;

          if (status.authError) {
            status.authError = scErrors.hydrateError(status.authError);
          }
        }

        callback(err, status);
      });
    }
  });
};

SCTransport.prototype._abortAllPendingEventsDueToBadConnection = function (failureType) {
  for (var i in this._callbackMap) {
    if (this._callbackMap.hasOwnProperty(i)) {
      var eventObject = this._callbackMap[i];
      delete this._callbackMap[i];
      clearTimeout(eventObject.timeout);
      delete eventObject.timeout;
      var errorMessage = "Event '" + eventObject.event + "' was aborted due to a bad connection";
      var badConnectionError = new BadConnectionError(errorMessage, failureType);
      var callback = eventObject.callback;
      delete eventObject.callback;
      callback.call(eventObject, badConnectionError, eventObject);
    }
  }
};

SCTransport.prototype._onClose = function (code, data) {
  delete this.socket.onopen;
  delete this.socket.onclose;
  delete this.socket.onmessage;
  delete this.socket.onerror;
  clearTimeout(this._connectTimeoutRef);
  clearTimeout(this._pingTimeoutTicker);
  clearTimeout(this._batchTimeout);

  if (this.state == this.OPEN) {
    this.state = this.CLOSED;
    Emitter.prototype.emit.call(this, 'close', code, data);

    this._abortAllPendingEventsDueToBadConnection('disconnect');
  } else if (this.state == this.CONNECTING) {
    this.state = this.CLOSED;
    Emitter.prototype.emit.call(this, 'openAbort', code, data);

    this._abortAllPendingEventsDueToBadConnection('connectAbort');
  }
};

SCTransport.prototype._handleEventObject = function (obj, message) {
  if (obj && obj.event != null) {
    var response = new Response(this, obj.cid);
    Emitter.prototype.emit.call(this, 'event', obj.event, obj.data, response);
  } else if (obj && obj.rid != null) {
    var eventObject = this._callbackMap[obj.rid];

    if (eventObject) {
      clearTimeout(eventObject.timeout);
      delete eventObject.timeout;
      delete this._callbackMap[obj.rid];

      if (eventObject.callback) {
        var rehydratedError = scErrors.hydrateError(obj.error);
        eventObject.callback(rehydratedError, obj.data);
      }
    }
  } else {
    Emitter.prototype.emit.call(this, 'event', 'raw', message);
  }
};

SCTransport.prototype._onMessage = function (message) {
  Emitter.prototype.emit.call(this, 'event', 'message', message);
  var obj = this.decode(message); // If ping

  if (obj == '#1') {
    this._resetPingTimeout();

    if (this.socket.readyState == this.socket.OPEN) {
      this.sendObject('#2');
    }
  } else {
    if (Array.isArray(obj)) {
      var len = obj.length;

      for (var i = 0; i < len; i++) {
        this._handleEventObject(obj[i], message);
      }
    } else {
      this._handleEventObject(obj, message);
    }
  }
};

SCTransport.prototype._onError = function (err) {
  Emitter.prototype.emit.call(this, 'error', err);
};

SCTransport.prototype._resetPingTimeout = function () {
  if (this.pingTimeoutDisabled) {
    return;
  }

  var self = this;
  var now = new Date().getTime();
  clearTimeout(this._pingTimeoutTicker);
  this._pingTimeoutTicker = setTimeout(function () {
    self._onClose(4000);

    self.socket.close(4000);
  }, this.pingTimeout);
};

SCTransport.prototype.getBytesReceived = function () {
  return this.socket.bytesReceived;
};

SCTransport.prototype.close = function (code, data) {
  code = code || 1000;

  if (this.state == this.OPEN) {
    var packet = {
      code: code,
      data: data
    };
    this.emit('#disconnect', packet);

    this._onClose(code, data);

    this.socket.close(code);
  } else if (this.state == this.CONNECTING) {
    this._onClose(code, data);

    this.socket.close(code);
  }
};

SCTransport.prototype.emitObject = function (eventObject, options) {
  var simpleEventObject = {
    event: eventObject.event,
    data: eventObject.data
  };

  if (eventObject.callback) {
    simpleEventObject.cid = eventObject.cid = this.callIdGenerator();
    this._callbackMap[eventObject.cid] = eventObject;
  }

  this.sendObject(simpleEventObject, options);
  return eventObject.cid || null;
};

SCTransport.prototype._handleEventAckTimeout = function (eventObject) {
  if (eventObject.cid) {
    delete this._callbackMap[eventObject.cid];
  }

  delete eventObject.timeout;
  var callback = eventObject.callback;

  if (callback) {
    delete eventObject.callback;
    var error = new TimeoutError("Event response for '" + eventObject.event + "' timed out");
    callback.call(eventObject, error, eventObject);
  }
}; // The last two optional arguments (a and b) can be options and/or callback


SCTransport.prototype.emit = function (event, data, a, b) {
  var self = this;
  var callback, options;

  if (b) {
    options = a;
    callback = b;
  } else {
    if (a instanceof Function) {
      options = {};
      callback = a;
    } else {
      options = a;
    }
  }

  var eventObject = {
    event: event,
    data: data,
    callback: callback
  };

  if (callback && !options.noTimeout) {
    eventObject.timeout = setTimeout(function () {
      self._handleEventAckTimeout(eventObject);
    }, this.options.ackTimeout);
  }

  var cid = null;

  if (this.state == this.OPEN || options.force) {
    cid = this.emitObject(eventObject, options);
  }

  return cid;
};

SCTransport.prototype.cancelPendingResponse = function (cid) {
  delete this._callbackMap[cid];
};

SCTransport.prototype.decode = function (message) {
  return this.codec.decode(message);
};

SCTransport.prototype.encode = function (object) {
  return this.codec.encode(object);
};

SCTransport.prototype.send = function (data) {
  if (this.socket.readyState != this.socket.OPEN) {
    this._onClose(1005);
  } else {
    this.socket.send(data);
  }
};

SCTransport.prototype.serializeObject = function (object) {
  var str, formatError;

  try {
    str = this.encode(object);
  } catch (err) {
    formatError = err;

    this._onError(formatError);
  }

  if (!formatError) {
    return str;
  }

  return null;
};

SCTransport.prototype.sendObjectBatch = function (object) {
  var self = this;

  this._batchSendList.push(object);

  if (this._batchTimeout) {
    return;
  }

  this._batchTimeout = setTimeout(function () {
    delete self._batchTimeout;

    if (self._batchSendList.length) {
      var str = self.serializeObject(self._batchSendList);

      if (str != null) {
        self.send(str);
      }

      self._batchSendList = [];
    }
  }, this.options.pubSubBatchDuration || 0);
};

SCTransport.prototype.sendObjectSingle = function (object) {
  var str = this.serializeObject(object);

  if (str != null) {
    this.send(str);
  }
};

SCTransport.prototype.sendObject = function (object, options) {
  if (options && options.batch) {
    this.sendObjectBatch(object);
  } else {
    this.sendObjectSingle(object);
  }
};

module.exports.SCTransport = SCTransport;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/socketcluster-client/lib/ws-browser.js":
/*!*************************************************************!*\
  !*** ./node_modules/socketcluster-client/lib/ws-browser.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var global;

if (typeof WorkerGlobalScope !== 'undefined') {
  global = self;
} else {
  global = typeof window != 'undefined' && window || function () {
    return this;
  }();
}

var WebSocket = global.WebSocket || global.MozWebSocket;
/**
 * WebSocket constructor.
 *
 * The third `opts` options object gets ignored in web browsers, since it's
 * non-standard, and throws a TypeError if passed to the constructor.
 * See: https://github.com/einaros/ws/issues/227
 *
 * @param {String} uri
 * @param {Array} protocols (optional)
 * @param {Object} opts (optional)
 * @api public
 */

function ws(uri, protocols, opts) {
  var instance;

  if (protocols) {
    instance = new WebSocket(uri, protocols);
  } else {
    instance = new WebSocket(uri);
  }

  return instance;
}

if (WebSocket) ws.prototype = WebSocket.prototype;
module.exports = WebSocket ? ws : null;

/***/ }),

/***/ "./node_modules/socketcluster-client/node_modules/component-emitter/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/socketcluster-client/node_modules/component-emitter/index.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Expose `Emitter`.
 */
if (true) {
  module.exports = Emitter;
}
/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */


function Emitter(obj) {
  if (obj) return mixin(obj);
}

;
/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }

  return obj;
}
/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */


Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
  return this;
};
/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */


Emitter.prototype.once = function (event, fn) {
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};
/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */


Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
  this._callbacks = this._callbacks || {}; // all

  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  } // specific event


  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this; // remove all handlers

  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  } // remove specific handler


  var cb;

  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];

    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }

  return this;
};
/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */


Emitter.prototype.emit = function (event) {
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1),
      callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);

    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};
/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */


Emitter.prototype.listeners = function (event) {
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};
/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */


Emitter.prototype.hasListeners = function (event) {
  return !!this.listeners(event).length;
};

/***/ }),

/***/ "./node_modules/socketcluster-client/node_modules/uuid/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/socketcluster-client/node_modules/uuid/index.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var v1 = __webpack_require__(/*! ./v1 */ "./node_modules/socketcluster-client/node_modules/uuid/v1.js");

var v4 = __webpack_require__(/*! ./v4 */ "./node_modules/socketcluster-client/node_modules/uuid/v4.js");

var uuid = v4;
uuid.v1 = v1;
uuid.v4 = v4;
module.exports = uuid;

/***/ }),

/***/ "./node_modules/socketcluster-client/node_modules/uuid/lib/bytesToUuid.js":
/*!********************************************************************************!*\
  !*** ./node_modules/socketcluster-client/node_modules/uuid/lib/bytesToUuid.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];

for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];
}

module.exports = bytesToUuid;

/***/ }),

/***/ "./node_modules/socketcluster-client/node_modules/uuid/lib/rng-browser.js":
/*!********************************************************************************!*\
  !*** ./node_modules/socketcluster-client/node_modules/uuid/lib/rng-browser.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection
// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
var getRandomValues = typeof crypto != 'undefined' && crypto.getRandomValues.bind(crypto) || typeof msCrypto != 'undefined' && msCrypto.getRandomValues.bind(msCrypto);

if (getRandomValues) {
  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

  module.exports = function whatwgRNG() {
    getRandomValues(rnds8);
    return rnds8;
  };
} else {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var rnds = new Array(16);

  module.exports = function mathRNG() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}

/***/ }),

/***/ "./node_modules/socketcluster-client/node_modules/uuid/v1.js":
/*!*******************************************************************!*\
  !*** ./node_modules/socketcluster-client/node_modules/uuid/v1.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var rng = __webpack_require__(/*! ./lib/rng */ "./node_modules/socketcluster-client/node_modules/uuid/lib/rng-browser.js");

var bytesToUuid = __webpack_require__(/*! ./lib/bytesToUuid */ "./node_modules/socketcluster-client/node_modules/uuid/lib/bytesToUuid.js"); // **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html


var _nodeId;

var _clockseq; // Previous uuid creation time


var _lastMSecs = 0;
var _lastNSecs = 0; // See https://github.com/broofa/node-uuid for API details

function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];
  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    var seedBytes = rng();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf ? buf : bytesToUuid(b);
}

module.exports = v1;

/***/ }),

/***/ "./node_modules/socketcluster-client/node_modules/uuid/v4.js":
/*!*******************************************************************!*\
  !*** ./node_modules/socketcluster-client/node_modules/uuid/v4.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var rng = __webpack_require__(/*! ./lib/rng */ "./node_modules/socketcluster-client/node_modules/uuid/lib/rng-browser.js");

var bytesToUuid = __webpack_require__(/*! ./lib/bytesToUuid */ "./node_modules/socketcluster-client/node_modules/uuid/lib/bytesToUuid.js");

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof options == 'string') {
    buf = options === 'binary' ? new Array(16) : null;
    options = null;
  }

  options = options || {};
  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = typeof global !== "undefined" && global || typeof self !== "undefined" && self || window;
var apply = Function.prototype.apply; // DOM APIs, for completeness

exports.setTimeout = function () {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};

exports.setInterval = function () {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};

exports.clearTimeout = exports.clearInterval = function (timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}

Timeout.prototype.unref = Timeout.prototype.ref = function () {};

Timeout.prototype.close = function () {
  this._clearFn.call(scope, this._id);
}; // Does not start the time, just sets up the members needed.


exports.enroll = function (item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function (item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function (item) {
  clearTimeout(item._idleTimeoutId);
  var msecs = item._idleTimeout;

  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout) item._onTimeout();
    }, msecs);
  }
}; // setimmediate attaches itself to the global object


__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js"); // On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.


exports.setImmediate = typeof self !== "undefined" && self.setImmediate || typeof global !== "undefined" && global.setImmediate || this && this.setImmediate;
exports.clearImmediate = typeof self !== "undefined" && self.clearImmediate || typeof global !== "undefined" && global.clearImmediate || this && this.clearImmediate;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if (typeof window === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (module) {
  if (!module.webpackPolyfill) {
    module.deprecate = function () {};

    module.paths = []; // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function () {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function () {
        return module.i;
      }
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ }),

/***/ "./src/scripts/data/puzzle_01.js":
/*!***************************************!*\
  !*** ./src/scripts/data/puzzle_01.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _shared_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/constants */ "./src/scripts/shared/constants.js");

/* harmony default export */ __webpack_exports__["default"] = ({
  id: 1,
  size: 9,
  difficulty: 'hard',
  operations: [_shared_constants__WEBPACK_IMPORTED_MODULE_0__["ADD"], _shared_constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"], _shared_constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"], _shared_constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"]],
  cages: [{
    squares: [[0, 0], [1, 0]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 2
  }, {
    squares: [[0, 1], [1, 1]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 1
  }, {
    squares: [[0, 2], [1, 2]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 3
  }, {
    squares: [[0, 3], [1, 3]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 56
  }, {
    squares: [[0, 4], [0, 5]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 4
  }, {
    squares: [[0, 6], [1, 6]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 11
  }, {
    squares: [[0, 7], [0, 8]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 2
  }, {
    squares: [[1, 4], [2, 4]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 2
  }, {
    squares: [[1, 5], [2, 5]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 72
  }, {
    squares: [[2, 6], [3, 6]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 2
  }, {
    squares: [[1, 7], [2, 7], [3, 7]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 17
  }, {
    squares: [[1, 8], [2, 8]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 3
  }, {
    squares: [[2, 0], [2, 1]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 7
  }, {
    squares: [[2, 2], [2, 3]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 24
  }, {
    squares: [[3, 0], [4, 0]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 14
  }, {
    squares: [[3, 1], [4, 1]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 12
  }, {
    squares: [[3, 2], [3, 3]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 11
  }, {
    squares: [[3, 4], [3, 5]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 9
  }, {
    squares: [[3, 8], [4, 8]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 54
  }, {
    squares: [[4, 2], [5, 1], [5, 2]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 90
  }, {
    squares: [[4, 3], [4, 4]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 11
  }, {
    squares: [[4, 5], [5, 5]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 3
  }, {
    squares: [[4, 6], [4, 7], [5, 7]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 320
  }, {
    squares: [[5, 0], [6, 0], [6, 1]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 15
  }, {
    squares: [[5, 3], [5, 4], [6, 4]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 16
  }, {
    squares: [[5, 6], [6, 6]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 5
  }, {
    squares: [[5, 8], [6, 8]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 9
  }, {
    squares: [[6, 2], [6, 3]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 7
  }, {
    squares: [[6, 5], [7, 5]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 3
  }, {
    squares: [[6, 7], [7, 6], [7, 7], [7, 8]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 45
  }, {
    squares: [[7, 0], [8, 0]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 4
  }, {
    squares: [[7, 1], [7, 2]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 2
  }, {
    squares: [[7, 3], [7, 4]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 13
  }, {
    squares: [[8, 1], [8, 2]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 2
  }, {
    squares: [[8, 3], [8, 4]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 1
  }, {
    squares: [[8, 5], [8, 6]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 3
  }, {
    squares: [[8, 7], [8, 8]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 1
  }],
  solution: [[1, 7, 3, 8, 9, 5, 6, 2, 4], [2, 6, 9, 7, 3, 8, 5, 4, 1], [8, 1, 4, 6, 5, 9, 2, 7, 3], [5, 4, 8, 3, 2, 7, 1, 6, 9], [9, 3, 2, 4, 7, 1, 8, 5, 6], [6, 9, 5, 2, 1, 3, 4, 8, 7], [4, 5, 7, 1, 8, 6, 9, 3, 2], [7, 8, 6, 9, 4, 2, 3, 1, 5], [3, 2, 1, 5, 6, 4, 7, 9, 8]]
});

/***/ }),

/***/ "./src/scripts/data/puzzle_02.js":
/*!***************************************!*\
  !*** ./src/scripts/data/puzzle_02.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _shared_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/constants */ "./src/scripts/shared/constants.js");

/* harmony default export */ __webpack_exports__["default"] = ({
  id: 2,
  size: 9,
  difficulty: 'hard',
  operations: [_shared_constants__WEBPACK_IMPORTED_MODULE_0__["ADD"], _shared_constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"], _shared_constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"], _shared_constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"]],
  cages: [{
    squares: [[0, 0], [1, 0], [2, 0]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 15
  }, {
    squares: [[0, 1], [1, 1]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 2
  }, {
    squares: [[0, 2], [1, 2]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 2
  }, {
    squares: [[0, 3], [0, 4], [0, 5], [0, 6]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 25
  }, {
    squares: [[0, 7], [0, 8], [1, 8], [2, 8]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 320
  }, {
    squares: [[1, 3], [2, 3]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 11
  }, {
    squares: [[1, 4], [2, 4]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 5
  }, {
    squares: [[1, 5], [2, 5]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 1
  }, {
    squares: [[1, 6], [1, 7]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 3
  }, {
    squares: [[2, 1], [3, 1]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 45
  }, {
    squares: [[2, 2], [3, 2]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 42
  }, {
    squares: [[2, 6], [3, 6]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 2
  }, {
    squares: [[2, 7], [3, 7], [3, 8]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 14
  }, {
    squares: [[3, 0], [4, 0]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 14
  }, {
    squares: [[3, 3], [3, 4], [4, 4]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 80
  }, {
    squares: [[3, 5], [4, 5]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 5
  }, {
    squares: [[4, 1], [4, 2], [4, 3]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 12
  }, {
    squares: [[4, 6], [5, 6], [6, 6]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 14
  }, {
    squares: [[4, 7], [5, 7]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 45
  }, {
    squares: [[4, 8], [5, 8]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 2
  }, {
    squares: [[5, 0], [6, 0]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 2
  }, {
    squares: [[5, 1], [6, 1]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 13
  }, {
    squares: [[5, 2], [6, 2]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 1
  }, {
    squares: [[5, 3], [6, 3]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 1
  }, {
    squares: [[5, 4], [5, 5]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 14
  }, {
    squares: [[6, 4], [6, 5]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 6
  }, {
    squares: [[6, 7], [6, 8]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 5
  }, {
    squares: [[7, 0], [7, 1]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 11
  }, {
    squares: [[7, 2], [8, 2]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 3
  }, {
    squares: [[7, 3], [8, 3]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["MULTIPLY"],
    result: 28
  }, {
    squares: [[7, 4], [8, 4]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["DIVIDE"],
    result: 4
  }, {
    squares: [[7, 5], [8, 5]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["ADD"],
    result: 11
  }, {
    squares: [[7, 6], [8, 6]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 3
  }, {
    squares: [[7, 7], [7, 8]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 1
  }, {
    squares: [[8, 0], [8, 1]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 5
  }, {
    squares: [[8, 7], [8, 8]],
    operation: _shared_constants__WEBPACK_IMPORTED_MODULE_0__["SUBTRACT"],
    result: 1
  }],
  solution: [[5, 4, 1, 3, 6, 7, 9, 2, 8], [1, 8, 2, 6, 3, 9, 4, 7, 5], [3, 9, 7, 5, 2, 8, 6, 1, 4], [7, 5, 6, 2, 8, 1, 3, 4, 9], [2, 3, 8, 1, 5, 4, 7, 9, 6], [8, 6, 4, 9, 7, 2, 1, 5, 3], [4, 7, 5, 8, 9, 3, 2, 6, 1], [9, 2, 3, 4, 1, 6, 5, 8, 7], [6, 1, 9, 7, 4, 5, 8, 3, 2]]
});

/***/ }),

/***/ "./src/scripts/data/puzzles.js":
/*!*************************************!*\
  !*** ./src/scripts/data/puzzles.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _puzzle_01_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./puzzle_01.js */ "./src/scripts/data/puzzle_01.js");
/* harmony import */ var _puzzle_02_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./puzzle_02.js */ "./src/scripts/data/puzzle_02.js");


/* harmony default export */ __webpack_exports__["default"] = ([_puzzle_01_js__WEBPACK_IMPORTED_MODULE_0__["default"], _puzzle_02_js__WEBPACK_IMPORTED_MODULE_1__["default"]]);

/***/ }),

/***/ "./src/scripts/dev.js":
/*!****************************!*\
  !*** ./src/scripts/dev.js ***!
  \****************************/
/*! exports provided: activateDevFlag, setupDev, devLog */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "activateDevFlag", function() { return activateDevFlag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setupDev", function() { return setupDev; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "devLog", function() { return devLog; });
/* harmony import */ var remotedev__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! remotedev */ "./node_modules/remotedev/lib/index.js");
/* harmony import */ var remotedev__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(remotedev__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mobx-state-tree */ "./node_modules/mobx-state-tree/dist/mobx-state-tree.module.js");
/* harmony import */ var mst_middlewares__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! mst-middlewares */ "./node_modules/mst-middlewares/dist/mst-middlewares.module.js");
/* harmony import */ var _shared_lru_cache__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shared/lru_cache */ "./src/scripts/shared/lru_cache.js");
/* harmony import */ var _shared_spotlight__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shared/spotlight */ "./src/scripts/shared/spotlight.js");






var devFlag = false;
var activateDevFlag = function activateDevFlag() {
  return devFlag = true;
};
var setupDev = function setupDev(game) {
  if (!devFlag) return;
  Object(mst_middlewares__WEBPACK_IMPORTED_MODULE_2__["connectReduxDevtools"])(remotedev__WEBPACK_IMPORTED_MODULE_0___default.a, game.gameStore);
  Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["unprotect"])(game.gameStore);
  setupPalette();
  window.gs = game.gameStore;
  window.lru = _shared_lru_cache__WEBPACK_IMPORTED_MODULE_3__["default"];
  window.getSnap = mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["getSnapshot"];
  window.applySnap = mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["applySnapshot"];
};
var devLog = function devLog() {
  var _console;

  if (!devFlag) return;

  (_console = console).log.apply(_console, arguments);
};

function setupPalette() {
  var COLORS = ['light-brick-1', 'light-brick-2', 'light-brick-3', 'light-brick-4', 'light-brick-5', 'light-brick-6', 'light-brick-7', 'brick-1', 'brick-2', 'violet-1', 'violet-2', 'violet-3', 'violet-4', 'light-ocean-1', 'light-ocean-2', 'light-ocean-2-transparent', 'light-ocean-2-semi-transparent', 'light-ocean-3', 'light-ocean-4', 'light-ocean-5', 'ocean-1', 'ocean-2', 'ocean-2-semi-translucent', 'grey-ocean-1', 'grey-ocean-2', 'grey-ocean-3', 'grey-ocean-4', 'grey-ocean-5', 'grey-ocean-6', 'green-1', 'green-1-transparent', 'green-2', 'green-3', 'green-4', 'cream-1', 'cream-2', 'cream-3', 'cream-4', 'cream-5', 'cream-6', 'cream-7', 'cream-8', 'cappuccino-1', 'cappuccino-2', 'cappuccino-3'];
  var togglePalette = document.createElement('button');
  togglePalette.innerText = 'Toggle Palette';
  var palette = document.createElement('section');
  palette.className = 'hidden';
  palette.id = 'color-palette';
  COLORS.forEach(function (color) {
    var colorDiv = document.createElement('div');
    colorDiv.className = "color-div ".concat(color);
    var colorLabel = document.createElement('span');
    colorLabel.className = "color-label";
    colorLabel.innerText = color;
    colorDiv.appendChild(colorLabel);
    palette.appendChild(colorDiv);
  });
  var testDiv = document.createElement('div');
  testDiv.className = "color-div brick-1";
  var colorLabel = document.createElement('span');
  colorLabel.className = "color-label";
  colorLabel.innerText = 'testDiv';
  testDiv.appendChild(colorLabel);
  palette.appendChild(testDiv);

  testDiv.onclick = function () {
    return testDiv.classList.toggle('test-color-div');
  };

  togglePalette.addEventListener('click', function () {
    palette.classList.toggle('hidden');
  });
  document.body.append(togglePalette, palette);
}

/***/ }),

/***/ "./src/scripts/index.js":
/*!******************************!*\
  !*** ./src/scripts/index.js ***!
  \******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _styles_index_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../styles/index.scss */ "./src/styles/index.scss");
/* harmony import */ var _styles_index_scss__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_styles_index_scss__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _setup_setup_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./setup/setup_env */ "./src/scripts/setup/setup_env.js");
/* harmony import */ var _setup_setup_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./setup/setup_dom */ "./src/scripts/setup/setup_dom.js");
/* harmony import */ var _setup_setup_game__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./setup/setup_game */ "./src/scripts/setup/setup_game.js");
/* harmony import */ var _dev__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dev */ "./src/scripts/dev.js");








if (true) {
  Object(_dev__WEBPACK_IMPORTED_MODULE_6__["activateDevFlag"])();
}

document.addEventListener('DOMContentLoaded', /*#__PURE__*/_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.mark(function _callee() {
  var env, elements, gameStore;
  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return Object(_setup_setup_env__WEBPACK_IMPORTED_MODULE_3__["getNewEnv"])();

        case 2:
          env = _context.sent;
          elements = Object(_setup_setup_dom__WEBPACK_IMPORTED_MODULE_4__["default"])(env);
          _context.next = 6;
          return Object(_setup_setup_game__WEBPACK_IMPORTED_MODULE_5__["default"])({
            env: env,
            elements: elements
          });

        case 6:
          gameStore = _context.sent;
          Object(_dev__WEBPACK_IMPORTED_MODULE_6__["setupDev"])({
            env: env,
            elements: elements,
            gameStore: gameStore
          });

        case 8:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
})));

/***/ }),

/***/ "./src/scripts/setup/listeners/click_listeners.js":
/*!********************************************************!*\
  !*** ./src/scripts/setup/listeners/click_listeners.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return mountClickListeners; });
/* harmony import */ var _shared_dom_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/dom_util */ "./src/scripts/shared/dom_util.js");

function mountClickListeners(_ref) {
  var gameStore = _ref.gameStore,
      _ref$elements = _ref.elements,
      puzzleEle = _ref$elements.puzzleEle,
      infoEle = _ref$elements.infoEle;
  document.addEventListener('click', function (e) {
    if (!e.path.includes(puzzleEle) && !e.path.includes(infoEle)) {
      gameStore.clearFocus();
      gameStore.ui.clearSelectedSquares();
    }
  });
  puzzleEle.addEventListener('click', function (e) {
    var square = e.target.closest('.square');
    if (!square) return;
    var squareId = square.dataset.id;

    if (e.shiftKey) {
      gameStore.ui.selectThroughSquare(squareId);
    } else if (e.metaKey) {
      gameStore.ui.toggleSelectedSquare(squareId);
    } else {
      gameStore.selectSquareById(squareId);
    }
  });
}

/***/ }),

/***/ "./src/scripts/setup/listeners/keyboard_listeners.js":
/*!***********************************************************!*\
  !*** ./src/scripts/setup/listeners/keyboard_listeners.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return mountKeyboardListeners; });
/* harmony import */ var _shared_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/constants */ "./src/scripts/shared/constants.js");
/* harmony import */ var _shared_general_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/general_util */ "./src/scripts/shared/general_util.js");


function mountKeyboardListeners(_ref) {
  var gameStore = _ref.gameStore;
  document.addEventListener('keydown', function (e) {
    if (!gameStore.ui.curSquare) return;
    Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_1__["stringSwitch"])(e.code, function (_ref2) {
      var _case = _ref2._case,
          _ensure = _ref2._ensure;

      _case(!e.metaKey, !e.ctrlKey, /^Alt/, function () {
        return gameStore.beginStaging();
      });

      _case(!e.altKey, e.ctrlKey, _shared_constants__WEBPACK_IMPORTED_MODULE_0__["NUM_REGEX"], function () {
        return gameStore.toggleFocusedSquarePossibility(Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_1__["getNumFromCode"])(e.code));
      });

      _case(!e.altKey, e.shiftKey, _shared_constants__WEBPACK_IMPORTED_MODULE_0__["NUM_REGEX"], function () {
        return gameStore.toggleFilterPossibility(Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_1__["getNumFromCode"])(e.code));
      });

      _case(!e.altKey, _shared_constants__WEBPACK_IMPORTED_MODULE_0__["NUM_REGEX"], function () {
        return gameStore.setFocusedSquare(Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_1__["getNumFromCode"])(e.code));
      });

      _case(e.altKey, _shared_constants__WEBPACK_IMPORTED_MODULE_0__["NUM_REGEX"], function () {
        return gameStore.toggleStagedPossibility(Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_1__["getNumFromCode"])(e.code));
      });

      _case(!e.altKey, !e.shiftKey, _shared_constants__WEBPACK_IMPORTED_MODULE_0__["ARROW_REGEX"], function () {
        return gameStore.selectSquareByDir(Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_1__["getDirFromCode"])(e.code));
      });

      _case(e.ctrlKey, ['Delete', 'Backspace'], function () {
        return gameStore.resetFocusedSquarePossibilities();
      });

      _case(e.shiftKey, ['Delete', 'Backspace'], function () {
        return gameStore.clearFilter();
      });

      _case(!e.altKey, ['Delete', 'Backspace'], function () {
        return gameStore.clearFocusedSquare();
      });

      _case(e.altKey, ['Delete', 'Backspace'], function () {
        return gameStore.clearStagedPossibilities();
      });

      _case(!e.altKey, e.shiftKey, _shared_constants__WEBPACK_IMPORTED_MODULE_0__["LEFT_OR_RIGHT_REGEX"], function () {
        return gameStore.ui.changeFilterModeByDir(Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_1__["getDirFromCode"])(e.code));
      });

      _case('KeyA', function () {
        return gameStore.ui.setFilterMode('and');
      });

      _case('KeyE', function () {
        return gameStore.ui.setFilterMode('not');
      });

      _case('KeyO', function () {
        return gameStore.ui.setFilterMode('or');
      });

      _ensure(function () {
        e.preventDefault();
      });
    });
  });
  document.addEventListener('keydown', function (e) {
    Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_1__["stringSwitch"])(e.code, function (_ref3) {
      var _case = _ref3._case,
          _ensure = _ref3._ensure;

      _case([e.metaKey, e.ctrlKey], 'KeyZ', function () {
        gameStore.undo();
      });

      _case([e.metaKey, e.ctrlKey], 'KeyY', function () {
        gameStore.redo();
      });

      _ensure(function () {
        e.preventDefault();
      });
    });
  });
  document.addEventListener('keyup', function (e) {
    if (e.key === 'Alt') {
      gameStore.stopStaging();
    }
  });
}

/***/ }),

/***/ "./src/scripts/setup/setup_dom.js":
/*!****************************************!*\
  !*** ./src/scripts/setup/setup_dom.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return setupDOM; });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shared_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/constants */ "./src/scripts/shared/constants.js");
/* harmony import */ var _shared_general_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/general_util */ "./src/scripts/shared/general_util.js");
/* harmony import */ var _shared_dom_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/dom_util */ "./src/scripts/shared/dom_util.js");
/* harmony import */ var _views_header_view__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../views/header_view */ "./src/scripts/views/header_view.js");
/* harmony import */ var _views_options_view__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../views/options_view */ "./src/scripts/views/options_view.js");
/* harmony import */ var _views_info_collection_view__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../views/info_collection_view */ "./src/scripts/views/info_collection_view.js");
/* harmony import */ var _views_info_square_view__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../views/info_square_view */ "./src/scripts/views/info_square_view.js");
/* harmony import */ var _views_square_view__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../views/square_view */ "./src/scripts/views/square_view.js");
/* harmony import */ var _dev__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../dev */ "./src/scripts/dev.js");










function setupDOM(_ref) {
  var globals = _ref.globals,
      templates = _ref.templates;
  setupOptions(templates);
  setupSquareTemplate(globals, templates);
  setupSquarePossibilities(globals, templates);
  setupFilterPossibilities(globals, templates);
  setupLabels(templates);
  setupIcons();
  setupLocalizations();
  return getElements();
}

function getElements() {
  return {
    puzzleEle: document.querySelector('.puzzle'),
    infoEle: document.querySelector('.info-box'),
    squareInfoEle: document.querySelector('.square-info'),
    collectionInfoEle: document.querySelector('.collection-info'),
    headerEle: document.querySelector('.header'),
    squareInfoEles: Object(_views_info_square_view__WEBPACK_IMPORTED_MODULE_7__["getSquareInfoElements"])(),
    collectionInfoEles: Object(_views_info_collection_view__WEBPACK_IMPORTED_MODULE_6__["getCollectionInfoElements"])(),
    headerEles: Object(_views_header_view__WEBPACK_IMPORTED_MODULE_4__["getHeaderElements"])(),
    optionsEles: Object(_views_options_view__WEBPACK_IMPORTED_MODULE_5__["getOptionsElements"])(),
    squareEle: _views_square_view__WEBPACK_IMPORTED_MODULE_8__["getSquareElement"],
    squareEles: _views_square_view__WEBPACK_IMPORTED_MODULE_8__["getSquareElementsFromId"]
  };
}

function setupIcons() {
  document.querySelectorAll('i').forEach(function (icon) {
    icon.className = _shared_constants__WEBPACK_IMPORTED_MODULE_1__["ICONS"][Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_2__["kebabToCamel"])(icon.className)];
  });
}

function setupSquareTemplate(globals, templates) {
  var modelPossibility = templates.square.querySelector('.square_possibility');

  for (var i = 1; i <= globals.size; i++) {
    var possibility = modelPossibility.cloneNode(true);
    possibility.dataset.val = i;
    possibility.innerText = i;
    modelPossibility.before(possibility);
  }

  modelPossibility.remove();
}

function setupSquarePossibilities(globals, templates) {
  var squarePossibilities = new DocumentFragment();

  for (var i = 1; i <= globals.size; i++) {
    var possibility = templates.squareInfoPossibility.cloneNode(true);
    possibility.dataset.val = i;
    possibility.querySelector('.square-info_possibility-val').innerText = i;
    squarePossibilities.appendChild(possibility);
  }

  document.querySelector('.square-info').prepend(squarePossibilities);
}

function setupFilterPossibilities(globals, templates) {
  var filterPossibilities = new DocumentFragment();

  for (var i = 1; i <= globals.size; i++) {
    var possibility = templates.filterPossibility.cloneNode(true);
    possibility.dataset.val = i;
    possibility.querySelector('.filter-possibility_val').innerText = i;
    filterPossibilities.appendChild(possibility);
  }

  document.querySelector('.filter-possibilities').prepend(filterPossibilities);
}

function setupLocalizations() {
  var metaKey = window.navigator.platform.startsWith('Win') ? '⌃' : '⌘';
  document.querySelector('#header-undo .keyboard').innerText = "".concat(metaKey, "z");
  document.querySelector('#header-redo .keyboard').innerText = "".concat(metaKey, "y");
}

function setupLabels(templates) {
  document.querySelector('.info-box').prepend(createLabel(templates.infoLabel, {
    text: 'Square',
    id: 'square-label'
  }), createLabel(templates.infoLabel, {
    text: 'Cage',
    id: 'cage-label'
  }));
}

function createLabel(template, _ref2) {
  var text = _ref2.text,
      id = _ref2.id;
  var label = template.cloneNode(true);
  label.setAttribute('id', id);
  label.querySelector('text').textContent = text;
  return label;
}

function setupOptions(templates) {
  var _document$querySelect;

  var template = templates.option;
  var toggleTemplate = templates.optionToggle;
  var numTemplate = templates.optionNum;
  var optionsData = [{
    inputId: 'option-auto-block',
    inputTemplate: toggleTemplate,
    infoText: 'block contradictory moves',
    hoverText: "prevents you from entering a number that's eliminated as a possibility"
  }, {
    inputId: 'option-auto-elim',
    inputTemplate: toggleTemplate,
    infoText: 'auto-eliminate possibilities',
    hoverText: "when you enter a number, remove that number as a possibility from all the squares in the same row or column"
  }, {
    inputId: 'option-auto-elim-math-impossibilities',
    inputTemplate: toggleTemplate,
    infoText: 'auto-eliminate mathematical impossibilities',
    hoverText: "only certain combinations of numbers can mathematically appear in a cage; eliminate those that can't"
  }, {
    inputId: 'option-walkthrough',
    inputTemplate: toggleTemplate,
    infoText: 'always show walkthrough',
    hoverText: "always show the walkthrough upon refresh or revisiting this page"
  }, {
    inputId: 'option-max-possibilities',
    inputTemplate: numTemplate,
    infoText: 'max possibilities to display in square',
    hoverText: "don't display the possibilites in the square itself, unless you've narrowed it down to this number or less"
  }];
  var options = optionsData.map(function (data) {
    return createOption(template, data);
  });

  (_document$querySelect = document.querySelector('#header-options .header_dropdown')).append.apply(_document$querySelect, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(options));
}

function createOption(template, _ref3) {
  var infoText = _ref3.infoText,
      hoverText = _ref3.hoverText,
      inputTemplate = _ref3.inputTemplate,
      inputId = _ref3.inputId;
  var option = template.cloneNode(true);
  var input = inputTemplate.cloneNode(true);
  option.querySelector('.option_info-text').innerText = infoText;
  option.querySelector('.option_hover-text').innerText = hoverText;
  input.setAttribute('id', inputId);
  option.append(input);
  return option;
}

/***/ }),

/***/ "./src/scripts/setup/setup_env.js":
/*!****************************************!*\
  !*** ./src/scripts/setup/setup_env.js ***!
  \****************************************/
/*! exports provided: getNewEnv, resetEnv, getStaticEnv */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNewEnv", function() { return getNewEnv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resetEnv", function() { return resetEnv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getStaticEnv", function() { return getStaticEnv; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _shared_lru_cache__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/lru_cache */ "./src/scripts/shared/lru_cache.js");
/* harmony import */ var _shared_dom_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/dom_util */ "./src/scripts/shared/dom_util.js");
/* harmony import */ var _data_puzzles__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../data/puzzles */ "./src/scripts/data/puzzles.js");
/* harmony import */ var _views_header_view__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../views/header_view */ "./src/scripts/views/header_view.js");
/* harmony import */ var _views_options_view__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../views/options_view */ "./src/scripts/views/options_view.js");
/* harmony import */ var _views_info_collection_view__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../views/info_collection_view */ "./src/scripts/views/info_collection_view.js");
/* harmony import */ var _views_info_square_view__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../views/info_square_view */ "./src/scripts/views/info_square_view.js");
/* harmony import */ var _views_square_view__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../views/square_view */ "./src/scripts/views/square_view.js");
/* harmony import */ var _shared_general_util__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../shared/general_util */ "./src/scripts/shared/general_util.js");
/* harmony import */ var _shared_storage_util__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../shared/storage_util */ "./src/scripts/shared/storage_util.js");




function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }











function getNewEnv() {
  return _getNewEnv.apply(this, arguments);
}

function _getNewEnv() {
  _getNewEnv = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default.a.mark(function _callee() {
    var env, oldEnv;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            env = _objectSpread(_objectSpread({}, getStaticEnv()), getDefaultDynamicEnv());
            _context.prev = 1;
            _context.next = 4;
            return Object(_shared_storage_util__WEBPACK_IMPORTED_MODULE_12__["dbGet"])('env');

          case 4:
            oldEnv = _context.sent;
            console.log('here', oldEnv);
            return _context.abrupt("return", Object.assign(env, oldEnv));

          case 9:
            _context.prev = 9;
            _context.t0 = _context["catch"](1);
            console.log(_context.t0);
            return _context.abrupt("return", env);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 9]]);
  }));
  return _getNewEnv.apply(this, arguments);
}

function resetEnv(env) {
  return Object.assign(env, getDefaultDynamicEnv());
}
function getStaticEnv() {
  return {
    puzzles: _data_puzzles__WEBPACK_IMPORTED_MODULE_5__["default"],
    globals: {
      size: 9,
      mistakeTimeoutMs: 600
    },
    templates: {
      option: Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_4__["getTemplateById"])('option-template'),
      optionToggle: Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_4__["getTemplateById"])('option-toggle-template'),
      optionNum: Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_4__["getTemplateById"])('option-num-template'),
      square: Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_4__["getTemplateById"])('square-template'),
      combo: Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_4__["getTemplateById"])('combo-template'),
      squareInfoPossibility: Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_4__["getTemplateById"])('square-info_possibility-template'),
      filterPossibility: Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_4__["getTemplateById"])('filter-possibility-template'),
      infoLabel: Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_4__["getTemplateById"])('info-label-template'),
      spotlight: Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_4__["getTemplateById"])('spotlight-template'),
      spotlightCaption: Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_4__["getTemplateById"])('spotlight-caption-template'),
      puzzleCaptionContent: Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_4__["getTemplateById"])('caption-content-puzzle-template'),
      cageCaptionContent: Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_4__["getTemplateById"])('caption-content-cage-template'),
      infoCaptionContent: Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_4__["getTemplateById"])('caption-content-info-template'),
      squareInfoCaptionContent: Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_4__["getTemplateById"])('caption-content-square-info-template'),
      collectionInfoCaptionContent: Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_4__["getTemplateById"])('caption-content-collection-info-template'),
      instructionsCaptionContent: Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_4__["getTemplateById"])('caption-content-instructions-template')
    }
  };
}

function getDefaultDynamicEnv() {
  return {
    snapshots: {},
    history: [],
    future: [],
    puzzleCache: new _shared_lru_cache__WEBPACK_IMPORTED_MODULE_3__["default"](50, 10 * 60 * 1000)
  };
}

/***/ }),

/***/ "./src/scripts/setup/setup_game.js":
/*!*****************************************!*\
  !*** ./src/scripts/setup/setup_game.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return setupGame; });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _views_header_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../views/header_view */ "./src/scripts/views/header_view.js");
/* harmony import */ var _views_options_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../views/options_view */ "./src/scripts/views/options_view.js");
/* harmony import */ var _views_info_collection_view__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../views/info_collection_view */ "./src/scripts/views/info_collection_view.js");
/* harmony import */ var _views_info_square_view__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../views/info_square_view */ "./src/scripts/views/info_square_view.js");
/* harmony import */ var _listeners_keyboard_listeners__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./listeners/keyboard_listeners */ "./src/scripts/setup/listeners/keyboard_listeners.js");
/* harmony import */ var _listeners_click_listeners__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./listeners/click_listeners */ "./src/scripts/setup/listeners/click_listeners.js");
/* harmony import */ var _setup_puzzle__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./setup_puzzle */ "./src/scripts/setup/setup_puzzle.js");
/* harmony import */ var _walkthrough__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./walkthrough */ "./src/scripts/setup/walkthrough.js");
/* harmony import */ var mobx_state_tree__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! mobx-state-tree */ "./node_modules/mobx-state-tree/dist/mobx-state-tree.module.js");
/* harmony import */ var _store_game__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../store/game */ "./src/scripts/store/game.js");











 // const RESTORE_FLAG = window.localStorage.getItem('restoreFlag')

var RESTORE_FLAG = true;
function setupGame(_x) {
  return _setupGame.apply(this, arguments);
}

function _setupGame() {
  _setupGame = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.mark(function _callee(_ref) {
    var env, elements, gameStore, game;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            env = _ref.env, elements = _ref.elements;
            _context.next = 3;
            return createGameStore(env);

          case 3:
            gameStore = _context.sent;
            game = {
              gameStore: gameStore,
              env: env,
              elements: elements
            };
            Object(_views_options_view__WEBPACK_IMPORTED_MODULE_3__["setupOptions"])(game);
            Object(_views_info_square_view__WEBPACK_IMPORTED_MODULE_5__["setupSquareInfo"])(game);
            Object(_views_info_collection_view__WEBPACK_IMPORTED_MODULE_4__["setupCollectionInfo"])(game);
            Object(_setup_puzzle__WEBPACK_IMPORTED_MODULE_8__["setupPuzzle"])(game);

            if (!(gameStore.storedSnapshot && gameStore.options.walkthrough)) {
              _context.next = 12;
              break;
            }

            _context.next = 12;
            return Object(_walkthrough__WEBPACK_IMPORTED_MODULE_9__["default"])(game);

          case 12:
            Object(_views_header_view__WEBPACK_IMPORTED_MODULE_2__["setupHeader"])(game);
            Object(_listeners_click_listeners__WEBPACK_IMPORTED_MODULE_7__["default"])(game);
            Object(_listeners_keyboard_listeners__WEBPACK_IMPORTED_MODULE_6__["default"])(game);

            if (!RESTORE_FLAG) {
              _context.next = 18;
              break;
            }

            _context.next = 18;
            return gameStore.applyStoredSnapshot();

          case 18:
            gameStore.attachHooks();
            return _context.abrupt("return", gameStore);

          case 20:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _setupGame.apply(this, arguments);
}

function createGameStore(_x2) {
  return _createGameStore.apply(this, arguments);
}

function _createGameStore() {
  _createGameStore = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.mark(function _callee2(env) {
    var gameStore;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            gameStore = _store_game__WEBPACK_IMPORTED_MODULE_11__["default"].create({}, env);

            if (!RESTORE_FLAG) {
              _context2.next = 6;
              break;
            }

            _context2.next = 4;
            return gameStore.resetToStoredSnapshot();

          case 4:
            _context2.next = 7;
            break;

          case 6:
            gameStore.initialize();

          case 7:
            return _context2.abrupt("return", gameStore);

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _createGameStore.apply(this, arguments);
}

/***/ }),

/***/ "./src/scripts/setup/setup_puzzle.js":
/*!*******************************************!*\
  !*** ./src/scripts/setup/setup_puzzle.js ***!
  \*******************************************/
/*! exports provided: newPuzzle, setupPuzzle, resetPuzzle, restorePuzzle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "newPuzzle", function() { return newPuzzle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setupPuzzle", function() { return setupPuzzle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resetPuzzle", function() { return resetPuzzle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "restorePuzzle", function() { return restorePuzzle; });
/* harmony import */ var _setup_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setup_env */ "./src/scripts/setup/setup_env.js");
/* harmony import */ var _views_square_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../views/square_view */ "./src/scripts/views/square_view.js");


var disposerFunc;
function newPuzzle(game) {
  var _disposerFunc;

  (_disposerFunc = disposerFunc) === null || _disposerFunc === void 0 ? void 0 : _disposerFunc();
  game.gameStore.newPuzzle();
  Object(_setup_env__WEBPACK_IMPORTED_MODULE_0__["resetEnv"])(game.env);
  disposerFunc = Object(_views_square_view__WEBPACK_IMPORTED_MODULE_1__["setupSquares"])(game);
}
function setupPuzzle(game) {
  disposerFunc = Object(_views_square_view__WEBPACK_IMPORTED_MODULE_1__["setupSquares"])(game);
}
function resetPuzzle(game) {
  game.gameStore.resetPuzzle();
  Object(_setup_env__WEBPACK_IMPORTED_MODULE_0__["resetEnv"])(game.env);
}
function restorePuzzle(game) {
  var _disposerFunc2;

  (_disposerFunc2 = disposerFunc) === null || _disposerFunc2 === void 0 ? void 0 : _disposerFunc2();
  disposerFunc = Object(_views_square_view__WEBPACK_IMPORTED_MODULE_1__["setupSquares"])(game);
}

/***/ }),

/***/ "./src/scripts/setup/walkthrough.js":
/*!******************************************!*\
  !*** ./src/scripts/setup/walkthrough.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shared_dom_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/dom_util */ "./src/scripts/shared/dom_util.js");
/* harmony import */ var _shared_general_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/general_util */ "./src/scripts/shared/general_util.js");
/* harmony import */ var _shared_spotlight__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/spotlight */ "./src/scripts/shared/spotlight.js");




/* harmony default export */ __webpack_exports__["default"] = (function (_ref) {
  var gameStore = _ref.gameStore,
      env = _ref.env,
      elements = _ref.elements;
  var caption = env.templates.spotlightCaption.cloneNode(true);
  var svg = env.templates.spotlight.cloneNode(true);

  var cleanup = function cleanup() {};

  var steps = getSpotlights({
    gameStore: gameStore,
    env: env,
    elements: elements
  }).map(function (spotlight) {
    return function () {
      cleanup();

      var update = function update() {
        spotlight.updateSVG({
          element: svg,
          regenerate: true
        });
        spotlight.updateCaption({
          element: caption,
          regenerate: false
        });
      };

      if (spotlight.captionContent) {
        var _caption$querySelecto;

        (_caption$querySelecto = caption.querySelector('.caption-content')) === null || _caption$querySelecto === void 0 ? void 0 : _caption$querySelecto.remove();
        caption.prepend(spotlight.captionContent);
      }

      var cleanupShow = spotlight.onShow();
      window.addEventListener('resize', update);

      cleanup = function cleanup() {
        window.removeEventListener('resize', update);
        cleanupShow();
      }; // debugger


      update();
      appendIfRemoved(svg, caption);
    };
  });
  return new Promise(function (resolve) {
    var finish = function finish() {
      cleanup();
      svg.remove();
      caption.remove();
      document.removeEventListener('keydown', handleKeydown, true);
      resolve();
    };

    steps.push(finish);

    var _getCaptionElements = getCaptionElements(caption),
        nextBtn = _getCaptionElements.nextBtn,
        previousBtn = _getCaptionElements.previousBtn,
        finishBtn = _getCaptionElements.finishBtn;

    var curStep = 0;

    var next = function next() {
      return steps[++curStep]();
    };

    var prev = function prev() {
      if (curStep > 0) steps[--curStep]();
    };

    Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_1__["addNoFocusClickListener"])(nextBtn, next);
    Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_1__["addNoFocusClickListener"])(previousBtn, prev);
    Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_1__["addNoFocusClickListener"])(finishBtn, finish);

    function handleKeydown(e) {
      Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_2__["stringSwitch"])(e.code, function (_ref2) {
        var _case = _ref2._case;

        _case('KeyN', next);

        _case('KeyP', prev);

        _case('KeyF', finish); // e.stopImmediatePropagation()

      });
    }

    document.addEventListener('keydown', handleKeydown, true);
    steps[curStep]();
  });
});

function getSpotlights(_ref3) {
  var gameStore = _ref3.gameStore,
      _ref3$env$templates = _ref3.env.templates,
      puzzleCaptionContent = _ref3$env$templates.puzzleCaptionContent,
      infoCaptionContent = _ref3$env$templates.infoCaptionContent,
      squareInfoCaptionContent = _ref3$env$templates.squareInfoCaptionContent,
      collectionInfoCaptionContent = _ref3$env$templates.collectionInfoCaptionContent,
      instructionsCaptionContent = _ref3$env$templates.instructionsCaptionContent,
      _ref3$elements = _ref3.elements,
      puzzleEle = _ref3$elements.puzzleEle,
      infoEle = _ref3$elements.infoEle,
      squareInfoEle = _ref3$elements.squareInfoEle,
      collectionInfoEle = _ref3$elements.collectionInfoEle,
      _ref3$elements$header = _ref3$elements.headerEles,
      instructionsButton = _ref3$elements$header.instructionsButton,
      instructionsDropdown = _ref3$elements$header.instructionsDropdown;
  var cageSquares = getCageSquares(gameStore);
  var squareEle = cageSquares[0];
  return [_shared_spotlight__WEBPACK_IMPORTED_MODULE_3__["default"].fromEle(puzzleEle, {
    padding: 5,
    borderRadius: 8,
    captionContent: puzzleCaptionContent.cloneNode(true)
  }), _shared_spotlight__WEBPACK_IMPORTED_MODULE_3__["default"].fromEle(infoEle, {
    padding: {
      default: 6,
      left: 8
    },
    borderRadius: 8,
    blur: 1.5,
    captionPosition: 'left',
    captionOffsetX: '-10px',
    captionOffsetY: '50px',
    captionContent: infoCaptionContent.cloneNode(true)
  }), _shared_spotlight__WEBPACK_IMPORTED_MODULE_3__["default"].fromEles([squareEle, squareInfoEle], {
    padding: [0, {
      default: 0,
      top: -10,
      bottom: -20
    }],
    borderRadius: 2,
    blur: 1,
    captionPosition: 'bottom',
    captionContent: squareInfoCaptionContent.cloneNode(true),
    onShow: function onShow() {
      gameStore.selectSquareById(squareEle.dataset.id);
      return function () {
        gameStore.clearFocus();
        gameStore.ui.clearSelectedSquares();
      };
    }
  }), _shared_spotlight__WEBPACK_IMPORTED_MODULE_3__["default"].fromEles([].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(cageSquares), [collectionInfoEle]), {
    padding: [].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(Array(cageSquares.length).fill(0.5)), [{
      // default: 0,
      top: 26,
      bottom: -10
    }]),
    borderRadius: 2,
    blur: 1,
    captionPosition: 'bottom',
    captionContent: collectionInfoCaptionContent.cloneNode(true),
    onShow: function onShow() {
      gameStore.selectSquareById(squareEle.dataset.id);
      return function () {
        gameStore.clearFocus();
        gameStore.ui.clearSelectedSquares();
      };
    }
  }), _shared_spotlight__WEBPACK_IMPORTED_MODULE_3__["default"].fromEles([instructionsButton, instructionsDropdown], {
    padding: [{
      right: 7,
      bottom: 7,
      default: 4
    }, {
      default: 6,
      top: 4
    }],
    borderRadius: 8,
    blur: 2,
    captionPosition: 'right',
    captionContent: instructionsCaptionContent.cloneNode(true),
    onShow: function onShow() {
      instructionsDropdown.classList.add('show');
      return function () {
        return instructionsDropdown.classList.remove('show');
      };
    }
  })];
}

function getCaptionElements(captionEle) {
  return {
    nextBtn: captionEle.querySelector('#spotlight-next'),
    previousBtn: captionEle.querySelector('#spotlight-previous'),
    finishBtn: captionEle.querySelector('#spotlight-finish')
  };
}

function getCageSquares(gameStore) {
  var cornerCage = gameStore.puzzle.cagesArray.find(function (cage) {
    return cage.numPossibleRepeats > 0;
  });
  return Array.from(cornerCage.squares.map(function (square) {
    return document.querySelector(".square[data-id=\"".concat(square.id, "\"]"));
  }));
}

function createSVG() {
  return Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_1__["getTemplateById"])('spotlight-template').cloneNode(true);
}

function appendIfRemoved() {
  var _document$body;

  for (var _len = arguments.length, eles = new Array(_len), _key = 0; _key < _len; _key++) {
    eles[_key] = arguments[_key];
  }

  var removedEles = eles.filter(function (ele) {
    return !document.body.contains(ele);
  });

  (_document$body = document.body).append.apply(_document$body, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(removedEles));
}

/***/ }),

/***/ "./src/scripts/shared/constants.js":
/*!*****************************************!*\
  !*** ./src/scripts/shared/constants.js ***!
  \*****************************************/
/*! exports provided: ADD, SUBTRACT, MULTIPLY, DIVIDE, ARROW_REGEX, UP_OR_DOWN_REGEX, LEFT_OR_RIGHT_REGEX, NUM_REGEX, ICONS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ADD", function() { return ADD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SUBTRACT", function() { return SUBTRACT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MULTIPLY", function() { return MULTIPLY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DIVIDE", function() { return DIVIDE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ARROW_REGEX", function() { return ARROW_REGEX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UP_OR_DOWN_REGEX", function() { return UP_OR_DOWN_REGEX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LEFT_OR_RIGHT_REGEX", function() { return LEFT_OR_RIGHT_REGEX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUM_REGEX", function() { return NUM_REGEX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ICONS", function() { return ICONS; });
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/wrapNativeSuper */ "./node_modules/@babel/runtime/helpers/wrapNativeSuper.js");
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_4__);






function _wrapRegExp(re, groups) { _wrapRegExp = function _wrapRegExp(re, groups) { return new BabelRegExp(re, undefined, groups); }; var _RegExp = _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_4___default()(RegExp); var _super = RegExp.prototype; var _groups = new WeakMap(); function BabelRegExp(re, flags, groups) { var _this = _RegExp.call(this, re, flags); _groups.set(_this, groups || _groups.get(re)); return _this; } _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1___default()(BabelRegExp, _RegExp); BabelRegExp.prototype.exec = function (str) { var result = _super.exec.call(this, str); if (result) result.groups = buildGroups(result, this); return result; }; BabelRegExp.prototype[Symbol.replace] = function (str, substitution) { if (typeof substitution === "string") { var groups = _groups.get(this); return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) { return "$" + groups[name]; })); } else if (typeof substitution === "function") { var _this = this; return _super[Symbol.replace].call(this, str, function () { var args = []; args.push.apply(args, arguments); if (_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(args[args.length - 1]) !== "object") { args.push(buildGroups(args, _this)); } return substitution.apply(this, args); }); } else { return _super[Symbol.replace].call(this, str, substitution); } }; function buildGroups(result, re) { var g = _groups.get(re); return Object.keys(g).reduce(function (groups, name) { groups[name] = result[g[name]]; return groups; }, Object.create(null)); } return _wrapRegExp.apply(this, arguments); }

var ADD = '+';
var SUBTRACT = '−';
var MULTIPLY = '⨉';
var DIVIDE = '÷';
var ARROW_REGEX = /*#__PURE__*/_wrapRegExp(/^Arrow(.*)/, {
  dir: 1
});
var UP_OR_DOWN_REGEX = /*#__PURE__*/_wrapRegExp(/^Arrow(Up|Down)/, {
  dir: 1
});
var LEFT_OR_RIGHT_REGEX = /*#__PURE__*/_wrapRegExp(/^Arrow(Left|Right)/, {
  dir: 1
});
var NUM_REGEX = /*#__PURE__*/_wrapRegExp(/^(Digit|Numpad)([0-9])/, {
  num: 2
});
var ICONS = {
  info: 'fas fa-info-circle',
  ban: 'fas fa-ban',
  circle: 'far fa-circle',
  circleFilled: 'fas fa-circle',
  square: 'far fa-square',
  slash: 'fas fa-slash',
  clear: 'fas fa-eraser',
  reset: 'fas fa-undo-alt',
  select: 'far fa-check-circle',
  confirm: 'fas fa-check-circle'
};

/***/ }),

/***/ "./src/scripts/shared/dom_partials.js":
/*!********************************************!*\
  !*** ./src/scripts/shared/dom_partials.js ***!
  \********************************************/
/*! exports provided: baseIcons, eliminatedIcons, alternativeIcons, requiredIcons */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "baseIcons", function() { return baseIcons; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eliminatedIcons", function() { return eliminatedIcons; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alternativeIcons", function() { return alternativeIcons; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "requiredIcons", function() { return requiredIcons; });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./src/scripts/shared/constants.js");
/* harmony import */ var _general_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./general_util */ "./src/scripts/shared/general_util.js");



var createBasicIcon = function createBasicIcon(iconName) {
  var icon = document.createElement('i');
  icon.className = _constants__WEBPACK_IMPORTED_MODULE_0__["ICONS"][iconName];
  return icon;
};

var createIcon = function createIcon(iconName) {
  var iconSpan = document.createElement('span');
  iconSpan.appendChild(createBasicIcon(iconName));

  for (var _len = arguments.length, flags = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    flags[_key - 1] = arguments[_key];
  }

  iconSpan.className = Object(_general_util__WEBPACK_IMPORTED_MODULE_1__["generateClassName"])('possibility-icon', flags);
  return iconSpan;
};

var baseIcons = function baseIcons() {
  return [createIcon('square')];
};
var eliminatedIcons = function eliminatedIcons() {
  return [createIcon('square', 'eliminated'), createIcon('slash', 'small')];
};
var alternativeIcons = function alternativeIcons() {
  return [createIcon('square', 'alternative'), createIcon('square', 'alternative-inner')];
};
var requiredIcons = function requiredIcons() {
  return [createIcon('square', 'required')];
};

/***/ }),

/***/ "./src/scripts/shared/dom_util.js":
/*!****************************************!*\
  !*** ./src/scripts/shared/dom_util.js ***!
  \****************************************/
/*! exports provided: extractPosFromSquare, mountDropdown, addNoFocusClickListener, getTemplateNode, getTemplateById, isEquivalentNode, haveEquivalentChildren, updateChildrenToMatch, generateHighlightFuncs, createSVGElement, applyStyle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extractPosFromSquare", function() { return extractPosFromSquare; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mountDropdown", function() { return mountDropdown; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addNoFocusClickListener", function() { return addNoFocusClickListener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTemplateNode", function() { return getTemplateNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTemplateById", function() { return getTemplateById; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isEquivalentNode", function() { return isEquivalentNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "haveEquivalentChildren", function() { return haveEquivalentChildren; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateChildrenToMatch", function() { return updateChildrenToMatch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "generateHighlightFuncs", function() { return generateHighlightFuncs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createSVGElement", function() { return createSVGElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyStyle", function() { return applyStyle; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ "./node_modules/@babel/runtime/helpers/objectWithoutProperties.js");
/* harmony import */ var _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js");
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _general_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./general_util */ "./src/scripts/shared/general_util.js");




function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }


var extractPosFromSquare = function extractPosFromSquare(square) {
  return square === null || square === void 0 ? void 0 : square.dataset.pos.split(',');
};
var mountDropdown = function mountDropdown(button, dropdown, showClass) {
  document.addEventListener('click', function (e) {
    var outsideDropdown = !dropdown.contains(e.target);
    var onButton = outsideDropdown && button.contains(e.target);
    var isShowing = dropdown.classList.contains(showClass);

    if (isShowing && outsideDropdown || !isShowing && onButton) {
      if (isShowing) button.blur();
      dropdown.classList.toggle(showClass);
    }
  });
};
var addNoFocusClickListener = function addNoFocusClickListener(element, listener) {
  return element.addEventListener('mousedown', function (e) {
    e.preventDefault();
    listener(e);
  });
};
var getTemplateNode = function getTemplateNode(template) {
  var firstChild = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  return firstChild ? template.content.firstElementChild : template.content;
};
var getTemplateById = function getTemplateById(id) {
  var firstChild = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  return getTemplateNode(document.getElementById(id), firstChild);
};
function isEquivalentNode(nodeA, nodeB) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return nodeA.nodeName === nodeB.nodeName && haveEquivalentAttributes(nodeA, nodeB, options) && haveEquivalentChildren(nodeA, nodeB, options);
}
function haveEquivalentChildren(nodeOrListA, nodeOrListB) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var childrenA = nodeOrListA instanceof Node ? Array.from(nodeOrListA.childNodes) : nodeOrListA;
  var childrenB = nodeOrListB instanceof Node ? Array.from(nodeOrListB.childNodes) : nodeOrListB;

  if (childrenA.length !== childrenB.length) {
    return false;
  } else if (childrenA.length === 0) {
    return true;
  } else {
    for (var i = 0; i < childrenA.length; i++) {
      var childA = childrenA[i];
      var childB = childrenB[i];

      if (!isEquivalentNode(childA, childB, options)) {
        return false;
      }
    }

    return true;
  }
}

function haveEquivalentAttributes(nodeA, nodeB) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var attributesA = nodeA.getAttributeNames();
  var attributesB = nodeB.getAttributeNames();

  if (options.attributes) {
    attributesA = attributesA.filter(function (attr) {
      return options.attributes.includes(attr);
    });
    attributesB = attributesB.filter(function (attr) {
      return options.attributes.includes(attr);
    });
  }

  if (attributesA.length !== attributesB.length) {
    return false;
  }

  return attributesA.every(function (attr) {
    return nodeA.getAttribute(attr) === nodeB.getAttribute(attr);
  });
}

function updateChildrenToMatch(nodeA, nodeOrListB, comparator) {
  var childrenB = nodeOrListB instanceof Node ? Array.from(nodeOrListB.children) : nodeOrListB;
  var getNextAChild = Object(_general_util__WEBPACK_IMPORTED_MODULE_3__["genStepper"])(Array.from(nodeA.children));
  var getNextBChild = Object(_general_util__WEBPACK_IMPORTED_MODULE_3__["genStepper"])(childrenB);
  var childA = getNextAChild();
  var childB = getNextBChild();

  while (typeof childA !== 'undefined' || typeof childB !== 'undefined') {
    if (typeof childA === 'undefined') {
      nodeA.append(childB);
      childB = getNextBChild();
    } else if (typeof childB === 'undefined') {
      childA.remove();
      childA = getNextAChild();
    } else {
      switch (comparator(childA, childB)) {
        case -1:
          childA.remove();
          childA = getNextAChild();
          break;

        case 0:
          updateAttributesToMatch(childA, childB);
          childA = getNextAChild();
          childB = getNextBChild();
          break;

        case 1:
          nodeA.insertBefore(childB.cloneNode(true), childA);
          childB = getNextBChild();
          break;
      }
    }
  }
}

function updateAttributesToMatch(nodeA, nodeB) {
  nodeA.getAttributeNames().forEach(function (attr) {
    var _map = [nodeA, nodeB].map(function (node) {
      return node.getAttribute(attr);
    }),
        _map2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_2___default()(_map, 2),
        valA = _map2[0],
        valB = _map2[1];

    if (valA !== valB) nodeA.setAttribute(attr, valB);
  });
} // function _highlightEle(ele, {
//   padding = 0,
//   paddingLeft,
//   paddingRight,
//   paddingTop,
//   paddingBottom,
//   captionTemplate = null,
//   captionAnchor = [1, 0],
//   centerCaption = true,
//   fuzzy = true,
//   top,
//   left,
//   right,
//   bottom,
// } = {}) {
//   paddingLeft = paddingLeft || padding
//   paddingRight = paddingRight || padding
//   paddingTop = paddingTop || padding
//   paddingBottom = paddingBottom || padding
//   const {
//     top: eleTop,
//     right: eleRight,
//     left: eleLeft,
//     bottom: eleBottom,
//     height: eleHeight,
//     width: eleWidth,
//   } = ele.getBoundingClientRect()
//   const paddedTop = toPixels(eleTop - paddingTop)
//   const paddedRight = toPixels(eleRight + paddingRight)
//   const paddedBottom = toPixels(eleBottom + paddingBottom)
//   const paddedLeft = toPixels(eleLeft - paddingLeft)
//   const paddedHeight = toPixels(eleHeight + paddingTop + paddingBottom)
//   const paddedWidth = toPixels(eleWidth + paddingLeft + paddingRight)
//   const above = {
//     top: 0,
//     left: 0,
//     right: 0,
//     height: paddedTop,
//   }
//   const below = {
//     top: paddedBottom,
//     left: 0,
//     right: 0,
//     bottom: 0,
//   }
//   const toLeft = {
//     top: paddedTop,
//     height: paddedHeight,
//     left: 0,
//     width: paddedLeft,
//   }
//   const toRight = {
//     top: paddedTop,
//     height: paddedHeight,
//     right: 0,
//     left: paddedRight,
//   }
//   const [
//     aboveEle,
//     belowEle,
//     toLeftEle,
//     toRightEle,
//   ] = [above, below, toLeft, toRight].map(style => {
//     const ele = document.createElement('div')
//     ele.className = 'dim'
//     Object.entries(style).forEach(([prop, val]) => {
//       ele.style[prop] = val
//     })
//     document.body.append(ele)
//     return ele
//   })
//   let fuzzyEle
//   if (fuzzy) {
//     fuzzyEle = document.createElement('div')
//     fuzzyEle.className = 'highlight-shadow'
//     fuzzyEle.style.top = paddedTop
//     fuzzyEle.style.left = paddedLeft
//     fuzzyEle.style.height = paddedHeight
//     fuzzyEle.style.width = paddedWidth
//     document.body.append(fuzzyEle)
//   }
//   const removeEles = () => [
//     aboveEle,
//     belowEle,
//     toLeftEle,
//     toRightEle,
//     fuzzyEle,
//   ].forEach(ele => ele && ele.remove())
//   if (captionTemplate && captionAnchor) {
//     try {
//       const [anchor, style, dataShift] = prepareCaptionEle({
//         aboveEle,
//         belowEle,
//         toLeftEle,
//         toRightEle,
//         captionAnchor,
//         top,
//         right,
//         bottom,
//         left,
//         midX: toPixels(eleRight - (eleWidth / 2))
//       })
//       const captionEle = captionTemplate.cloneNode(true)
//       Object.entries(style).forEach(([prop, val]) => {
//         if (val !== undefined) captionEle.style[prop] = val
//       })
//       if (centerCaption) captionEle.classList.add('caption')
//       if (dataShift) captionEle.dataset.shift = dataShift
//       anchor.append(captionEle)
//     } catch (e) {
//       removeEles()
//       throw e
//     }
//   }
//   return removeEles
// }
// function _prepareCaptionEle({
//   aboveEle,
//   belowEle,
//   toLeftEle,
//   toRightEle,
//   captionAnchor,
//   top,
//   right,
//   bottom,
//   left,
//   midX
// }) {
//   const anchorMap = {
//     top: [0, -1],
//     topRight: [1, -1],
//     right: [1, 0],
//     bottomRight: [1, 1],
//     bottom: [0, 1],
//     bottomLeft: [-1, 1],
//     left: [-1, 0],
//     topLeft: [-1, -1],
//   }
//   if (typeof captionAnchor === 'string') {
//     captionAnchor = anchorMap[captionAnchor]
//   }
//   if (!(captionAnchor instanceof Array)) {
//     throw new Error('captionAnchor must be an ordered pair array or valid string')
//   }
//   const [anchor, {
//     top: defaultTop,
//     right: defaultRight,
//     bottom: defaultBottom,
//     left: defaultLeft,
//   }, dataShift] = funcSwitch(captionAnchor, areEqualArrays, ({ _case }) => {
//     _case([[0, -1]], () => [aboveEle, { bottom: 0, left: midX }, 'left'])
//     _case([[1, -1]], () => [toRightEle, { bottom: '100%', left: 0 }])
//     _case([[1, 0]], () => [toRightEle, { top: '50%', left: 0 }, 'up'])
//     _case([[1, 1]], () => [toRightEle, { top: '100%', left: 0 }])
//     _case([[0, 1]], () => [belowEle, { top: 0, left: midX }, 'left'])
//     _case([[-1, 1]], () => [toLeftEle, { top: '100%', right: 0 }])
//     _case([[-1, 0]], () => [toLeftEle, { top: '50%', right: 0 }, 'up'])
//     _case([[-1, -1]], () => [toLeftEle, { bottom: '100%', right: 0 }])
//   })
//   return [anchor, {
//     top: mergeProp(defaultTop, top),
//     right: mergeProp(defaultRight, right),
//     bottom: mergeProp(defaultBottom, bottom),
//     left: mergeProp(defaultLeft, left),
//   }, dataShift]
// }


var generateHighlightFuncs = function generateHighlightFuncs() {
  for (var _len = arguments.length, eles = new Array(_len), _key = 0; _key < _len; _key++) {
    eles[_key] = arguments[_key];
  }

  var unhighlight = null;
  return [function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (!unhighlight) {
      unhighlight = highlightEles.apply(void 0, eles.concat([options]));
    }
  }, function () {
    if (unhighlight) {
      unhighlight();
      unhighlight = null;
    }
  }];
};

function highlightEles() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  // parse args
  var lastArg = args[args.length - 1];
  var eles = lastArg instanceof Node ? args : args.slice(0, -1);

  var _ref = lastArg instanceof Node ? {} : lastArg,
      _ref$padding = _ref.padding,
      padding = _ref$padding === void 0 ? 0 : _ref$padding,
      paddingTop = _ref.paddingTop,
      paddingRight = _ref.paddingRight,
      paddingBottom = _ref.paddingBottom,
      paddingLeft = _ref.paddingLeft,
      _ref$captionTemplate = _ref.captionTemplate,
      captionTemplate = _ref$captionTemplate === void 0 ? null : _ref$captionTemplate,
      _ref$captionPos = _ref.captionPos,
      captionPos = _ref$captionPos === void 0 ? 'right' : _ref$captionPos,
      captionAttrs = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1___default()(_ref, ["padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "captionTemplate", "captionPos"]); // create highlight wrappers to frame highlighted eles


  var _getPositionStyles = getPositionStyles(eles, {
    paddingTop: paddingTop || padding,
    paddingRight: paddingRight || padding,
    paddingBottom: paddingBottom || padding,
    paddingLeft: paddingLeft || padding
  }),
      _getPositionStyles2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_2___default()(_getPositionStyles, 2),
      wrapperStyles = _getPositionStyles2[0],
      outerWrapperStyle = _getPositionStyles2[1];

  var wrappers = wrapperStyles.map(function (style) {
    var wrapper = generateDivWithStyle(style);
    wrapper.className = Object(_general_util__WEBPACK_IMPORTED_MODULE_3__["generateClassName"])('highlight-wrapper', [[eles.length === 1, 'fuzzy']]);
    document.body.append(wrapper);
    return wrapper;
  }); // if multiple highlight elements, create outer wrapper to anchor caption to

  var outerWrapper = wrappers[0];

  if (wrappers.length > 1) {
    outerWrapper = generateDivWithStyle(outerWrapperStyle);
    outerWrapper.className = 'highlight-outer-wrapper';
    document.body.append(outerWrapper);
  } // create background dimming element


  var dimEle = document.createElement('div');
  dimEle.className = 'dim dim--full';
  document.body.append(dimEle); // lift highlighted eles above highlight wrappers

  eles.forEach(function (ele) {
    ele.style.zIndex = 8;
    var elePosition = getComputedStyle(ele).getPropertyValue('position');
    if (elePosition === 'static') ele.style.position = 'relative';
  }); // cleanup all DOM mutations

  var cleanup = function cleanup() {
    wrappers.forEach(function (wrapper) {
      return wrapper.remove();
    });
    dimEle.remove();
    outerWrapper.remove();
    eles.forEach(function (ele) {
      ele.style.zIndex = null;
      ele.style.position = null;
    });
  }; // if caption provided, prepare and attach


  if (captionTemplate && captionAnchor) {
    try {
      var _prepareCaptionEle = prepareCaptionEle(_objectSpread({
        captionAnchor: captionAnchor
      }, attrs)),
          _prepareCaptionEle2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_2___default()(_prepareCaptionEle, 2),
          style = _prepareCaptionEle2[0],
          shift = _prepareCaptionEle2[1];

      var captionEle = captionTemplate.cloneNode(true);
      Object.entries(style).forEach(function (_ref2) {
        var _ref3 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_2___default()(_ref2, 2),
            prop = _ref3[0],
            val = _ref3[1];

        if (val !== undefined) captionEle.style[prop] = val;
      });
      if (centerCaption && shift) captionEle.dataset.shift = shift;
      captionEle.classList.add('caption');
      outerWrapper.append(captionEle);
    } catch (e) {
      cleanup();
      throw e;
    }
  }

  return cleanup;
}

function prepareCaptionEle(_ref4) {
  var captionAnchor = _ref4.captionAnchor,
      top = _ref4.top,
      right = _ref4.right,
      bottom = _ref4.bottom,
      left = _ref4.left;

  var _stringSwitch = Object(_general_util__WEBPACK_IMPORTED_MODULE_3__["stringSwitch"])(captionAnchor, function (_ref5) {
    var _case = _ref5._case;

    _case('top', function () {
      return {
        bottom: '100%',
        left: '50%',
        shift: 'left'
      };
    });

    _case('topRight', function () {
      return {
        bottom: '100%',
        left: '100%'
      };
    });

    _case('right', function () {
      return {
        top: '50%',
        left: '100%',
        shift: 'up'
      };
    });

    _case('bottomRight', function () {
      return {
        top: '100%',
        left: '100%'
      };
    });

    _case('bottom', function () {
      return {
        top: '100%',
        left: '50%',
        shift: 'left'
      };
    });

    _case('bottomLeft', function () {
      return {
        top: '100%',
        right: '100%'
      };
    });

    _case('left', function () {
      return {
        top: '50%',
        right: '100%',
        shift: 'up'
      };
    });

    _case('topLeft', function () {
      return {
        bottom: '100%',
        right: '100%'
      };
    });

    _default(function () {
      throw new Error('Invalid captionAnchor ');
    });
  }),
      defaultTop = _stringSwitch.top,
      defaultRight = _stringSwitch.right,
      defaultBottom = _stringSwitch.bottom,
      defaultLeft = _stringSwitch.left,
      shift = _stringSwitch.shift;

  return [{
    top: mergeProp(defaultTop, top),
    right: mergeProp(defaultRight, right),
    bottom: mergeProp(defaultBottom, bottom),
    left: mergeProp(defaultLeft, left)
  }, shift];
}

function generateDivWithStyle(style) {
  var div = document.createElement('div');
  Object.entries(style).forEach(function (_ref6) {
    var _ref7 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_2___default()(_ref6, 2),
        prop = _ref7[0],
        val = _ref7[1];

    if (val !== undefined) div.style[prop] = val;
  });
  return div;
}

function getPositionStyles(eles) {
  var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref8$paddingTop = _ref8.paddingTop,
      paddingTop = _ref8$paddingTop === void 0 ? 0 : _ref8$paddingTop,
      _ref8$paddingRight = _ref8.paddingRight,
      paddingRight = _ref8$paddingRight === void 0 ? 0 : _ref8$paddingRight,
      _ref8$paddingBottom = _ref8.paddingBottom,
      paddingBottom = _ref8$paddingBottom === void 0 ? 0 : _ref8$paddingBottom,
      _ref8$paddingLeft = _ref8.paddingLeft,
      paddingLeft = _ref8$paddingLeft === void 0 ? 0 : _ref8$paddingLeft;

  var toPx = function toPx(num) {
    return "".concat(num, "px");
  };

  var outerTop, outerRight, outerBottom, outerLeft;
  var attributes = eles.map(function (ele) {
    var _ele$getBoundingClien = ele.getBoundingClientRect(),
        top = _ele$getBoundingClien.top,
        right = _ele$getBoundingClien.right,
        bottom = _ele$getBoundingClien.bottom,
        left = _ele$getBoundingClien.left;

    if (outerTop === undefined || top < outerTop) outerTop = top;
    if (outerRight === undefined || right > outerRight) outerRight = right;
    if (outerBottom === undefined || bottom > outerBottom) outerBottom = bottom;
    if (outerLeft === undefined || left < outerLeft) outerLeft = left;
    return {
      top: toPx(top - paddingTop),
      left: toPx(left - paddingLeft),
      height: toPx(bottom - top + paddingTop + paddingBottom),
      width: toPx(right - left + paddingRight + paddingLeft)
    };
  });
  return [attributes, {
    top: toPx(outerTop - paddingTop),
    left: toPx(outerLeft - paddingLeft),
    height: toPx(outerBottom - outerTop + paddingTop + paddingBottom),
    width: toPx(outerRight - outerLeft + paddingRight + paddingLeft)
  }];
}

function mergeProp(defaultProp, argProp) {
  if (defaultProp === undefined) {
    return argProp;
  } else {
    return argProp ? "calc(".concat(defaultProp, " + ").concat(argProp, ")") : defaultProp;
  }
}

var createSVGElement = function createSVGElement(tag) {
  return document.createElementNS('http://www.w3.org/2000/svg', tag);
};
var applyStyle = function applyStyle(ele, style) {
  var clear = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  if (clear) ele.style = null;
  Object.entries(style).forEach(function (_ref9) {
    var _ref10 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_2___default()(_ref9, 2),
        attr = _ref10[0],
        val = _ref10[1];

    return ele.style[attr] = val;
  });
};
window.cap = document.createElement('div');
window.cap.style.width = '200px';
window.cap.style.height = '200px';
window.cap.style.background = 'red';
window.cap.style.position = 'absolute';
window.cap.style.zIndex = 100;
window.opts = {
  captionTemplate: cap,
  captionAnchor: 'bottom'
};
window.ghf = generateHighlightFuncs;
window.hh = highlightEles;

window.sa = function () {
  return [document.querySelector('.square[data-id="71"]'), document.querySelector('.square[data-id="72"]'), document.querySelector('.square[data-id="73"]')];
};

/***/ }),

/***/ "./src/scripts/shared/general_util.js":
/*!********************************************!*\
  !*** ./src/scripts/shared/general_util.js ***!
  \********************************************/
/*! exports provided: isTruthy, combos, maxPossibleRepeats, areEqualArrays, arrayUnion, includesArray, indexOfArray, includesDistinct, nextId, classes, generateClassName, copyPuzzle, wait, product, sum, difference, quotient, getNumFromCode, getDirFromCode, kebabToCamel, genStepper, throttle, togglePresenceInArray, pushIfNotIncluded, removeIfIncluded, getInterveningPositions, stringSwitch, funcSwitch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isTruthy", function() { return isTruthy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "combos", function() { return combos; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maxPossibleRepeats", function() { return maxPossibleRepeats; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "areEqualArrays", function() { return areEqualArrays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "arrayUnion", function() { return arrayUnion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "includesArray", function() { return includesArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "indexOfArray", function() { return indexOfArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "includesDistinct", function() { return includesDistinct; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nextId", function() { return nextId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "classes", function() { return classes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "generateClassName", function() { return generateClassName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copyPuzzle", function() { return copyPuzzle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wait", function() { return wait; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "product", function() { return product; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sum", function() { return sum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "difference", function() { return difference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "quotient", function() { return quotient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNumFromCode", function() { return getNumFromCode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDirFromCode", function() { return getDirFromCode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "kebabToCamel", function() { return kebabToCamel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "genStepper", function() { return genStepper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "throttle", function() { return throttle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "togglePresenceInArray", function() { return togglePresenceInArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pushIfNotIncluded", function() { return pushIfNotIncluded; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeIfIncluded", function() { return removeIfIncluded; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getInterveningPositions", function() { return getInterveningPositions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stringSwitch", function() { return stringSwitch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "funcSwitch", function() { return funcSwitch; });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js");
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants */ "./src/scripts/shared/constants.js");





var _marked = /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default.a.mark(genBasicStepper);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }


var isTruthy = function isTruthy(a) {
  return a;
};
var combos = function combos(numElements, _ref) {
  var _ref$min = _ref.min,
      min = _ref$min === void 0 ? 1 : _ref$min,
      _ref$max = _ref.max,
      max = _ref$max === void 0 ? 9 : _ref$max,
      _ref$numRepeatsAllowe = _ref.numRepeatsAllowed,
      numRepeatsAllowed = _ref$numRepeatsAllowe === void 0 ? 0 : _ref$numRepeatsAllowe;
  var rangeSize = max - min + 1;
  var nextOptions = {
    min: min + 1,
    max: max,
    numRepeatsAllowed: numRepeatsAllowed
  };

  if (numElements === 0) {
    // 0 elements; return the empty combo
    return [[]];
  } else if (rangeSize <= 0 || numElements > rangeSize + numRepeatsAllowed) {
    // impossible request; return no combos
    return [];
  } else {
    // recursive step
    var withRepeatedMin = numRepeatsAllowed > 0 && numElements >= 2 ? combos(numElements - 2, _objectSpread(_objectSpread({}, nextOptions), {}, {
      numRepeatsAllowed: numRepeatsAllowed - 1
    })).map(function (combo) {
      return [min, min].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(combo));
    }) : [];
    var withMin = combos(numElements - 1, nextOptions).map(function (combo) {
      return [min].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(combo));
    });
    var withoutMin = combos(numElements, nextOptions);
    return [].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(withRepeatedMin), _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(withMin), _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(withoutMin));
  }
};
var maxPossibleRepeats = function maxPossibleRepeats(positions) {
  var curIdx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var filled = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var nextFillVal = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

  if (curIdx + 1 > positions.length) {
    return Object.values(filled).map(function (_ref2) {
      var rows = _ref2.rows;
      return rows.length;
    }).filter(function (numSquaresWithVal) {
      return numSquaresWithVal === 2;
    }).length;
  } else {
    var _positions$curIdx = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(positions[curIdx], 2),
        nextRow = _positions$curIdx[0],
        nextCol = _positions$curIdx[1];

    var possibleVals = Object.keys(filled).filter(function (val) {
      var _filled$val = filled[val],
          rows = _filled$val.rows,
          cols = _filled$val.cols;
      return !rows.includes(nextRow) && !cols.includes(nextCol);
    }).concat(nextFillVal);
    return possibleVals.reduce(function (maxRepeats, val) {
      var filledClone = deepClone(filled);
      filledClone[val] = filledClone[val] || {
        rows: [],
        cols: []
      };
      filledClone[val].rows.push(nextRow);
      filledClone[val].cols.push(nextCol);
      var maxRepeatsWithVal = maxPossibleRepeats(positions, curIdx + 1, filledClone, nextFillVal + 1);
      return maxRepeatsWithVal > maxRepeats ? maxRepeatsWithVal : maxRepeats;
    }, 0);
  }
};
var areEqualArrays = function areEqualArrays(a, b) {
  return a.length === b.length && a.every(function (ele, idx) {
    return ele === b[idx];
  });
};
var arrayUnion = function arrayUnion(a, b) {
  var aCounts = {};
  a.forEach(function (ele) {
    return aCounts[ele] = aCounts[ele] ? aCounts[ele] + 1 : 1;
  });
  var union = [];
  b.forEach(function (ele) {
    if (aCounts[ele] && aCounts[ele] > 0) {
      aCounts[ele]--;
      union.push(ele);
    }
  });
  return union;
};
var includesArray = function includesArray(outerArray, innerArray) {
  return outerArray.some(function (subArray) {
    return areEqualArrays(subArray, innerArray);
  });
};
var indexOfArray = function indexOfArray(outerArray, innerArray) {
  return outerArray.findIndex(function (subArray) {
    return areEqualArrays(subArray, innerArray);
  });
};
var includesDistinct = function includesDistinct(array) {
  var visitedIndices = {};

  for (var _len = arguments.length, requiredElements = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    requiredElements[_key - 1] = arguments[_key];
  }

  return requiredElements.every(function (requiredEle) {
    var eleIndex = array.findIndex(function (ele, idx) {
      return ele === requiredEle && !visitedIndices[idx];
    });

    if (eleIndex === -1) {
      return false;
    } else {
      visitedIndices[eleIndex] = true;
      return true;
    }
  });
};
var nextId = function () {
  var id = 0;
  return function () {
    return "".concat(id++);
  };
}();
var classes = function classes() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return args.map(function (arg) {
    if (arg instanceof Array) {
      return arg[0] ? arg[1] : arg[2];
    } else {
      return arg;
    }
  }).filter(function (arg) {
    return arg;
  }).join(' ');
};

function evalClassNameComponent(component) {
  if (component instanceof Array) {
    return component[0] ? component[1] : component[2];
  } else {
    return component;
  }
}

function evalClassNameComponents(components) {
  return components.map(evalClassNameComponent).filter(isTruthy);
}

function evalClassNameFlags(base, flags) {
  return evalClassNameComponents(flags).map(function (flag) {
    return "".concat(base, "--").concat(flag);
  });
}

function generateClassNameFromArray(components) {
  return evalClassNameComponents(components).join(' ');
}

function generateClassNameFromBaseAndFlags(base, flags) {
  return [base].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(evalClassNameFlags(base, flags))).join(' ');
}

function generateClassNameFromOptions(_ref3) {
  var _ref3$base = _ref3.base,
      base = _ref3$base === void 0 ? null : _ref3$base,
      _ref3$flags = _ref3.flags,
      flags = _ref3$flags === void 0 ? [] : _ref3$flags,
      _ref3$classes = _ref3.classes,
      classes = _ref3$classes === void 0 ? [] : _ref3$classes;
  var classNames = evalClassNameComponents([base].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(classes)));
  var flagNames = evalClassNameFlags(base, flags);
  return [].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(classNames), _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(flagNames)).join(' ');
}

var generateClassName = function generateClassName(dynamicArg, flags) {
  if (dynamicArg instanceof Array) {
    return generateClassNameFromArray(dynamicArg);
  } else if (typeof dynamicArg === 'string' && flags instanceof Array) {
    return generateClassNameFromBaseAndFlags(dynamicArg, flags);
  } else {
    return generateClassNameFromOptions(dynamicArg);
  }
};
var copyPuzzle = function copyPuzzle(puzzle) {
  var copy = puzzle.clone();
  copy.resetUuid();
  return copy;
};
var wait = function wait(ms) {
  return new Promise(function (resolve) {
    return window.setTimeout(resolve, ms);
  });
};
var product = function product(numArray) {
  return numArray.reduce(function (product, num) {
    return product * num;
  }, 1);
};
var sum = function sum(numArray) {
  return numArray.reduce(function (sum, num) {
    return sum + num;
  }, 0);
};
var difference = function difference(_ref4) {
  var _ref5 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_ref4, 2),
      a = _ref5[0],
      b = _ref5[1];

  var _ref6 = a > b ? [a, b] : [b, a],
      _ref7 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_ref6, 2),
      larger = _ref7[0],
      smaller = _ref7[1];

  return larger - smaller;
};
var quotient = function quotient(_ref8) {
  var _ref9 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_ref8, 2),
      a = _ref9[0],
      b = _ref9[1];

  var _ref10 = a > b ? [a, b] : [b, a],
      _ref11 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_ref10, 2),
      larger = _ref11[0],
      smaller = _ref11[1];

  return larger / smaller;
}; // export const stringSwitch = (
//   input,
//   casesFn,
//   {
//     fallthrough = false,
//     multipleMatches = false
//   } = {}
// ) => {
//   if (typeof input !== 'string') {
//     throw new Error('First argument to stringSwitch must be a string')
//   } else if (typeof casesFn !== 'function') {
//     throw new Error('Second argument to stringSwitch must be a function')
//   }
//   let matched = false
//   let result
//   function _case(...args) {
//     const { exec, isMatch } = _parseCaseArgs(args)
//     const shouldExecByMatch = isMatch(input) && (!matched || multipleMatches)
//     const shouldExecByFallthrough = matched && fallthrough
//     if (shouldExecByMatch || shouldExecByFallthrough) {
//       matched = true
//       result = exec(input)
//     }
//   }
//   function _default(exec) {
//     if (typeof exec !== 'function') {
//       throw new Error('Argument to default function must be a function')
//     }
//     if (!matched || fallthrough) {
//       result = exec(input)
//     }
//   }
//   function _ensure(exec) {
//     if (typeof exec !== 'function') {
//       throw new Error('Argument to ensure function must be a function')
//     }
//     if (matched) {
//       exec(input)
//     }
//   }
//   casesFn({ _case, _default, _ensure })
//   return result
// }
// function _parseCaseArgs(args) {
//   const exec = args.pop()
//   if (typeof exec !== 'function') {
//     throw new Error('Last argument to case function must be a callback to execute if the case matches')
//   }
//   const isMatch = input => args.every(matcher => _parseMatcher(matcher)(input))
//   return { exec, isMatch }
// }
// function _parseMatcher(matcher) {
//   const matcherType = matcher.constructor.name
//   switch (matcherType) {
//     case 'BabelRegExp':
//     case 'RegExp':
//       return input => matcher.test(input)
//     case 'String':
//       return input => matcher === input
//     case 'Boolean':
//       return () => matcher
//     case 'Array':
//       return input => matcher.some(sub => _parseMatcher(sub)(input))
//     default:
//       throw new Error(`Matcher arguments to case function must be a string, regular expression, boolean, or array of such. Instead, received ${matcherType}`)
//   }
// }

var getNumFromCode = function getNumFromCode(code) {
  var _NUM_REGEX$exec;

  return parseInt((_NUM_REGEX$exec = _constants__WEBPACK_IMPORTED_MODULE_4__["NUM_REGEX"].exec(code)) === null || _NUM_REGEX$exec === void 0 ? void 0 : _NUM_REGEX$exec.groups.num);
};
var getDirFromCode = function getDirFromCode(code) {
  var _ARROW_REGEX$exec, _ARROW_REGEX$exec$gro;

  return (_ARROW_REGEX$exec = _constants__WEBPACK_IMPORTED_MODULE_4__["ARROW_REGEX"].exec(code)) === null || _ARROW_REGEX$exec === void 0 ? void 0 : (_ARROW_REGEX$exec$gro = _ARROW_REGEX$exec.groups) === null || _ARROW_REGEX$exec$gro === void 0 ? void 0 : _ARROW_REGEX$exec$gro.dir;
};
var kebabToCamel = function kebabToCamel(string) {
  return string.split('-').map(function (segment, idx) {
    return idx > 0 ? segment[0].toUpperCase() + segment.slice(1) : segment;
  }).join('');
};
var genStepper = function genStepper(iterable) {
  var basicStepper = genBasicStepper(iterable);
  return function () {
    return basicStepper.next().value;
  };
};

function genBasicStepper(iterable) {
  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default.a.wrap(function genBasicStepper$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          return _context.delegateYield(iterable, "t0", 1);

        case 1:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}

function deepClone(obj) {
  switch (obj.constructor.name) {
    case 'Object':
      return Object.fromEntries(Object.entries(obj).map(function (_ref12) {
        var _ref13 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_ref12, 2),
            key = _ref13[0],
            val = _ref13[1];

        return [key, deepClone(val)];
      }));

    case 'Array':
      return obj.map(function (ele) {
        return deepClone(ele);
      });

    default:
      return obj;
  }
}

var throttle = function throttle(func) {
  var ms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;
  var lastFired = Date.now();
  return function () {
    var now = Date.now();

    if (now - lastFired >= ms) {
      lastFired = now;
      func.apply(void 0, arguments);
    }
  };
};
var togglePresenceInArray = function togglePresenceInArray(array, ele) {
  var indexOfFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (array, ele) {
    return array.indexOf(ele);
  };
  var idx = indexOfFunc(array, ele);

  if (idx >= 0) {
    array.splice(idx, 1);
  } else {
    array.push(ele);
  }
};
var pushIfNotIncluded = function pushIfNotIncluded(array, ele) {
  var includesFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (array, ele) {
    return array.includes(ele);
  };
  if (!includesFunc(array, ele)) array.push(ele);
};
var removeIfIncluded = function removeIfIncluded(array, ele) {
  var indexOfFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (array, ele) {
    return array.indexOf(ele);
  };
  var idx = indexOfFunc(array, ele);

  if (idx >= 0) {
    array.splice(idx, 1);
  }
};
var getInterveningPositions = function getInterveningPositions(_ref14, _ref15) {
  var _ref16 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_ref14, 2),
      startX = _ref16[0],
      startY = _ref16[1];

  var _ref17 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_ref15, 2),
      endX = _ref17[0],
      endY = _ref17[1];

  var xRange = getRange(startX, endX);
  var yRange = getRange(startY, endY);
  return xRange.reduce(function (positions, x) {
    var newPositions = yRange.map(function (y) {
      return [x, y];
    });
    return positions.concat(newPositions);
  }, []);
};

function getRange(a, b) {
  var mapper = a < b ? function (_, idx) {
    return idx + a;
  } : function (_, idx) {
    return a - idx;
  };
  return Array.from({
    length: Math.abs(a - b) + 1
  }).map(mapper);
}

var stringSwitch = function stringSwitch(input, casesFn, options) {
  validateStringSwitchArgs({
    input: input,
    casesFn: casesFn
  });

  var caseArgParser = function caseArgParser(args) {
    return stringSwitchCaseArgParser(input, args);
  };

  return baseSwitch(caseArgParser, casesFn, options);
};
var funcSwitch = function funcSwitch(input, comparator, casesFn, options) {
  validateFuncSwitchArgs({
    comparator: comparator,
    casesFn: casesFn
  });

  var caseArgParser = function caseArgParser(args) {
    return funcSwitchCaseArgParser(input, comparator, args);
  };

  return baseSwitch(caseArgParser, casesFn, options);
};

function baseSwitch(caseArgParser, casesFn) {
  var _ref18 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref18$fallthrough = _ref18.fallthrough,
      fallthrough = _ref18$fallthrough === void 0 ? false : _ref18$fallthrough,
      _ref18$multipleMatche = _ref18.multipleMatches,
      multipleMatches = _ref18$multipleMatche === void 0 ? false : _ref18$multipleMatche;

  var matched = false;
  var result;

  function _case() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    var _caseArgParser = caseArgParser(args),
        exec = _caseArgParser.exec,
        isMatch = _caseArgParser.isMatch;

    var shouldExecByMatch = isMatch() && (!matched || multipleMatches);
    var shouldExecByFallthrough = matched && fallthrough;

    if (shouldExecByMatch || shouldExecByFallthrough) {
      matched = true;
      result = exec();
    }
  }

  function _default(exec) {
    if (typeof exec !== 'function') {
      throw new Error('Argument to default function must be a function');
    }

    if (!matched || fallthrough) {
      result = exec();
    }
  }

  function _ensure(exec) {
    if (typeof exec !== 'function') {
      throw new Error('Argument to ensure function must be a function');
    }

    if (matched) {
      exec();
    }
  }

  casesFn({
    _case: _case,
    _default: _default,
    _ensure: _ensure
  });
  return result;
}

function validateStringSwitchArgs(_ref19) {
  var input = _ref19.input,
      casesFn = _ref19.casesFn;

  if (typeof input !== 'string') {
    throw new Error('First argument to stringSwitch must be a string');
  } else if (typeof casesFn !== 'function') {
    throw new Error('Second argument to stringSwitch must be a function');
  }
}

function validateFuncSwitchArgs(_ref20) {
  var comparator = _ref20.comparator,
      casesFn = _ref20.casesFn;

  if (typeof comparator !== 'function') {
    throw new Error('Second argument to funcSwitch must be a comparator function');
  } else if (typeof casesFn !== 'function') {
    throw new Error('Third argument to funcSwitch must be a function that defines your case statements');
  }
}

function stringSwitchCaseArgParser(input, args) {
  var exec = args.pop();

  if (typeof exec !== 'function') {
    throw new Error('Last argument to case function must be a callback to execute if the case matches');
  }

  var isMatch = function isMatch() {
    return args.every(function (matcher) {
      return parseMatcher(matcher)(input);
    });
  };

  return {
    exec: exec,
    isMatch: isMatch
  };
}

function funcSwitchCaseArgParser(input, comparator, args) {
  var exec = args.pop();

  if (typeof exec !== 'function') {
    throw new Error('Last argument to case function must be a callback to execute if the case matches');
  }

  var isMatch = function isMatch() {
    return comparator.apply(void 0, [input].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(args[0]))) && args.slice(1).every(function (matcher) {
      return parseMatcher(matcher)(input);
    });
  };

  return {
    exec: exec,
    isMatch: isMatch
  };
}

function parseMatcher(matcher) {
  var isMatcherType = function isMatcherType(type) {
    return matcher instanceof type;
  };

  if (typeof matcher === 'string') {
    return function (input) {
      return matcher === input;
    };
  } else if (typeof matcher === 'boolean') {
    return function () {
      return matcher;
    };
  } else if (isMatcherType(RegExp)) {
    return function (input) {
      return matcher.test(input);
    };
  } else if (isMatcherType(Array)) {
    return function (input) {
      return matcher.some(function (sub) {
        return parseMatcher(sub)(input);
      });
    };
  } else {
    throw new Error("Matcher arguments to case function must be a string, regular expression, boolean, or array of such. Instead, received ".concat(matcher));
  }
}

/***/ }),

/***/ "./src/scripts/shared/lru_cache.js":
/*!*****************************************!*\
  !*** ./src/scripts/shared/lru_cache.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return LRUCache; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__);




function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var newNode = function newNode(options) {
  return _objectSpread({
    key: null,
    value: null,
    prev: null,
    next: null,
    lastUpdated: new Date()
  }, options);
};

var LRUCache = /*#__PURE__*/function () {
  function LRUCache(max) {
    var _this = this;

    var timeBeforeClear = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, LRUCache);

    this.max = max;
    this.head = newNode();
    this.tail = newNode();
    this.timeBeforeClear = timeBeforeClear;
    window.setInterval(function () {
      _this._removeBefore(_this.timeBeforeClear);
    }, 10000);
    this.reset();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(LRUCache, [{
    key: "get",
    value: function get(key) {
      var node = this.map[key];
      if (node) node.lastUpdated = new Date();
      return node === null || node === void 0 ? void 0 : node.value;
    }
  }, {
    key: "set",
    value: function set(key, value) {
      var previousLast = this.tail.prev;
      var node = newNode({
        key: key,
        value: value,
        prev: previousLast,
        next: this.tail
      });
      previousLast.next = node;
      this.tail.prev = node;
      this.size++;
      if (this.size > this.max) this._removeOldest();
      this.map[key] = node;
      return node === null || node === void 0 ? void 0 : node.value;
    }
  }, {
    key: "remove",
    value: function remove(key) {
      var node = this.map[key];
      return this._remove(node);
    }
  }, {
    key: "reset",
    value: function reset() {
      this.map = {};
      this.size = 0;
      this.head.next = this.tail;
      this.tail.prev = this.head;
    }
  }, {
    key: "_remove",
    value: function _remove(node) {
      if (node && node !== this.head && node !== this.tail) {
        var beforeNode = node.prev,
            afterNode = node.next;
        beforeNode.next = afterNode;
        afterNode.prev = beforeNode;
        this.size--;
        delete this.map[node.key];
      }

      return node === null || node === void 0 ? void 0 : node.value;
    }
  }, {
    key: "_removeOldest",
    value: function _removeOldest() {
      var oldest = this.head.next;
      return this._remove(oldest);
    }
  }, {
    key: "_removeBefore",
    value: function _removeBefore(ms) {
      if (!ms) return;
      var now = new Date();
      var newMap = {};
      var validNode = this.head;

      while (validNode.next !== this.tail && now - validNode.next.lastUpdated < ms) {
        validNode = validNode.next;
        newMap[validNode.key] = validNode;
      }

      validNode.next = this.tail;
      this.tail.prev = validNode;
      this.map = newMap;
    }
  }]);

  return LRUCache;
}();



/***/ }),

/***/ "./src/scripts/shared/spotlight.js":
/*!*****************************************!*\
  !*** ./src/scripts/shared/spotlight.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js");
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _dom_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dom_util */ "./src/scripts/shared/dom_util.js");
/* harmony import */ var _general_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./general_util */ "./src/scripts/shared/general_util.js");







function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



var clockwiseOrder = ['top', 'right', 'bottom', 'left'];
var sideSigns = {
  top: -1,
  right: 1,
  bottom: 1,
  left: -1
};
var overflowPx = 20;

var Spotlight = /*#__PURE__*/function () {
  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5___default()(Spotlight, null, [{
    key: "fromEles",
    value: function fromEles(eles, options) {
      return new Spotlight(_objectSpread({
        eles: eles
      }, options));
    }
  }, {
    key: "fromEle",
    value: function fromEle(ele, options) {
      return new Spotlight(_objectSpread({
        eles: [ele]
      }, options));
    }
  }]);

  function Spotlight() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4___default()(this, Spotlight);

    Object.assign(this, {
      padding: 0,
      blur: 2,
      captionOffsetX: 0,
      captionOffsetY: 0,
      captionPosition: 'right',
      onShow: function onShow() {
        return function () {};
      }
    }, options);
    this.generate();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5___default()(Spotlight, [{
    key: "generate",
    value: function generate() {
      var _this = this;

      this.bounds = this.eles.map(function (ele, idx) {
        var padding = _this.padding instanceof Array ? _this.padding[idx] : _this.padding;
        return getPaddedBoundingRect(ele, padding);
      });
      this.subPaths = [];
      this.visited = {};
      this._anchorBounds = null;
      var i = 0;

      while (!this.isComplete && i < 5) {
        this._addNextSubPath();

        i++;
      }
    }
  }, {
    key: "_addNextSubPath",
    value: function _addNextSubPath() {
      var subPath = [];

      this._beginSubPath(subPath);

      var i = 0;

      while (!this._isCompleteSubPath(subPath) && i < 100) {
        this._addNextPoint(subPath);

        i++;
      }

      var overflowOffsetSubPath = subPath.map(function (point) {
        return point.map(function (i) {
          return i + overflowPx / 2;
        });
      });
      this.subPaths.push(overflowOffsetSubPath);
    }
  }, {
    key: "_addNextPoint",
    value: function _addNextPoint(subPath) {
      var _this2 = this;

      var _stringSwitch = Object(_general_util__WEBPACK_IMPORTED_MODULE_7__["stringSwitch"])(this.curBoundSide, function (_ref) {
        var _case = _ref._case;

        _case(['left', 'right'], function () {
          return [0, 1];
        });

        _case(['top', 'bottom'], function () {
          return [1, 0];
        });
      }),
          _stringSwitch2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_2___default()(_stringSwitch, 2),
          staticIdx = _stringSwitch2[0],
          changingIdx = _stringSwitch2[1];

      var curPoint = this._getLastPoint(subPath);

      var curStaticDim = curPoint[staticIdx];
      var curChangingDim = curPoint[changingIdx];
      var nextCurBoundSide = getNextSide(this.curBoundSide);

      var closestDim = this._getDim(this.curBoundIdx, nextCurBoundSide);

      if (curChangingDim === closestDim) {
        this.curBoundSide = nextCurBoundSide;
        return;
      }

      var closestBoundIdx = this.curBoundIdx;
      var interceptSide = getOppositeSide(nextCurBoundSide);
      this.boundsIndices.forEach(function (idx) {
        var _this2$_getOtherDimRa = _this2._getOtherDimRange(idx, interceptSide),
            _this2$_getOtherDimRa2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_2___default()(_this2$_getOtherDimRa, 2),
            staticDimLower = _this2$_getOtherDimRa2[0],
            staticDimUpper = _this2$_getOtherDimRa2[1];

        if (curStaticDim < staticDimLower || curStaticDim > staticDimUpper) {
          return;
        }

        var interceptDim = _this2._getDim(idx, interceptSide);

        if (Math.sign(interceptDim - curChangingDim) === sideSigns[nextCurBoundSide] && Math.sign(closestDim - interceptDim) === sideSigns[nextCurBoundSide]) {
          closestDim = interceptDim;
          closestBoundIdx = idx;
        }
      });
      var nextPoint = [null, null];
      nextPoint[staticIdx] = curStaticDim;
      nextPoint[changingIdx] = closestDim; // side effects

      subPath.push(nextPoint);
      this.visited[closestBoundIdx] = true;
      this.curBoundSide = closestBoundIdx !== this.curBoundIdx ? interceptSide : nextCurBoundSide;
      this.curBoundIdx = closestBoundIdx;
    }
  }, {
    key: "_getDim",
    value: function _getDim(boundOrIdx, side) {
      return typeof boundOrIdx === 'number' ? this.bounds[boundOrIdx][side] : boundOrIdx[side];
    }
  }, {
    key: "_getNextBoundIdx",
    value: function _getNextBoundIdx() {
      var _this3 = this;

      return this.boundsIndices.find(function (idx) {
        return !_this3.visited[idx];
      });
    }
  }, {
    key: "_beginSubPath",
    value: function _beginSubPath(subPath) {
      this.curBoundIdx = this._getNextBoundIdx();
      this.visited[this.curBoundIdx] = true;
      this.curBoundSide = 'top';
      var _this$curBound = this.curBound,
          left = _this$curBound.left,
          top = _this$curBound.top;
      subPath.push([left, top]);
    }
  }, {
    key: "_getFirstPoint",
    value: function _getFirstPoint(subPath) {
      return subPath[0];
    }
  }, {
    key: "_getLastPoint",
    value: function _getLastPoint(subPath) {
      return subPath[subPath.length - 1];
    }
  }, {
    key: "_getOtherDimRange",
    value: function _getOtherDimRange(boundIdx, side) {
      var bound = this.bounds[boundIdx];
      return Object(_general_util__WEBPACK_IMPORTED_MODULE_7__["stringSwitch"])(side, function (_ref2) {
        var _case = _ref2._case;

        _case(['left', 'right'], function () {
          return [bound.top, bound.bottom];
        });

        _case(['top', 'bottom'], function () {
          return [bound.left, bound.right];
        });
      });
    }
  }, {
    key: "_isCompleteSubPath",
    value: function _isCompleteSubPath(subPath) {
      return subPath.length > 1 && Object(_general_util__WEBPACK_IMPORTED_MODULE_7__["areEqualArrays"])(this._getFirstPoint(subPath), this._getLastPoint(subPath));
    }
  }, {
    key: "_getSubPathD",
    value: function _getSubPathD(subPath) {
      var m = "M ".concat(subPath[0].join());
      var l = "L ".concat(subPath.slice(1).map(function (p) {
        return p.join();
      }).join(' '));
      return "".concat(m, " ").concat(l);
    }
  }, {
    key: "getD",
    value: function getD(vbw, vbh) {
      return "M 0,0 L ".concat(vbw, ",0 ").concat(vbw, ",").concat(vbh, " 0,").concat(vbh, " 0,0 ").concat(this.innerPath);
    } // getD(vbw, vbh) {
    //   const getSubPathD = this.borderRadius
    //     ? this._getRoundedSubPathD
    //     : this._getSubPathD
    //   const outerPath = `M 0,0 L ${vbw},0 ${vbw},${vbh} 0,${vbh} 0,0`
    //   const innerPaths = this.subPaths.map(getSubPathD.bind(this)).join(' ')
    //   return `${outerPath} ${innerPaths} z`
    // }

  }, {
    key: "updateSVG",
    value: function updateSVG() {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          svg = _ref3.element,
          _ref3$regenerate = _ref3.regenerate,
          regenerate = _ref3$regenerate === void 0 ? true : _ref3$regenerate;

      if (!svg) return;
      if (regenerate) this.generate();
      var vbw = window.innerWidth + overflowPx;
      var vbh = window.innerHeight + overflowPx;
      svg.setAttribute('viewBox', "0 0 ".concat(vbw, " ").concat(vbh));
      svg.querySelector('path').setAttribute('d', this.getD(vbw, vbh));
      svg.querySelector('feGaussianBlur').setAttribute('stdDeviation', this.blur);
      return svg;
    }
  }, {
    key: "updateCaption",
    value: function updateCaption() {
      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          caption = _ref4.element,
          _ref4$regenerate = _ref4.regenerate,
          regenerate = _ref4$regenerate === void 0 ? true : _ref4$regenerate;

      if (!caption) return;
      if (regenerate) this.generate();
      Object(_dom_util__WEBPACK_IMPORTED_MODULE_6__["applyStyle"])(caption, this.captionStyle, true);
      return caption;
    } //0 0 1

  }, {
    key: "_getRoundedSubPathD",
    value: function _getRoundedSubPathD(subPath) {
      var _this4 = this;

      // const m = `M ${this._getNudgedPoint(subPath[0], subPath[1])}`
      var hookPoints = [].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(subPath), [subPath[1]]);
      var pathParts = Array.from({
        length: hookPoints.length - 2
      }).reduce(function (parts, _, idx) {
        return parts.concat(_this4._getPathHook(hookPoints.slice(idx, idx + 3)));
      }, []);
      return ['M', pathParts[pathParts.length - 1]].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(pathParts)).join(' ');
      return "".concat(m, " ").concat(hooks.join(' '));
    }
  }, {
    key: "_getPathHook",
    value: function _getPathHook(_ref5) {
      var _ref6 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_2___default()(_ref5, 3),
          prev = _ref6[0],
          cur = _ref6[1],
          next = _ref6[2];

      // const [startPoint, endPoint] = this._getNudgedPoints(prev, cur, next)
      // const  = this._getNudgedPoint(cur, next)
      var startPoint = this._getNudgedPoint(cur, prev);

      var endPoint = this._getNudgedPoint(cur, next);

      var radii = getAbsDiff(startPoint, endPoint);
      var clockwise = Math.sign(next[1] - prev[1]) === Math.sign(cur[0] * 2 - prev[0] - next[0]); //   const l = `L ${startPoint.join()}`
      // const a = `A ${radii.join(' ')} 0 0 ${clockwise ? '1' : '0'} ${endPoint.join(' ')}`
      // return `${l} ${a}`

      return ['L', startPoint, 'A', radii, 0, 0, clockwise ? 1 : 0, endPoint];
    }
  }, {
    key: "_getNudgedPoint",
    value: function _getNudgedPoint(a, b) {
      var _this5 = this;

      return [0, 1].map(function (i) {
        var diff = b[i] - a[i];
        var mag = Math.min(_this5.borderRadius, Math.abs(diff) / 2);
        return a[i] + mag * Math.sign(diff);
      });
    } // _getNudgedPoints(prev, cur, next) {
    //   let mag = this.borderRadius
    //   const dirs = [prev, next].map(pos =>
    //     [0, 1].map(i => {
    //       const diff = pos[i] - cur[i]
    //       const maxDiffRadius = Math.abs(diff) / 2
    //       if (maxDiffRadius > 0 && maxDiffRadius < mag) {
    //         mag = maxDiffRadius
    //       }
    //       return Math.sign(diff)
    //     })
    //   )
    //   return dirs.map(dir => dir.map((sign, idx) => cur[idx] + sign * mag))
    //   const prevDir = [0, 1].map(i => Math.sign(prev[i] - cur[i]))
    //   const nextDir = [0, 1].map(i => Math.sign(next[i] - cur[i]))
    //   return [0, 1].map(i => {
    //     const diff = b[i] - a[i]
    //     const mag = Math.min(this.borderRadius, Math.abs(diff) / 2)
    //     return a[i] + mag * Math.sign(diff)
    //   })
    // }

  }, {
    key: "innerPath",
    get: function get() {
      var getSubPathD = this.borderRadius ? this._getRoundedSubPathD : this._getSubPathD;
      return this.subPaths.map(getSubPathD.bind(this)).join(' ') + ' z';
    }
  }, {
    key: "anchorBounds",
    get: function get() {
      if (!this._anchorBounds) {
        if (this.bounds.length > 1 && typeof this.anchorEle === 'number') {
          this._anchorBounds = this.bounds[this.anchorEle];
        } else if (this.bounds.length > 1) {
          this._anchorBounds = this.bounds.reduce(function (anchorBounds, bound) {
            return {
              top: Math.min(anchorBounds.top, bound.top),
              left: Math.min(anchorBounds.left, bound.left),
              right: Math.max(anchorBounds.right, bound.right),
              bottom: Math.max(anchorBounds.bottom, bound.bottom)
            };
          });
        } else {
          this._anchorBounds = this.bounds[0];
        }
      }

      return this._anchorBounds;
    }
  }, {
    key: "positionStyles",
    get: function get() {
      var _this$anchorBounds = this.anchorBounds,
          boundsTop = _this$anchorBounds.top,
          boundsRight = _this$anchorBounds.right,
          boundsLeft = _this$anchorBounds.left,
          boundsBottom = _this$anchorBounds.bottom;
      var upperTop = toPixels(boundsTop);
      var midTop = toPixels((boundsTop + boundsBottom) / 2);
      var lowerTop = toPixels(boundsBottom);
      var startLeft = toPixels(boundsLeft);
      var midLeft = toPixels((boundsLeft + boundsRight) / 2);
      var endLeft = toPixels(boundsRight);
      return {
        top: {
          top: upperTop,
          left: midLeft
        },
        topRight: {
          top: upperTop,
          left: endLeft
        },
        right: {
          top: midTop,
          left: endLeft
        },
        bottomRight: {
          top: lowerTop,
          left: endLeft
        },
        bottom: {
          top: lowerTop,
          left: midLeft
        },
        bottomLeft: {
          top: lowerTop,
          left: startLeft
        },
        left: {
          top: midTop,
          left: startLeft
        },
        topLeft: {
          top: upperTop,
          left: startLeft
        }
      };
    }
  }, {
    key: "captionStyle",
    get: function get() {
      var positionStyle = this.positionStyles[this.captionPosition];
      var xShift = Object(_general_util__WEBPACK_IMPORTED_MODULE_7__["stringSwitch"])(this.captionPosition, function (_ref7) {
        var _case = _ref7._case,
            _default = _ref7._default;

        _case(/(L|l)eft/, function () {
          return '-100%';
        });

        _case(['top', 'bottom'], function () {
          return '-50%';
        });

        _default(function () {
          return '0';
        });
      });
      var yShift = Object(_general_util__WEBPACK_IMPORTED_MODULE_7__["stringSwitch"])(this.captionPosition, function (_ref8) {
        var _case = _ref8._case,
            _default = _ref8._default;

        _case(/top/, function () {
          return '-100%';
        });

        _case(['left', 'right'], function () {
          return '-50%';
        });

        _default(function () {
          return '0';
        });
      });
      var translateX = "calc(".concat(xShift, " + ").concat(this.captionOffsetX, ")");
      var translateY = "calc(".concat(yShift, " + ").concat(this.captionOffsetY, ")");
      return _objectSpread(_objectSpread({}, positionStyle), {}, {
        transform: "translateX(".concat(translateX, ") translateY(").concat(translateY, ")")
      });
    }
  }, {
    key: "curBound",
    get: function get() {
      return this.bounds[this.curBoundIdx];
    }
  }, {
    key: "isComplete",
    get: function get() {
      return this._getNextBoundIdx() === undefined;
    }
  }, {
    key: "boundsIndices",
    get: function get() {
      return Array.from({
        length: this.bounds.length
      }).map(function (_, idx) {
        return idx;
      });
    }
  }]);

  return Spotlight;
}();

function getNextSide(curSide) {
  var idx = clockwiseOrder.indexOf(curSide);
  var nextSideIdx = (idx + 1 + 4) % 4;
  return clockwiseOrder[nextSideIdx];
}

function getOppositeSide(side) {
  var idx = clockwiseOrder.indexOf(side);
  var oppositeIdx = (idx + 2) % 4;
  return clockwiseOrder[oppositeIdx];
}

function toPixels(num) {
  return "".concat(num, "px");
}

function getPaddedBoundingRect(ele, padding) {
  var _padding$default, _padding$top, _padding$left, _padding$right, _padding$bottom;

  var bound = ele.getBoundingClientRect();
  var defaultPadding = _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(padding) === 'object' ? (_padding$default = padding.default) !== null && _padding$default !== void 0 ? _padding$default : 0 : padding;
  return {
    top: bound.top - ((_padding$top = padding.top) !== null && _padding$top !== void 0 ? _padding$top : defaultPadding),
    left: bound.left - ((_padding$left = padding.left) !== null && _padding$left !== void 0 ? _padding$left : defaultPadding),
    right: bound.right + ((_padding$right = padding.right) !== null && _padding$right !== void 0 ? _padding$right : defaultPadding),
    bottom: bound.bottom + ((_padding$bottom = padding.bottom) !== null && _padding$bottom !== void 0 ? _padding$bottom : defaultPadding)
  };
} // _getRoundedSubPathD(subPath) {
//   const m = `M ${subPath[0].join()}`
//   const l = `L ${subPath.slice(1).map(p => p.join()).join(' ')}`
//   return `${m} ${l}`
// }
// function getNudgeDiff(a, b, px) {
//   return [0, 1].map(i => {
//     const diff = b[i] - a[i]
//     const mag = Math.min(px, Math.abs(diff) / 2)
//     return mag * Math.sign(diff)
//   })
// }
// function getNudgedPoint(a, b) {
//   return [0, 1].map(i => {
//     const diff = b[i] - a[i]
//     const mag = Math.min(this.borderRadius, Math.abs(diff) / 2)
//     return a[i] + mag * Math.sign(diff)
//   })
// }


function getAbsDiff(a, b) {
  return [0, 1].map(function (i) {
    return Math.abs(a[i] - b[i]);
  });
} // function getPathHook(prev, cur, next, radius) {
//   const startPoint = getNudgedPoint(cur, prev, radius)
//   const endPoint = getNudgedPoint(cur, next, radius)
//   const radii = getAbsDiff(startPoint, endPoint)
//   const l = `L ${startPoint.join()}`
//   const a = `A ${radii.join(' ')} 0 0 1 ${endPoint.join(' ')}`
//   return `${l} ${a}`
// }
// function vecAdd(...vecs) {
//   return Array.from({ length: vecs[0].length })
//     .map((_, idx) => vecs.reduce((sum, vec) => vec[idx] + sum, 0))
// }


/* harmony default export */ __webpack_exports__["default"] = (Spotlight); // clockwise
// pos, pos -> higherx, lowery
// neg, pos -> higherx, highery
// pos, neg -> lowerx, lowery
// neg, neg -> lowerx, highery
// if sign of second matches sign of x diff

/***/ }),

/***/ "./src/scripts/shared/storage_util.js":
/*!********************************************!*\
  !*** ./src/scripts/shared/storage_util.js ***!
  \********************************************/
/*! exports provided: dbAdd, dbGet */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dbAdd", function() { return dbAdd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dbGet", function() { return dbGet; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ "./node_modules/@babel/runtime/helpers/objectWithoutProperties.js");
/* harmony import */ var _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__);



function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var dbAdd;
var dbGet;

if (Worker && indexedDB) {
  var storageWorker = new Worker('./dist/worker.js');
  var resolutionRegistry = {};

  storageWorker.onmessage = function (msg) {
    var _msg$data = msg.data,
        requestId = _msg$data.requestId,
        otherData = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1___default()(_msg$data, ["requestId"]);

    var resolve = resolutionRegistry[requestId];

    if (resolve) {
      resolve(otherData);
      delete resolutionRegistry[requestId];
    } else {
      console.log('Failed to find matching request for: ', msg);
    }
  };

  dbAdd = function dbAdd(key, value) {
    return send({
      type: 'ADD',
      key: key,
      value: value
    }).then(function (_ref) {
      var status = _ref.status;
      return status === 'success';
    });
  };

  dbGet = function dbGet(key) {
    return send({
      type: 'GET',
      key: key
    }).then(function (_ref2) {
      var result = _ref2.result;
      console.log(result);
      return result;
    });
  };

  function send(message, timeout) {
    var requestId = Math.random();
    storageWorker.postMessage(_objectSpread(_objectSpread({}, message), {}, {
      requestId: requestId
    }));
    return new Promise(function (resolve, reject) {
      if (timeout !== undefined) {
        var timeoutId = window.setTimeout(function () {
          reject('Request timed out');
        }, timeout);

        resolutionRegistry[requestId] = function (data) {
          window.clearTimeout(timeoutId);
          resolve(data);
        };
      } else {
        resolutionRegistry[requestId] = resolve;
      }
    });
  }
} else {
  dbAdd = function dbAdd(key, value) {
    window.localStorage.setItem(key, JSON.stringify(value));
  };

  dbGet = function dbGet(key) {
    var item = window.localStorage.getItem(key);
    return JSON.parse(item);
  };
}

window.dbAdd = dbAdd;
window.dbGet = dbGet;

/***/ }),

/***/ "./src/scripts/store/base.js":
/*!***********************************!*\
  !*** ./src/scripts/store/base.js ***!
  \***********************************/
/*! exports provided: Id, Position, GameBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Id", function() { return Id; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Position", function() { return Position; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GameBase", function() { return GameBase; });
/* harmony import */ var mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx-state-tree */ "./node_modules/mobx-state-tree/dist/mobx-state-tree.module.js");
/* harmony import */ var _shared_general_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/general_util */ "./src/scripts/shared/general_util.js");


var Id = mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].optional(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].identifier, _shared_general_util__WEBPACK_IMPORTED_MODULE_1__["nextId"]);
var Position = mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].refinement('Position', mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].array(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].integer), function (array) {
  return array.length === 2;
});
var GameBase = mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].model('GameBase').views(function (self) {
  return {
    get root() {
      return Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["getRoot"])(self);
    },

    get rootOptions() {
      var _self$root;

      return (_self$root = self.root) === null || _self$root === void 0 ? void 0 : _self$root.options;
    },

    get rootUi() {
      var _self$root2;

      return (_self$root2 = self.root) === null || _self$root2 === void 0 ? void 0 : _self$root2.ui;
    },

    get rootPuzzle() {
      return self.root.puzzle;
    },

    get env() {
      return Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["getEnv"])(self);
    }

  };
});

/***/ }),

/***/ "./src/scripts/store/collections.js":
/*!******************************************!*\
  !*** ./src/scripts/store/collections.js ***!
  \******************************************/
/*! exports provided: Cage, Group */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Cage", function() { return Cage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Group", function() { return Group; });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mobx-state-tree */ "./node_modules/mobx-state-tree/dist/mobx-state-tree.module.js");
/* harmony import */ var _shared_general_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/general_util */ "./src/scripts/shared/general_util.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base */ "./src/scripts/store/base.js");
/* harmony import */ var _filter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./filter */ "./src/scripts/store/filter.js");
/* harmony import */ var _square__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./square */ "./src/scripts/store/square.js");

// import { types } from 'mobx-state-tree'
// import { createIcon, getTemplateById } from '../shared/dom_util'
// import {
//   combos,
//   includesArray,
//   indexOfArray,
//   product,
//   sum,
//   quotient,
//   difference,
//   includesDistinct,
//   maxPossibleRepeats,
//   stringSwitch,
// } from '../shared/general_util'
// import { Id, GameBase } from './base'
// import Rules from './rules'
// import Square from './square'
// const Collection = GameBase
//   .named('Collection')
//   .props({
//     id: Id,
//     squares: types.array(types.reference(types.late(() => Square))),
//     rules: types.optional(Rules, () => Rules.create()),
//     eliminatedCombos: types.optional(
//       types.array(types.array(types.integer)),
//       () => []
//     ),
//   })
//   .views(self => {
//     return {
//       get numSquares() {
//         return self.squares.length
//       },
//       get positions() {
//         return self.squares.map(square => square.position)
//       },
//       get squareValues() {
//         return self.squares
//           .map(square => square.value)
//           .filter(val => typeof val === 'number')
//       },
//       // get boundingBox() {
//       //   const sortedSquareRows = self.squares.map(sq => sq.row).sort()
//       //   const sortedSquareCols = self.squares.map(sq => sq.col).sort()
//       //   const minRow = sortedSquareRows[0]
//       //   const minCol = sortedSquareCols[0]
//       //   const maxRow = sortedSquareRows[sortedSquareRows.length - 1]
//       //   const maxCol = sortedSquareCols[sortedSquareCols.length - 1]
//       //   return [[minRow, minCol], [maxRow, maxCol]]
//       // },
//       get allCombos() {
//         return combos(self.numSquares, ({
//           min: 1,
//           max: self.env.globals.size,
//           numRepeatsAllowed: self.numPossibleRepeats
//         }))
//       },
//       get filteredCombos() {
//         return self.allCombos
//           .filter(self.isFilteredCombo)
//       },
//       get possibleCombos() {
//         return self.allCombos
//           .filter(self.isPossibleCombo)
//       },
//       get numPossibleRepeats() {
//         return maxPossibleRepeats(self.positions)
//       },
//       get comboEles() {
//         return self.filteredCombos.map(combo => {
//           const comboEle = self.env.templates.combo.cloneNode(true)
//           comboEle.dataset.combo = combo.join(',')
//           comboEle.innerText = combo.join(' | ')
//           if (self.isEliminatedCombo(combo)) {
//             comboEle.classList.add('combo--eliminated')
//           }
//           return comboEle
//         })
//       },
//       compareComboEles(comboA, comboB) {
//         const comboStrA = comboA.dataset.combo
//         const comboStrB = comboB.dataset.combo
//         if (comboStrA === comboStrB) {
//           return 0
//         } else if (comboStrA < comboStrB) {
//           return -1
//         } else {
//           return 1
//         }
//       },
//       isFilteredCombo(combo) {
//         return self.rules.isPossibleCombo(combo)
//       },
//       isEliminatedCombo(combo) {
//         return includesArray(self.eliminatedCombos, combo)
//       },
//       isPossibleCombo(combo) {
//         return (
//           self.isFilteredCombo(combo)
//           && !self.isEliminatedCombo(combo)
//         )
//       },
//       isPossibleValue(value) {
//         return self.possibleCombos.some(combo =>
//           includesDistinct(combo, ...self.squareValues, value))
//       },
//     }
//   })
//   .actions(self => {
//     return {
//       addSquare(square) {
//         self.squares.push(square.id)
//       },
//       toggleCombo(combo) {
//         const comboIndex = indexOfArray(self.eliminatedCombos, combo)
//         if (comboIndex >= 0) {
//           self.eliminatedCombos.splice(comboIndex, 1)
//         } else {
//           self.eliminatedCombos.push(combo)
//         }
//       },
//       // eliminateCombo(combo) {
//       //   if (!includesArray(self.eliminatedCombos, combo)) {
//       //     self.eliminatedCombos.push(combo)
//       //   }
//       // },
//       // uneliminateCombo(combo) {
//       //   const comboIndex = indexOfArray(self.eliminatedCombos, combo)
//       //   if (comboIndex >= 0) {
//       //     self.eliminatedCombos.splice(comboIndex, 1)
//       //   }
//       // },
//       setCombos(combos) {
//         const sortedCombos = combos.map(combo => combo.sort())
//         self.eliminatedCombos = self.allCombos
//           .filter(combo => !includesArray(sortedCombos, combo))
//       },
//     }
//   })
// export const Cage = Collection
//   .named('Cage')
//   .props({
//     operation: types.enumeration('Operation', ['+', '−', '⨉', '÷']),
//     result: types.integer,
//     autoElimMathImpossibilities: types.optional(types.boolean, () => false),
//   })
//   .views(self => {
//     const superIsRulePossibleCombo = self.isFilteredCombo
//     return {
//       get bounds() {
//         const bounds = {
//           topSquares: [],
//           leftSquares: [],
//           anchor: self.squares[0],
//         }
//         self.squares.forEach(square => {
//           const isTop = !self.squares.some(square.isBelow)
//           const isLeft = !self.squares.some(square.isRightOf)
//           if (isTop) bounds.topSquares.push(square)
//           if (isLeft) bounds.leftSquares.push(square)
//           if (isTop && isLeft && square.comesBefore(bounds.anchor)) {
//             bounds.anchor = square
//           }
//         })
//         return bounds;
//       },
//       get anchor() {
//         return self.bounds.anchor
//       },
//       get labelText() {
//         return `${self.result} ${self.operation}`
//       },
//       isFilteredCombo(combo) {
//         return (
//           self.rootOptions.autoElimMathImpossibilities
//           || self.autoElimMathImpossibilities
//         ) ? (
//           superIsRulePossibleCombo(combo)
//           && self.isMathematicalPossibility(combo)
//         ) : superIsRulePossibleCombo(combo)
//       },
//       isMathematicalPossibility(combo) {
//         switch (self.operation) {
//           case '+':
//             return sum(combo) === self.result
//           case '−':
//             return difference(combo) === self.result
//           case '⨉':
//             return product(combo) === self.result
//           case '÷':
//             return quotient(combo) === self.result
//           default:
//             throw new Error(`Operation ${self.operation} doesn't match one of +, -, ⨉, or ÷`)
//         }
//       }
//     }
//   })
// export const Group = Collection
//   .named('Group')





var Collection = _base__WEBPACK_IMPORTED_MODULE_3__["GameBase"].named('Collection').props({
  id: _base__WEBPACK_IMPORTED_MODULE_3__["Id"],
  squares: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].array(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].reference(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].late(function () {
    return _square__WEBPACK_IMPORTED_MODULE_5__["default"];
  }))),
  filter: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].optional(_filter__WEBPACK_IMPORTED_MODULE_4__["default"], function () {
    return _filter__WEBPACK_IMPORTED_MODULE_4__["default"].create();
  }),
  eliminatedCombos: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].optional(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].array(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].array(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].integer)), function () {
    return [];
  })
}).views(function (self) {
  return {
    get numSquares() {
      return self.squares.length;
    },

    get positions() {
      return self.squares.map(function (square) {
        return square.position;
      });
    },

    get squareValues() {
      return self.squares.map(function (square) {
        return square.value;
      }).filter(function (val) {
        return typeof val === 'number';
      });
    },

    // get boundingBox() {
    //   const sortedSquareRows = self.squares.map(sq => sq.row).sort()
    //   const sortedSquareCols = self.squares.map(sq => sq.col).sort()
    //   const minRow = sortedSquareRows[0]
    //   const minCol = sortedSquareCols[0]
    //   const maxRow = sortedSquareRows[sortedSquareRows.length - 1]
    //   const maxCol = sortedSquareCols[sortedSquareCols.length - 1]
    //   return [[minRow, minCol], [maxRow, maxCol]]
    // },
    get allCombos() {
      return Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_2__["combos"])(self.numSquares, {
        min: 1,
        max: self.env.globals.size,
        numRepeatsAllowed: self.numPossibleRepeats
      });
    },

    get filteredCombos() {
      return self.allCombos.filter(self.isFilteredCombo);
    },

    get possibleCombos() {
      return self.allCombos.filter(self.isPossibleCombo);
    },

    get numPossibleRepeats() {
      return Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_2__["maxPossibleRepeats"])(self.positions);
    },

    get comboEles() {
      return self.filteredCombos.map(function (combo) {
        var comboEle = self.env.templates.combo.cloneNode(true);
        comboEle.dataset.combo = combo.join(',');
        comboEle.innerText = combo.join(' | ');

        if (self.isEliminatedCombo(combo)) {
          comboEle.classList.add('combo--eliminated');
        }

        return comboEle;
      });
    },

    compareComboEles: function compareComboEles(comboA, comboB) {
      var comboStrA = comboA.dataset.combo;
      var comboStrB = comboB.dataset.combo;

      if (comboStrA === comboStrB) {
        return 0;
      } else if (comboStrA < comboStrB) {
        return -1;
      } else {
        return 1;
      }
    },
    isFilteredCombo: function isFilteredCombo(combo) {
      return self.filter.isPossibleCombo(combo);
    },
    isEliminatedCombo: function isEliminatedCombo(combo) {
      return Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_2__["includesArray"])(self.eliminatedCombos, combo);
    },
    isPossibleCombo: function isPossibleCombo(combo) {
      return self.isFilteredCombo(combo) && !self.isEliminatedCombo(combo);
    },
    isPossibleValue: function isPossibleValue(value) {
      return self.possibleCombos.some(function (combo) {
        return _shared_general_util__WEBPACK_IMPORTED_MODULE_2__["includesDistinct"].apply(void 0, [combo].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(self.squareValues), [value]));
      });
    }
  };
}).actions(function (self) {
  return {
    addSquare: function addSquare(square) {
      self.squares.push(square.id);
    },
    toggleCombo: function toggleCombo(combo) {
      Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_2__["togglePresenceInArray"])(self.eliminatedCombos, combo, _shared_general_util__WEBPACK_IMPORTED_MODULE_2__["indexOfArray"]);
    },
    setCombos: function setCombos(combos) {
      var sortedCombos = combos.map(function (combo) {
        return combo.sort();
      });
      self.eliminatedCombos = self.allCombos.filter(function (combo) {
        return !Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_2__["includesArray"])(sortedCombos, combo);
      });
    },
    reset: function reset() {
      self.filter.reset();
      self.eliminatedCombos = [];
    }
  };
});
var Cage = Collection.named('Cage').props({
  operation: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].enumeration('Operation', ['+', '−', '⨉', '÷']),
  result: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].integer,
  autoElimMathImpossibilities: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].optional(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].boolean, function () {
    return false;
  })
}).views(function (self) {
  var superIsRulePossibleCombo = self.isFilteredCombo;
  return {
    get bounds() {
      var bounds = {
        topSquares: [],
        leftSquares: [],
        anchor: self.squares[0]
      };
      self.squares.forEach(function (square) {
        var isTop = !self.squares.some(square.isBelow);
        var isLeft = !self.squares.some(square.isRightOf);
        if (isTop) bounds.topSquares.push(square);
        if (isLeft) bounds.leftSquares.push(square);

        if (isTop && isLeft && square.comesBefore(bounds.anchor)) {
          bounds.anchor = square;
        }
      });
      return bounds;
    },

    get anchor() {
      return self.bounds.anchor;
    },

    get labelText() {
      return "".concat(self.result, " ").concat(self.operation);
    },

    isFilteredCombo: function isFilteredCombo(combo) {
      return self.rootOptions.autoElimMathImpossibilities || self.autoElimMathImpossibilities ? superIsRulePossibleCombo(combo) && self.isMathematicalPossibility(combo) : superIsRulePossibleCombo(combo);
    },
    isMathematicalPossibility: function isMathematicalPossibility(combo) {
      switch (self.operation) {
        case '+':
          return Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_2__["sum"])(combo) === self.result;

        case '−':
          return Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_2__["difference"])(combo) === self.result;

        case '⨉':
          return Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_2__["product"])(combo) === self.result;

        case '÷':
          return Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_2__["quotient"])(combo) === self.result;

        default:
          throw new Error("Operation ".concat(self.operation, " doesn't match one of +, -, \u2A09, or \xF7"));
      }
    }
  };
});
var Group = Collection.named('Group');

/***/ }),

/***/ "./src/scripts/store/filter.js":
/*!*************************************!*\
  !*** ./src/scripts/store/filter.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx-state-tree */ "./node_modules/mobx-state-tree/dist/mobx-state-tree.module.js");
/* harmony import */ var _shared_dom_partials__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/dom_partials */ "./src/scripts/shared/dom_partials.js");
/* harmony import */ var _shared_general_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/general_util */ "./src/scripts/shared/general_util.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base */ "./src/scripts/store/base.js");




var FilterPossibility = _base__WEBPACK_IMPORTED_MODULE_3__["GameBase"].named('FilterPossibility').props({
  value: mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].integer,
  status: mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].optional(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].enumeration('Status', ['none', 'required', 'eliminated', 'alternative']), function () {
    return 'none';
  })
}).views(function (self) {
  var modeStatusMap = {
    and: 'required',
    not: 'eliminated',
    or: 'alternative'
  };

  var hoverFlag = function hoverFlag(mode) {
    if (self.status === 'none') {
      return "hover-".concat(modeStatusMap[mode]);
    } else if (!self.matchesMode(mode)) {
      return 'not-allowed';
    }
  };

  var getStatusIcon = function getStatusIcon(status) {
    return Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_2__["stringSwitch"])(status, function (_ref) {
      var _case = _ref._case;

      _case('required', function () {
        return Object(_shared_dom_partials__WEBPACK_IMPORTED_MODULE_1__["requiredIcons"])();
      });

      _case('eliminated', function () {
        return Object(_shared_dom_partials__WEBPACK_IMPORTED_MODULE_1__["eliminatedIcons"])();
      });

      _case('alternative', function () {
        return Object(_shared_dom_partials__WEBPACK_IMPORTED_MODULE_1__["alternativeIcons"])();
      });

      _case('none', function () {
        return Object(_shared_dom_partials__WEBPACK_IMPORTED_MODULE_1__["baseIcons"])();
      });
    });
  };

  return {
    get noHoverIcons() {
      return getStatusIcon(self.status);
    },

    matchesMode: function matchesMode(mode) {
      return self.status === modeStatusMap[mode];
    },
    hoverIcons: function hoverIcons(mode) {
      return self.status === 'none' ? getStatusIcon(modeStatusMap[mode]) : getStatusIcon(self.status);
    },
    className: function className(mode) {
      return Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_2__["generateClassName"])('filter-possibility', [self.status, hoverFlag(mode)]);
    }
  };
}).actions(function (self) {
  return {
    toggle: function toggle(status) {
      if (self.status === status) {
        self.status = 'none';
      } else if (self.status === 'none') {
        self.status = status;
      } else {
        console.log("Cannot toggle from ".concat(self.status, " to ").concat(status));
      }
    }
  };
});
var Filter = _base__WEBPACK_IMPORTED_MODULE_3__["GameBase"].named('Filter').props({
  possibilities: mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].optional(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].array(FilterPossibility), function () {
    return [];
  })
}).views(function (self) {
  return {
    get required() {
      return self.possibilities.filter(function (possibility) {
        return possibility.status === 'required';
      });
    },

    get requiredValues() {
      return self.required.map(function (possibility) {
        return possibility.value;
      });
    },

    get eliminated() {
      return self.possibilities.filter(function (possibility) {
        return possibility.status === 'eliminated';
      });
    },

    get eliminatedValues() {
      return self.eliminated.map(function (possibility) {
        return possibility.value;
      });
    },

    get alternatives() {
      return self.possibilities.filter(function (possibility) {
        return possibility.status === 'alternative';
      });
    },

    get alternativeValues() {
      return self.alternatives.map(function (possibility) {
        return possibility.value;
      });
    },

    getPossibilityByValue: function getPossibilityByValue(val) {
      return self.possibilities.find(function (possibility) {
        return possibility.value === val;
      });
    },
    filterPossibilityStatus: function filterPossibilityStatus(val) {
      return self.getPossibilityByValue(val).status;
    },
    isRequiredValue: function isRequiredValue(val) {
      return self.filterPossibilityStatus(val) === 'required';
    },
    isEliminatedValue: function isEliminatedValue(val) {
      return self.filterPossibilityStatus(val) === 'eliminated';
    },
    isAlternativeValue: function isAlternativeValue(val) {
      return self.filterPossibilityStatus(val) === 'alternative';
    },
    isStandardValue: function isStandardValue(val) {
      return self.filterPossibilityStatus(val) === 'none';
    },
    isPossibleCombo: function isPossibleCombo(combo) {
      return self.requiredValues.every(function (val) {
        return combo.includes(val);
      }) && self.eliminatedValues.every(function (val) {
        return !combo.includes(val);
      }) && (self.alternativeValues.length === 0 || self.alternativeValues.some(function (val) {
        return combo.includes(val);
      }));
    },
    noHoverIcons: function noHoverIcons(val) {
      return self.getPossibilityByValue(val).noHoverIcons;
    },
    hoverIcons: function hoverIcons(val, mode) {
      return self.getPossibilityByValue(val).hoverIcons(mode);
    },
    className: function className(val, mode) {
      return self.getPossibilityByValue(val).className(mode);
    }
  };
}).actions(function (self) {
  return {
    initialize: function initialize(size) {
      self.possibilities = Array.from(Array(size), function (_, idx) {
        return FilterPossibility.create({
          value: idx + 1
        });
      });
    },
    toggle: function toggle(val, mode) {
      var status = Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_2__["stringSwitch"])(mode, function (_ref2) {
        var _case = _ref2._case;

        _case('and', function () {
          return 'required';
        });

        _case('not', function () {
          return 'eliminated';
        });

        _case('or', function () {
          return 'alternative';
        });
      });
      self.getPossibilityByValue(val).toggle(status);
    },
    clearMode: function clearMode(mode) {
      self.possibilities.forEach(function (possibility) {
        if (possibility.matchesMode(mode)) {
          possibility.status = 'none';
        }
      });
    },
    reset: function reset() {
      self.possibilities.forEach(function (possibility) {
        return possibility.status = 'none';
      });
    }
  };
});
/* harmony default export */ __webpack_exports__["default"] = (Filter);

/***/ }),

/***/ "./src/scripts/store/game.js":
/*!***********************************!*\
  !*** ./src/scripts/store/game.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js");
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var mobx_state_tree__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! mobx-state-tree */ "./node_modules/mobx-state-tree/dist/mobx-state-tree.module.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./base */ "./src/scripts/store/base.js");
/* harmony import */ var _ui__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ui */ "./src/scripts/store/ui.js");
/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./options */ "./src/scripts/store/options.js");
/* harmony import */ var _puzzle__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./puzzle */ "./src/scripts/store/puzzle.js");
/* harmony import */ var _meta__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./meta */ "./src/scripts/store/meta.js");
/* harmony import */ var _shared_general_util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../shared/general_util */ "./src/scripts/shared/general_util.js");
/* harmony import */ var _shared_storage_util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../shared/storage_util */ "./src/scripts/shared/storage_util.js");



function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }










var Game = _base__WEBPACK_IMPORTED_MODULE_4__["GameBase"].named('Game').props({
  puzzle: mobx_state_tree__WEBPACK_IMPORTED_MODULE_3__["types"].optional(_puzzle__WEBPACK_IMPORTED_MODULE_7__["default"], function () {
    return _puzzle__WEBPACK_IMPORTED_MODULE_7__["default"].create();
  }),
  curPuzzleIdx: mobx_state_tree__WEBPACK_IMPORTED_MODULE_3__["types"].optional(mobx_state_tree__WEBPACK_IMPORTED_MODULE_3__["types"].integer, 0),
  meta: mobx_state_tree__WEBPACK_IMPORTED_MODULE_3__["types"].optional(_meta__WEBPACK_IMPORTED_MODULE_8__["default"], function () {
    return _meta__WEBPACK_IMPORTED_MODULE_8__["default"].create();
  }),
  options: mobx_state_tree__WEBPACK_IMPORTED_MODULE_3__["types"].optional(_options__WEBPACK_IMPORTED_MODULE_6__["default"], function () {
    return _options__WEBPACK_IMPORTED_MODULE_6__["default"].create();
  }),
  ui: mobx_state_tree__WEBPACK_IMPORTED_MODULE_3__["types"].optional(_ui__WEBPACK_IMPORTED_MODULE_5__["default"], function () {
    return _ui__WEBPACK_IMPORTED_MODULE_5__["default"].create();
  })
}).volatile(function (self) {
  return {
    storedSnapshot: null
  };
}).extend(function (self) {
  var takePuzzleSnapshot = function takePuzzleSnapshot() {
    var snapshotId = parseInt(Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_9__["nextId"])());
    var puzzle = Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_3__["getSnapshot"])(self.puzzle);
    self.env.snapshots[snapshotId] = puzzle;
    return snapshotId;
  };

  var getOrSetPuzzle = function getOrSetPuzzle(id) {
    var cachedGame = self.env.puzzleCache.get(id);

    if (cachedGame) {
      return cachedGame.puzzle;
    } else {
      var puzzle = _puzzle__WEBPACK_IMPORTED_MODULE_7__["default"].create(self.env.snapshots[id]);
      self.env.puzzleCache.set(id, Game.create({
        puzzle: puzzle
      }, self.env));
      return puzzle;
    }
  };

  var getNewPuzzleIdx = function getNewPuzzleIdx() {
    var puzzles = self.env.puzzles;
    var randomIdx = Math.floor(Math.random() * puzzles.length);
    return randomIdx === self.curPuzzleIdx ? getNewPuzzleIdx() : randomIdx;
  };

  var noHistory = function noHistory() {
    window.setTimeout(function () {
      self.env.history.pop();
    }, 0);
  };

  var ifCurSquareEmpty = function ifCurSquareEmpty(cb) {
    if (self.ui.curSquare.hasValue) {
      noHistory();
    } else {
      cb();
    }
  };

  var getStoredSnapshot = function getStoredSnapshot() {
    return self.storedSnapshot ? Promise.resolve(self.storedSnapshot) : Object(_shared_storage_util__WEBPACK_IMPORTED_MODULE_10__["dbGet"])('gameStore').then(function (snapshot) {
      self.setStoredSnapshot(snapshot);
      return snapshot;
    });
  };

  var recordedActions = {
    setFocusedSquare: function setFocusedSquare(value) {
      if (self.options.autoBlock && !self.ui.curSquare.isPossibleValue(value)) {
        self.ui.curSquare.conflictingSquares(value).forEach(function (square) {
          return square.setConflict();
        });
        self.ui.curSquare.setMistake(value);
        window.setTimeout(function () {
          self.env.history.pop();
        }, 0);
      } else {
        self.ui.curSquare.value = value;
        self.ui.isStaging = false;
      }
    },
    toggleFocusedSquarePossibility: function toggleFocusedSquarePossibility(val) {
      ifCurSquareEmpty(function () {
        return self.ui.curSquare.togglePossibility(val);
      });
    },
    resetFocusedSquarePossibilities: function resetFocusedSquarePossibilities() {
      var square = self.ui.curSquare;

      if (!square.hasEliminations && !square.hasValue) {
        noHistory();
      } else {
        self.ui.curSquare.eliminatedPossibilities = [];
        self.ui.curSquare.value = null;
      }
    },
    setStagedPossibilities: function setStagedPossibilities() {
      ifCurSquareEmpty(function () {
        self.ui.curSquare.setStagedPossibilities();
        self.ui.clearStagedPossibilities();
      });
    },
    clearFocusedSquare: function clearFocusedSquare() {
      self.setFocusedSquare(null);
    },
    toggleSelectionPossibility: function toggleSelectionPossibility(val) {
      self.ui.toggleSelectionPossibility(val);
    },
    toggleCurCageCombo: function toggleCurCageCombo(combo) {
      self.ui.curCage.toggleCombo(combo);
    },
    toggleFilterPossibility: function toggleFilterPossibility(val) {
      self.ui.toggleFilterPossibility(val);
    },
    clearFilterMode: function clearFilterMode() {
      self.ui.clearFilterMode();
    },
    clearFilter: function clearFilter() {
      self.ui.clearFilter();
    },
    enterIf: function enterIf() {
      var mainSnapshotId = takePuzzleSnapshot();
      self.meta.enterIf(mainSnapshotId);
    },
    enterThen: function enterThen() {
      var ifSnapshotId = takePuzzleSnapshot();
      self.meta.enterThen(ifSnapshotId);
    },
    finishImplication: function finishImplication() {
      var thenSnapshotId = takePuzzleSnapshot();
      self.meta.setImplication(thenSnapshotId);
      self.exitImplication();
    },
    exitImplication: function exitImplication() {
      Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_3__["applySnapshot"])(self.puzzle, self.meta.mainSnapshot);
      self.meta.clearImplication();
    }
  };
  var silentActions = {
    newPuzzle: function newPuzzle() {
      var newIdx = getNewPuzzleIdx();
      self.curPuzzleIdx = newIdx;
      self.ui.reset();
      self.puzzle = _puzzle__WEBPACK_IMPORTED_MODULE_7__["default"].create();
      self.initialize();
    },
    resetPuzzle: function resetPuzzle() {
      self.ui.reset();
      self.puzzle.reset();
    },
    resetToStoredSnapshot: Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_3__["flow"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default.a.mark(function _callee() {
      var snapshot;
      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default.a.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return getStoredSnapshot();

            case 2:
              snapshot = _context.sent;
              console.log(snapshot);

              try {
                Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_3__["applySnapshot"])(self, snapshot);
                self.resetPuzzle();
                self.options.reset();
              } catch (_unused) {
                self.initialize();
              }

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })),
    applyStoredSnapshot: Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_3__["flow"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default.a.mark(function _callee2() {
      var snapshot;
      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return getStoredSnapshot();

            case 2:
              snapshot = _context2.sent;

              try {
                Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_3__["applySnapshot"])(self, snapshot);
              } catch (_unused2) {
                console.log('Unable to apply stored snapshot');
              }

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    })),
    setStoredSnapshot: function setStoredSnapshot(snapshot) {
      self.storedSnapshot = snapshot;
    },
    initialize: function initialize() {
      var _self$env$puzzles$sel = self.env.puzzles[self.curPuzzleIdx],
          cages = _self$env$puzzles$sel.cages,
          solution = _self$env$puzzles$sel.solution;
      cages.forEach(function (_ref) {
        var operation = _ref.operation,
            result = _ref.result,
            squares = _ref.squares;
        var cage = self.puzzle.cages.put({
          operation: operation,
          result: result
        });
        cage.filter.initialize(self.env.globals.size);
        squares.forEach(function (position) {
          var square = self.puzzle.squares.put({
            position: position,
            solution: solution[position[0]][position[1]],
            cage: cage.id
          });
          cage.addSquare(square);
        });
      });
    },
    attachHooks: function attachHooks() {
      Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_3__["onAction"])(self, function (action) {
        if (self.shouldRecordAction(action)) {
          self.env.future = [];
          self.env.history.push(self.currentState);
        }
      });
      Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_3__["onSnapshot"])(self, function (snapshot) {
        Object(_shared_storage_util__WEBPACK_IMPORTED_MODULE_10__["dbAdd"])('gameStore', snapshot);
        var _self$env = self.env,
            history = _self$env.history,
            snapshots = _self$env.snapshots,
            future = _self$env.future;
        Object(_shared_storage_util__WEBPACK_IMPORTED_MODULE_10__["dbAdd"])('env', {
          history: history,
          snapshots: snapshots,
          future: future
        });
      });
    },
    beginStaging: function beginStaging() {
      if (!self.ui.curSquare.hasValue) {
        self.ui.isStaging = true;
      }
    },
    stopStaging: function stopStaging() {
      self.ui.isStaging = false;

      if (self.ui.hasStagedPossibilities) {
        self.setStagedPossibilities();
      }
    },
    toggleStagedPossibility: function toggleStagedPossibility(val) {
      self.ui.toggleStagedPossibility(val);
    },
    clearStagedPossibilities: function clearStagedPossibilities() {
      self.ui.clearStagedPossibilities();
    },
    selectSquareByDir: function selectSquareByDir(dir) {
      self.ui.selectSquareByDir(dir);
    },
    selectSquareByPos: function selectSquareByPos(pos) {
      self.ui.selectSquareByPos(pos);
    },
    selectSquareById: function selectSquareById(id) {
      self.ui.selectSquareById(id);
    },
    clearFocus: function clearFocus() {
      self.ui.curSquare = null;
    },
    undoOrRedo: function undoOrRedo(_ref2) {
      var popFrom = _ref2.popFrom,
          pushTo = _ref2.pushTo;

      if (popFrom.length > 0) {
        pushTo.push(self.currentState);
        var nextState = popFrom.pop();
        Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_3__["applySnapshot"])(self.puzzle, nextState.puzzle);
        Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_3__["applySnapshot"])(self.meta, nextState.meta);
      }
    },
    undo: function undo() {
      self.undoOrRedo({
        popFrom: self.env.history,
        pushTo: self.env.future
      });
    },
    redo: function redo() {
      self.undoOrRedo({
        popFrom: self.env.future,
        pushTo: self.env.history
      });
    }
  };
  return {
    views: {
      get recordedActions() {
        return Object.keys(recordedActions);
      },

      get currentState() {
        return {
          puzzle: Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_3__["getSnapshot"])(self.puzzle),
          meta: Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_3__["getSnapshot"])(self.meta)
        };
      },

      shouldRecordAction: function shouldRecordAction(action) {
        return self.recordedActions.includes(action.name);
      },
      implicationPuzzles: function implicationPuzzles() {
        return self.meta.implications.map(self.getPuzzlesFromImplication);
      },
      possibleImplications: function possibleImplications() {
        return self.implicationPuzzles().filter(function (_ref3) {
          var thenPuzzle = _ref3.thenPuzzle;
          return self.isPossiblePuzzle(thenPuzzle);
        });
      },
      fulfilledImplications: function fulfilledImplications() {
        return self.possibleImplications().filter(function (_ref4) {
          var ifPuzzle = _ref4.ifPuzzle;
          return self.isFulfilledPuzzle(ifPuzzle);
        });
      },
      getPuzzlesFromImplication: function getPuzzlesFromImplication(_ref5) {
        var _ref6 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1___default()(_ref5, 2),
            ifId = _ref6[0],
            thenId = _ref6[1];

        return {
          ifPuzzle: getOrSetPuzzle(ifId),
          thenPuzzle: getOrSetPuzzle(thenId)
        };
      },
      isPossiblePuzzle: function isPossiblePuzzle(puzzle) {
        return puzzle.squaresArray.every(function (square) {
          var curSquare = self.puzzle.squares.get(square.id);
          return curSquare.isConsistentWith(square);
        });
      },
      isFulfilledPuzzle: function isFulfilledPuzzle(puzzle) {
        return puzzle.squaresArray.every(function (square) {
          var curSquare = self.puzzle.squares.get(square.id);
          return curSquare.isLogicalSubsetOf(square);
        });
      }
    },
    actions: _objectSpread(_objectSpread({}, recordedActions), silentActions)
  };
});
/* harmony default export */ __webpack_exports__["default"] = (Game);

/***/ }),

/***/ "./src/scripts/store/meta.js":
/*!***********************************!*\
  !*** ./src/scripts/store/meta.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx-state-tree */ "./node_modules/mobx-state-tree/dist/mobx-state-tree.module.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ "./src/scripts/store/base.js");
/* harmony import */ var _puzzle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./puzzle */ "./src/scripts/store/puzzle.js");



var Meta = _base__WEBPACK_IMPORTED_MODULE_1__["GameBase"].named('Meta').props({
  implications: mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].optional(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].array(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].array(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].number)), function () {
    return [];
  }),
  mainId: mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].maybeNull(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].integer),
  ifId: mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].maybeNull(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].integer),
  mode: mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].optional(mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__["types"].enumeration('Mode', ['main', 'if', 'then']), function () {
    return 'main';
  })
}).volatile(function (self) {
  return {
    _stagedMain: {
      id: null,
      puzzle: null
    },
    _stagedIf: {
      id: null,
      puzzle: null
    }
  };
}).views(function (self) {
  return {
    get mainSnapshot() {
      return self.env.snapshots[self.mainId];
    },

    get ifSnapshot() {
      return self.env.snapshots[self.ifId];
    },

    get stagedMain() {
      var _self$_stagedMain = self._stagedMain,
          id = _self$_stagedMain.id,
          puzzle = _self$_stagedMain.puzzle;

      if (self.mode !== 'if' && self.mode !== 'then') {
        return null;
      } else if (id === self.mainId && puzzle) {
        return puzzle;
      } else {
        var _puzzle = _puzzle__WEBPACK_IMPORTED_MODULE_2__["default"].create(self.mainSnapshot);

        self._stagedMain = {
          id: self.mainId,
          puzzle: _puzzle
        };
        return _puzzle;
      }
    },

    get stagedIf() {
      var _self$_stagedIf = self._stagedIf,
          id = _self$_stagedIf.id,
          puzzle = _self$_stagedIf.puzzle;

      if (self.mode !== 'then') {
        return null;
      } else if (id === self.ifId && puzzle) {
        return puzzle;
      } else {
        var _puzzle2 = _puzzle__WEBPACK_IMPORTED_MODULE_2__["default"].create(self.ifSnapshot);

        self._stagedIf = {
          id: self.ifId,
          puzzle: _puzzle2
        };
        return _puzzle2;
      }
    }

  };
}).actions(function (self) {
  return {
    enterIf: function enterIf(mainId) {
      self.mainId = mainId;
      self.mode = 'if';
    },
    enterThen: function enterThen(ifId) {
      self.ifId = ifId;
      self.mode = 'then';
    },
    setImplication: function setImplication(thenId) {
      var implication = [self.ifId, thenId];
      self.implications.push(implication);
    },
    clearImplication: function clearImplication() {
      self._stagedMain = {
        id: null,
        puzzle: null
      };
      self._stagedIf = {
        id: null,
        puzzle: null
      };
      self.mainId = null;
      self.ifId = null;
      self.mode = 'main';
    }
  };
});
/* harmony default export */ __webpack_exports__["default"] = (Meta);

/***/ }),

/***/ "./src/scripts/store/options.js":
/*!**************************************!*\
  !*** ./src/scripts/store/options.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _shared_general_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/general_util */ "./src/scripts/shared/general_util.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ "./src/scripts/store/base.js");


var Options = _base__WEBPACK_IMPORTED_MODULE_1__["GameBase"].named('Options').props({
  autoBlock: true,
  autoEliminate: true,
  autoElimMathImpossibilities: true,
  maxDisplayedPossibilities: 9,
  walkthrough: false
}).views(function (self) {
  return {
    get autoBlockClassName() {
      return Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_0__["generateClassName"])('toggle', [[self.autoBlock, 'on']]);
    },

    get autoElimClassName() {
      return Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_0__["generateClassName"])('toggle', [[self.autoEliminate, 'on']]);
    },

    get autoElimMathImpossibilitiesClassName() {
      return Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_0__["generateClassName"])('toggle', [[self.autoElimMathImpossibilities, 'on']]);
    },

    get walkthroughClassName() {
      return Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_0__["generateClassName"])('toggle', [[self.walkthrough, 'on']]);
    }

  };
}).actions(function (self) {
  return {
    setOption: function setOption(option, val) {
      self[option] = val;
    },
    toggleAutoBlock: function toggleAutoBlock() {
      self.autoBlock = !self.autoBlock;
    },
    toggleAutoEliminate: function toggleAutoEliminate() {
      self.autoEliminate = !self.autoEliminate;
    },
    toggleAutoElimMathImpossibilities: function toggleAutoElimMathImpossibilities() {
      self.autoElimMathImpossibilities = !self.autoElimMathImpossibilities;
    },
    toggleWalkthrough: function toggleWalkthrough() {
      self.walkthrough = !self.walkthrough;
    },
    setMaxDisplayedPossibilities: function setMaxDisplayedPossibilities(num) {
      if (num < 2 || num > 9) {
        return false;
      } else {
        self.maxDisplayedPossibilities = num;
        return true;
      }
    },
    reset: function reset() {
      self.autoBlock = true;
      self.autoEliminate = true;
      self.autoElimMathImpossibilities = true;
      self.maxDisplayedPossibilities = 9;
      self.alwaysShowWalkthrough = false;
    }
  };
});
/* harmony default export */ __webpack_exports__["default"] = (Options);

/***/ }),

/***/ "./src/scripts/store/puzzle.js":
/*!*************************************!*\
  !*** ./src/scripts/store/puzzle.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mobx-state-tree */ "./node_modules/mobx-state-tree/dist/mobx-state-tree.module.js");
/* harmony import */ var _shared_general_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/general_util */ "./src/scripts/shared/general_util.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base */ "./src/scripts/store/base.js");
/* harmony import */ var _collections__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./collections */ "./src/scripts/store/collections.js");
/* harmony import */ var _square__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./square */ "./src/scripts/store/square.js");






var Puzzle = _base__WEBPACK_IMPORTED_MODULE_3__["GameBase"].named('Puzzle').props({
  id: _base__WEBPACK_IMPORTED_MODULE_3__["Id"],
  uuid: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].optional(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].string, _shared_general_util__WEBPACK_IMPORTED_MODULE_2__["nextId"]),
  squares: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].map(_square__WEBPACK_IMPORTED_MODULE_5__["default"]),
  cages: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].map(_collections__WEBPACK_IMPORTED_MODULE_4__["Cage"]),
  groups: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__["types"].map(_collections__WEBPACK_IMPORTED_MODULE_4__["Group"])
}).views(function (self) {
  var posToIdMap = {};
  return {
    get collections() {
      return [].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(self.cages.values()), _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(self.groups.values()));
    },

    get squaresArray() {
      return Array.from(self.squares.values());
    },

    get cagesArray() {
      return Array.from(self.cages.values());
    },

    get groupsArray() {
      return Array.from(self.groups.values());
    },

    getSquareByPos: function getSquareByPos(pos) {
      if (!self.isValidPos(pos)) return null;
      var strPos = pos.join(',');

      if (!posToIdMap[strPos]) {
        posToIdMap[strPos] = self.squaresArray.find(function (sq) {
          return sq.position.join(',') === strPos;
        });
      }

      return posToIdMap[strPos];
    },
    getSquaresByRow: function getSquaresByRow(row) {
      return self.squaresArray.filter(function (square) {
        return square.row === row;
      });
    },
    getSquaresByCol: function getSquaresByCol(col) {
      return self.squaresArray.filter(function (square) {
        return square.col === col;
      });
    },
    getCollectionsBySquare: function getCollectionsBySquare(square) {
      return self.collections.filter(function (c) {
        return c.squares.includes(square);
      });
    },
    isValidPos: function isValidPos(pos) {
      return pos.every(function (n) {
        return n >= 0 && n <= 9;
      });
    }
  };
}).actions(function (self) {
  return {
    resetUuid: function resetUuid() {
      self.uuid = Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_2__["nextId"])();
    },
    reset: function reset() {
      self.squaresArray.forEach(function (square) {
        return square.reset();
      });
      self.collections.forEach(function (collection) {
        return collection.reset();
      });
    }
  };
});
/* harmony default export */ __webpack_exports__["default"] = (Puzzle);

/***/ }),

/***/ "./src/scripts/store/square.js":
/*!*************************************!*\
  !*** ./src/scripts/store/square.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! mobx-state-tree */ "./node_modules/mobx-state-tree/dist/mobx-state-tree.module.js");
/* harmony import */ var _shared_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/constants */ "./src/scripts/shared/constants.js");
/* harmony import */ var _shared_general_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/general_util */ "./src/scripts/shared/general_util.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./base */ "./src/scripts/store/base.js");
/* harmony import */ var _collections__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./collections */ "./src/scripts/store/collections.js");







var Square = _base__WEBPACK_IMPORTED_MODULE_5__["GameBase"].named('Square').props({
  id: _base__WEBPACK_IMPORTED_MODULE_5__["Id"],
  position: _base__WEBPACK_IMPORTED_MODULE_5__["Position"],
  cage: mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].maybeNull(mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].reference(mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].late(function () {
    return _collections__WEBPACK_IMPORTED_MODULE_6__["Cage"];
  }))),
  value: mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].maybeNull(mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].integer),
  mistakeValue: mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].maybeNull(mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].integer),
  solution: mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].integer,
  eliminatedPossibilities: mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].optional(mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].array(mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].integer), function () {
    return [];
  }),
  status: mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].optional(mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].enumeration('Status', ['none', 'mistake', 'conflict']), function () {
    return 'none';
  })
}).extend(function (self) {
  var initialPossibilities = Array.from(Array(9), function (_, idx) {
    return idx + 1;
  });
  return {
    views: {
      get collections() {
        return self.rootPuzzle.getCollectionsBySquare(self);
      },

      get rowSquares() {
        return self.rootPuzzle.getSquaresByRow(self.row).filter(function (square) {
          return square !== self;
        });
      },

      get colSquares() {
        return self.rootPuzzle.getSquaresByCol(self.col).filter(function (square) {
          return square !== self;
        });
      },

      get rowColSquares() {
        return [].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(self.rowSquares), _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(self.colSquares));
      },

      get rowColValues() {
        return self.rowColSquares.map(function (square) {
          return square.value;
        }).filter(function (val) {
          return typeof val === 'number';
        });
      },

      get collectionPossibilities() {
        return initialPossibilities.filter(function (val) {
          return self.collections.every(function (c) {
            return c.isPossibleValue(val);
          });
        });
      },

      get squarePossiblities() {
        return initialPossibilities.filter(function (val) {
          return !self.eliminatedPossibilities.includes(val);
        });
      },

      get squareAndCollectionPossibilities() {
        return self.collectionPossibilities.filter(function (val) {
          return self.squarePossiblities.includes(val);
        });
      },

      get possibilities() {
        return self.hasValue ? [self.value] : self.squareAndCollectionPossibilities.filter(function (val) {
          return !self.isAutoEliminatedValue(val);
        });
      },

      get dataPos() {
        return self.position.join(',');
      },

      get row() {
        return self.position[0];
      },

      get col() {
        return self.position[1];
      },

      get isCorrect() {
        return self.value === self.solution;
      },

      get isCageTop() {
        return self.row > 0 && self.cage.bounds.topSquares.includes(self);
      },

      get isCageLeft() {
        return self.col > 0 && self.cage.bounds.leftSquares.includes(self);
      },

      get isFocused() {
        return self.rootUi.curSquare === self;
      },

      get isSelected() {
        return !self.isFocused && self.rootUi.selectedSquares.includes(self);
      },

      get isStaging() {
        return self.isFocused && self.rootUi.isStaging;
      },

      get hasEliminations() {
        return self.eliminatedPossibilities.length > 0;
      },

      get hasValue() {
        return typeof self.value === 'number';
      },

      get label() {
        return self.cage.anchor === self ? self.cage.labelText : '';
      },

      get displayedValue() {
        return self.status === 'mistake' ? self.mistakeValue : self.value;
      },

      get displayedPossibilities() {
        return self.isStaging ? self.rootUi.stagedPossibilities : self.possibilities;
      },

      get className() {
        return Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_4__["generateClassName"])('square', [[self.status !== 'none', self.status], [self.isFocused, 'focused'], [self.isSelected, 'selected']]);
      },

      get shouldShowPossibilities() {
        return self.rootOptions.maxDisplayedPossibilities >= self.displayedPossibilities.length && self.value === null && self.mistakeValue === null;
      },

      get initialHtml() {
        var ele = self.env.templates.square.cloneNode(true);
        ele.dataset.pos = self.dataPos;
        return ele;
      },

      conflictingSquares: function conflictingSquares(val) {
        return val === null ? [] : self.rowColSquares.filter(function (square) {
          return square.value === val;
        });
      },
      possibilityStatuses: function possibilityStatuses(val) {
        if (self.hasValue) {
          return self.value === val ? ['chosen'] : ['unchosen'];
        } else {
          var statuses = [];

          if (self.isSquareEliminatedValue(val)) {
            statuses.push('square-eliminated');
          }

          if (self.isCollectionEliminatedValue(val)) {
            statuses.push('collection-eliminated');
          }

          if (self.isAutoEliminatedValue(val)) {
            statuses.push('auto-eliminated');
          }

          return statuses.length > 0 ? statuses : ['possible'];
        }
      },
      isPossibleValue: function isPossibleValue(val) {
        return val === null || val === self.value ? true : self.possibilities.includes(val);
      },
      isSquareEliminatedValue: function isSquareEliminatedValue(val) {
        return self.eliminatedPossibilities.includes(val);
      },
      isCollectionEliminatedValue: function isCollectionEliminatedValue(val) {
        return !self.collectionPossibilities.includes(val);
      },
      isAutoEliminatedValue: function isAutoEliminatedValue(val) {
        return self.rootOptions.autoEliminate && self.rowColValues.includes(val);
      },
      isActiveMistake: function isActiveMistake(val) {
        return self.status === 'mistake' && self.mistakeValue === val && !self.isAutoEliminatedValue(val);
      },
      isStagedPossibility: function isStagedPossibility(val) {
        return self.rootUi.stagedPossibilities.includes(val);
      },
      isVisiblePossibility: function isVisiblePossibility(val) {
        return self.shouldShowPossibilities && self.displayedPossibilities.includes(val);
      },
      possibilityClassName: function possibilityClassName(val) {
        return Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_4__["generateClassName"])('square_possibility', [[self.isVisiblePossibility(val), 'show']]);
      },
      infoPossibilityStagingClassName: function infoPossibilityStagingClassName(val) {
        return self.isStagedPossibility(val) ? 'possible' : 'staged-eliminated';
      },
      infoPossibilityClassName: function infoPossibilityClassName(val) {
        return Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_4__["generateClassName"])('square-info_possibility', self.isStaging ? [self.infoPossibilityStagingClassName(val)] : [[self.isActiveMistake(val), 'mistake']].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(self.possibilityStatuses(val))));
      },
      infoPossibilityIconClassNames: function infoPossibilityIconClassNames(val) {
        if (self.isStaging) {
          return self.isStagedPossibility(val) ? {
            hover: _shared_constants__WEBPACK_IMPORTED_MODULE_3__["ICONS"].ban,
            noHover: _shared_constants__WEBPACK_IMPORTED_MODULE_3__["ICONS"].circle
          } : {
            hover: _shared_constants__WEBPACK_IMPORTED_MODULE_3__["ICONS"].circle,
            noHover: _shared_constants__WEBPACK_IMPORTED_MODULE_3__["ICONS"].ban
          };
        } else {
          return self.isSquareEliminatedValue(val) && !self.hasValue ? {
            hover: _shared_constants__WEBPACK_IMPORTED_MODULE_3__["ICONS"].ban,
            noHover: _shared_constants__WEBPACK_IMPORTED_MODULE_3__["ICONS"].ban
          } : {
            hover: _shared_constants__WEBPACK_IMPORTED_MODULE_3__["ICONS"].ban,
            noHover: _shared_constants__WEBPACK_IMPORTED_MODULE_3__["ICONS"].circle
          };
        }
      },
      isBelow: function isBelow(otherSquare) {
        return otherSquare.row === self.row - 1 && otherSquare.col === self.col;
      },
      isRightOf: function isRightOf(otherSquare) {
        return otherSquare.row === self.row && otherSquare.col === self.col - 1;
      },
      isAbove: function isAbove(otherSquare) {
        return otherSquare.isBelow(self);
      },
      isLeftOf: function isLeftOf(otherSquare) {
        return otherSquare.isRightOf(self);
      },
      comesBefore: function comesBefore(otherSquare) {
        switch (Math.sign(otherSquare.row - self.row)) {
          case 1:
            return true;

          case 0:
            return otherSquare.col > self.col;

          case -1:
            return false;
        }
      },
      isLogicalSupersetOf: function isLogicalSupersetOf(otherSquare) {
        return otherSquare.possibilities.every(self.isPossibleValue);
      },
      isLogicalSubsetOf: function isLogicalSubsetOf(otherSquare) {
        return otherSquare.isLogicalSupersetOf(self);
      },
      isConsistentWith: function isConsistentWith(otherSquare) {
        var possibilityOverlap = Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_4__["arrayUnion"])(otherSquare.possibilities, self.possibilities);
        return possibilityOverlap.length > 0;
      }
    },
    actions: {
      setMistake: Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["flow"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.mark(function _callee(val) {
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                self.mistakeValue = val;
                self.status = 'mistake';
                _context.next = 4;
                return Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_4__["wait"])(self.env.globals.mistakeTimeoutMs);

              case 4:
                self.status = 'none';
                self.mistakeValue = null;

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      })),
      setConflict: Object(mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["flow"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.mark(function _callee2() {
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                self.status = 'conflict';
                _context2.next = 3;
                return Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_4__["wait"])(self.env.globals.mistakeTimeoutMs);

              case 3:
                self.status = 'none';

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      })),
      togglePossibility: function togglePossibility(val) {
        Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_4__["togglePresenceInArray"])(self.eliminatedPossibilities, val);
      },
      eliminatePossibility: function eliminatePossibility(val) {
        Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_4__["pushIfNotIncluded"])(self.eliminatedPossibilities, val);
      },
      uneliminatePossibility: function uneliminatePossibility(val) {
        Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_4__["removeIfIncluded"])(self.eliminatedPossibilities, val);
      },
      setStagedPossibilities: function setStagedPossibilities() {
        self.eliminatedPossibilities = initialPossibilities.filter(function (num) {
          return !self.rootUi.stagedPossibilities.includes(num);
        });
      },
      reset: function reset() {
        self.status = 'none';
        self.value = null;
        self.mistakeValue = null;
        self.eliminatedPossibilities = [];
      }
    }
  };
});
/* harmony default export */ __webpack_exports__["default"] = (Square);

/***/ }),

/***/ "./src/scripts/store/ui.js":
/*!*********************************!*\
  !*** ./src/scripts/store/ui.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js");
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! mobx-state-tree */ "./node_modules/mobx-state-tree/dist/mobx-state-tree.module.js");
/* harmony import */ var _shared_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/constants */ "./src/scripts/shared/constants.js");
/* harmony import */ var _shared_dom_partials__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/dom_partials */ "./src/scripts/shared/dom_partials.js");
/* harmony import */ var _shared_general_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shared/general_util */ "./src/scripts/shared/general_util.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./base */ "./src/scripts/store/base.js");
/* harmony import */ var _collections__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./collections */ "./src/scripts/store/collections.js");
/* harmony import */ var _square__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./square */ "./src/scripts/store/square.js");









var UI = _base__WEBPACK_IMPORTED_MODULE_6__["GameBase"].named('UI').props({
  curSquare: mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].maybeNull(mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].reference(_square__WEBPACK_IMPORTED_MODULE_8__["default"])),
  curCollection: mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].maybeNull(mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].union(mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].reference(_collections__WEBPACK_IMPORTED_MODULE_7__["Group"]), mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].reference(_collections__WEBPACK_IMPORTED_MODULE_7__["Cage"]))),
  isStaging: mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].optional(mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].boolean, function () {
    return false;
  }),
  stagedPossibilities: mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].optional(mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].array(mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].integer), function () {
    return [];
  }),
  filterMode: mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].optional(mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].enumeration('FilterMode', ['and', 'not', 'or']), function () {
    return 'and';
  }),
  selectedSquares: mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].optional(mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].array(mobx_state_tree__WEBPACK_IMPORTED_MODULE_2__["types"].reference(_square__WEBPACK_IMPORTED_MODULE_8__["default"])), function () {
    return [];
  })
}).views(function (self) {
  return {
    get curPosition() {
      var _self$curSquare;

      return (_self$curSquare = self.curSquare) === null || _self$curSquare === void 0 ? void 0 : _self$curSquare.position;
    },

    get curCage() {
      var _self$curSquare2;

      return (_self$curSquare2 = self.curSquare) === null || _self$curSquare2 === void 0 ? void 0 : _self$curSquare2.cage;
    },

    get curCageFilteredCombos() {
      var _self$curCage;

      return ((_self$curCage = self.curCage) === null || _self$curCage === void 0 ? void 0 : _self$curCage.filteredCombos) || [];
    },

    get curCagePossibleCombos() {
      var _self$curCage2;

      return ((_self$curCage2 = self.curCage) === null || _self$curCage2 === void 0 ? void 0 : _self$curCage2.possibleCombos) || [];
    },

    get hasStagedPossibilities() {
      return self.stagedPossibilities.length > 0;
    },

    get squareInfoSelectClassName() {
      return Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_5__["generateClassName"])('square-info_btn', [[!self.curSquare || self.curSquare.hasValue, 'disabled']]);
    },

    get squareInfoClearClassName() {
      return Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_5__["generateClassName"])('square-info_btn', [[!self.curSquare, 'disabled']]);
    },

    get squareInfoSelectIconClassName() {
      return self.isStaging ? _shared_constants__WEBPACK_IMPORTED_MODULE_3__["ICONS"].confirm : _shared_constants__WEBPACK_IMPORTED_MODULE_3__["ICONS"].select;
    },

    get squareInfoClearIconClassName() {
      return self.isStaging ? _shared_constants__WEBPACK_IMPORTED_MODULE_3__["ICONS"].reset : _shared_constants__WEBPACK_IMPORTED_MODULE_3__["ICONS"].clear;
    },

    get lastSelectedSquare() {
      return self.selectedSquares[self.selectedSquares.length - 1];
    },

    get hasSelection() {
      return self.selectedSquares.length > 1;
    },

    get shouldShowCollection() {
      return self.curCage && !self.hasSelection;
    },

    get collectionClassName() {
      return Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_5__["generateClassName"])('collection-info', [[self.shouldShowCollection, self.filterMode, 'none']]);
    },

    isValidPos: function isValidPos(pos) {
      return pos.every(function (coord) {
        return coord >= 0 && coord < self.env.globals.size;
      });
    },
    isSelectionEliminatedValue: function isSelectionEliminatedValue(val) {
      return self.selectedSquares.every(function (square) {
        return square.isSquareEliminatedValue(val);
      });
    },
    selectionPossibilityStatuses: function selectionPossibilityStatuses(val) {
      var squareStatuses = self.selectedSquares.map(function (square) {
        return square.possibilityStatuses(val);
      });
      var sharedStatuses = ['square-eliminated', 'collection-eliminated', 'auto-eliminated'].filter(function (status) {
        return squareStatuses.every(function (s) {
          return s.includes(status);
        });
      });
      return sharedStatuses.length > 0 ? sharedStatuses : ['possible'];
    },
    filterNoHoverIcons: function filterNoHoverIcons(val) {
      return self.shouldShowCollection ? self.curCage.filter.noHoverIcons(val) : Object(_shared_dom_partials__WEBPACK_IMPORTED_MODULE_4__["baseIcons"])();
    },
    filterHoverIcons: function filterHoverIcons(val) {
      return self.shouldShowCollection ? self.curCage.filter.hoverIcons(val, self.filterMode) : Object(_shared_dom_partials__WEBPACK_IMPORTED_MODULE_4__["baseIcons"])();
    },
    filterPossibilityClassName: function filterPossibilityClassName(val) {
      return self.shouldShowCollection ? self.curCage.filter.className(val, self.filterMode) : Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_5__["generateClassName"])('filter-possibility', ['none', 'disabled']);
    },
    squareInfoPossibilityClassName: function squareInfoPossibilityClassName(val) {
      if (self.hasSelection) {
        return Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_5__["generateClassName"])('square-info_possibility', self.selectionPossibilityStatuses(val));
      } else {
        return self.curSquare ? self.curSquare.infoPossibilityClassName(val) : Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_5__["generateClassName"])('square-info_possibility', ['disabled']);
      }
    },
    squareInfoPossibilityIconClassNames: function squareInfoPossibilityIconClassNames(val) {
      if (self.hasSelection) {
        return self.isSelectionEliminatedValue(val) ? {
          hover: _shared_constants__WEBPACK_IMPORTED_MODULE_3__["ICONS"].ban,
          noHover: _shared_constants__WEBPACK_IMPORTED_MODULE_3__["ICONS"].ban
        } : {
          hover: _shared_constants__WEBPACK_IMPORTED_MODULE_3__["ICONS"].ban,
          noHover: _shared_constants__WEBPACK_IMPORTED_MODULE_3__["ICONS"].circle
        };
      } else {
        return self.curSquare ? self.curSquare.infoPossibilityIconClassNames(val) : {
          hover: _shared_constants__WEBPACK_IMPORTED_MODULE_3__["ICONS"].circle,
          noHover: _shared_constants__WEBPACK_IMPORTED_MODULE_3__["ICONS"].circle
        };
      }
    }
  };
}).actions(function (self) {
  return {
    reset: function reset() {
      self.curSquare = null;
      self.curCollection = null;
      self.isStaging = false;
      self.stagedPossibilities = [];
      self.filterMode = 'and';
      self.selectedSquares = [];
    },
    selectSquareByDir: function selectSquareByDir(dir) {
      var _self$curPosition = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1___default()(self.curPosition, 2),
          curRow = _self$curPosition[0],
          curCol = _self$curPosition[1];

      var newPos = Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_5__["stringSwitch"])(dir, function (_ref) {
        var _case = _ref._case;

        _case('Up', function () {
          return [curRow - 1, curCol];
        });

        _case('Right', function () {
          return [curRow, curCol + 1];
        });

        _case('Down', function () {
          return [curRow + 1, curCol];
        });

        _case('Left', function () {
          return [curRow, curCol - 1];
        });
      });
      if (self.isValidPos(newPos)) self.selectSquareByPos(newPos);
    },
    selectSquareByPos: function selectSquareByPos(pos) {
      self.selectSquare(self.rootPuzzle.getSquareByPos(pos));
    },
    selectSquareById: function selectSquareById(id) {
      self.selectSquare(self.rootPuzzle.squares.get(id));
    },
    selectSquare: function selectSquare(square) {
      self.curSquare = square;
      self.selectedSquares = [square];
      self.isStaging = false;
    },
    selectThroughSquare: function selectThroughSquare(squareId) {
      if (self.selectedSquares.length > 0) {
        var _self$selectedSquares;

        var nextSquarePos = self.rootPuzzle.squares.get(squareId).position;
        var prevSquarePos = self.lastSelectedSquare.position;

        (_self$selectedSquares = self.selectedSquares).push.apply(_self$selectedSquares, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_5__["getInterveningPositions"])(prevSquarePos, nextSquarePos).map(function (pos) {
          return self.rootPuzzle.getSquareByPos(pos);
        }).filter(function (square) {
          return !self.selectedSquares.includes(square);
        })));
      }
    },
    toggleSelectedSquare: function toggleSelectedSquare(squareId) {
      Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_5__["togglePresenceInArray"])(self.selectedSquares, squareId, function () {
        return self.selectedSquares.findIndex(function (s) {
          return s.id === squareId;
        });
      });
      if (self.curSquare.id === squareId) self.curSquare = null;
    },
    clearStagedPossibilities: function clearStagedPossibilities() {
      self.stagedPossibilities = [];
    },
    toggleStagedPossibility: function toggleStagedPossibility(val) {
      var valIndex = self.stagedPossibilities.indexOf(val);

      if (valIndex >= 0) {
        self.stagedPossibilities.splice(valIndex, 1);
      } else {
        self.stagedPossibilities.push(val);
      }
    },
    toggleSelectionPossibility: function toggleSelectionPossibility(val) {
      if (self.isSelectionEliminatedValue(val)) {
        self.selectedSquares.forEach(function (square) {
          return square.uneliminatePossibility(val);
        });
      } else {
        self.selectedSquares.forEach(function (square) {
          return square.eliminatePossibility(val);
        });
      }
    },
    clearSelectedSquares: function clearSelectedSquares() {
      self.selectedSquares = [];
    },
    toggleFilterPossibility: function toggleFilterPossibility(val) {
      self.curCage.filter.toggle(val, self.filterMode);
    },
    clearFilterMode: function clearFilterMode() {
      if (self.curCage) {
        self.curCage.filter.clearMode(self.filterMode);
      }
    },
    clearFilter: function clearFilter() {
      if (self.curCage) {
        self.curCage.filter.initialize(self.env.globals.size);
      }
    },
    setFilterMode: function setFilterMode(mode) {
      self.filterMode = mode;
    },
    changeFilterModeByDir: function changeFilterModeByDir(dir) {
      var modes = ['and', 'not', 'or'];
      var idxDiff = dir === 'Left' ? -1 : 1;
      var newIdx = (modes.indexOf(self.filterMode) + idxDiff + 3) % 3;
      self.filterMode = modes[newIdx];
    }
  };
});
/* harmony default export */ __webpack_exports__["default"] = (UI);

/***/ }),

/***/ "./src/scripts/views/header_view.js":
/*!******************************************!*\
  !*** ./src/scripts/views/header_view.js ***!
  \******************************************/
/*! exports provided: setupHeader, getHeaderElements */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setupHeader", function() { return setupHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getHeaderElements", function() { return getHeaderElements; });
/* harmony import */ var _setup_setup_puzzle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../setup/setup_puzzle */ "./src/scripts/setup/setup_puzzle.js");
/* harmony import */ var _shared_dom_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/dom_util */ "./src/scripts/shared/dom_util.js");


function setupHeader(_ref) {
  var gameStore = _ref.gameStore,
      env = _ref.env,
      elements = _ref.elements,
      _ref$elements$headerE = _ref.elements.headerEles,
      aboutButton = _ref$elements$headerE.aboutButton,
      aboutDropdown = _ref$elements$headerE.aboutDropdown,
      instructionsButton = _ref$elements$headerE.instructionsButton,
      instructionsDropdown = _ref$elements$headerE.instructionsDropdown,
      optionsButton = _ref$elements$headerE.optionsButton,
      optionsDropdown = _ref$elements$headerE.optionsDropdown,
      undoButton = _ref$elements$headerE.undoButton,
      redoButton = _ref$elements$headerE.redoButton,
      newButton = _ref$elements$headerE.newButton,
      resetButton = _ref$elements$headerE.resetButton;
  Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_1__["mountDropdown"])(aboutButton, aboutDropdown, 'show');
  Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_1__["mountDropdown"])(instructionsButton, instructionsDropdown, 'show');
  Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_1__["mountDropdown"])(optionsButton, optionsDropdown, 'show');
  Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_1__["addNoFocusClickListener"])(undoButton, gameStore.undo);
  Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_1__["addNoFocusClickListener"])(redoButton, gameStore.redo);
  Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_1__["addNoFocusClickListener"])(newButton, function () {
    return Object(_setup_setup_puzzle__WEBPACK_IMPORTED_MODULE_0__["newPuzzle"])({
      gameStore: gameStore,
      env: env,
      elements: elements
    });
  });
  Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_1__["addNoFocusClickListener"])(resetButton, function () {
    return Object(_setup_setup_puzzle__WEBPACK_IMPORTED_MODULE_0__["resetPuzzle"])({
      gameStore: gameStore,
      env: env,
      elements: elements
    });
  });
}
function getHeaderElements() {
  return {
    aboutButton: document.querySelector('#header-about'),
    aboutDropdown: document.querySelector('#header-about .header_dropdown'),
    instructionsButton: document.querySelector('#header-instructions'),
    instructionsDropdown: document.querySelector('#header-instructions .header_dropdown'),
    optionsButton: document.querySelector('#header-options'),
    optionsDropdown: document.querySelector('#header-options .header_dropdown'),
    undoButton: document.querySelector('#header-undo'),
    redoButton: document.querySelector('#header-redo'),
    newButton: document.querySelector('#header-new'),
    resetButton: document.querySelector('#header-reset')
  };
}

/***/ }),

/***/ "./src/scripts/views/info_collection_view.js":
/*!***************************************************!*\
  !*** ./src/scripts/views/info_collection_view.js ***!
  \***************************************************/
/*! exports provided: setupCollectionInfo, getCollectionInfoElements */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setupCollectionInfo", function() { return setupCollectionInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCollectionInfoElements", function() { return getCollectionInfoElements; });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mobx */ "./node_modules/mobx/dist/mobx.esm.js");
/* harmony import */ var _shared_dom_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/dom_util */ "./src/scripts/shared/dom_util.js");



function setupCollectionInfo(game) {
  setupListeners(game);
  makeReactive(game);
}

function setupListeners(_ref) {
  var gameStore = _ref.gameStore,
      _ref$elements$collect = _ref.elements.collectionInfoEles,
      comboListEle = _ref$elements$collect.comboListEle,
      possibilityEles = _ref$elements$collect.possibilityEles,
      andModeButton = _ref$elements$collect.andModeButton,
      notModeButton = _ref$elements$collect.notModeButton,
      orModeButton = _ref$elements$collect.orModeButton,
      clearModeButton = _ref$elements$collect.clearModeButton,
      clearAllButton = _ref$elements$collect.clearAllButton;
  comboListEle.addEventListener('click', function (e) {
    if (!gameStore.ui.curCage) return;
    var comboEle = e.target.closest('.combo');

    if (comboEle) {
      var combo = comboEle.dataset.combo.split(',').map(function (valStr) {
        return parseInt(valStr);
      });
      gameStore.toggleCurCageCombo(combo);
    }
  });
  Array.from(possibilityEles).map(function (possibilityEle) {
    var val = parseInt(possibilityEle.dataset.val);

    function restoreHover() {
      possibilityEle.classList.remove('prevent-hover');
      possibilityEle.removeEventListener('mouseleave', restoreHover);
    }

    possibilityEle.addEventListener('click', function () {
      if (!gameStore.ui.curCage) return;
      gameStore.toggleFilterPossibility(val);
      possibilityEle.classList.add('prevent-hover');
      possibilityEle.addEventListener('mouseleave', restoreHover);
    });
  });

  var addFilterBtnListener = function addFilterBtnListener(btn, mode) {
    btn.addEventListener('click', function () {
      if (gameStore.ui.shouldShowCollection) {
        gameStore.ui.setFilterMode(mode);
      }
    });
  };

  addFilterBtnListener(andModeButton, 'and');
  addFilterBtnListener(notModeButton, 'not');
  addFilterBtnListener(orModeButton, 'or');
  clearModeButton.addEventListener('click', function () {
    if (gameStore.ui.shouldShowCollection) gameStore.clearFilterMode();
  });
  clearAllButton.addEventListener('click', function () {
    if (gameStore.ui.shouldShowCollection) gameStore.clearFilter();
  });
}

function makeReactive(_ref2) {
  var gameStore = _ref2.gameStore,
      _ref2$elements = _ref2.elements,
      collectionInfoEle = _ref2$elements.collectionInfoEle,
      _ref2$elements$collec = _ref2$elements.collectionInfoEles,
      comboListEle = _ref2$elements$collec.comboListEle,
      possibilityEles = _ref2$elements$collec.possibilityEles;
  var possibilityReactions = Array.from(possibilityEles).map(function (possibilityEle) {
    var val = parseInt(possibilityEle.dataset.val);
    var noHoverIconsDiv = possibilityEle.querySelector('.possibility-icons--no-hover');
    var hoverIconsDiv = possibilityEle.querySelector('.possibility-icons--hover');

    var updateIcons = function updateIcons(iconsDiv, newIcons) {
      if (!Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_2__["haveEquivalentChildren"])(iconsDiv, newIcons, {
        attributes: ['class']
      })) {
        iconsDiv.replaceChildren.apply(iconsDiv, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(newIcons));
      }
    };

    return function () {
      possibilityEle.className = gameStore.ui.filterPossibilityClassName(val);
      updateIcons(noHoverIconsDiv, gameStore.ui.filterNoHoverIcons(val));
      updateIcons(hoverIconsDiv, gameStore.ui.filterHoverIcons(val));
    };
  });
  var reactions = [function renderCombos() {
    if (gameStore.ui.shouldShowCollection) {
      Object(_shared_dom_util__WEBPACK_IMPORTED_MODULE_2__["updateChildrenToMatch"])(comboListEle, gameStore.ui.curCage.comboEles, gameStore.ui.curCage.compareComboEles);
    }
  }, function renderFilterModeClassName() {
    collectionInfoEle.className = gameStore.ui.collectionClassName;
  }].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(possibilityReactions));
  var disposers = reactions.map(function (fn) {
    return Object(mobx__WEBPACK_IMPORTED_MODULE_1__["autorun"])(fn);
  });
  return disposers;
}

function getCollectionInfoElements() {
  return {
    comboListEle: document.querySelector('.combos_list'),
    filterEle: document.querySelector('.collection-filter'),
    possibilityEles: document.querySelectorAll('.filter-possibility'),
    andModeButton: document.querySelector('#filter-and'),
    notModeButton: document.querySelector('#filter-not'),
    orModeButton: document.querySelector('#filter-or'),
    clearModeButton: document.querySelector('#filter-clear-mode'),
    clearAllButton: document.querySelector('#filter-clear-all')
  };
}

/***/ }),

/***/ "./src/scripts/views/info_square_view.js":
/*!***********************************************!*\
  !*** ./src/scripts/views/info_square_view.js ***!
  \***********************************************/
/*! exports provided: setupSquareInfo, getSquareInfoElements */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setupSquareInfo", function() { return setupSquareInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSquareInfoElements", function() { return getSquareInfoElements; });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mobx */ "./node_modules/mobx/dist/mobx.esm.js");


function setupSquareInfo(game) {
  setupListeners(game);
  makeReactive(game);
}

function setupListeners(_ref) {
  var gameStore = _ref.gameStore,
      _ref$elements$squareI = _ref.elements.squareInfoEles,
      possibilityEles = _ref$elements$squareI.possibilityEles,
      select = _ref$elements$squareI.select,
      clear = _ref$elements$squareI.clear;
  possibilityEles.forEach(function (possibilityEle) {
    var val = parseInt(possibilityEle.dataset.val);

    function restoreHover() {
      possibilityEle.classList.remove('prevent-hover');
      possibilityEle.removeEventListener('mouseleave', restoreHover);
    }

    possibilityEle.addEventListener('click', function () {
      if (!gameStore.ui.curSquare || gameStore.ui.hasFocusedSquareValue) {
        return;
      }

      if (gameStore.ui.isStaging) {
        gameStore.toggleStagedPossibility(val);
      } else if (gameStore.ui.hasSelection) {
        gameStore.toggleSelectionPossibility(val);
      } else {
        gameStore.toggleFocusedSquarePossibility(val);
      }

      possibilityEle.classList.add('prevent-hover');
      possibilityEle.addEventListener('mouseleave', restoreHover);
    });
  });
  select.addEventListener('click', function () {
    if (!gameStore.ui.curSquare || gameStore.ui.curSquare.hasValue) {
      return;
    } else if (gameStore.ui.isStaging) {
      gameStore.stopStaging();
    } else {
      gameStore.beginStaging();
    }
  });
  clear.addEventListener('click', function () {
    if (!gameStore.ui.curSquare) {
      return;
    } else if (gameStore.ui.isStaging) {
      gameStore.clearStagedPossibilities();
    } else {
      gameStore.resetFocusedSquarePossibilities();
    }
  });
}

function makeReactive(_ref2) {
  var gameStore = _ref2.gameStore,
      _ref2$elements$square = _ref2.elements.squareInfoEles,
      squareLabelText = _ref2$elements$square.squareLabelText,
      possibilityEles = _ref2$elements$square.possibilityEles,
      selectIcon = _ref2$elements$square.selectIcon,
      clearIcon = _ref2$elements$square.clearIcon,
      select = _ref2$elements$square.select,
      clear = _ref2$elements$square.clear;
  var possibilityReactions = Array.from(possibilityEles).map(function (possibilityEle) {
    var val = parseInt(possibilityEle.dataset.val);
    return function () {
      possibilityEle.className = gameStore.ui.squareInfoPossibilityClassName(val);
      var iconClassNames = gameStore.ui.squareInfoPossibilityIconClassNames(val);

      var _getPossibilityIcons = getPossibilityIcons(possibilityEle),
          noHover = _getPossibilityIcons.noHover,
          hover = _getPossibilityIcons.hover;

      noHover.className = iconClassNames.noHover;
      hover.className = iconClassNames.hover;
    };
  });
  var reactions = [function renderIconClassNames() {
    selectIcon.className = gameStore.ui.squareInfoSelectIconClassName;
    clearIcon.className = gameStore.ui.squareInfoClearIconClassName;
  }, function renderButtonsClassName() {
    select.className = gameStore.ui.squareInfoSelectClassName;
    clear.className = gameStore.ui.squareInfoClearClassName;
  }, function renderDisabledSelect() {
    if (gameStore.ui.squareInfoSelectIsDisabled) {
      select.disabled = true;
    } else {
      select.disabled = false;
    }
  }, function renderDisabledClear() {
    if (gameStore.ui.squareInfoClearIsDisabled) {
      clear.disabled = true;
    } else {
      clear.disabled = false;
    }
  }, function renderLabelText() {
    if (gameStore.ui.hasSelection) {
      squareLabelText.innerHTML = 'Selection';
    } else {
      squareLabelText.innerHTML = 'Square';
    }
  }].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(possibilityReactions));
  var disposers = reactions.map(function (fn) {
    return Object(mobx__WEBPACK_IMPORTED_MODULE_1__["autorun"])(fn);
  });
  return disposers;
}

function getSquareInfoElements() {
  return {
    squareLabelText: document.querySelector('#square-label text'),
    possibilityEles: document.querySelectorAll('.square-info_possibility'),
    select: document.querySelector('#square-info_select-only'),
    selectIcon: document.querySelector('#square-info_select-only i'),
    clear: document.querySelector('#square-info_clear'),
    clearIcon: document.querySelector('#square-info_clear i')
  };
}

function getPossibilityIcons(possibilityEle) {
  return {
    noHover: possibilityEle.querySelector('.no-hover i'),
    hover: possibilityEle.querySelector('.hover i')
  };
}

/***/ }),

/***/ "./src/scripts/views/options_view.js":
/*!*******************************************!*\
  !*** ./src/scripts/views/options_view.js ***!
  \*******************************************/
/*! exports provided: setupOptions, getOptionsElements */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setupOptions", function() { return setupOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOptionsElements", function() { return getOptionsElements; });
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx */ "./node_modules/mobx/dist/mobx.esm.js");
/* harmony import */ var _dev__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dev */ "./src/scripts/dev.js");
/* harmony import */ var _setup_walkthrough__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../setup/walkthrough */ "./src/scripts/setup/walkthrough.js");
/* harmony import */ var _shared_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/constants */ "./src/scripts/shared/constants.js");
/* harmony import */ var _shared_general_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/general_util */ "./src/scripts/shared/general_util.js");





function setupOptions(game) {
  setupListeners(game);
  makeOptionsReactive(game);
}

function setupListeners(_ref) {
  var options = _ref.gameStore.options,
      _ref$elements$options = _ref.elements.optionsEles,
      autoBlock = _ref$elements$options.autoBlock,
      autoElim = _ref$elements$options.autoElim,
      autoElimMathImpossibilities = _ref$elements$options.autoElimMathImpossibilities,
      walkthrough = _ref$elements$options.walkthrough,
      maxPossibilitiesInput = _ref$elements$options.maxPossibilitiesInput;
  autoBlock.addEventListener('click', options.toggleAutoBlock);
  autoElim.addEventListener('click', options.toggleAutoEliminate);
  walkthrough.addEventListener('click', options.toggleWalkthrough);
  autoElimMathImpossibilities.addEventListener('click', options.toggleAutoElimMathImpossibilities);
  maxPossibilitiesInput.addEventListener('keydown', function (e) {
    e.preventDefault();
    var num = Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_4__["stringSwitch"])(e.code, function (_ref2) {
      var _case = _ref2._case;

      _case(_shared_constants__WEBPACK_IMPORTED_MODULE_3__["NUM_REGEX"], function () {
        return Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_4__["getNumFromCode"])(e.code);
      });

      _case(_shared_constants__WEBPACK_IMPORTED_MODULE_3__["ARROW_REGEX"], function () {
        var dir = Object(_shared_general_util__WEBPACK_IMPORTED_MODULE_4__["getDirFromCode"])(e.code);
        var num = options.maxDisplayedPossibilities;
        return dir === 'Up' || dir === 'Right' ? num + 1 : num - 1;
      });
    });

    if (num) {
      var success = options.setMaxDisplayedPossibilities(num);
      if (!success) Object(_dev__WEBPACK_IMPORTED_MODULE_1__["devLog"])('Bad Input!');
    }
  });
}

function makeOptionsReactive(_ref3) {
  var options = _ref3.gameStore.options,
      _ref3$elements$option = _ref3.elements.optionsEles,
      autoBlock = _ref3$elements$option.autoBlock,
      autoElim = _ref3$elements$option.autoElim,
      autoElimMathImpossibilities = _ref3$elements$option.autoElimMathImpossibilities,
      maxPossibilitiesInput = _ref3$elements$option.maxPossibilitiesInput,
      walkthrough = _ref3$elements$option.walkthrough;
  var reactions = [function renderAutoBlock() {
    autoBlock.className = options.autoBlockClassName;
  }, function renderAutoElim() {
    autoElim.className = options.autoElimClassName;
  }, function renderAutoElimMathImpossibilities() {
    autoElimMathImpossibilities.className = options.autoElimMathImpossibilitiesClassName;
  }, function renderWalkthrough() {
    walkthrough.className = options.walkthroughClassName;
  }, function renderMaxPossibilitiesInput() {
    maxPossibilitiesInput.value = options.maxDisplayedPossibilities;
  }];
  var disposers = reactions.map(function (fn) {
    return Object(mobx__WEBPACK_IMPORTED_MODULE_0__["autorun"])(fn);
  });
  return disposers;
}

function getOptionsElements() {
  return {
    autoBlock: document.querySelector('#option-auto-block'),
    autoElim: document.querySelector('#option-auto-elim'),
    walkthrough: document.querySelector('#option-walkthrough'),
    autoElimMathImpossibilities: document.querySelector('#option-auto-elim-math-impossibilities'),
    maxPossibilitiesInput: document.querySelector('#option-max-possibilities .option_num-input'),
    maxPossibilitiesError: document.querySelector('#option-max-possibilities .option_error')
  };
}

/***/ }),

/***/ "./src/scripts/views/square_view.js":
/*!******************************************!*\
  !*** ./src/scripts/views/square_view.js ***!
  \******************************************/
/*! exports provided: setupSquares, getSquareElement, getSquareElementsFromId */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setupSquares", function() { return setupSquares; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSquareElement", function() { return getSquareElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSquareElementsFromId", function() { return getSquareElementsFromId; });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mobx */ "./node_modules/mobx/dist/mobx.esm.js");


function setupSquares(_ref) {
  var gameStore = _ref.gameStore,
      templates = _ref.env.templates,
      puzzleEle = _ref.elements.puzzleEle;
  var squareEles = new DocumentFragment();
  var disposers = gameStore.puzzle.squaresArray.map(function (square) {
    var squareEle = templates.square.cloneNode(true);
    var squareElements = getSquareElementsFromSquare(squareEle);
    setupSquare(square, squareElements);
    squareEles.appendChild(squareEle);
    return makeSquareReactive(square, squareElements);
  });
  puzzleEle.replaceChildren(squareEles);
  return function () {
    return disposers.forEach(function (disposer) {
      return disposer();
    });
  };
}

function setupSquare(square, _ref2) {
  var squareEle = _ref2.squareEle,
      label = _ref2.label,
      cageTop = _ref2.cageTop,
      cageLeft = _ref2.cageLeft;
  squareEle.dataset.pos = square.dataPos;
  squareEle.dataset.id = square.id;
  label.innerText = square.label;

  if (!square.isCageTop) {
    cageTop.remove();
  }

  if (!square.isCageLeft) {
    cageLeft.remove();
  }
}

function makeSquareReactive(square, _ref3) {
  var squareEle = _ref3.squareEle,
      value = _ref3.value,
      possibilityEles = _ref3.possibilityEles;
  var possibilityReactions = Array.from(possibilityEles).map(function (possibilityEle) {
    return function () {
      var val = parseInt(possibilityEle.dataset.val);
      possibilityEle.className = square.possibilityClassName(val);
    };
  });
  var reactions = [function renderValNode() {
    value.innerText = square.displayedValue;
  }, function renderClassName() {
    squareEle.className = square.className;
  }].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(possibilityReactions));
  var disposers = reactions.map(function (fn) {
    return Object(mobx__WEBPACK_IMPORTED_MODULE_1__["autorun"])(fn);
  });
  return function () {
    return disposers.forEach(function (disposer) {
      return disposer();
    });
  };
}

function getSquareElement(id) {
  return document.querySelector(squareSelector(id));
}
function getSquareElementsFromId(id) {
  var _createSquareChildSel = createSquareChildSelectors(id),
      getChild = _createSquareChildSel.getChild,
      getChildren = _createSquareChildSel.getChildren;

  return {
    squareEle: getSquareElement(id, parent),
    cageTop: getChild('.square_cage-top'),
    cageLeft: getChild('.square_cage-left'),
    label: getChild('.square_label'),
    value: getChild('.square_value'),
    possibilityEles: getChildren('.square_possibility')
  };
}

function createSquareChildSelectors(id) {
  var getSelector = function getSelector(subSelector) {
    return [squareSelector(id), subSelector].join(' ');
  };

  return {
    getChild: function getChild(subSelector) {
      return document.querySelector(getSelector(subSelector));
    },
    getChildren: function getChildren(subSelector) {
      return document.querySelectorAll(getSelector(subSelector));
    }
  };
}

function squareSelector(id) {
  return ".square[data-id=\"".concat(id, "\"]");
}

function getSquareElementsFromSquare(squareEle) {
  return {
    squareEle: squareEle,
    cageTop: squareEle.querySelector('.square_cage-top'),
    cageLeft: squareEle.querySelector('.square_cage-left'),
    label: squareEle.querySelector('.square_label'),
    value: squareEle.querySelector('.square_value'),
    possibilityEles: squareEle.querySelectorAll('.square_possibility')
  };
}

/***/ }),

/***/ "./src/styles/index.scss":
/*!*******************************!*\
  !*** ./src/styles/index.scss ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,